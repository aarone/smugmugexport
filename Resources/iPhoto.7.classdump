/*
 *     Generated by class-dump 3.1.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2006 by Steve Nygard.
 */

struct AnimationRects;

struct Array {
    unsigned int magic;
    unsigned int itemSize;
    unsigned int itemCount;
    int dataStored;
    int dataAllocated;
    int lockCount;
    struct MemHandleOpaque *itemsHandle;
    void *compareProc;
    unsigned char keepSorted;
    unsigned char isSorted;
};

struct AuthorizationOpaqueRef;

struct BGThread {
    struct _opaque_pthread_t *thread;
    struct _opaque_pthread_mutex_t processLock;
    struct _opaque_pthread_mutex_t waitLock;
    struct _opaque_pthread_cond_t condition;
    struct _opaque_pthread_mutex_t quitLock;
    struct IPPhotoInfo *info;
    int state;
    int priority;
};

struct BGThreadParams {
    struct BGThread *bgThread;
    struct _opaque_pthread_mutex_t *listLock;
    struct _opaque_pthread_mutex_t *finishedLock;
    struct BackgroundArray *highPriority;
    struct BackgroundArray *lowPriority;
    struct BackgroundArray *finishArray;
    struct _opaque_pthread_cond_t *communicationCondition;
    struct _opaque_pthread_mutex_t *communicationWaitLock;
};

struct BackgroundArray {
    struct _Vector_impl _field1;
};

struct BackgroundImage {
    struct IPPhotoInfo *_field1;
    struct IPFileImage *_field2;
    struct IPFileImage *_field3;
    char _field4;
    int _field5;
    struct CGSize _field6;
    struct CGSize _field7;
    int _field8;
    char _field9;
};

struct BackgroundRenderArray {
    struct _Vector_impl _field1;
};

struct BlemishPoint;

struct BlemishPointArray {
    struct _Vector_impl _field1;
};

struct CFHostClientContext {
    int version;
    void *info;
    void *retain;
    void *release;
    void *copyDescription;
};

struct CGAffineTransform {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
};

struct CGColor;

struct CGColorSpace;

struct CGContext;

struct CGDataConsumer;

struct CGDataProvider;

struct CGFunction;

struct CGImage;

struct CGImageDestination;

struct CGImageSource;

struct CGLayer;

struct CGPDFDocument;

struct CGPath;

struct CGPattern;

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGShading;

struct CGSize {
    float width;
    float height;
};

struct CReefAutoFixParms {
    struct Rect _field1;
    struct Point _field2;
    float _field3;
    int _field4;
    int _field5;
    int _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CReefImage {
    void *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
};

struct CodeTimer {
    _Bool _field1;
    unsigned long long _field2;
    NSString *_field3;
    NSString *_field4;
};

struct ComponentInstanceRecord {
    long _field1[1];
};

struct CreateNewObjectData {
    unsigned int _field1;
    unsigned char _field2;
};

struct DayRange {
    int _field1;
    unsigned int _field2;
    long _field3;
    long _field4;
    long _field5;
    long _field6;
    float _field7;
    float _field8;
    char _field9;
    char _field10;
};

struct EditEnhanceData {
    float blackPoint[3];
    float whitePoint[3];
    float midPoint[3];
    float midPoint2[3];
};

struct EditListData {
    unsigned short version;
    unsigned short versionCI;
    struct _NSRect cropRect;
    int constrainTag;
    int constrainRatio;
    unsigned short constrainOrientation;
    float rotation;
    float contrast;
    float saturation;
    float temperature;
    float tint;
    float sharpness;
    float straightenAngle;
    float blackPoint;
    float whitePoint;
    float gamma;
    float blackPointRGB[3];
    float whitePointRGB[3];
    float gammaRGB[3];
    float exposure;
    float noise;
    float shadows;
    float highlights;
    unsigned short blackwhite;
    unsigned short sepia;
    unsigned short antiqueLevel;
    unsigned short fadeLevel;
    unsigned short boostLevel;
    unsigned short whiteVignetteLevel;
    unsigned short blackVignetteLevel;
    unsigned short blurLevel;
    struct EditEnhanceData enhanceData;
};

struct EffectsStruct {
    EditFilter *filter;
    NSAttributedString *title;
    struct _NSRect frame;
    SEL selector;
    int maxSetting;
    int trackingRect;
};

struct ElementPageThumbArray {
    struct _Vector_impl _field1;
};

struct EllipsizingDataStruct {
    id _field1;
    float _field2;
    struct _NSSize *_field3;
};

struct ExternallyEditedPhoto;

struct FSRef {
    unsigned char hidden[80];
};

struct FSSpec {
    short vRefNum;
    long parID;
    unsigned char name[64];
};

struct FilterEvent;

struct FilterEventArray {
    struct _Vector_impl _field1;
};

struct FixedPoint {
    int _field1;
    int _field2;
};

struct HistogramRecord {
    unsigned long *histogram[4];
    unsigned long sampleCount;
};

struct ICAPropertyInfo {
    unsigned int propertyType;
    unsigned int dataType;
    unsigned int dataSize;
    unsigned int dataFlags;
};

struct ICAThumbnail {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned char _field4[1];
};

struct IPAlbumList {
    struct vector<Album*, std::allocator<Album*>> _field1;
    struct _opaque_pthread_mutex_t _field2;
};

struct IPAlbumState;

struct IPAnimatingEditStruct {
    Edit *edit;
    NSScrollView *scrollView;
    struct _NSRect targetRect;
    struct _NSRect startRect;
    int flags;
    double animationStartTime;
};

struct IPCachedObject;

struct IPFileImage {
    void **_field1;
    struct CGImage *_field2;
    char **_field3;
    struct CGSize _field4;
    float _field5;
    float _field6;
    float _field7;
    CDAnonymousStruct3 _field8;
    id _field9;
    id _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    double _field15;
    double _field16;
    float _field17;
    int _field18;
    int _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    id _field24;
    struct IPFileInfo _field25;
    unsigned long long _field26;
    struct CGSize _field27;
};

struct IPFileInfo {
    id mRoot;
    id mRelativePath;
    id mAliasPath;
    unsigned char mPathIsAbsolute;
    unsigned char mHaveTriedToResolve;
    unsigned int mFormat;
};

struct IPImage {
    void **_field1;
    struct CGImage *_field2;
    char **_field3;
    struct CGSize _field4;
    float _field5;
    float _field6;
    float _field7;
    struct {
        struct CGImage *_field1;
        void *_field2;
        long _field3;
        struct _NSSize _field4;
        float _field5;
        unsigned int _field6;
    } _field8;
    id _field9;
    id _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    double _field15;
    double _field16;
    float _field17;
    int _field18;
    int _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    id _field24;
};

struct IPObjectCache {
    void **_field1;
    int _field2;
    int _field3;
    void *_field4;
    void *_field5;
    struct IPCachedObject *_field6;
    struct IPCachedObject *_field7;
    struct map<long unsigned int, IPCachedObject*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> _field8;
    struct _opaque_pthread_mutex_t _field9;
};

struct IPPageElementCorners {
    struct CGPoint _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    char _field13;
};

struct IPPageElementEdges {
    float left;
    float right;
    float top;
    float bottom;
};

struct IPPhotoInfo {
    void **_field1;
    id _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    struct IPRoll *_field7;
    struct IPStack *_field8;
    double _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    id _field15;
    id _field16;
    id _field17;
    short _field18;
    unsigned char _field19;
    int _field20;
    int _field21;
    int _field22;
    int _field23;
    double _field24;
    double _field25;
    double _field26;
    id _field27;
    double _field28;
    id _field29;
    id _field30;
    id _field31;
    float _field32;
    id _field33;
    unsigned long _field34;
    unsigned long _field35;
    id _field36;
    short _field37;
    short _field38;
    double _field39;
    double _field40;
    double _field41;
    double _field42;
    double _field43;
    id _field44;
    id _field45;
    id _field46;
    struct IPImage *_field47[6];
    unsigned long long _field48;
    char _field49;
    char _field50;
    unsigned long _field51;
    struct EditListData _field52;
    id _field53;
    id _field54;
    int _field55;
    id _field56;
    id _field57;
    unsigned long _field58;
    unsigned char _field59;
    unsigned int _field60;
    struct CGSize _field61;
    struct MessageReceiver _field62;
};

struct IPPhotoList {
    void **_field1;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field2;
    struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field3;
};

struct IPRoll {
    void **_field1;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field2;
    struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field3;
    void **_field4;
    id _field5;
    id _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned long long _field9;
    id _field10;
    id _field11;
    double _field12;
    id _field13;
    id _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    char _field18;
    unsigned long _field19;
    char _field20;
    double _field21;
    double _field22;
    char _field23;
};

struct IPSelectable {
    void **_field1;
    id _field2;
};

struct IPSelectionList {
    void **_field1;
    struct vector<IPSelectable*, std::allocator<IPSelectable*>> _field2;
    struct set<IPSelectable*, std::less<IPSelectable*>, std::allocator<IPSelectable*>> *_field3;
};

struct IPSharedServiceInfo {
    struct SharingContext *sharingContext;
    unsigned char active;
    unsigned int nameIteration;
    int sharingError;
    struct _dns_service_discovery_t *serviceRef;
    struct __CFRunLoopSource *serviceSource;
};

struct IPStack {
    void **_field1;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field2;
    struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field3;
    void **_field4;
    id _field5;
    id _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned long long _field9;
};

struct ImportWorkSessionData {
    unsigned int _field1;
    struct Lock _field2;
    int _field3;
    _Bool _field4;
    ImportSession *_field5;
    NSMutableDictionary *_field6;
    NSMutableArray *_field7;
    unsigned int _field8;
    struct OpaqueWorkThreadPool *_field9;
    struct OpaqueWorkThreadPool *_field10;
    struct OpaqueWorkThreadPool *_field11;
    struct OpaqueWorkThreadPool *_field12;
};

struct KeyRemap;

struct KeyRemapArray {
    struct _Vector_impl _field1;
};

struct KeySet {
    struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> _field1;
};

struct Lock {
    unsigned int magic;
    struct _opaque_pthread_mutex_t mutex;
};

struct MPQHdr {
    struct QHdr *qHeadPtr;
    unsigned char data[13];
};

struct MapOfDays {
    struct _Rb_tree<PhotoDate, std::pair<const PhotoDate, int>, std::_Select1st<std::pair<const PhotoDate, int>>, std::less<PhotoDate>, std::allocator<std::pair<const PhotoDate, int>>> _field1;
};

struct MediaType;

struct MemBuffer {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct SLinkList _field4;
};

struct MemHandleOpaque;

struct MessageReceiver {
    unsigned int magic;
    unsigned int disableCount;
    unsigned int modificationCount;
    struct Array senders;
    void *handlerProc;
    void *handlerData;
};

struct MessageSender {
    unsigned int magic;
    unsigned int disableCount;
    unsigned int sendCount;
    unsigned int modificationCount;
    struct Array receivers;
};

struct MetaTrackingRecord;

struct MovieType;

struct OnScreenImage {
    struct SLinkElement element;
    struct IPImage *ipImage;
    struct IPPhotoInfo *ipPhotoInfo;
    struct _opaque_pthread_mutex_t lock;
    struct _NSSize frameSize;
    struct IPPhotoInfo *toBeLoaded;
    struct _NSRect cropRect;
    float rotation;
    float sharpnessRatio;
};

struct OnscreenArray {
    struct _Vector_impl _field1;
};

struct OnscreenRecord {
    struct IPPhotoInfo *_field1;
    id _field2;
    id _field3;
    struct IPFileImage *_field4;
    struct _NSSize _field5;
    int _field6;
    char _field7;
};

struct OpaqueEventHandlerRef;

struct OpaqueGrafPtr;

struct OpaqueICAObject;

struct OpaqueICAProperty;

struct OpaquePMPageFormat;

struct OpaquePMPaper;

struct OpaquePMPreset;

struct OpaquePMPrintSession;

struct OpaquePMPrintSettings;

struct OpaquePMPrinter;

struct OpaqueWSMethodInvocationRef;

struct OpaqueWorkThreadPool;

struct PageThumb;

struct PhotosCountMap {
    struct _Rb_tree<IPPhotoInfo*, std::pair<IPPhotoInfo* const, int>, std::_Select1st<std::pair<IPPhotoInfo* const, int>>, std::less<IPPhotoInfo*>, std::allocator<std::pair<IPPhotoInfo* const, int>>> _field1;
};

struct Point {
    short _field1;
    short _field2;
};

struct ProcessSerialNumber {
    unsigned int _field1;
    unsigned int _field2;
};

struct QHdr;

struct Rect {
    short _field1;
    short _field2;
    short _field3;
    short _field4;
};

struct RenderCache {
    struct vector<Key, std::allocator<Key>> _field1;
    struct map<Key, RenderCacheRec, std::less<Key>, std::allocator<std::pair<const Key, RenderCacheRec>>> _field2;
    _Bool _field3;
    int _field4;
    NSRecursiveLock *_field5;
};

struct SLinkElement {
    struct SLinkElement *next;
};

struct SLinkList {
    struct SLinkElement *head;
};

struct SThreadedLinkList {
    struct SLinkList list;
    struct _opaque_pthread_mutex_t lock;
};

struct SegmentCacheFile {
    void **_field1;
    struct FSRef _field2;
    short _field3;
    _Bool _field4;
    char *_field5;
    NSString *_field6;
    int _field7;
    _Bool _field8;
    int _field9;
    _Bool _field10;
    struct _opaque_pthread_mutex_t _field11;
    struct _opaque_pthread_mutex_t _field12;
};

struct SetOfDays {
    struct _Rb_tree<PhotoDate, PhotoDate, std::_Identity<PhotoDate>, std::less<PhotoDate>, std::allocator<PhotoDate>> _field1;
};

struct ShAppAdapter {
    void **_field1;
};

struct ShContentBuffer {
    void **_field1;
    struct MemBuffer _field2;
    unsigned char _field3;
    unsigned int _field4;
    void *_field5;
    unsigned int _field6;
};

struct ShServer;

struct SharingContext {
    struct MPQHdr _field1;
    unsigned int _field2;
    struct ShAppAdapter *_field3;
    struct ShServer *_field4;
    struct OpaqueEventHandlerRef *_field5;
    struct MessageReceiver _field6;
    struct IPSharedServiceInfo _field7;
    int _field8;
    unsigned short _field9;
    unsigned char _field10;
    struct MessageSender _field11;
    struct UserPrefsInfo _field12;
    unsigned char _field13;
};

struct Slide;

struct SlideArray {
    struct _Vector_impl _field1;
};

struct SlideTransformations {
    float mZoom;
    float mEndZoom;
    float mPanX;
    float mPanY;
    float mEndPanX;
    float mEndPanY;
    float mNormalWidth;
    float mNormalHeight;
    float mTextureZoom;
    char mAnimate;
};

struct TempImageEntry;

struct Thumb {
    void *_field1;
    struct IPPhotoInfo *_field2;
    struct _NSRect _field3;
    struct _NSRect _field4;
    float _field5;
    float _field6;
    double _field7;
    unsigned long _field8;
    int _field9;
};

struct ThumbArray {
    struct _Vector_impl _field1;
};

struct ThumbData;

struct ThumbDataArray {
    struct _Vector_impl _field1;
};

struct TrackType;

struct UResourceBundle;

struct UnsignedLongSet {
    struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> _field1;
    struct _Rb_tree_const_iterator<Key> _field2;
};

struct UserDataRecord;

struct UserPrefsInfo {
    unsigned char sharePhotoLibrary;
    unsigned char findSharedPhotoLibraries;
    unsigned char shareSelectedAlbums;
    unsigned char sharingPasswordEnabled;
    unsigned short sharingPassword[256];
    unsigned short sharedLibraryName[256];
};

struct ViewStruct {
    unsigned short _field1;
    unsigned short _field2;
    struct IPPhotoInfo *_field3;
    float _field4;
    float _field5;
    unsigned long _field6;
    int _field7;
    struct _NSRect _field8;
    struct _NSRect _field9;
    struct _NSRect _field10;
    struct _NSRect _field11;
    short _field12;
    short _field13;
    struct _NSRect _field14;
    struct _NSRect _field15;
    struct _NSRect _field16;
    struct _NSRect _field17;
    struct CGImage *_field18;
    unsigned long _field19;
    unsigned long _field20;
    unsigned long _field21;
    unsigned long _field22;
    unsigned long _field23;
    char _field24;
    char _field25;
};

struct _CGDirectDisplayID;

struct _CGLContextObject;

struct _CGLPixelFormatObject;

struct _List_impl {
    struct _List_node_base _M_node;
};

struct _List_node_base {
    struct _List_node_base *_M_next;
    struct _List_node_base *_M_prev;
};

struct _NSMapTable;

struct _NSModalSession;

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _Rb_tree<Album*, Album*, std::_Identity<Album*>, std::less<Album*>, std::allocator<Album*>> {
    struct _Rb_tree_impl<std::less<Album*>, false> _M_impl;
};

struct _Rb_tree<IPPhotoInfo*, IPPhotoInfo*, std::_Identity<IPPhotoInfo*>, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> {
    struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> _M_impl;
};

struct _Rb_tree<IPPhotoInfo*, std::pair<IPPhotoInfo* const, int>, std::_Select1st<std::pair<IPPhotoInfo* const, int>>, std::less<IPPhotoInfo*>, std::allocator<std::pair<IPPhotoInfo* const, int>>> {
    struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> _M_impl;
};

struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, Album*>, std::_Select1st<std::pair<const Key, Album*>>, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _field1;
};

struct _Rb_tree<Key, std::pair<const Key, IPStack*>, std::_Select1st<std::pair<const Key, IPStack*>>, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, Key>, std::_Select1st<std::pair<const Key, Key>>, std::less<Key>, std::allocator<std::pair<const Key, Key>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RenderCacheRec>, std::_Select1st<std::pair<const Key, RenderCacheRec>>, std::less<Key>, std::allocator<std::pair<const Key, RenderCacheRec>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RenderCacheRec>, std::_Select1st<std::pair<const Key, RenderCacheRec>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RenderCacheRec>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RollCachePhotoEntry>, std::_Select1st<std::pair<const Key, RollCachePhotoEntry>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RollInfoCacheRecord>, std::_Select1st<std::pair<const Key, RollInfoCacheRecord>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, StackFramingEntry>, std::_Select1st<std::pair<const Key, StackFramingEntry>>, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, int>, std::_Select1st<std::pair<const Key, int>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, int>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree<PhotoDate, PhotoDate, std::_Identity<PhotoDate>, std::less<PhotoDate>, std::allocator<PhotoDate>> {
    struct _Rb_tree_impl<std::less<PhotoDate>, false> _M_impl;
};

struct _Rb_tree<PhotoDate, std::pair<const PhotoDate, int>, std::_Select1st<std::pair<const PhotoDate, int>>, std::less<PhotoDate>, std::allocator<std::pair<const PhotoDate, int>>> {
    struct _Rb_tree_impl<std::less<PhotoDate>, false> _M_impl;
};

struct _Rb_tree<float, std::pair<const float, UInt32>, std::_Select1st<std::pair<const float, UInt32>>, std::less<float>, std::allocator<std::pair<const float, UInt32>>> {
    struct _Rb_tree_impl<std::less<float>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, AnimationAdjustments>, std::_Select1st<std::pair<const int, AnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct _Rb_tree_impl<std::less<int>, false> _field1;
};

struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPCachedObject*>, std::_Select1st<std::pair<const long unsigned int, IPCachedObject*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPPhotoInfo*>, std::_Select1st<std::pair<const long unsigned int, IPPhotoInfo*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPPhotoInfo*>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree_const_iterator<Key> {
    struct _Rb_tree_node_base *_M_node;
};

struct _Rb_tree_impl<std::less<Album*>, false> {
    struct less<Album*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> {
    struct less<IPPhotoInfo*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<Key>, false> {
    struct less<Key> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<PhotoDate>, false> {
    struct less<PhotoDate> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<float>, false> {
    struct less<float> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<int>, false> {
    struct less<int> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<long unsigned int>, false> {
    struct less<long unsigned int> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_node_base {
    int _M_color;
    struct _Rb_tree_node_base *_M_parent;
    struct _Rb_tree_node_base *_M_left;
    struct _Rb_tree_node_base *_M_right;
};

struct _Vector_impl {
    struct IPSelectable **_M_start;
    struct IPSelectable **_M_finish;
    struct IPSelectable **_M_end_of_storage;
};

struct __CFArray;

struct __CFData;

struct __CFDateFormatter;

struct __CFDictionary;

struct __CFHTTPMessage;

struct __CFHost;

struct __CFNetDiagnostic;

struct __CFReadStream;

struct __CFRunLoop;

struct __CFRunLoopSource;

struct __CFSocket;

struct __CFString;

struct __CFURL;

struct __CFWriteStream;

struct __darwin_pthread_handler_rec;

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    void *_field9;
    void *_field10;
    void *_field11;
    void *_field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sFILEX;

struct __sbuf {
    char *_base;
    int _size;
};

struct _dns_service_discovery_t;

struct _opaque_pthread_cond_t {
    long __sig;
    char __opaque[24];
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

struct _opaque_pthread_t {
    long _field1;
    struct __darwin_pthread_handler_rec *_field2;
    char _field3[596];
};

struct _textureArray {
    struct _Vector_impl _field1;
};

struct in6_addr {
    union {
        unsigned char __u6_addr8[16];
        unsigned short __u6_addr16[8];
        unsigned int __u6_addr32[4];
    } __u6_addr;
};

struct in_addr {
    unsigned int s_addr;
};

struct less<Album*>;

struct less<IPPhotoInfo*>;

struct less<Key>;

struct less<PhotoDate>;

struct less<float>;

struct less<int>;

struct less<long unsigned int>;

struct list<JobQueueEntry*, std::allocator<JobQueueEntry*>> {
    struct _List_impl _field1;
};

struct list<NSDate*, std::allocator<NSDate*>> {
    struct _List_impl _field1;
};

struct list<float, std::allocator<float>> {
    struct _List_impl _field1;
};

struct list<long long unsigned int, std::allocator<long long unsigned int>> {
    struct _List_impl _field1;
};

struct map<Key, Album*, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> {
    struct _Rb_tree<Key, std::pair<const Key, Album*>, std::_Select1st<std::pair<const Key, Album*>>, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> _field1;
};

struct map<Key, EventDataCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, EventDataCacheRecord>>>;

struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> _field1;
};

struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> _field1;
};

struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> {
    struct _Rb_tree<Key, std::pair<const Key, IPStack*>, std::_Select1st<std::pair<const Key, IPStack*>>, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> _field1;
};

struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> {
    struct _Rb_tree<Key, std::pair<const Key, Key>, std::_Select1st<std::pair<const Key, Key>>, std::less<Key>, std::allocator<std::pair<const Key, Key>>> _field1;
};

struct map<Key, RenderCacheRec, std::less<Key>, std::allocator<std::pair<const Key, RenderCacheRec>>> {
    struct _Rb_tree<Key, std::pair<const Key, RenderCacheRec>, std::_Select1st<std::pair<const Key, RenderCacheRec>>, std::less<Key>, std::allocator<std::pair<const Key, RenderCacheRec>>> _M_t;
};

struct map<Key, RenderCacheRec, std::less<long unsigned int>, std::allocator<std::pair<const Key, RenderCacheRec>>> {
    struct _Rb_tree<Key, std::pair<const Key, RenderCacheRec>, std::_Select1st<std::pair<const Key, RenderCacheRec>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RenderCacheRec>>> _M_t;
};

struct map<Key, RollCachePhotoEntry, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> {
    struct _Rb_tree<Key, std::pair<const Key, RollCachePhotoEntry>, std::_Select1st<std::pair<const Key, RollCachePhotoEntry>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> _field1;
};

struct map<Key, RollInfoCacheRecord, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> {
    struct _Rb_tree<Key, std::pair<const Key, RollInfoCacheRecord>, std::_Select1st<std::pair<const Key, RollInfoCacheRecord>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> _field1;
};

struct map<Key, StackFramingEntry, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> {
    struct _Rb_tree<Key, std::pair<const Key, StackFramingEntry>, std::_Select1st<std::pair<const Key, StackFramingEntry>>, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> _field1;
};

struct map<Key, ViewStruct, std::less<Key>, std::allocator<std::pair<const Key, ViewStruct>>>;

struct map<Key, int, std::less<long unsigned int>, std::allocator<std::pair<const Key, int>>> {
    struct _Rb_tree<Key, std::pair<const Key, int>, std::_Select1st<std::pair<const Key, int>>, std::less<long unsigned int>, std::allocator<std::pair<const Key, int>>> _field1;
};

struct map<float, UInt32, std::less<float>, std::allocator<std::pair<const float, UInt32>>> {
    struct _Rb_tree<float, std::pair<const float, UInt32>, std::_Select1st<std::pair<const float, UInt32>>, std::less<float>, std::allocator<std::pair<const float, UInt32>>> _field1;
};

struct map<int, AnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> {
    struct _Rb_tree<int, std::pair<const int, AnimationAdjustments>, std::_Select1st<std::pair<const int, AnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> _field1;
};

struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>>> _field1;
};

struct map<long unsigned int, IPCachedObject*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> {
    struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPCachedObject*>, std::_Select1st<std::pair<const long unsigned int, IPCachedObject*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> _M_t;
};

struct map<long unsigned int, IPPhotoInfo*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPPhotoInfo*>>> {
    struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPPhotoInfo*>, std::_Select1st<std::pair<const long unsigned int, IPPhotoInfo*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPPhotoInfo*>>> _field1;
};

struct ppd_group_str;

struct set<Album*, std::less<Album*>, std::allocator<Album*>> {
    struct _Rb_tree<Album*, Album*, std::_Identity<Album*>, std::less<Album*>, std::allocator<Album*>> _field1;
};

struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> {
    struct _Rb_tree<IPPhotoInfo*, IPPhotoInfo*, std::_Identity<IPPhotoInfo*>, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> _field1;
};

struct set<IPSelectable*, std::less<IPSelectable*>, std::allocator<IPSelectable*>>;

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct sockaddr_in6 {
    unsigned char sin6_len;
    unsigned char sin6_family;
    unsigned short sin6_port;
    unsigned int sin6_flowinfo;
    struct in6_addr sin6_addr;
    unsigned int sin6_scope_id;
};

struct spline1;

struct texture_array {
    int width;
    int height;
    struct texture_rect **textures;
};

struct texture_rect {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    void *_field5;
    unsigned int _field6;
};

struct vector<Album*, std::allocator<Album*>> {
    struct _Vector_impl _M_impl;
};

struct vector<AnimationRects, std::allocator<AnimationRects>> {
    struct _Vector_impl _field1;
};

struct vector<DayRange, std::allocator<DayRange>> {
    struct _Vector_impl _field1;
};

struct vector<EventViewAnimationObject, std::allocator<EventViewAnimationObject>> {
    struct _Vector_impl _field1;
};

struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> {
    struct _Vector_impl _field1;
};

struct vector<Filter*, std::allocator<Filter*>> {
    struct _Vector_impl _field1;
};

struct vector<IPAlbumState*, std::allocator<IPAlbumState*>> {
    struct _Vector_impl _field1;
};

struct vector<IPAnimationObject, std::allocator<IPAnimationObject>> {
    struct _Vector_impl _field1;
};

struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> {
    struct _Vector_impl _M_impl;
};

struct vector<IPSelectable*, std::allocator<IPSelectable*>> {
    struct _Vector_impl _M_impl;
};

struct vector<IPSelectionList*, std::allocator<IPSelectionList*>> {
    struct _Vector_impl _field1;
};

struct vector<Key, std::allocator<Key>> {
    struct _Vector_impl _M_impl;
};

struct vector<MetaTrackingRecord, std::allocator<MetaTrackingRecord>> {
    struct _Vector_impl _field1;
};

struct vector<TempImageEntry, std::allocator<TempImageEntry>> {
    struct _Vector_impl _field1;
};

struct vector<ViewStruct, std::allocator<ViewStruct>>;

typedef struct {
    double _currentDate;
    double _birthDate;
    double _lastDate;
} CDAnonymousStruct1;

typedef struct {
    struct CGImage *mImageRef;
    void *mRaster;
    long mRowBytes;
    struct _NSSize mSize;
    float mRotation;
    unsigned int mPixelFormat;
} CDAnonymousStruct3;

typedef struct {
} CDAnonymousStruct6;

typedef struct {
    int identifier;
    double duration;
    NSString *transitionID;
    struct {
        int identifier;
        double startTime;
        double effectLoopInterval;
        double duration;
        struct CGSize size;
        float scale;
        CDAnonymousStruct19 location;
        float opacity;
        float rotation;
        char includeInTransition;
        char requiresAlpha;
        char tiled;
        void *texture;
        double showStartCounter;
        float _opacity;
        float _scale;
        struct _NSPoint _offset;
        float _zlocation;
        float _rotation;
        float _xrotation;
        float _yrotation;
        struct _NSPoint _centerpointshift;
        CDAnonymousStruct4 effects[32];
    } textures[32];
    char drawsBackground;
    char reusePriorTextureZero;
} CDAnonymousStruct5;

typedef struct {
    NSString *effectType;
    double startTime;
    double duration;
    CDAnonymousStruct19 targetLocation;
    struct CGPoint centerPointShift;
    struct CGSize startSize;
    struct CGSize targetSize;
    float targetRotation;
    float startHorizontalSpin;
    float targetHorizontalSpin;
    float startVerticalSpin;
    float targetVerticalSpin;
    float targetOpacity;
    int curveDynamics;
    double startVelocity;
    double endVelocity;
    double minVelocity;
    double curveParameter;
    CDAnonymousStruct19 startLocation;
    CDAnonymousStruct19 locationDelta;
    struct CGSize rateSize;
    float startRotation;
    float rateRotation;
    float rateXRotation;
    float rateYRotation;
    float rateOpacity;
    double avgSpeedScale;
    char init;
    NSArray *splinePoints;
    struct spline1 *splineObj;
    float **spline;
    int nSplinePoints;
    float timeLastDrawn;
    float arclengthLastDrawn;
    NSMutableArray *timePoints;
} CDAnonymousStruct4;

typedef struct {
    char *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    float _field12;
    float _field13;
    float _field14;
    struct CGImage *_field15;
    struct CGImage *_field16;
    struct CGImage *_field17;
    struct CGImage *_field18;
    struct CGImage *_field19;
    struct CGImage *_field20;
    struct CGImage *_field21;
    struct CGImage *_field22;
    struct CGPattern *_field23;
    struct CGPattern *_field24;
    struct CGPattern *_field25;
    struct CGPattern *_field26;
} CDAnonymousStruct7;

typedef struct {
    unsigned long _field1;
    unsigned long _field2;
    id _field3;
    char _field4;
    char _field5;
    char _field6;
} CDAnonymousStruct8;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    char *_field11;
    int _field12;
    CDAnonymousStruct6 *_field13;
    char *_field14;
    char *_field15;
    char *_field16;
    char *_field17;
    char *_field18;
    char *_field19;
    char *_field20;
    char *_field21;
    char *_field22;
    char *_field23;
    char *_field24;
    int _field25;
    struct ppd_group_str *_field26;
    int _field27;
    CDAnonymousStruct6 *_field28;
    float _field29[2];
    float _field30[2];
    float _field31[4];
    int _field32;
    CDAnonymousStruct6 *_field33;
    int _field34;
    char **_field35;
    int _field36;
    CDAnonymousStruct6 *_field37;
    int _field38;
    char **_field39;
    int _field40;
    char *_field41;
    char *_field42;
    int _field43;
    int _field44;
    CDAnonymousStruct6 **_field45;
} CDAnonymousStruct9;

typedef struct {
    int _field1;
    int _field2;
} CDAnonymousStruct10;

typedef struct {
    void *_field1;
    int _field2;
    int _field3;
} CDAnonymousStruct11;

typedef struct {
    int version;
    void *info;
    void *retain;
    void *release;
    void *copyDescription;
} CDAnonymousStruct12;

typedef struct {
    id _field1;
    double _field2;
    double _field3;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field4;
    struct CGPoint _field5;
    struct CGSize _field6;
    struct CGSize _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    int _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field19;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field20;
    struct CGSize _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    double _field27;
    char _field28;
    id _field29;
    struct spline1 *_field30;
    float **_field31;
    int _field32;
    float _field33;
    float _field34;
    id _field35;
} CDAnonymousStruct14;

typedef struct {
    id _field1;
    struct CGSize _field2;
    char _field3;
    char _field4;
    struct IPFileInfo *_field5;
    struct IPPhotoInfo *_field6;
    struct CGColorSpace *_field7;
    char **_field8;
    struct IPImage *_field9;
    id _field10;
    char _field11;
    char _field12;
    id _field13;
} CDAnonymousStruct16;

typedef struct {
    float scale;
    struct _NSRect mFullImageRect;
    struct _NSRect drawRect;
    struct _NSSize mSizeToFitSize;
    float mOneToOneScale;
    struct _NSSize mSizeInViewBounds;
    struct _NSRect mVisibleImageRect;
    char usingFullSizedImage;
    char inCropViewMode;
    float zoomScale;
} CDAnonymousStruct13;

typedef struct {
    int _field1;
    double _field2;
    id _field3;
    struct {
        int _field1;
        double _field2;
        double _field3;
        double _field4;
        struct CGSize _field5;
        float _field6;
        struct {
            float _field1;
            float _field2;
            float _field3;
        } _field7;
        float _field8;
        float _field9;
        char _field10;
        char _field11;
        char _field12;
        void *_field13;
        double _field14;
        float _field15;
        float _field16;
        struct _NSPoint _field17;
        float _field18;
        float _field19;
        float _field20;
        float _field21;
        struct _NSPoint _field22;
        struct {
            id _field1;
            double _field2;
            double _field3;
            struct {
                float _field1;
                float _field2;
                float _field3;
            } _field4;
            struct CGPoint _field5;
            struct CGSize _field6;
            struct CGSize _field7;
            float _field8;
            float _field9;
            float _field10;
            float _field11;
            float _field12;
            float _field13;
            int _field14;
            double _field15;
            double _field16;
            double _field17;
            double _field18;
            struct {
                float _field1;
                float _field2;
                float _field3;
            } _field19;
            struct {
                float _field1;
                float _field2;
                float _field3;
            } _field20;
            struct CGSize _field21;
            float _field22;
            float _field23;
            float _field24;
            float _field25;
            float _field26;
            double _field27;
            char _field28;
            id _field29;
            struct spline1 *_field30;
            float **_field31;
            int _field32;
            float _field33;
            float _field34;
            id _field35;
        } _field23[32];
    } _field4[32];
    char _field5;
    char _field6;
} CDAnonymousStruct15;

typedef struct {
    struct _NSRect pageRect;
    char showCaptions;
    char showComments;
    char showPageNumber;
    id album;
    int start;
    int pagePosition;
} CDAnonymousStruct18;

typedef struct {
    unsigned int _field1;
    int _field2;
    float _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
} CDAnonymousStruct17;

typedef struct {
    float _field1;
    id _field2;
    char _field3;
    char _field4;
} CDAnonymousStruct2;

typedef struct {
    float x;
    float y;
    float z;
} CDAnonymousStruct19;

typedef struct {
    char **_field1;
    void *_field2;
    long _field3;
} CDAnonymousStruct20;

typedef struct {
    id _field1;
    SEL _field2;
} CDAnonymousStruct21;

/*
 * File: /Applications/iPhoto.app/Contents/MacOS/iPhoto
 * Arch: Intel 80x86 (i386)
 */

@protocol AYGroup <NSObject>
- (BOOL)operationShouldBeLaunchedNow:(id)fp8;
- (void)operationHasEnded:(id)fp8;
@end

@protocol AYOperationCompanion <NSObject>
- (void)postOperationForOperation:(id)fp8;
@end

@protocol ArchiveDisplayProtocol
- (BOOL)isBookView;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)updateStatus;
- (BOOL)hasSelection:(int)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
@end

@protocol DAVAuthStore
- (BOOL)hasCredentialsForSession:(id)fp8;
- (BOOL)session:(id)fp8 addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp12;
- (void)session:(id)fp8 storeAuthChallenge:(id)fp12 forURL:(id)fp16;
- (void)clearAuthChallengeForSession:(id)fp8;
@end

@protocol DAVResponseBodyReader
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;
@end

@protocol DMAPContainer <DMAPItem>
- (id)dmapDatabase;
- (id)dmapItems;
- (id)dmapItemCount;
@end

@protocol DMAPDatabase <DMAPItem>
- (id)dmapContainerCount;
- (id)dmapContainers;
- (id)dmapItems;
- (id)dmapItemCount;
@end

@protocol DMAPItem
- (id)dmapMetaclass;
- (id)dmapId;
- (id)dmapName;
@end

@protocol DMAPMetaclass
- (id)fields;
- (id)dmapValuesForMetaFields:(id)fp8 object:(id)fp12;
- (id)dmapValuesForMetaFields:(id)fp8 objects:(id)fp12;
@end

@protocol DPAPLocking
- (id)readLock;
- (id)readLock:(id)fp8;
- (id)dpapLock;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;
@end

@protocol DPAPServiceDOProtocol
- (oneway void)didInitProxy;
- (oneway void)xmlDidChange;
- (void)defaultsDidChange;
- (int)sessionCount;
- (oneway void)shutdown;
@end

@protocol DRFileDataProduction
- (unsigned long long)calculateSizeOfFile:(id)fp8 fork:(unsigned long)fp12 estimating:(BOOL)fp16;
- (BOOL)prepareFileForBurn:(id)fp8;
- (unsigned int)produceFile:(id)fp8 fork:(unsigned long)fp12 intoBuffer:(char *)fp16 length:(unsigned int)fp20 atAddress:(unsigned long long)fp24 blockSize:(unsigned int)fp32;
- (BOOL)prepareFileForVerification:(id)fp8;
- (void)cleanupFileAfterBurn:(id)fp8;
@end

@protocol DragDelegateProtocol
- (unsigned int)draggingEntered:(id)fp8 view:(id)fp12;
- (BOOL)performDragOperation:(id)fp8 view:(id)fp12;
@end

@protocol ExportImageProtocol
- (unsigned int)imageCount;
- (struct _NSSize)imageSizeAtIndex:(unsigned int)fp8;
- (unsigned long)imageFormatAtIndex:(unsigned int)fp8;
- (unsigned long)originalImageFormatAtIndex:(unsigned int)fp8;
- (BOOL)originalIsRawAtIndex:(unsigned int)fp8;
- (BOOL)originalIsMovieAtIndex:(unsigned int)fp8;
- (id)imageTitleAtIndex:(unsigned int)fp8;
- (id)imageCommentsAtIndex:(unsigned int)fp8;
- (float)imageRotationAtIndex:(unsigned int)fp8;
- (id)imagePathAtIndex:(unsigned int)fp8;
- (id)sourcePathAtIndex:(unsigned int)fp8;
- (id)thumbnailPathAtIndex:(unsigned int)fp8;
- (id)imageFileNameAtIndex:(unsigned int)fp8;
- (BOOL)imageIsEditedAtIndex:(unsigned int)fp8;
- (BOOL)imageIsPortraitAtIndex:(unsigned int)fp8;
- (float)imageAspectRatioAtIndex:(unsigned int)fp8;
- (unsigned long long)imageFileSizeAtIndex:(unsigned int)fp8;
- (id)imageDateAtIndex:(unsigned int)fp8;
- (int)imageRatingAtIndex:(unsigned int)fp8;
- (id)imageTiffPropertiesAtIndex:(unsigned int)fp8;
- (id)imageExifPropertiesAtIndex:(unsigned int)fp8;
- (id)imageKeywordsAtIndex:(unsigned int)fp8;
- (id)albumsOfImageAtIndex:(unsigned int)fp8;
- (id)getExtensionForImageFormat:(unsigned long)fp8;
- (unsigned long)getImageFormatForExtension:(id)fp8;
- (unsigned int)albumCount;
- (id)albumNameAtIndex:(unsigned int)fp8;
- (id)albumMusicPathAtIndex:(unsigned int)fp8;
- (id)albumCommentsAtIndex:(unsigned int)fp8;
- (unsigned int)positionOfImageAtIndex:(unsigned int)fp8 inAlbum:(unsigned int)fp12;
- (id)window;
- (void)enableControls;
- (void)disableControls;
- (void)clickExport;
- (void)startExport;
- (void)cancelExportBeforeBeginning;
- (id)directoryPath;
- (unsigned int)sessionID;
- (BOOL)exportImageAtIndex:(unsigned int)fp8 dest:(id)fp12 options:(CDAnonymousStruct17 *)fp16;
- (struct _NSSize)lastExportedImageSize;
@end

@protocol ExportPluginBoxProtocol
- (BOOL)performKeyEquivalent:(id)fp8;
@end

@protocol ExportPluginProtocol
- (id)initWithExportImageObj:(id)fp8;
- (id)settingsView;
- (id)firstView;
- (void)viewWillBeActivated;
- (void)viewWillBeDeactivated;
- (id)requiredFileType;
- (BOOL)wantsDestinationPrompt;
- (id)getDestinationPath;
- (id)defaultFileName;
- (id)defaultDirectory;
- (BOOL)treatSingleSelectionDifferently;
- (BOOL)handlesMovieFiles;
- (BOOL)validateUserCreatedPath:(id)fp8;
- (void)clickExport;
- (void)startExport:(id)fp8;
- (void)performExport:(id)fp8;
- (CDAnonymousStruct8 *)progress;
- (void)lockProgress;
- (void)unlockProgress;
- (void)cancelExport;
- (id)name;
@end

@protocol HeartBeatClient
- (void)heartBeat:(CDAnonymousStruct1 *)fp8;
@end

@protocol IADrawableProtocol <NSObject>
+ (id)protocolVersion;
- (struct texture_array)textureArray;
- (unsigned int *)textureNameArrayLoRes;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 highDetail:(BOOL)fp24;
- (void)drawSubrect:(struct _NSRect)fp8 opacity:(float)fp24 scale:(float)fp28 offset:(struct _NSPoint)fp32 highDetail:(BOOL)fp40;
- (float)opacity;
- (void)setOpacity:(float)fp8;
- (struct _NSPoint)offset;
- (void)setOffset:(struct _NSPoint)fp8;
- (float)scale;
- (void)setScale:(float)fp8;
- (struct _NSSize)rectSize;
- (struct _NSPoint)centerPoint;
- (void)setCenterPoint:(struct _NSPoint)fp8;
- (unsigned long)textureTarget;
- (BOOL)inverted;
- (void)updateARGB;
@end

@protocol IAIPPluginControllerProtocol <NSObject, IAPluginControllerProtocol, IAMathUtilitiesProtocol, IAImageProcessingProtocol>
- (BOOL)isRendering;
- (BOOL)isRenderingFirstFrame;
- (void)cancelRender:(id)fp8;
@end

@protocol IAIPPluginProtocol <NSObject, IAPluginProtocol>
- (void)renderFrame:(float)fp8 of:(float)fp12;
- (void)processImage:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)cleanupAfterRender;
@end

@protocol IAImageProcessingProtocol <NSObject>
- (BOOL)glRendererAccelerationAvailable;
- (unsigned int)glRendererTotalVRAM;
- (unsigned int)glRendererTextureMemory;
- (void)updateSessionRenderer;
@end

@protocol IAMathUtilitiesProtocol <NSObject>
- (float)sineMap:(float)fp8;
@end

@protocol IAPluginControllerProtocol <NSObject>
+ (id)sharedInstance;
+ (id)protocolVersion;
- (Class)currentPluginClass;
- (void)setCurrentPluginClass:(Class)fp8;
- (id)resources:(id)fp8;
@end

@protocol IAPluginManagerProtocol <NSObject>
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)localizedString:(id)fp8;
- (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
- (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
- (id)plugins;
- (id)pluginsOfType:(int)fp8;
- (id)pluginNamesOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8;
- (Class)pluginWithName:(id)fp8 ofType:(int)fp12;
- (id)bundleNameForPlugin:(Class)fp8;
- (id)bundleVersionForPlugin:(Class)fp8;
- (id)pluginName:(Class)fp8;
- (id)pluginSearchPaths;
- (void)scanForPlugins;
- (void)scanForPluginsInDirectory:(id)fp8;
- (void)openBundle:(id)fp8;
- (void)addPlugin:(Class)fp8;
@end

@protocol IAPluginProtocol <NSObject>
+ (BOOL)canRunWithControllerClass:(Class)fp8;
+ (id)protocolVersion;
+ (id)pluginID;
+ (int)pluginType;
+ (id)pluginInfo;
- (id)initWithController:(id)fp8;
- (id)controller;
@end

@protocol IASessionProtocol <NSObject>
+ (id)protocolVersion;
+ (struct _NSRect)bestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16;
+ (void)ratioForBestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16 numerator:(long *)fp24 denominator:(long *)fp28;
+ (int)VRAM;
+ (BOOL)usingRage128;
+ (BOOL)slowMachine;
+ (BOOL)textureRectangleExtAvailable;
- (id)initWithSlideRect:(struct _NSRect)fp8 displaySize:(struct _NSSize)fp24 displayDepth:(int)fp32 pixelFormat:(struct _CGLPixelFormatObject *)fp36;
- (struct _CGLContextObject *)context;
- (struct _NSSize)displaySize;
- (int)displayDepth;
- (struct _NSRect)slideRect;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (void)updateRenderer;
- (void)enableClipping:(struct _NSRect)fp8;
- (void)disableClipping;
- (void)flushFrame;
- (void)makeCurrentContext;
- (float)perspectiveProjectionFOV;
- (void)applyOrthoProjection;
- (void)applyDefaultProjection;
- (BOOL)doubleBuffered;
- (BOOL)coerceIntoView;
@end

@protocol ILAlbumContentsDelegate
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (id)orderedPhotoUIDs;
- (void)prepareToSyncWithProperties:(id)fp8;
- (void)updateProperties:(id)fp8;
- (id)allPropertiesForPhotoWithUID:(id)fp8;
- (void)updateProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (id)createNewPhotoWithInitialProperties:(id)fp8;
- (void)deleteOldPhotoWithUID:(id)fp8;
- (void)setPersistentDictionary:(id)fp8 forAlbum:(id)fp12;
- (id)persistentDictionaryForAlbum:(id)fp8;
- (id)persistentDictionaryForPhotoWithUID:(id)fp8 forAlbum:(id)fp12;
- (id)ensureOriginalForPhotoWithUID:(id)fp8;
@end

@protocol ILAlbumProtectionDelegate
- (id)protectionLoginForAlbum:(id)fp8;
- (id)protectionPasswordForAlbum:(id)fp8;
@end

@protocol ILShareContentsDelegate
- (void)setPersistentDictionary:(id)fp8 forShare:(id)fp12;
- (id)persistentDictionaryForShare:(id)fp8;
@end

@protocol IPHDiffUpdateProxyProtocol
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)allPublicationUIDs;
- (id)objectForPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)albumSourceUID;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)reorderedTasksFromEnumerator:(id)fp8;
@end

@protocol IPHPhotoDBDiffBagSupportProtocol
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (void)resetDiffBag;
- (void)markDiffBagChangedToState:(int)fp8 forPhotoObject:(id)fp12;
- (void)markDiffBagChangedToState:(int)fp8 forDistantPhotoObject:(id)fp12;
@end

@protocol IPHPhotoDBProtocol <NSObject, IPHPhotoDBDiffBagSupportProtocol>
- (BOOL)allowReorder;
- (BOOL)allowDeletion;
- (BOOL)allowAddition;
- (id)UID;
- (id)readableName;
- (void)setReadableName:(id)fp8;
- (void)setPublishServerSetUID:(id)fp8;
- (id)photoDBExportedProperties;
- (id)photoDBLocalProperties;
- (id)photoShare;
- (unsigned int)photoCount;
- (id)allPhotos;
- (id)allPhotosByUID;
- (id)orderedPhotoUIDs;
- (id)photoWithPublicationUID:(id)fp8;
- (int)indexOfPhoto:(id)fp8;
- (id)photoAtIndex:(unsigned int)fp8;
- (id)photoWithFilepath:(id)fp8;
- (id)nextPhoto:(id)fp8 loop:(BOOL)fp12;
- (id)previousPhoto:(id)fp8 loop:(BOOL)fp12;
- (id)ensureOriginalForPhoto:(id)fp8;
- (void)addPhoto:(id)fp8;
- (void)insertPhoto:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removePhoto:(id)fp8;
- (void)removePhotoAtIndex:(unsigned int)fp8;
- (void)replacePhototAtIndex:(unsigned int)fp8 withPhoto:(id)fp12;
- (void)removeAllPhotos;
- (void)updatePhotosOrder;
- (void)movePhotoAtIndex:(unsigned int)fp8 toIndex:(unsigned int)fp12;
- (void)movePhotosAtIndexes:(id)fp8 toIndex:(unsigned int)fp12;
- (void)setVersion:(id)fp8;
- (id)version;
- (void)bumpVersion;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)fp8;
- (void)markDirty;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)prepareToSync;
- (void)save;
@end

@protocol IPImageMgrDelegate
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
@end

@protocol IPRemoteSlideshowPlayerProtocol <NSObject>
- (void)beginSlideshowInRemoteWindow:(int)fp8 inFrame:(struct _NSRect)fp12;
- (void)playSlideshow;
- (void)pauseSlideshow;
- (void)endSlideshow;
@end

@protocol ISNetServicesLoadableBundle
- (id)requirementsDictionary:(id)fp8;
- (void)invokeService:(id)fp8 withDictionary:(id)fp12;
- (id)displayName;
- (id)toolTipString;
- (int)tag;
- (BOOL)shouldShow:(id)fp8;
- (id)icon;
@end

@protocol ImageFilterPluginProtocol
- (id)initWithImageFilterSupportObj:(id)fp8;
- (id)title;
- (BOOL)performFilter:(id)fp8 target:(id)fp12 selector:(SEL)fp16;
- (CDAnonymousStruct2 *)progress;
- (id)errorMessage;
@end

@protocol ImageFilterSupportProtocol
@end

@protocol KeyProtocol
- (unsigned int)count;
- (unsigned long)keyAtIndex:(unsigned int)fp8;
- (BOOL)hasKey:(unsigned long)fp8;
- (unsigned int)findIndexForKey:(unsigned long)fp8;
- (id)uniqueKeys:(id)fp8;
- (void)add:(unsigned long)fp8;
- (void)addWithKeyMgr:(id)fp8;
- (void)addUniqueWithKeyMgr:(id)fp8;
- (BOOL)addUnique:(unsigned long)fp8;
- (void)remove:(unsigned long)fp8;
- (void)removeWithKeyMgr:(id)fp8;
- (void)removeAll;
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSLocking
- (void)lock;
- (void)unlock;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol PrintFormatterImageProtocol
- (void)calcViewPages;
- (void)calcViewMargins;
- (struct _NSSize)imageableSize;
- (struct _NSRect)centerRect:(struct _NSRect)fp8 overRect:(struct _NSRect)fp24;
- (struct _NSRect)scaleRect:(struct _NSRect)fp8 toFillRect:(struct _NSRect)fp24;
- (BOOL)rectIsPortrait:(struct _NSRect)fp8;
- (BOOL)rectIsSquare:(struct _NSRect)fp8;
- (float)warningImageDPI;
- (float)defaultMaximumDPI;
- (void)redisplaySample;
- (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
- (id)localizedString:(id)fp8;
- (long)photoCount;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (struct CGSize)photoSizeAtIndex:(int)fp8;
- (float)photoRotationAtIndex:(int)fp8;
- (BOOL)photoIsPortraitAtIndex:(int)fp8;
- (void)rotatePhotoAtIndex:(int)fp8 byAmount:(float)fp12;
- (float)dpiForPhotoAtIndex:(int)fp8 targetRect:(struct _NSRect)fp12 convertToPrintCoords:(BOOL)fp28;
- (struct _NSRect)scaledRectForPhotoAtIndex:(int)fp8 destRect:(struct _NSRect)fp12;
- (void)drawPhotoAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28 zoomAndTrim:(BOOL)fp32;
- (void)beginWriteTransactionForPhotoAtIndex:(int)fp8;
- (void)endTransactionForPhotoAtIndex:(int)fp8;
- (void)setTextAttributes:(id)fp8 forDisplay:(BOOL)fp12;
- (float)maxTextHeightForDisplay:(BOOL)fp8;
- (void)drawCaptionAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (void)clearRequiredPaperSize;
- (BOOL)hasRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)setRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
@end

@protocol PrintFormatterPluginProtocol
- (id)initWithPrintControllerObj:(id)fp8;
- (id)controller;
- (id)settingsView;
- (id)firstView;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (float)marginSize;
- (void)setMarginSize:(float)fp8;
- (float)maximumDPI;
- (void)viewWillBeActivated;
- (void)viewWasActivated;
- (void)viewWillBeDeactivated;
- (id)defaultPrintFormat;
- (unsigned int)numberOfPagesForFrame:(struct _NSRect)fp8 forDisplay:(BOOL)fp24;
- (void)formatForPrintingPage:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (BOOL)badgeIncompatibleSize;
- (BOOL)badgeLowResolution;
- (id)description;
- (void)printerChanged;
@end

@protocol ThreadManagerTask
- (void)performTask;
@end

@interface FullScreen : ExternalEditMgr
{
    DisappearingWindow *mThumbWindow;
    ThumbScrollView *mThumbScrollView;
    IPEdgeBox *mThumbEdgeBox;
    int mThumbWindowLocation;
    int mThumbWindowRows;
    DisappearingWindow *mToolWindow;
    struct _NSRect mCurrentScreenRect;
    IPGrowBar *mGrowBar;
    BOOL mSuspendAutoMenu;
    BOOL mSuspendAutoTool;
    BOOL mSuspendAutoThumb;
    BOOL mMenuBarShown;
    BOOL mMenuBarAutoHide;
    BOOL mFinishing;
    HUDSlider *mZoomSlider;
    IPToolbarItem *mRAWItem;
}

- (void)setupToolBar;
- (float)grayValue;
- (BOOL)showTools;
- (void)unsuspendAll;
- (void)toggleToolbar:(id)fp8;
- (BOOL)showPlacard;
- (void)toggleThumbView:(id)fp8;
- (void)thumbnailLocationAction:(id)fp8;
- (void)thumbnailRowsAction:(id)fp8;
- (void)thumbnailAlbumAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)populateThumbnailAlbumMenu;
- (void)_disableMenuBarAutoHider;
- (void)_enableMenuBarAutoHider;
- (void)windowWillAnimateOn:(id)fp8;
- (void)windowWillAnimateOff:(id)fp8;
- (void)windowDidAnimateOn:(id)fp8;
- (void)windowDidAnimateOff:(id)fp8;
- (void)_showMenuBar;
- (void)_hideMenuBar;
- (void)nextImageToThe:(int)fp8;
- (void)layoutThumbView;
- (void)relocateThumbView:(id)fp8;
- (void)showToolPanel:(id)fp8;
- (void)growBarDidResizeWindow:(id)fp8;
- (void)growBarBeginResizeWindow:(id)fp8;
- (void)growBarEndResizeWindow:(id)fp8;
- (id)thumbnailSizer;
- (void)resizeCompleted:(id)fp8;
- (void)resizeThumbnails:(id)fp8;
- (void)zoomToMax:(id)fp8;
- (void)zoomToMin:(id)fp8;
- (void)updateSizer:(float)fp8;
- (struct _NSRect)usableArea;
- (BOOL)allowsPlacard;
- (BOOL)isThumbWindowVisible;
- (BOOL)isToolWindowVisible;
- (void)showThumbWindow;
- (void)showToolWindow;
- (void)updateSelection;
- (void)showInfoWindow;
- (BOOL)inFullScreen;
- (void)zoomChanged:(id)fp8;
- (void)initialAnimateOff;
- (id)initWithSelection:(struct IPSelectionList *)fp8 album:(id)fp12 sequence:(int)fp16 archiveController:(id)fp20 currentAlbum:(id)fp24;
- (id)undoManager;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)done;
- (void)dealloc;
- (void)mouseMoved:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)refreshRAW;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (struct _NSRect)keywordActionIndicatorLocation;
- (id)window;

@end

@interface Base64 : NSObject
{
}

+ (id)stringForBase64:(id)fp8;
+ (id)base64ForString:(id)fp8;

@end

@interface DMAP : NSObject
{
}

+ (unsigned long)readContentCode:(struct ShContentBuffer *)fp8;
+ (unsigned long)readU32:(struct ShContentBuffer *)fp8 contentCode:(unsigned long)fp12;
+ (unsigned long)readU32:(struct ShContentBuffer *)fp8;

@end

@interface NSString (NSStringDMAPAdditions)
- (unsigned long)u32Value;
@end

@interface NSNumber (NSNumberDMAPAdditions)
+ (id)numberWithU32:(unsigned long)fp8;
- (unsigned long)u32Value;
@end

@interface NSMutableString (NSMutableStringDMAPAdditions)
- (void)appendU32:(unsigned long)fp8;
@end

@interface DMAPServiceInfo : NSObject
{
    unsigned int mTimeoutInterval;
    unsigned int mProtocolVersion;
    NSString *mName;
    NSString *mBase64Password;
    int mAuthenticationMethod;
    BOOL mIsAutoLogoutSupported;
    BOOL mIsExtensionsSupported;
    BOOL mIsIndexSupported;
    BOOL mIsQuerySupported;
    BOOL mIsResolveSupported;
    BOOL mIsUpdateSupported;
    BOOL mIsBrowseSupported;
    BOOL mIsLoginRequired;
    BOOL mIsPersistentIdsSupported;
    int mDatabaseCount;
}

- (int)authenticationMethod;
- (int)databaseCount;
- (void)dealloc;
- (BOOL)isAutoLogoutSupported;
- (BOOL)isExtensionsSupported;
- (BOOL)isIndexSupported;
- (BOOL)isQuerySupported;
- (BOOL)isBrowseSupported;
- (BOOL)isResolveSupported;
- (BOOL)isUpdateSupported;
- (BOOL)isLoginRequired;
- (id)name;
- (unsigned int)protocolVersion;
- (void)setAuthenticationMethod:(int)fp8;
- (void)setDatabaseCount:(int)fp8;
- (void)setAutoLogoutSupported:(BOOL)fp8;
- (void)setExtensionsSupported:(BOOL)fp8;
- (void)setIndexSupported:(BOOL)fp8;
- (void)setLoginRequired:(BOOL)fp8;
- (void)setName:(id)fp8;
- (void)setProtocolVersion:(unsigned int)fp8;
- (void)setQuerySupported:(BOOL)fp8;
- (void)setBrowseSupported:(BOOL)fp8;
- (void)setResolveSupported:(BOOL)fp8;
- (void)setPersistentIdsSupported:(BOOL)fp8;
- (void)setTimeoutInterval:(unsigned long)fp8;
- (void)setUpdateSupported:(BOOL)fp8;
- (BOOL)isPersistentIdsSupported;
- (unsigned long)timeoutInterval;

@end

@interface DPAP : NSObject
{
}

+ (int)defaultPortNumber;
+ (BOOL)isLocalHostOnly;
+ (BOOL)_isNetServiceDevelopmentVersionEnabled;
+ (BOOL)_isDynamicPortNumberEnabled;
+ (BOOL)isUpdateEnabled;
+ (id)netServiceType;
+ (int)portNumber;
+ (int)serviceAppHeartbeatTimerInterval;

@end

@interface DMAPClientContainerItemsRequest : DMAPClientRequest
{
    id mDMAPContainer;
    NSArray *mItems;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8 dmapContainer:(id)fp12;
- (id)_relativePath;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (id)_responseResult;
- (id)_dictionaryForSingleItem:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientContainersRequest : DMAPClientRequest
{
    id mDMAPDatabase;
    NSNumber *mBaseContainerId;
    NSArray *mContainers;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (id)baseContainerId;
- (id)containers;
- (void)dealloc;
- (id)initWithService:(id)fp8 dmapDatabase:(id)fp12;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForSingleContainer:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientDatabasesRequest : DMAPClientRequest
{
    NSArray *mDatabases;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForSingleDatabase:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientInfoRequest : DMAPClientRequest
{
    DMAPServiceInfo *mInfo;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;
- (void)_willParseResponse:(id)fp8;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientLoginRequest : DMAPClientRequest
{
    NSString *mSessionId;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientRequest : NSObject
{
    DMAPClientService *mDMAPService;
    int mResponseTimeout;
    int mSocket;
    int mCondition;
    BOOL mShouldSendRevision;
    BOOL mGetServerVersion;
    BOOL mRequiresConnectionClose;
    BOOL mIsIP4Server;
    NSString *mAuthorizationFromDialog;
}

+ (int)_responseTimeout;
+ (BOOL)_shouldLogURLs;
+ (id)stringForCondition:(int)fp8;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (BOOL)_applyResponseDictionary:(id)fp8;
- (id)_OLD_STYLE_authenticationBearingBaseURLString;
- (id)_authenticationBearingBaseURLString;
- (int)condition;
- (void)dealloc;
- (id)_dictionaryForResponse:(id)fp8;
- (id)dmapService;
- (BOOL)_isPostLogin;
- (id)initWithService:(id)fp8;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (BOOL)_readResponseContent;
- (id)_relativePath;
- (id)_requestURLString;
- (BOOL)_requiresAuthentication;
- (BOOL)_requiresConnectionClose;
- (BOOL)isResponseFromiPhoto4;
- (BOOL)_requiresLogin;
- (id)response;
- (id)_responseDataEchoPath;
- (id)responseOnSocket:(int)fp8;
- (id)_responseResult;
- (BOOL)sendOnSocket:(int)fp8;
- (BOOL)_sendOnSocket:(int)fp8 httpRequestPointer:(id *)fp12;
- (void)setCondition:(int)fp8;
- (void)setCondition:(int)fp8 ifNone:(BOOL)fp12;
- (void)setShouldSendRevision:(BOOL)fp8;
- (void)setGetServerVersion:(BOOL)fp8;
- (void)setShouldSendConnectionClose:(BOOL)fp8;
- (void)setSocket:(int)fp8;
- (id)_terseIdentifier;
- (void)_willWriteRequest:(id)fp8;
- (void)_willParseResponse:(id)fp8;

@end

@interface DMAPClientService : NSObject
{
    NSNetService *mNetService;
    struct sockaddr_in *mSocketAddress;
    NSString *mScheme;
    struct __CFSocket *mSessionCFSocketRef;
    struct __CFRunLoopSource *mSessionCFRunLoopSourceRef;
    DMAPServiceInfo *mInfo;
    unsigned int mSessionId;
    NSArray *mDPAPDatabases;
    DPAPClientItemDataRequestHandler *mThumbRequestHandler;
    DPAPClientItemDataRequestHandler *mHiResRequestHandler;
    NSRecursiveLock *mLock;
    int mSessionSocketRetainCount;
    NSString *mAuthenticationString;
    int mAuthenticationAttempts;
    int mIsAuthenticating;
    DMAPClientRequest *mErrorRequest;
    HTTPMessage *mErrorMessage;
    DPAPClient *mDPAPClient;
    unsigned int mRevision;
    struct {
        char isPasswordRequired;
        unsigned short protocolMajorVersion;
        unsigned short protocolMinorVersion;
        unsigned short iPShMajorVersion;
        unsigned short iPShMinorVersion;
        unsigned short serverName[256];
        unsigned short rendezvousName[256];
        unsigned long long databaseID;
        unsigned long long machineID;
        unsigned char passwordProtected;
        unsigned int rendezvousServiceID;
    } mNetServiceInfo;
    BOOL mDidRunDiskSpaceErrorAlert;
    BOOL mIsIP4Server;
    BOOL mHasNotSentLogout;
    int mIsCompatible;
}

- (id)_authenticatedLoginTrap:(id)fp8;
- (id)OLD_STYLE_authenticationString;
- (id)authenticationString;
- (void)_closeSessionSocket;
- (void)cancelPendingItemDataRequests;
- (id)conditionResponseForClientRequest:(id)fp8 httpMessage:(id)fp12;
- (id)_conditionStringForClientRequest:(id)fp8 httpMessage:(id)fp12;
- (void)_dmapServiceErrorWithRequest:(id)fp8 httpMessage:(id)fp12;
- (void)dpapClientItemDataRequestHandlerDiskSpaceError:(id)fp8;
- (id)dpapDatabase;
- (id)dpapDatabases;
- (void)dealloc;
- (void)stop;
- (void)_deleteTempFiles;
- (id)dpapClient;
- (id)errorMessage;
- (id)errorRequest;
- (BOOL)faultDatabase;
- (id)_hiResItemDataRequestHandler;
- (id)info;
- (id)initWithNetService:(id)fp8 scheme:(id)fp12 dpapClient:(id)fp16;
- (BOOL)isiPhoto4Service;
- (BOOL)attemptToAuthenticate;
- (BOOL)isAuthenticated;
- (BOOL)isCompatible;
- (BOOL)isConnected;
- (BOOL)isPasswordRequired;
- (id)itemDataRequestHandlerForType:(id)fp8;
- (void)_lock;
- (id)name;
- (id)netService;
- (void)netServiceDidResolveAddress:(id)fp8;
- (void)netService:(id)fp8 didNotResolve:(id)fp12;
- (int)newSocket:(BOOL)fp8;
- (int)_newSocket;
- (int)portNumber;
- (void)releaseSessionSocket;
- (int)retainSessionSocket;
- (int)retainSessionSocket:(BOOL)fp8;
- (unsigned long)revision;
- (id)retain;
- (oneway void)release;
- (unsigned long)sessionId;
- (int)_sessionSocket;
- (void)_sessionSocketReadCallback;
- (void)_setDatabase:(id)fp8 xmlDictionary:(id)fp12;
- (void)setRevision:(unsigned long)fp8;
- (struct sockaddr_in)socketAddress;
- (id)tempPath;
- (id)_thumbItemDataRequestHandler;
- (void)_sendQuickLogout;
- (void)unload;
- (void)_unlock;
- (id)urlString;
- (unsigned long long)getMachineID;

@end

@interface DMAPClientUpdateRequest : DMAPClientRequest
{
    NSNumber *mRevisionNumber;
}

- (void)dealloc;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;

@end

@interface DPAPClient : NSObject
{
    NSNetServiceBrowser *mNetServiceBrowser;
    NSMutableDictionary *mDPAPServicesByKey;
    NSMutableSet *mResolvingDPAPServicesByKey;
    DPAPLock *mDPAPLock;
    id mDelegate;
}

- (void)dealloc;
- (void)stop;
- (void)dmapServiceDidResolve:(id)fp8;
- (void)dmapServiceDidNotResolve:(id)fp8;
- (void)dmapServiceError:(id)fp8;
- (id)dmapServicePassword:(id)fp8 attempt:(int)fp12;
- (id)dpapLock;
- (id)dpapServices;
- (id)initWithDelegate:(id)fp8;
- (id)_keyForNetService:(id)fp8;
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)unloadService:(id)fp8;
- (void)_unloadService:(id)fp8;
- (void)_removeServiceWithKey:(id)fp8;

@end

@interface DPAPClientPhoto : DPAPPhoto
{
    DPAPClientDatabase *mDPAPDatabase;
}

- (void)dealloc;
- (id)dpapDatabase;
- (id)initWithId:(id)fp8 dpapDatabase:(id)fp12;
- (struct CGSize)thumbSize;

@end

@interface DPAPClientDatabase : DPAPDatabase
{
    DMAPClientService *mDPAPService;
    NSNumber *mContainerCount;
    NSNumber *mItemCount;
    BOOL mDidRequestContainers;
    NSString *mThumbPath;
    NSString *mTempPath;
}

+ (void)initialize;
+ (unsigned long)_initialRevision;
+ (void)postItemDataUpdateNotificationWithName:(id)fp8 photos:(struct IPPhotoList *)fp12 waitUntilDone:(BOOL)fp16;
+ (void)_postNotification:(id)fp8;
- (id)_baseContainer;
- (id)baseContainer;
- (id)_containersForXMLDictionaries:(id)fp8;
- (void)dealloc;
- (id)_containersById;
- (id)dmapContainerCount;
- (id)_dmapId;
- (id)dmapId;
- (id)dmapItemCount;
- (id)dpapService;
- (id)hiResPath;
- (id)initWithService:(id)fp8;
- (id)_localItemWithId:(id)fp8;
- (BOOL)_requestContainers;
- (void)setContainerCount:(id)fp8;
- (void)setId:(id)fp8;
- (void)setItemCount:(id)fp8;
- (id)tempPath;
- (id)thumbPath;
- (void)unload;

@end

@interface DPAPClientContainer : DPAPContainer
{
    NSNumber *mItemCount;
    BOOL mDidRequestItems;
}

- (void)dealloc;
- (BOOL)_didRequestItems;
- (id)dmapItemCount;
- (id)_initItemsById;
- (id)initWithId:(id)fp8 dmapDatabase:(id)fp12 itemCount:(id)fp16;
- (void)_faultInItems;
- (id)_localItemWithId:(id)fp8;
- (BOOL)_requestItems;
- (void)setItemId:(id)fp8;
- (void)setItemCount:(id)fp8;
- (void)_setValuesInPhoto:(id)fp8 xmlDictionary:(id)fp12;

@end

@interface DPAPClientItemDataRequest : DMAPClientRequest
{
    DPAPClientContainer *mDPAPDatabase;
    NSString *mDataType;
    NSArray *mDMAPIdStrings;
    id mDelegate;
    BOOL mResult;
}

+ (int)_spoolBufferSize;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (void)dealloc;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (BOOL)_readTrailerForDataLength:(int)fp8 httpResponse:(id)fp12;
- (id)_relativePath;
- (BOOL)_readResponseContent;
- (id)_responseResult;
- (void)setDatabase:(id)fp8;
- (void)setMetaField:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setIdStrings:(id)fp8;
- (id)_terseIdentifier;

@end

@interface DPAPClientItemDataRequestHandler : NSObject <NSLocking>
{
    DPAPClientDatabase *mDPAPDatabase;
    NSString *mMetaField;
    NSRecursiveLock *mLock;
    NSMutableArray *mGroupStack;
    struct IPPhotoList *mOpenMetaGroup;
    struct _NSMapTable *mPhotoToGroupMap;
    _DPAPClientItemDataRequestGroupProcessor *mBlockingProcessor;
    NSMutableSet *mProcessors;
    int mItemsPerGroup;
    int mMaxProcessors;
}

+ (id)_dmapIdStringsForPhotos:(struct IPPhotoList *)fp8;
+ (int)_itemsPerGroup;
+ (int)_maxProcessorsPerService;
- (void)addRequestForDPAPPhoto:(struct IPPhotoInfo *)fp8 blocking:(BOOL)fp12;
- (void)_addRequestForDPAPPhotos:(struct IPPhotoList *)fp8 blocking:(BOOL)fp12 moreComing:(BOOL)fp16;
- (id)_blockingProcessor;
- (void)cancel;
- (void)closeGroup;
- (void)_coalescePendingRequestsIntoGroup:(id)fp8;
- (void)dealloc;
- (void)_didProcess:(id)fp8;
- (id)_dpapDatabase;
- (id)_dpapService;
- (id)initWithDatabase:(id)fp8 metaField:(id)fp12;
- (void)resetDatabase:(id)fp8;
- (void)lock;
- (void)openGroupWithCapacity:(int)fp8;
- (void)_processorIsIdle:(id)fp8;
- (void)unlock;
- (id)database;

@end

@interface _DPAPClientItemDataRequestGroupProcessor : NSObject
{
    DPAPClientItemDataRequestHandler *mHandler;
    _DPAPClientItemDataRequestGroup *mGroup;
    DPAPClientItemDataRequest *mRequest;
    struct _NSMapTable *mDMAPIdStringToPhotoMap;
    int mSocket;
    struct __sFILE *mFile;
}

- (void)dealloc;
- (void)dpapClientItemDataRequest:(id)fp8 didRead:(const char *)fp12 length:(int)fp16 dmapIdString:(id)fp20;
- (void)dpapClientItemDataRequest:(id)fp8 didReadDataForDMAPIdString:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 notFound:(id)fp12;
- (void)_requestSuccessForDMAPIdString:(id)fp8 metaField:(id)fp12;
- (void)_requestFailureForDMAPIdString:(id)fp8 metaField:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 readErrorForDMAPIdString:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 retry:(id)fp12;
- (BOOL)dpapClientItemDataRequest:(id)fp8 willReadDataForDMAPIdString:(id)fp12 length:(unsigned long)fp16;
- (struct IPPhotoInfo *)_dpapPhotoForDMAPIdString:(id)fp8;
- (id)group;
- (id)handler;
- (id)initWithHandler:(id)fp8;
- (BOOL)_isBlocking;
- (id)_dmapIdStringForPhoto:(struct IPPhotoInfo *)fp8;
- (void)_loadDMAPIdStringToPhotoMap;
- (void)processGroup:(id)fp8;
- (void)_requestFailure;

@end

@interface _DPAPClientItemDataRequestGroup : NSObject
{
    DPAPClientItemDataRequestHandler *mHandler;
    struct IPPhotoList *mPhotos;
    NSString *mMetaField;
    BOOL mIsBeingProcessed;
    int mCount;
}

- (void)addPhoto:(struct IPPhotoInfo *)fp8;
- (id)metaField;
- (void)dealloc;
- (void)requestCancelledForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)requestSuccessForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)requestFailureForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)cancel;
- (int)count;
- (struct IPPhotoList *)photos;
- (id)initWithHandler:(id)fp8 photos:(struct IPPhotoList *)fp12 metaField:(id)fp16;
- (BOOL)isBeingProcessed;
- (void)removePhoto:(struct IPPhotoInfo *)fp8;
- (void)setBeingProcessed:(BOOL)fp8;

@end

@interface DPAPPasswordPanelController : NSObject
{
    NSButtonCell *mOKButtonCell;
    NSSecureTextField *mPasswordText;
    NSTextField *mMessageText;
    NSPanel *mPanel;
}

- (void)cancelAction:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (id)init;
- (void)okAction:(id)fp8;
- (id)passwordForServiceNamed:(id)fp8 wasRejected:(BOOL)fp12;

@end

@interface DPAPPhoto : DPAPItem
{
    NSNumber *mImageRevision;
    NSNumber *mAspectRatio;
    NSNumber *mFileSize;
    NSNumber *mPixelWidth;
    NSNumber *mPixelHeight;
    NSNumber *mRating;
    NSString *mImageFilename;
    NSString *mThumbPath;
    NSString *mComments;
    NSDate *mDate;
    NSString *mImageFormat;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (id)initWithId:(id)fp8;
- (void)dealloc;
- (id)dpapFileSize;
- (id)dpapAspectRatio;
- (id)pixelHeight;
- (id)pixelWidth;
- (id)rating;
- (id)date;
- (id)imageFilename;
- (id)imageFormat;
- (id)comments;
- (id)imageRevision;
- (BOOL)isModified:(id)fp8;
- (void)setFileSize:(id)fp8;
- (void)setAspectRatio:(id)fp8;
- (void)setPixelWidth:(id)fp8;
- (void)setPixelHeight:(id)fp8;
- (void)setRating:(id)fp8;
- (void)setDate:(id)fp8;
- (void)setImageRevision:(id)fp8;
- (void)setImageFilename:(id)fp8;
- (void)setImageFormat:(id)fp8;
- (void)setComments:(id)fp8;
- (void)setThumbPath:(id)fp8;
- (id)thumbPath;

@end

@interface _DPAPMetaclass : NSObject <DMAPMetaclass>
{
    NSMutableDictionary *mSelectorsByField;
    Class mDPAPClass;
}

- (void)addField:(id)fp8 selector:(SEL)fp12;
- (void)dealloc;
- (CDAnonymousStruct21 *)_bindings:(CDAnonymousStruct21 *)fp8 metaFields:(id)fp12;
- (id)fields;
- (id)dmapValuesForMetaFields:(id)fp8 object:(id)fp12;
- (id)_dmapValuesForBindings:(CDAnonymousStruct21 *)fp8 object:(id)fp12;
- (id)dmapValuesForMetaFields:(id)fp8 objects:(id)fp12;
- (id)_selectorsByField;
- (void)_loadSelectorsByField;
- (id)initWithClass:(Class)fp8;

@end

@interface DPAPDatabase : DPAPItem <DMAPDatabase>
{
    NSMutableDictionary *mContainersById;
    DPAPContainer *mBaseContainer;
    unsigned int mRevision;
    DPAPLock *mLock;
}

+ (id)dmapMetaclass;
+ (unsigned long)_initialRevision;
- (void)addContainer:(id)fp8;
- (id)baseContainer;
- (id)_containersById;
- (id)containerWithId:(id)fp8;
- (void)dealloc;
- (id)dmapContainers;
- (id)dmapContainerCount;
- (id)dmapItemCount;
- (id)dmapItems;
- (id)dpapLock;
- (id)_initContainersById;
- (id)initWithId:(id)fp8;
- (id)itemWithId:(id)fp8;
- (unsigned long)revision;
- (void)setBaseContainer:(id)fp8;
- (void)setRevision:(unsigned long)fp8;

@end

@interface DPAPContainer : DPAPItem <DMAPContainer>
{
    NSObject *mDMAPDatabase;
    NSMutableDictionary *mItemsById;
    NSArray *mOrderedItems;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (void)addItem:(id)fp8;
- (void)dealloc;
- (id)dmapDatabase;
- (id)dmapItems;
- (id)dmapItemCount;
- (void)_faultInItems;
- (id)initWithId:(id)fp8 dmapDatabase:(id)fp12;
- (BOOL)isBaseContainer;
- (id)itemWithId:(id)fp8;
- (id)itemWithIdString:(id)fp8;
- (id)orderedItems;
- (void)setOrderedItems:(id)fp8;

@end

@interface DPAPItem : NSObject <DMAPItem>
{
    NSNumber *mId;
    NSString *mName;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (void)dealloc;
- (id)dmapMetaclass;
- (id)dmapId;
- (id)dmapIdString;
- (unsigned long)dmapIdU32;
- (id)dmapName;
- (id)initWithId:(id)fp8;
- (BOOL)isModified:(id)fp8;
- (void)setName:(id)fp8;

@end

@interface DPAPLocker : NSObject
{
    DPAPLock *mObjectLock;
    id mObject;
}

- (id)dpapLock;
- (id)_dpapLockResult;
- (id)initWithObject:(id)fp8;
- (id)object;

@end

@interface DPAPLock : NSObject
{
    struct _NSMapTable *mReadThreadToLockCountMap;
    NSThread *mWriteThread;
    NSLock *mAccessLock;
    unsigned int mWriteThreadLockCount;
    BOOL mIsDebugMode;
}

- (void)dealloc;
- (id)init;
- (void)setDebugMode:(BOOL)fp8;
- (id)readLock;
- (id)readLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;

@end

@interface NSObject (DPAPLocking) <DPAPLocking>
- (id)dpapLock;
- (id)_dpapLockResult;
- (id)readLock;
- (id)readLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;
@end

@interface DPAPServiceController : NSObject
{
    NSTask *mServiceTask;
    id mServiceProxy;
    BOOL mInShutdown;
    BOOL mIsPseudoTask;
    BOOL mDidRetryServiceInitialization;
}

+ (id)_defaultsBasedServiceName;
- (void)_appWaitTimerDidFire:(id)fp8;
- (void)_clearServiceIvars;
- (void)dealloc;
- (void)defaultsDidChange;
- (void)_handleServiceFailure;
- (id)init;
- (BOOL)_initServiceProxy;
- (void)_initServiceTaskInMainThread;
- (BOOL)_isAlbumSpecific;
- (BOOL)isService;
- (id)serviceName;
- (id)_serviceLaunchArguments;
- (id)_serviceLaunchPath;
- (void)_serviceTaskDidTerminate:(id)fp8;
- (int)sessionCount;
- (BOOL)_performProxySelector:(SEL)fp8;
- (void)shutdownService;
- (void)startService;
- (void)_xmlDidWrite:(id)fp8;

@end

@interface HTTP : NSObject
{
}

+ (BOOL)_cfConnect:(int)fp8 socketAddress:(struct sockaddr_in *)fp12;
+ (void)closeSocket:(int)fp8 object:(id)fp12 selector:(SEL)fp16;
+ (BOOL)configureSIGPIPEHandler;
+ (BOOL)configureSIGINTHandler;
+ (id)hostNameForSocketAddress:(struct sockaddr_in)fp8;
+ (void)initialize;
+ (BOOL)isSharingFirewallBlockingPort:(int)fp8;
+ (int)newSocketToURL:(id)fp8;
+ (int)_socketToHostWithName:(id)fp8 port:(int)fp12;

@end

@interface HTTPMessage : NSObject
{
    NSMutableData *mReadHeaderData;
    NSMutableDictionary *mHeaderValuesByField;
    NSMutableData *mContentData;
    NSString *mProtocol;
    NSString *mResultString;
    NSURL *mURL;
    int mChunkSize;
    int mWriteTimeout;
    struct __sFILE *mEchoFile;
    int mError;
}

+ (int)_chunkSize;
+ (id)httpMessageOnSocket:(int)fp8 timeout:(int)fp12;
+ (id)httpMessageOnSocket:(int)fp8 timeout:(int)fp12 readContent:(BOOL)fp16;
+ (id)stringForError:(int)fp8;
- (id)contentData;
- (void)dealloc;
- (const char *)_endOfHeadersInBytes:(const char *)fp8 length:(int)fp12;
- (int)error;
- (id)headerData;
- (id)_headerValuesByField;
- (id)headerValueForField:(id)fp8;
- (id)init;
- (id)_lineZero;
- (BOOL)_parseReadLineZero:(id)fp8;
- (BOOL)_parseReadHeaderData;
- (id)protocol;
- (int)readFromSocket:(int)fp8 buffer:(char *)fp12 maxLength:(int)fp16 timeout:(int)fp20;
- (int)readFromSocket:(int)fp8 buffer:(char *)fp12 reqLength:(int)fp16 timeout:(int)fp20;
- (BOOL)readFromSocket:(int)fp8 timeout:(int)fp12;
- (BOOL)readFromSocket:(int)fp8 timeout:(int)fp12 readContent:(BOOL)fp16;
- (id)resultString;
- (void)setContentData:(id)fp8;
- (void)setEchoFile:(struct __sFILE *)fp8;
- (void)setError:(int)fp8;
- (void)setHeaderValue:(id)fp8 forField:(id)fp12;
- (void)setProtocol:(id)fp8;
- (void)setURL:(id)fp8;
- (id)stringForHeaders;
- (id)url;
- (BOOL)_willWriteToSocket:(int)fp8;
- (BOOL)writeToSocket:(int)fp8;
- (BOOL)write:(const char *)fp8 length:(int)fp12 socket:(int)fp16;
- (BOOL)_writeBodyToSocket:(int)fp8;
- (BOOL)writeDMAPHeader:(unsigned long)fp8 valueLength:(unsigned long)fp12 socket:(int)fp16;
- (BOOL)writeDMAPInt8:(unsigned long)fp8 value:(unsigned char)fp12 socket:(int)fp16;
- (BOOL)writeDMAPInt32:(unsigned long)fp8 value:(unsigned long)fp12 socket:(int)fp16;
- (BOOL)_writeData:(id)fp8 socket:(int)fp12;
- (BOOL)writeHeaderToSocket:(int)fp8;
- (BOOL)_writeString:(id)fp8 socket:(int)fp12;
- (id)description;

@end

@interface HTTPRequest : HTTPMessage
{
    NSString *mMethod;
    NSDictionary *mParsedArguments;
}

+ (id)httpRequestOnSocket:(int)fp8 timeout:(int)fp12 baseURL:(id)fp16;
+ (id)responseFromURLWithString:(id)fp8 timeout:(int)fp12;
+ (id)responseFromURL:(id)fp8 socket:(int)fp12 timeout:(int)fp16;
- (void)dealloc;
- (id)initWithURL:(id)fp8;
- (id)_lineZero;
- (id)parsedArguments;
- (id)parsedArgumentWithName:(id)fp8;
- (BOOL)_parseReadLineZero:(id)fp8;
- (void)setMethod:(id)fp8;
- (BOOL)_willWriteToSocket:(int)fp8;

@end

@interface HTTPResponse : HTTPMessage
{
    int mStatus;
}

- (id)_lineZero;
- (BOOL)_parseReadLineZero:(id)fp8;
- (void)setError:(int)fp8;
- (void)setStatus:(int)fp8;
- (int)status;

@end

@interface NetServicesBundleLoader : NSObject
{
}

+ (id)services;
+ (id)servicesEnumerator;
+ (id)servicesByTag;
+ (id)serviceWithTag:(int)fp8;
+ (id)imageForServiceWithTag:(int)fp8;
+ (id)tags;
+ (id)tagsAsStrings;

@end

@interface Album : NSObject <NSCoding>
{
    ImageDB *mDB;
    unsigned int mKey;
    BOOL mPersistent;
    NSString *mName;
    AttributeMgr *mAttributes;
    KeyMgr *mKeysX;
    struct IPAlbumList *mChildren;
    NSString *mUID;
    int mSortOrder;
    int mOriginalSortOrder;
    int mSortDirection;
    int mSortHonorRolls;
    int mOrder;
    BOOL mVisible;
    BOOL mVisibleIfNoChildren;
    BOOL mWasShowingChildrenWhenArchived;
    float mLastScrollFloat;
    long mLastScrollLong;
    Book *mOldBook;
    unsigned int _representedAlbumKeyForLoading;
    NSString *mCachedNameWithCount;
    unsigned int mCachedNameWithCountCount;
    float mRowHeight;
    int mAnimateState;
    BOOL mIsModified;
    unsigned long long mChangedFields;
    struct IPPhotoList *mChangedPhotos;
    struct IPPhotoList *mSortedPhotos;
    int mIsSorted;
    NSMutableDictionary *mVisiblePhotos;
    int mPreviousVisibleCount;
    Album *mRepresentedAlbum;
    unsigned long long mGroup;
    BOOL mIsMaskable;
    BOOL mIsMasked;
    BOOL mShowInContext;
    BOOL mHasBeenSanityChecked;
    BOOL mIsRemovable;
    BOOL mAllowsModification;
    BOOL mAllowsReorder;
    BOOL mIgnoresRolls;
    int mEjectAction;
    NSString *mEjectPath;
    int mAltEjectAction;
    NSString *mAltEjectPath;
    unsigned int mAcceptsInternalDrop;
    unsigned int mAcceptsExternalDrop;
    unsigned int mAcceptsAlbumDrop;
    BOOL mDroppedAlbumsBecomeChildren;
    Album *mParent;
    struct IPAlbumList *mVisibleChildrenCache;
    BOOL mShowsChildren;
    BOOL mShowRolls;
    BOOL mShowDates;
    NSString *mPhotocastURL;
    NSMutableDictionary *mYearHeaders;
    struct KeySet *mClosedRolls;
    struct KeySet *mClosedStacks;
    NSString *mFileName;
    BOOL mIsShared;
    unsigned long mMarkValue;
    unsigned long mFirstVisibleKey;
    BOOL mDeepsDeleteHACKFlag;
    BOOL mWantsProgress;
    BOOL mProgressIsCancelable;
    IPHProgressIndicator *mProgressIndicator;
    float mProgressValue;
    BOOL mProgressStatistics;
    NSDate *mUpgradeStartTime;
    NSDate *mLastUpdateTime;
    double mLastTimeRemaining;
    struct list<float, std::allocator<float>> *mLastNUpgradedPercent;
    struct list<NSDate*, std::allocator<NSDate*>> *mLastNUpgradedTime;
    NSString *mTimeRemainingText;
    struct MessageReceiver mChildMessageReceiver;
    struct MessageReceiver mMessageReceiver;
    struct MessageSender mMessageSender;
    BOOL mContentsChanged;
    BOOL mNameSort;
    BOOL mObscured;
    struct IPPhotoList *mPhotosX;
}

+ (void)initialize;
+ (struct IPAlbumList *)flattenAlbumList:(struct IPAlbumList *)fp8;
+ (struct IPPhotoList *)uniquePhotosFromAlbums:(struct IPAlbumList *)fp8;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16;
- (id)initWithAlbum:(id)fp8;
- (id)makeCopyWithDB:(BOOL)fp8 staticCopy:(BOOL)fp12;
- (void)dealloc;
- (void)prepareForRelease;
- (id)pasteboardRepresentation;
- (void)_redoEnsureAlbumHasAllStackMembers:(id)fp8;
- (void)_undoEnsureAlbumHasAllStackMembers:(id)fp8;
- (void)eventHiddenOverrideChanged:(id)fp8;
- (void)ensureAlbumHasAllStackMembers:(struct IPStack *)fp8;
- (void)setupDefaultNotifications;
- (BOOL)isYearOpen:(int)fp8 month:(int)fp12 day:(int)fp16;
- (void)setYear:(int)fp8 month:(int)fp12 day:(int)fp16 open:(BOOL)fp20;
- (BOOL)isRollOpenForKey:(unsigned long)fp8;
- (void)setRollOpen:(BOOL)fp8 key:(unsigned long)fp12;
- (BOOL)isRollOpenForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setRollOpen:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (void)forgetOpenStateForRollWithKey:(unsigned long)fp8;
- (BOOL)isStackOpenForKey:(unsigned long)fp8;
- (void)setStackOpen:(BOOL)fp8 key:(unsigned long)fp12;
- (BOOL)isStackOpenForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setStackOpen:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (void)copyStackOpenStateFromAlbum:(id)fp8;
- (void)copyStackOpenStateFromAlbum:(id)fp8 forPhotos:(struct IPPhotoList *)fp12;
- (void)forgetOpenStateForStackWithKey:(unsigned long)fp8;
- (BOOL)wantsProgress;
- (void)setWantsProgress:(BOOL)fp8;
- (void)albumProgressCanceled:(id)fp8;
- (BOOL)progressIsCancelable;
- (void)setProgressIsCancelable:(BOOL)fp8;
- (Class)progressIndicatorClass;
- (id)progressIndicator;
- (void)setProgressIndicator:(id)fp8;
- (double)progressValue;
- (void)setProgressValue:(double)fp8;
- (void)_updateProgress:(id)fp8;
- (void)startProgressStatistics;
- (void)stopProgressStatistics;
- (void)markProgressStatistics:(double)fp8;
- (id)progressTimeRemaining;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;
- (id)altEjectIcon:(BOOL)fp8;
- (id)altEjectClickedIcon:(BOOL)fp8;
- (id)altEjectHighlightedIcon:(BOOL)fp8;
- (struct MessageSender *)messageSender;
- (void)contentsChanged:(BOOL)fp8;
- (void)_noteChangedFields:(unsigned long long)fp8;
- (void)doneWithChanges;
- (BOOL)doneWithChanges:(BOOL)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_requireWriteTransaction;
- (void)_requireTransaction;
- (void)releaseChildren;
- (BOOL)hasBeenSanityChecked;
- (void)setHasBeenSanityChecked:(BOOL)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)uid;
- (void)setUID:(id)fp8;
- (BOOL)isObscured;
- (void)setObscured:(BOOL)fp8;
- (unsigned long)representedAlbumKeyForLoading;
- (void)setRepresentedAlbumKeyForLoading:(unsigned long)fp8;
- (id)representedAlbum;
- (void)setRepresentedAlbum:(id)fp8;
- (id)parent;
- (id)parentOrSelf;
- (void)_setParent:(id)fp8;
- (void)setParent:(id)fp8;
- (struct IPAlbumList *)children;
- (void)_setChildren:(struct IPAlbumList *)fp8;
- (void)_setNeedsToRecomputeVisChildren;
- (void)_recomputeVisChildren;
- (struct IPAlbumList *)namedChildren;
- (int)numberOfVisibleChildren;
- (struct IPAlbumList *)visibleChildren;
- (id)visibleChildAtIndex:(int)fp8;
- (struct IPAlbumList *)visibleChildrenInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)persistentChildren;
- (void)addChild:(id)fp8;
- (void)removeChild:(id)fp8;
- (BOOL)hasChild:(id)fp8;
- (BOOL)showsChildren;
- (void)setShowsChildren:(BOOL)fp8;
- (BOOL)showRolls;
- (void)setShowRolls:(BOOL)fp8;
- (BOOL)showDates;
- (void)setShowDates:(BOOL)fp8;
- (BOOL)showingChildren;
- (BOOL)wasShowingChildrenWhenArchived;
- (void)setWasShowingChildrenWhenArchived:(BOOL)fp8;
- (BOOL)hasName;
- (id)_nameNoRecursion;
- (id)name;
- (void)_setNameRaw:(id)fp8;
- (void)_setName:(id)fp8;
- (BOOL)isPhotocasted;
- (void)_albumForcedUnpub:(id)fp8 error:(id)fp12;
- (void)unpublishPhotocast;
- (id)albumType;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (void)setName:(id)fp8;
- (id)cachedNameWithCount;
- (id)nameWithCount;
- (id)nameWithCountAlways;
- (id)iconUsingLargeAppearance:(BOOL)fp8;
- (id)db;
- (void)remapKeys:(struct KeyRemapArray *)fp8;
- (void)rebuildKeys;
- (void)setDB:(id)fp8;
- (void)checkForUIDDuplicates;
- (unsigned long long)group;
- (BOOL)isInGroup:(unsigned long long)fp8;
- (void)setGroup:(unsigned long long)fp8;
- (unsigned long long)defaultGroup;
- (BOOL)isInSubscriptionGroup;
- (BOOL)isInDPAPGroup;
- (BOOL)isInImportGroup;
- (BOOL)isDescendentInGroup:(unsigned long long)fp8;
- (BOOL)isYearAlbum;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)mark;
- (void)unMark;
- (unsigned long)markValue;
- (BOOL)isShared;
- (void)setShared:(BOOL)fp8;
- (BOOL)isMaskable;
- (void)setIsMaskable:(BOOL)fp8;
- (BOOL)isMasked;
- (void)setIsMasked:(BOOL)fp8;
- (BOOL)isVisible;
- (void)setVisible:(BOOL)fp8;
- (BOOL)isVisibleIfNoChildren;
- (void)setVisibleIfNoChildren:(BOOL)fp8;
- (BOOL)isPersistent;
- (void)setPersistent:(BOOL)fp8;
- (id)fileName;
- (void)setFileName:(id)fp8;
- (void)_updateFileName;
- (int)order;
- (void)_setOrder:(int)fp8;
- (void)setOrder:(int)fp8;
- (int)compareOrder:(id)fp8;
- (int)compareOrderName:(id)fp8;
- (BOOL)nameSort;
- (void)setNameSort:(BOOL)fp8;
- (void)setOldBook:(id)fp8;
- (id)oldBook;
- (id)oldBookDesignName;
- (BOOL)hasOldBook;
- (BOOL)inDragMusicEvent;
- (void)validateMusicChange:(id)fp8;
- (id)slideshowSettingsXML;
- (void)setSlideshowSettingsXML:(id)fp8;
- (void)setEnableBackgroundMusic:(BOOL)fp8;
- (BOOL)backgroundMusicEnabled;
- (void)setSlideShowSongPath:(id)fp8;
- (id)actualSlideShowSongPath;
- (id)slideShowSongPath;
- (void)setSlideShowPlaylistName:(id)fp8;
- (id)actualSlideShowPlaylistName;
- (id)slideShowPlaylistName;
- (id)slideShowSongTitle;
- (void)setSecondsPerSlide:(int)fp8;
- (int)secondsPerSlide;
- (void)setRepeatSlideShow:(BOOL)fp8;
- (BOOL)repeatSlideShow;
- (void)setRandomSlideShow:(BOOL)fp8;
- (BOOL)randomSlideShow;
- (void)setSlideShowUseTitles:(BOOL)fp8;
- (BOOL)slideShowUseTitles;
- (void)setSlideShowUseRankings:(BOOL)fp8;
- (BOOL)slideShowUseRankings;
- (void)setSlideShowAutoPanAndZoom:(BOOL)fp8;
- (BOOL)slideShowAutoPanAndZoom;
- (void)setSlideShowShowControls:(BOOL)fp8;
- (BOOL)slideShowShowControls;
- (void)setSlideShowFillScreen:(BOOL)fp8;
- (BOOL)slideShowFillScreen;
- (BOOL)reducedSlideshowOptions;
- (id)slideshowPreviewDelegate;
- (void)setSlideShowTransitionName:(id)fp8;
- (id)slideShowTransitionName;
- (void)setSlideshowTransitionIdentifier:(id)fp8;
- (id)slideshowTransitionIdentifier;
- (void)setSlideShowTransitionDirection:(int)fp8;
- (int)slideShowTransitionDirection;
- (id)slideShowTransitionForExportToIDVD;
- (id)slideShowTransitionDirectionForExportToIDVD;
- (void)setSlideShowTransitionSpeed:(float)fp8;
- (float)slideShowTransitionSpeed;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (id)attributes;
- (id)comments;
- (void)setComments:(id)fp8;
- (id)listDescription;
- (id)description;
- (unsigned long long)albumSize:(unsigned long long)fp8;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8 userHidden:(int)fp12;
- (struct IPPhotoInfo *)photoAtIndex:(long)fp8;
- (long)visibleIndexOfPhotoNoMovies:(struct IPPhotoInfo *)fp8;
- (long)visibleIndexOfPhotoNoMovies:(struct IPPhotoInfo *)fp8 userHidden:(int)fp12;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8 userHidden:(int)fp12;
- (long)indexOfPhoto:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (struct IPPhotoList *)unsortedArray;
- (void)_installPhotos:(struct IPPhotoList *)fp8;
- (struct IPPhotoList *)_sortedArrayNoCopy;
- (struct IPPhotoList *)array;
- (BOOL)showInContext;
- (void)setShowInContext:(BOOL)fp8;
- (BOOL)ignoresPhotoVisibility;
- (BOOL)isEnabled;
- (BOOL)isSelectable;
- (BOOL)isModified;
- (void)setAllowsModification:(BOOL)fp8;
- (BOOL)allowsModificationFlag;
- (BOOL)allowsModification;
- (BOOL)allowsMovies;
- (BOOL)needsHiddenPhotosVisible;
- (void)setAllowsReorder:(BOOL)fp8;
- (BOOL)allowsReorderFlag;
- (BOOL)allowsReorder;
- (BOOL)isReadOnlyRootArchive;
- (BOOL)isEventAlbum:(BOOL)fp8;
- (BOOL)isDetailAlbum:(BOOL)fp8;
- (BOOL)ignoresRolls;
- (void)setIgnoresRolls:(BOOL)fp8;
- (BOOL)isRemovable;
- (void)setIsRemovable:(BOOL)fp8;
- (void)willBeRemoved;
- (void)willUndoRemove;
- (BOOL)isEjectable;
- (void)eject;
- (int)ejectAction;
- (void)setEjectAction:(int)fp8;
- (id)ejectPath;
- (void)setEjectPath:(id)fp8;
- (BOOL)isAltEjectable;
- (void)altEject;
- (int)altEjectAction;
- (void)setAltEjectAction:(int)fp8;
- (id)altEjectPath;
- (void)setAltEjectPath:(id)fp8;
- (unsigned int)acceptsInternalDrop;
- (void)setAcceptsInternalDrop:(unsigned int)fp8;
- (unsigned int)acceptsExternalDrop;
- (void)setAcceptsExternalDrop:(unsigned int)fp8;
- (unsigned int)acceptsAlbumDrop;
- (void)setAcceptsAlbumDrop:(unsigned int)fp8;
- (BOOL)droppedAlbumsBecomeChildren;
- (void)setDroppedAlbumsBecomeChildren:(BOOL)fp8;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;
- (int)sortOrder;
- (void)setSortOrder:(int)fp8;
- (int)originalSortOrder;
- (void)setOriginalSortOrder:(int)fp8;
- (int)sortDirection;
- (void)setSortDirection:(int)fp8;
- (int)sortHonorRolls;
- (void)setSortHonorRolls:(int)fp8;
- (BOOL)isSorted;
- (void)_clearSortedCache;
- (void)clearSort;
- (unsigned long long)sortingChangeMask;
- (void)_keepStacksOrdered;
- (void)shuffleOrder;
- (void)sortBy:(int)fp8 direction:(int)fp12 honorRolls:(int)fp16 applyCurrentSort:(BOOL)fp20;
- (float)lastScrollFloat;
- (void)setLastScrollFloat:(float)fp8;
- (long)lastScrollLong;
- (void)setLastScrollLong:(long)fp8;
- (void)rebuild;
- (void)resortIfNeeded;
- (void)resort;
- (void)needsToResort:(BOOL)fp8;
- (id)keys;
- (long)maxPhotos;
- (void)alertMaxPhotos;
- (struct IPPhotoList *)uniquePhotos:(struct IPPhotoList *)fp8;
- (void)addSelfAndChildrenToAlbumList:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)flattenAlbum;
- (unsigned int)count;
- (unsigned int)visibleEventCount;
- (unsigned int)visibleEventCount:(int)fp8;
- (unsigned int)visibleCount;
- (unsigned int)visibleCount:(int)fp8;
- (unsigned int)visibleStillPhotoCount;
- (unsigned int)visibleStillPhotoCount:(int)fp8;
- (unsigned int)visibleMovieCount;
- (unsigned int)visibleMovieCount:(int)fp8;
- (struct IPPhotoList *)_visiblePhotosNoCopy;
- (struct IPPhotoList *)_visiblePhotosNoCopy:(int)fp8;
- (struct IPPhotoList *)visiblePhotos;
- (struct IPPhotoList *)visiblePhotos:(int)fp8;
- (struct IPPhotoList *)visibleStillPhotos;
- (struct IPPhotoList *)visibleStillPhotos:(int)fp8;
- (struct IPPhotoList *)visibleMovies;
- (struct IPPhotoList *)visibleMovies:(int)fp8;
- (struct IPPhotoList *)unsortedVisiblePhotos;
- (struct IPPhotoList *)unsortedVisiblePhotos:(int)fp8;
- (BOOL)hasPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)hasAnyPhotos:(struct IPPhotoList *)fp8;
- (BOOL)hasAllPhotos:(struct IPPhotoList *)fp8;
- (BOOL)hasVisibleChildren;
- (struct IPPhotoInfo *)photoWithTitle:(id)fp8;
- (struct IPPhotoInfo *)photoWithUID:(id)fp8;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8;
- (void)add:(struct IPPhotoInfo *)fp8;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (unsigned long)keyOfFirstVisibleImage;
- (void)setKeyOfFirstVisibleImage:(unsigned long)fp8;
- (void)addWithArray:(struct IPPhotoList *)fp8;
- (void)addWithPLHolderArray:(id)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (void)movePhotos:(struct IPPhotoList *)fp8 beforePhoto:(struct IPPhotoInfo *)fp12;
- (void)movePhotoFromIndex:(int)fp8 toIndex:(int)fp12;
- (BOOL)remove:(struct IPPhotoInfo *)fp8;
- (BOOL)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeWithArray:(struct IPPhotoList *)fp8;
- (void)removeAll;
- (void)markAsModified;
- (void)clearModified;
- (void)_notifyChangedFields:(unsigned long long)fp8 affectedPhoto:(struct IPPhotoInfo *)fp16;
- (struct IPPhotoList *)findPhotosWithFilename:(id)fp8;
- (struct IPPhotoList *)findPhotosWithFilenameAndExtension:(id)fp8;
- (void)_setAttributes:(id)fp8;
- (void)_addChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removeChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_changedPhotos:(struct PhotosCountMap *)fp8;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (struct PhotosCountMap *)photosCountMap;
- (void)_reloadPhotos;
- (void)_setKeys:(id)fp8;
- (id)publishSettings;
- (void)setPublishSettings:(id)fp8;
- (id)publishSelection:(struct IPPhotoList *)fp8 withTitle:(id)fp12 forAddAlbum:(BOOL)fp16;
- (void)_publishSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)canPublish;
- (id)aeKeywords;
- (id)aeVisibleImageRecs;
- (id)aeChildren;
- (id)aeVisiblePhotos;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (id)aeParent;
- (id)handleSelectScriptCommand:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (id)handleImportScriptCommand:(id)fp8;
- (void)photoViewerLoadHook;
- (id)uniqueID;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;

@end

@interface Album (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface KeywordAlbum : DynamicAlbum
{
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)setIndex:(struct IPPhotoList *)fp8;

@end

@interface AlbumMgr : NSObject <ThreadManagerTask>
{
    DBDocument *mDocument;
    ImageDB *mDB;
    struct IPAlbumList *mAlbumList;
    struct MessageSender mMessageSender;
    struct MessageReceiver mMessageReceiver;
    struct MessageReceiver mDBMessageReceiver;
    BOOL mHasSpecialAlbums;
    BOOL mReadOnly;
    BOOL mIsWritingXMLFile;
    BOOL mNeedsSpotlightFlagFile;
    BOOL mNeedsToWriteXMLFile;
    BOOL mIncludeCountWithName;
    BOOL mShowLastNMonthsAlbum;
    BOOL mShowLastNRollsAlbum;
    NSTimer *mXMLTimer;
    int mXMLErrorCode;
    RotationAlbum *mRotationAlbum;
    struct IPAlbumList *mCameraAlbums;
    FilterAlbum *mLastNRollsAlbum;
    LatestEventAlbum *mEmptyEventAlbum;
    FilterAlbum *mLastNMonthsAlbum;
    FilterAlbum *mEventsAlbum;
    BOOL mArchiveAlbumInitialized;
    BOOL mLastImportInitialized;
    BOOL mRotationInitialized;
    BOOL mTrashInitialized;
    struct IPAlbumList *mYearAlbums;
    struct IPAlbumList *mRecentRolls;
    struct KeyRemapArray *mKeyRemapArray;
    BOOL mRebuildKeys;
    BOOL mRebuildArchiveAlbum;
    BOOL mNeedsRecentUpdate;
    BOOL mNeedsLastImportUpdate;
    BOOL mNeedsEmptyEventUpdate;
}

+ (void)initialize;
+ (void)writeLibraryLocationToGlobalPrefs:(id)fp8;
+ (double)_xmlWaitInterval;
- (id)init;
- (void)dealloc;
- (void)prepareForRelease;
- (id)initWithDocument:(id)fp8 useSpecialAlbums:(BOOL)fp12 rebuildKeys:(BOOL)fp16 rebuildArchiveAlbum:(BOOL)fp20;
- (void)_scrubTrash;
- (id)initWithNetworkDocument:(id)fp8;
- (void)delayedInitialization;
- (void)setNeedsRecentUpdate:(BOOL)fp8;
- (BOOL)needsRecentUpdate;
- (void)setNeedsLastImportUpdate:(BOOL)fp8;
- (BOOL)needsLastImportUpdate;
- (void)setNeedsEmptyEventUpdate:(BOOL)fp8;
- (BOOL)needsEmptyEventUpdate;
- (struct MessageSender *)messageSender;
- (id)db;
- (void)setDB:(id)fp8;
- (void)convertRollAlbums;
- (void)reallyEnsureRollAlbums;
- (void)ensureRollAlbums;
- (struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> *)firstNRollAlbums:(long)fp8;
- (struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> *)lastNRollAlbums:(long)fp8;
- (struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollNMinus:(long)fp8;
- (struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollWithKey:(unsigned long)fp8;
- (struct IPRoll *)rollObjectNMinus:(long)fp8;
- (struct map<Key, IPRoll*, std::less<long unsigned int>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollAlbumsContainingText:(id)fp8 useSpaceSeparators:(BOOL)fp12 matchAll:(BOOL)fp16;
- (void)setSingletonAlbum:(id)fp8 group:(unsigned long long)fp12;
- (void)_setRotationAlbum:(id)fp8;
- (id)archiveAlbum;
- (id)launchAlbum;
- (id)rotationAlbum;
- (id)trashAlbum;
- (id)shelfAlbum;
- (void)resetOrganizeAlbums;
- (id)lastNMonthsAlbum;
- (void)tickleLastNRollsAlbum;
- (void)_initializeLastNMonthsAlbum;
- (void)_updateLastNMonthsAlbum;
- (id)lastNRollsAlbum;
- (void)_initializeLastNRollsAlbum;
- (void)_updateLastNRollsAlbum;
- (BOOL)emptyEventAlbumVisible;
- (id)emptyEventAlbum;
- (void)_initializeEmptyEventAlbum;
- (void)_updateEmptyEventAlbum;
- (id)eventsAlbum;
- (void)_initializeEventsAlbum;
- (struct IPAlbumList *)recentRolls;
- (void)_initializeRecentRollsAlbums;
- (void)_updateRecentRollsAlbums;
- (void)initializeLazyAlbums;
- (void)initializeYearAlbumsForArchive:(id)fp8;
- (struct IPAlbumList *)yearAlbums;
- (BOOL)readOnly;
- (void)setReadOnly:(BOOL)fp8;
- (unsigned int)countAlbumsInGroup:(unsigned long long)fp8 visibleOnly:(BOOL)fp16;
- (id)albumAtIndex:(unsigned int)fp8 inGroup:(unsigned long long)fp12 visibleOnly:(BOOL)fp20;
- (int)indexOfAlbum:(id)fp8 inGroup:(unsigned long long)fp12 visibleOnly:(BOOL)fp20;
- (void)addAlbum:(id)fp8 withName:(id)fp12 afterAlbum:(id)fp16;
- (void)addAlbum:(id)fp8 afterAlbum:(id)fp12;
- (void)moveAlbum:(id)fp8 afterAlbum:(id)fp12;
- (void)_addAlbum:(id)fp8 atIndex:(int)fp12;
- (void)addAlbums:(struct IPAlbumList *)fp8;
- (id)albumAtIndex:(unsigned int)fp8;
- (BOOL)hasAlbum:(id)fp8;
- (int)indexOfAlbum:(id)fp8;
- (id)find:(id)fp8;
- (BOOL)_findDupes:(id)fp8;
- (struct IPAlbumList *)findAlbums:(id)fp8 withOperation:(int)fp12 inGroup:(unsigned long long)fp16;
- (id)findWithSameCapitalization:(id)fp8;
- (void)removeAlbum:(id)fp8 fromDisk:(BOOL)fp12 notify:(BOOL)fp16;
- (void)_removeAlbumRec:(id)fp8;
- (void)_removeAlbumRecs:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)albumRecs;
- (void)setAlbumRecs:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)albumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allLocalAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allAlbumsInGroup:(unsigned long long)fp8;
- (void)dumpAlbumsToConsole;
- (void)postLaunchCleanup;
- (void)_dumpAlbum:(id)fp8 depth:(int)fp12;
- (struct IPAlbumList *)allVisibleAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)visibleAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allVisibleLocalAlbumsInGroup:(unsigned long long)fp8;
- (id)singletonInGroup:(unsigned long long)fp8;
- (int)startIndexOfGroup:(unsigned long long)fp8;
- (int)endIndexOfGroup:(unsigned long long)fp8;
- (id)firstAlbumInGroup:(unsigned long long)fp8;
- (id)lastAlbumInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allAlbums;
- (void)setStackOpenEverywhere:(BOOL)fp8 key:(unsigned long)fp12;
- (void)setStackOpenEverywhere:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (id)firstAlbumContainingPhoto:(struct IPPhotoInfo *)fp8;
- (id)firstSubscriptionAlbumContainingPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)isModified;
- (id)uniqueNameFromString:(id)fp8;
- (id)uniqueNameFromStringIfNeeded:(id)fp8;
- (BOOL)albumExistsWithName:(id)fp8;
- (BOOL)albumExistsWithNameWithSameCapitalization:(id)fp8;
- (id)printerAlbum;
- (id)readAlbum:(id)fp8;
- (void)addImageIfNeeded:(struct IPPhotoInfo *)fp8 toXMLDict:(id)fp12 minCount:(int)fp16;
- (void)addAlbumData:(id)fp8 toXMLDict:(id)fp12 baseDict:(id)fp16;
- (id)rootRelativeAlbumFolder;
- (id)albumFolder;
- (id)archiveAlbumPath;
- (id)rotationAlbumPath;
- (id)trashAlbumPath;
- (id)relativeArchiveAlbumPath;
- (id)relativeRotationAlbumPath;
- (id)relativeTrashAlbumPath;
- (id)validateName:(id)fp8 forAlbum:(id)fp12;
- (BOOL)includeCountWithName;
- (void)setIncludeCountWithName:(BOOL)fp8;
- (id)albumData;
- (void)setKeyRemapArray:(struct KeyRemapArray *)fp8;
- (void)setRebuildKeys:(BOOL)fp8;
- (void)readAlbums:(BOOL)fp8;
- (void)timerWriteXML:(id)fp8;
- (id)_canTerminate;
- (void)sortAlbums:(BOOL)fp8;
- (void)nameSortAlbums;
- (void)resortAllAlbumContents;
- (void)_updateAlbumRecursive:(id)fp8;
- (void)_updateAlbum:(id)fp8;
- (void)_mountCamera:(id)fp8;
- (void)_addCameraAlbumOnMainThread:(id)fp8;
- (void)_newCamera:(id)fp8;
- (void)_removedCamera:(id)fp8;
- (id)lastCamera;
- (void)_newRecorder:(id)fp8;
- (void)_removedRecorder:(id)fp8;
- (void)_docMounted:(id)fp8;
- (void)_networkDocMounted:(id)fp8;
- (void)_docEjected:(id)fp8;
- (void)ejectAlbum:(id)fp8;
- (id)description;
- (id)eventKeysInDetailAlbum:(id)fp8;
- (void)_addKeyToDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12 album:(id)fp16 updateName:(BOOL)fp20 updateHeaderVisibility:(BOOL)fp24;
- (void)addKeyToDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12;
- (void)_removeKeyFromDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12 album:(id)fp16 updateName:(BOOL)fp20 updateHeaderVisibility:(BOOL)fp24;
- (void)removeKeyFromDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12;
- (BOOL)shouldWriteXMLFile;
- (void)setShouldWriteXMLFile;
- (void)queXMLSpotlight;
- (void)_queueXMLWithDelay:(unsigned long)fp8;
- (void)queueXMLFileAsynch:(BOOL)fp8 withDelay:(BOOL)fp12;
- (BOOL)isWritingXMLFile;
- (void)addAlbum:(id)fp8 toFile:(struct __sFILE *)fp12;
- (void)_hierAddAlbum:(id)fp8 toFile:(struct __sFILE *)fp12;
- (void)addRoll:(struct IPRoll *)fp8 toFile:(struct __sFILE *)fp12 sortedPhotos:(struct IPPhotoList *)fp16;
- (void)addStack:(struct IPStack *)fp8 toFile:(struct __sFILE *)fp12;
- (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
- (void)performTask2;
- (void)performTask;
- (void)verifySpot;

@end

@interface AlbumView : NSOutlineView
{
    ArchiveDocument *mDocument;
    AlbumViewController *mController;
    NSMenu *mNoSelectionContext;
    NSMenu *mAlbumContext;
    NSMenu *mDiscContext;
    NSMenu *mLibraryContext;
    NSMenu *mTrashContext;
    SlimSplitView *mSlimSplitter;
    BOOL mRebuilding;
    BOOL mSelecting;
    BOOL mNeedsReload;
    BOOL mInitialized;
    BOOL mIsAnimating;
    struct IPAlbumList *mPreviouslySelectedAlbums;
    unsigned long long mRemovedAlbumGroup;
    int mRemovedAlbumRow;
    struct MessageReceiver mAlbumMessageReceiver;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    BOOL mShouldReturnZeroFromNumberOfRowsToAbortSuperMouseDownAfterAssignmentOfTrackingRow;
    DPAPDatabaseAlbum *mAuthenticatingDPAPDatabaseAlbum;
    NSMutableArray *mEjectIconTrackingRectTags;
    int mClearFlaggedRectTag;
    int mHoldRectTag;
    int mActiveEjectIconRow;
    int mLastRowCount;
    BOOL mUseLargeAppearance;
    BOOL mIsTiling;
    BOOL _duringDrag;
    int _overrideClickedRow;
    BOOL _pauseTootipRebuild;
    NSMutableArray *_albumsWithProgressFrames;
    id _bis1;
    id _bis2;
    id _obis1;
    id _obis2;
    id _hbis1;
    id _hbis2;
    id _hobis1;
    id _hobis2;
    BOOL _doingEdit;
    NSDictionary *_countAttributes;
    NSDictionary *_countAttributesDark;
    NSDictionary *_bubbleAttributes;
    NSDictionary *_clearAttributes;
    int _drawCountClear;
    int _holdHover;
    int _maxLevel;
}

- (struct _NSRect)frameOfCellAtColumn:(int)fp8 row:(int)fp12;
- (struct _NSRect)_frameOfOutlineCellAtRow:(int)fp8;
- (void)awakeFromNib;
- (void)swapImageSource:(BOOL)fp8 header:(BOOL)fp12;
- (void)prepareForRelease;
- (void)initialize;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)albumCheckToggled:(id)fp8;
- (BOOL)needsReload;
- (void)setNeedsReload:(BOOL)fp8;
- (id)controller;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;
- (struct _NSRect)adjustScroll:(struct _NSRect)fp8;
- (void)setLargeAppearance:(BOOL)fp8;
- (BOOL)largeAppearance;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)setPauseTooltipRebuild:(BOOL)fp8;
- (void)rebuildToolTips;
- (struct _NSRect)recentEventRect;
- (void)_checkProgressFrames;
- (void)expandItem:(id)fp8 expandChildren:(BOOL)fp12;
- (void)collapseItem:(id)fp8 collapseChildren:(BOOL)fp12;
- (void)reloadData;
- (void)reloadItemWithoutReloadChildren:(id)fp8;
- (void)reloadItem:(id)fp8 reloadChildren:(BOOL)fp12;
- (void)setReadyToLoadData:(BOOL)fp8;
- (void)rebuild:(id)fp8;
- (void)_redrawToUpdateName:(id)fp8;
- (void)_appWillQuit:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)isDuringDrag;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)isDoingEdit;
- (void)setDoingEdit:(BOOL)fp8;
- (void)textDidBeginEditing:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)repairFirstResponder;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (BOOL)isSelecting;
- (struct IPAlbumList *)selectedAlbums;
- (void)setSelectedAlbums:(struct IPAlbumList *)fp8 withNotify:(BOOL)fp12;
- (void)selectRow:(int)fp8 byExtendingSelection:(BOOL)fp12;
- (void)selectRowIndexes:(id)fp8 byExtendingSelection:(BOOL)fp12;
- (void)deselectRow:(int)fp8;
- (void)deselectAll:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (int)numberOfRows;
- (void)mouseMoved:(id)fp8;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (int)clickedRow;
- (id)authenticatingDPAPDatabaseAlbum;
- (id)menuForEvent:(id)fp8;
- (void)addAlbum:(id)fp8;
- (void)addSmartAlbum:(id)fp8;
- (void)editSmartAlbum:(id)fp8;
- (void)sortAlbums:(id)fp8;
- (void)showInspector:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (void)duplicateAlbums:(id)fp8;
- (void)ejectAction:(id)fp8;
- (void)altEjectAction:(id)fp8;
- (void)deleteAlbums:(struct IPAlbumList *)fp8;
- (void)trashAction:(id)fp8;
- (void)promptAndDeleteAlbums:(struct IPAlbumList *)fp8;
- (void)_removeSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_removeSubscriptionSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_deleteAlbums:(struct IPAlbumList *)fp8 trashOnRemove:(BOOL)fp12;
- (BOOL)performKeyEquivalent:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)_albumAdded:(id)fp8 makeCurrent:(BOOL)fp12;
- (struct IPAlbumList *)_removableSelectedAlbums;
- (void)_willRemoveAlbum:(id)fp8;
- (void)_checkForRemovedRow:(id)fp8;
- (void)_didRemoveAlbum;
- (int)_removedAlbumRow;
- (struct _NSRect)cell:(id)fp8 adjustedTitleRect:(struct _NSRect)fp12;
- (void)setIsAnimating:(BOOL)fp8;

@end

@interface AlbumView (_AlbumViewEjectButtons)
- (struct _NSRect)holdRectForRow:(int)fp8;
- (struct _NSRect)countClearRectForRow:(int)fp8;
- (void)_addEjectIconTrackingRects;
- (void)_drawEjectIcons;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)_progressRectForRow:(int)fp8 indicator:(id)fp12;
- (struct _NSRect)_ejectIconRectForRow:(int)fp8;
- (struct _NSRect)_altEjectIconRectForRow:(int)fp8;
- (void)_ejectMouseDown:(id)fp8 alt:(BOOL)fp12;
- (void)_clearMouseDown:(id)fp8 forRow:(int)fp12;
- (void)_holdMouseDown:(id)fp8 forRow:(int)fp12 album:(id)fp16;
- (void)_immediatelyDrawEjectIcon:(id)fp8 row:(int)fp12 alt:(BOOL)fp16;
- (float)_minFrameWidthForEjectIcons;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_removeEjectIconTrackingRects;
- (void)resetCursorRects;
- (void)_resetEjectIconTrackingRects;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
@end

@interface NSOutlineView (internal_add)
- (id)outlineCell;
- (id)trackingOutlineCell;
@end

@interface AlbumViewCell : NSTextFieldCell
{
    Album *mAlbum;
    NSImage *_image;
    NSButtonCell *_showCheckbox;
    BOOL _checked;
    BOOL _checkable;
    NSButtonCell *_cancelButton;
    BOOL _canCancel;
    BOOL _cancelled;
    BOOL _isSectionCell;
    NSFont *_sectionFont;
    NSFont *_albumFont;
    NSFont *_selectedAlbumFont;
    AlbumViewCell *_lastCopy;
}

+ (void)cleanUpStatics;
- (id)description;
- (void)resetShowCheckbox;
- (void)_showCheckboxToggle:(id)fp8;
- (void)resetCancelButton;
- (void)_cancelHit:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setAlbum:(id)fp8;
- (id)album;
- (void)setImage:(id)fp8;
- (id)image;
- (id)_alternateTextColor;
- (id)attributedStringValue;
- (BOOL)isHighlighted;
- (void)_drawHighlightWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (struct _NSRect)checkboxRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)cancelRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)titleRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)imageRectForBounds:(struct _NSRect)fp8;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (struct _NSRect)usedTitleRect:(struct _NSRect)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)_trackButton:(id)fp8 forEvent:(id)fp12 inRect:(struct _NSRect)fp16 ofView:(id)fp32;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;
- (BOOL)pointInEnabledControl:(struct _NSPoint)fp8 inRect:(struct _NSRect)fp16;
- (void)setSectionCell:(BOOL)fp8;
- (BOOL)isSectionCell;
- (id)sectionFont;
- (void)setSectionFont:(id)fp8;
- (id)albumFont;
- (void)setAlbumFont:(id)fp8;
- (id)selectedAlbumFont;
- (void)setSelectedAlbumFont:(id)fp8;
- (id)showCheckbox;
- (void)setShowCheckbox:(id)fp8;
- (BOOL)checked;
- (void)setChecked:(BOOL)fp8;
- (BOOL)checkable;
- (void)setCheckable:(BOOL)fp8;
- (id)cancelButton;
- (void)setCancelButton:(id)fp8;
- (BOOL)canCancel;
- (void)setCanCancel:(BOOL)fp8;
- (BOOL)cancelled;
- (void)setCancelled:(BOOL)fp8;

@end

@interface AlbumViewCell (Protected)
+ (void)drawVerticalGradientInRect:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
@end

@interface AlbumViewCellFormatter : NSFormatter
{
    NSString *mEditString;
}

- (void)dealloc;
- (id)editString;
- (void)setEditString:(id)fp8;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (id)attributedStringForObjectValue:(id)fp8 withDefaultAttributes:(id)fp12;
- (id)editingStringForObjectValue:(id)fp8;

@end

@interface AlbumViewController : NSObject
{
    AlbumView *mAlbumView;
    NSScrollView *mScrollView;
    ArchiveDocument *mDocument;
    BOOL mCreatedDroppedAlbum;
    BOOL _suspendNotify;
    AVSections *mSections;
    NSTimer *_animationTimer;
    NSMutableArray *_itemBeingCollapsed;
    BOOL mNeedInitialSectionSetup;
    float mAnimationStepSize;
    id mDelayedEditModeForAlbumClickedRow;
    id mDelayedSelectForAlbumClickedRow;
    BOOL _fauxAllEvents;
    NSMutableArray *mSelectedAlbums;
    BOOL mInitialized;
    BOOL mNameWasEdited;
    NSMutableArray *mDocs;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)addDocument:(id)fp8;
- (void)removeDocument:(id)fp8;
- (id)mainDB;
- (id)sections;
- (id)albumMasksForSections;
- (id)albumMgr;
- (id)mainAlbumMgr;
- (id)albumView;
- (id)scrollView;
- (id)document;
- (id)documents;
- (BOOL)fauxAllEvents;
- (void)setFauxAllEvents:(BOOL)fp8;
- (void)_currentAlbumDidSwitch:(id)fp8;
- (void)_undoRemoveAlbum:(id)fp8 parent:(id)fp12 position:(int)fp16;
- (void)removeAlbum:(id)fp8 withUndo:(BOOL)fp12;
- (void)_undoRemoveAlbums:(id)fp8 parent:(id)fp12 positions:(id)fp16;
- (void)removeAlbums:(struct IPAlbumList *)fp8 withUndo:(BOOL)fp12;
- (void)_undoCreateNewAlbum:(id)fp8;
- (void)_redoCreateNewAlbum:(id)fp8;
- (id)createNewAlbumInDB:(id)fp8 withName:(id)fp12 beforeIndex:(int)fp16 select:(BOOL)fp20 startEdit:(BOOL)fp24 albumClass:(Class)fp28;
- (void)delayedSelectForAlbum:(id)fp8;
- (void)delayedEditModeForAlbum:(id)fp8;
- (void)_undoCreateNewFolder:(id)fp8;
- (void)_redoCreateNewFolder:(id)fp8;
- (id)createNewFolderInDB:(id)fp8 withName:(id)fp12 beforeIndex:(int)fp16 select:(BOOL)fp20 startEdit:(BOOL)fp24;
- (void)_undoCreateNewAlbum:(id)fp8 fromSelection:(id)fp12;
- (void)_redoCreateNewAlbum:(id)fp8 fromSelection:(id)fp12;
- (id)createNewAlbumInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20 albumClass:(Class)fp24;
- (id)createNewBookInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20;
- (id)createNewSlideshowInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20;
- (void)installAlbum:(id)fp8 beforeIndex:(int)fp12 startEdit:(BOOL)fp16;
- (id)createDuplicateOfAlbum:(id)fp8 withName:(id)fp12 select:(BOOL)fp16;
- (id)selectedAlbum;
- (void)selectAlbum:(id)fp8;
- (void)_recursiveExpandAlbum:(id)fp8 group:(unsigned long long)fp12;
- (void)makeAlbumVisible:(id)fp8;
- (id)albumWithName:(id)fp8;
- (void)selectMultipleRows;
- (void)startAnimator;
- (void)stopAnimator;
- (BOOL)animateOneRow:(id)fp8;
- (void)animate:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldCollapseItem:(id)fp12;
- (void)outlineViewItemWillCollapse:(id)fp8;
- (void)outlineViewItemWillExpand:(id)fp8;
- (void)reloadWillHappen:(id)fp8;
- (void)reloadHappened:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldSelectItem:(id)fp12;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (void)outlineView:(id)fp8 willDisplayOutlineCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldExpandItem:(id)fp12;
- (BOOL)outlineView:(id)fp8 shouldEditTableColumn:(id)fp12 item:(id)fp16;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)_undoRedoChangeAlbumName:(id)fp8 forAlbum:(id)fp12;
- (void)_undoReorderAlbums:(id)fp8 originalState:(id)fp12 selectedAlbum:(id)fp16;
- (void)_redoReorderAlbums:(id)fp8 originalState:(id)fp12 selectedAlbum:(id)fp16;
- (void)_doCommandAddImages:(id)fp8 inDB:(id)fp12 toAlbum:(id)fp16 fromAlbum:(id)fp20;
- (void)_undoCommandAddImages:(id)fp8 toAlbum:(id)fp12 fromAlbum:(id)fp16;
- (void)_importCancel:(id)fp8;
- (void)_subscribeCancel:(id)fp8;
- (void)_importDone:(id)fp8;
- (id)_selectedAlbums;
- (void)_setSelectedAlbums:(id)fp8;
- (id)dpapSelectionPath;
- (void)restoreDPAPSelectionPath:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (int)startIndexOfGroup:(unsigned long long)fp8;
- (int)endIndexOfGroup:(unsigned long long)fp8;
- (int)startRowOfGroup:(unsigned long long)fp8;
- (int)endRowOfGroup:(unsigned long long)fp8;
- (void)moveAlbum:(id)fp8 beforeIndex:(int)fp12 newParent:(id)fp16;
- (void)moveAlbums:(struct IPAlbumList *)fp8 beforeIndex:(int)fp12 newParent:(id)fp16;
- (BOOL)_item:(id)fp8 isNotChildOfAlbums:(struct IPAlbumList *)fp12;
- (unsigned int)_validateAlbumDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptAlbumDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (unsigned int)_validateKeyMgrDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (void)_undoRedoMovePhotosToNewEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)_undoRedoImportFromPubSub:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (BOOL)_acceptKeyMgrDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (unsigned int)_validateFilenameDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptSelectiveImportDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (BOOL)_acceptFilenameDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (unsigned int)_validateITunesDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptITunesDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;

@end

@interface AlbumViewRulerView : NSRulerView
{
    SlimSplitView *_splitView;
    AlbumViewHeaderCell *_cell;
    id _controller;
    id _outlineView;
}

- (id)initWithScrollView:(id)fp8 orientation:(int)fp12 tableView:(id)fp16 dataSource:(id)fp20;
- (void)dealloc;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)resetCursorRects;
- (void)setAttributedStringValue:(id)fp8;
- (id)splitView;
- (void)setSplitView:(id)fp8;

@end

@interface AlbumViewHeaderCell : NSTableHeaderCell
{
    NSImage *_handleImage;
}

- (id)init;
- (void)dealloc;
- (id)handleImage;
- (void)setHandleImage:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)highlight:(BOOL)fp8 withFrame:(struct _NSRect)fp12 inView:(id)fp28;

@end

@interface ArchiveAlbum : Album
{
    NSDictionary *_loadedMaskedYears;
}

- (id)init;
- (void)dealloc;
- (unsigned int)aeAlbumType;
- (unsigned long long)defaultGroup;
- (BOOL)isEjectable;
- (void)eject;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)maskedYears;
- (id)adjustForMaskedYears;
- (void)recreateFromDB:(id)fp8;

@end

@interface BookAlbum : Album
{
    IPBook *mBook;
    NSString *mCacheFileName;
    NSDictionary *mBookData;
    NSDictionary *mLegacyBookInfo;
    NSCountedSet *mPlacedPhotos;
    int mBookProductType;
    BOOL mOnePhotoPerPage;
    BOOL mPhotosAdded;
    int mBookAlbumVersion;
    BOOL mBookShowUpgraded;
    BOOL mIsBeingUpgraded;
}

- (id)init;
- (id)initWithAlbum:(id)fp8;
- (void)clearModified;
- (void)initWithDictionary:(id)fp8;
- (unsigned int)aeAlbumType;
- (id)makeCachePath;
- (id)extractThumbnails:(id)fp8;
- (void)injectThumbnails:(id)fp8;
- (void)deinjectThumbnails:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setKey:(unsigned long)fp8;
- (id)cacheFileName;
- (void)setCacheFileName:(id)fp8;
- (id)bookData;
- (void)setBookData:(id)fp8;
- (void)willBeRemoved;
- (id)book;
- (id)bookIfLoaded;
- (void)setBook:(id)fp8;
- (void)setProductType:(int)fp8;
- (int)productType;
- (BOOL)isBookProduct;
- (BOOL)isCardProduct;
- (BOOL)isCalendarProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (void)setVersion:(int)fp8;
- (int)version;
- (BOOL)wasUpgraded;
- (void)clearUpgraded;
- (void)setIsBeingUpgraded:(BOOL)fp8;
- (void)setDB:(id)fp8;
- (void)upgradePre7Book;
- (void)clearPlacedPhotoCache;
- (id)placedPhotos;
- (void)addPhotoToPlacedList:(struct IPPhotoInfo *)fp8;
- (void)removePhotosFromPlacedList:(struct IPPhotoList *)fp8;
- (void)removePhotoFromPlacedList:(struct IPPhotoInfo *)fp8;
- (BOOL)onePhotoPerPage;
- (void)setOnePhotoPerPage:(BOOL)fp8;
- (BOOL)photosAdded;
- (void)setPhotosAdded:(BOOL)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 fillingScrapPage:(BOOL)fp12 returnResults:(BOOL)fp16;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8 fillingScrapPage:(BOOL)fp12;
- (void)add:(struct IPPhotoInfo *)fp8;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (BOOL)allowsMovies;
- (void)setLegacyBookInfo:(id)fp8;
- (id)legacyBookInfo;
- (void)dealloc;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (void)_rescheduleBookPurge;
- (void)_idleBookPurge:(id)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)reducedSlideshowOptions;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;

@end

@interface CameraAlbum : ImportAlbum
{
    ICObject *mICObject;
    ThreadsafeMutableArray *mImageQueue;
    NSLock *mImageQueueLock;
    BOOL mDocIsClosing;
    BOOL mThreadActive;
    BOOL mCameraSupportsDelete;
    BOOL mCameraSupportsEject;
    BOOL mAddingPhotos;
    NSConditionLock *mThreadActivationLock;
    BOOL mIsLoading;
}

- (id)initWithICObject:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (BOOL)allowsModification;
- (void)setDB:(id)fp8;
- (void)setMediaType:(int)fp8;
- (id)icObject;
- (BOOL)isLoading;
- (void)setICObject:(id)fp8;
- (BOOL)isEjectable;
- (void)eject;
- (void)setThreadActive:(BOOL)fp8;
- (BOOL)threadActive;
- (void)_notifyChangedFields:(unsigned long long)fp8 affectedPhoto:(struct IPPhotoInfo *)fp16;
- (void)addWithPLHolderArray:(id)fp8;
- (void)_docIsClosing:(id)fp8;
- (void)_aggregateDateForSelection:(struct IPPhotoList *)fp8;
- (id)_collectImageProc:(id)fp8;
- (void)_icCountedImages:(id)fp8;
- (void)setAdvancedImport:(BOOL)fp8;
- (void)_reloadPhotos;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_loadThumbTossedSetImage:(id)fp8;
- (void)_threadedLoadThumbnails:(id)fp8;
- (BOOL)advancedImport;
- (id)cachedNameWithCount;

@end

@interface DiscAlbum : Album
{
    DRDevice *mDevice;
}

- (id)initWithDevice:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (id)device;
- (void)setDevice:(id)fp8;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;

@end

@interface DPAPAlbum : Album
{
    BOOL mIsInitialSelection;
    unsigned int mApplescriptUpperKey;
}

+ (void)configureDPAPAlbum:(id)fp8;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (id)dpapService;
- (id)_dpapContainer;
- (id)init;
- (void)_initialSelection;
- (BOOL)isPersistent;
- (void)_loadKeys;
- (unsigned int)visibleCount;
- (struct IPPhotoList *)visiblePhotos;
- (unsigned int)aeAlbumType;
- (id)uniqueID;

@end

@interface DPAPBrowserAlbum : Album
{
}

- (BOOL)allowsModification;
- (id)init;
- (BOOL)isSelectable;
- (unsigned int)aeAlbumType;

@end

@interface DPAPContainerAlbum : DPAPAlbum
{
    NSNumber *mDMAPId;
}

- (void)albumWillBeSelected;
- (void)dealloc;
- (id)databaseAlbum;
- (id)dpapService;
- (id)_dpapContainer;
- (id)initWithDMAPId:(id)fp8;
- (void)setAlbumKeys;
- (unsigned int)aeAlbumType;

@end

@interface DPAPDatabaseAlbum : DPAPAlbum
{
    DBDocument *mDocument;
    DMAPClientService *mDPAPService;
    BOOL mDidAddContainerAlbums;
    BOOL mFaultDidFail;
    BOOL mDidLoad;
}

+ (BOOL)_shouldPreloadThumbs;
+ (unsigned int)_thumbPreloadLimit;
- (void)_addContainerAlbums;
- (void)albumWillBeSelected;
- (void)_configureArchiveAlbum;
- (BOOL)isAuthenticated;
- (BOOL)isPasswordRequired;
- (void)containerAlbumWillBeSelected:(id)fp8;
- (id)dbDocument;
- (void)dealloc;
- (id)_dpapContainer;
- (id)dpapDatabase;
- (id)dpapService;
- (void)eject;
- (id)initWithDPAPService:(id)fp8;
- (BOOL)isEnabled;
- (BOOL)isEjectable;
- (BOOL)isSelectable;
- (void)_initialSelection;
- (BOOL)_load;
- (void)_loadDatabase;
- (void)_preloadThumbs;
- (int)numberOfVisibleChildren;
- (void)photoViewerLoadHook;
- (void)setDB:(id)fp8;
- (void)_recomputeVisChildren;
- (struct IPAlbumList *)visibleChildren;
- (void)_unload;
- (id)nameWithCount;
- (id)nameWithCountAlways;
- (unsigned int)visibleCount;
- (unsigned int)aeAlbumType;

@end

@interface DynamicAlbum : Album
{
}

- (id)init;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (void)imageDBChanged:(id)fp8;
- (BOOL)shouldRebuild;

@end

@interface FilterAlbum : Album
{
    struct vector<Filter*, std::allocator<Filter*>> *mFilters;
    NSString *mCoreName;
    BOOL mMatchAllFilters;
    BOOL _activeFilterBar;
    BOOL _keepRollsTogether;
    BOOL mLiveFilteringEnabled;
    BOOL mNeedsToFilter;
    NSTimer *mRefilterTimer;
    unsigned long long mPhotoInfoChangeMask;
    unsigned long long mAlbumChangeMask;
    unsigned long long mAlbumMgrChangeMask;
    struct MessageReceiver mAlbumMessageReceiver;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    BOOL mAlbumMgrReceiverLinked;
    BOOL mListenToRolls;
    BOOL mObserveLastImport;
    struct IPPhotoList *mBasePhotos;
    BOOL mUseRepresentedAlbumYearHeaderState;
}

- (BOOL)useRepresentedAlbumYearHeaderState;
- (void)setUseRepresentedAlbumYearHeaderState:(BOOL)fp8;
- (BOOL)isYearOpen:(int)fp8 month:(int)fp12 day:(int)fp16;
- (void)setYear:(int)fp8 month:(int)fp12 day:(int)fp16 open:(BOOL)fp20;
- (id)initWithAlbum:(id)fp8;
- (id)init;
- (void)dealloc;
- (unsigned int)aeAlbumType;
- (void)prepareForRelease;
- (void)releaseFilters:(BOOL)fp8;
- (void)initWithDictionary:(id)fp8;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (void)_appFinishedLaunching:(id)fp8;
- (void)scheduleRefiltering:(id)fp8;
- (void)_forceFilterScheduling;
- (void)_doFilterScheduling;
- (BOOL)needsHiddenPhotosVisible;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)matchAllFilters;
- (void)setMatchAllFilters:(BOOL)fp8;
- (BOOL)activeFilterBar;
- (void)setActiveFilterBar:(BOOL)fp8;
- (BOOL)keepRollsTogether;
- (void)setKeepRollsTogether:(BOOL)fp8;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (void)reobserveAllNotifications;
- (void)observeAlbums:(struct IPAlbumList *)fp8 observeRolls:(BOOL)fp12;
- (void)observeNotifications:(id)fp8;
- (void)_enableLiveFiltering:(id)fp8;
- (void)addFilter:(id)fp8;
- (unsigned long)filterCount;
- (id)filterAtIndex:(unsigned long)fp8;
- (void)replaceFilterAtIndex:(int)fp8 withFilter:(id)fp12;
- (id)coreName;
- (void)setCoreName:(id)fp8;
- (void)setName:(id)fp8;
- (struct vector<Filter*, std::allocator<Filter*>> *)filters;
- (void)setFilters:(struct vector<Filter*, std::allocator<Filter*>> *)fp8;
- (void)_gatherRollMembers:(struct IPPhotoList *)fp8;
- (void)_filterPhotos;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_handleAlbumMgrMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_handleAlbumMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (struct IPPhotoList *)basePhotos;
- (void)setBasePhotos:(struct IPPhotoList *)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (BOOL)allowsModificationFlag;
- (BOOL)allowsReorderFlag;

@end

@interface PhotoCDAlbum : ImportAlbum
{
    PhotoCD *mPhotoCD;
    ThreadsafeMutableArray *mImageQueue;
    BOOL mDocIsClosing;
    BOOL mThreadActive;
    NSConditionLock *mThreadActivationLock;
}

- (id)initWithPhotoCD:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (BOOL)allowsModification;
- (BOOL)isEjectable;
- (void)eject;
- (void)setDB:(id)fp8;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (void)_reloadPhotos;
- (void)setAdvancedImport:(BOOL)fp8;
- (void)setThreadActive:(BOOL)fp8;
- (BOOL)threadActive;
- (void)_docIsClosing:(id)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_threadedLoadThumbnails:(id)fp8;

@end

@interface RollAlbum : Album
{
    unsigned int mRollID;
    unsigned int mKeyPhotoID;
}

+ (void)initialize;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16 rollID:(unsigned long)fp20;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (id)initWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setDB:(id)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setCollapsed:(BOOL)fp8;
- (BOOL)isCollapsed;
- (void)setRollID:(unsigned long)fp8;
- (unsigned long)rollID;
- (void)setKeyPhotoID:(unsigned long)fp8;
- (unsigned long)keyPhotoID;
- (struct IPPhotoInfo *)keyPhotoInfo;
- (id)name;
- (void)setName:(id)fp8;
- (id)rollName;
- (int)rollIDCompare:(id)fp8;
- (BOOL)isVisible;

@end

@interface RotationAlbum : Album <ThreadManagerTask>
{
    DBDocument *mDocument;
    struct IPPhotoInfo *mCurrentPhoto;
    struct IPPhotoList *mWasSelected;
    NSMutableArray *mImportQueue;
    BOOL mCheckSelectedQueue;
    BOOL mRotatedDuringLastCycle;
    struct MessageReceiver *mRotateStatusReceiver;
    BOOL mSourceFileExists;
    BOOL mThumbFileExists;
    struct IPPhotoInfo *mExistsCheckPhoto;
    BOOL mAutoStackRAWPlusJPG;
}

- (void)_loadPreferences:(id)fp8;
- (id)init;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)setDocument:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (void)start;
- (void)_rotateComplete:(id)fp8;
- (void)_checkFilesExistOnMainThread;
- (void)ensureAlbumHasAllStackMembers:(struct IPStack *)fp8;
- (void)_keepStacksOrdered;
- (void)_stackPhotosOnMainThread:(id)fp8;
- (void)_tryToAutoStack:(struct IPPhotoInfo *)fp8;
- (void)performTask;
- (void)_failedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_releaseAndRequeue;
- (id)_canTerminate;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (void)addAlreadyRotatedImageBack:(struct IPPhotoInfo *)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeRecForProcessing:(struct IPPhotoInfo *)fp8;
- (void)_removeNoWait:(struct IPPhotoInfo *)fp8;
- (void)_doRegisterTask:(id)fp8;
- (void)_reregisterTask:(id)fp8;
- (void)_selectionChanged:(id)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;

@end

@interface TrashAlbum : Album
{
    int mTrashState;
    BOOL mIsEmptying;
}

- (id)init;
- (unsigned int)aeAlbumType;
- (unsigned long long)defaultGroup;
- (unsigned int)visibleCount;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoList *)unsortedVisibleRecs;
- (struct IPPhotoList *)invisibleImageRecs;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (BOOL)isEmptyingTrash;
- (void)setEmptyingTrash:(BOOL)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)doneWithChanges;
- (int)trashState;
- (void)setTrashState:(int)fp8;
- (id)aeVisiblePhotos;
- (BOOL)ignoresPhotoVisibility;
- (BOOL)allowsModification;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;

@end

@interface AppController : NSObject
{
    id mPreferenceController;
    id mFontMenu;
    BOOL mHaveOpenedDocument;
    BOOL mHaveFinishedLaunching;
    BOOL mDelayWindowVisibility;
    NSMenuItem *mCWRotateItem;
    NSMenuItem *mCCWRotateItem;
    NSMenuItem *mEmptyTrashItem;
    NSMenuItem *mMoveToTrashItem;
    NSMenuItem *mCheckForUpdatesItem;
    NSMenuItem *mDotMacAlbumItem;
    NSMenuItem *mDotMacAlbumShareItem;
    NSMenuItem *mSubscribeToAlbumItem;
    NSMenuItem *mWelcomeItem;
    id mNotDefault;
    id mFirstDefault;
    id mFirstNotDefault;
    id mDefaultPanel;
    NSPanel *mPhotocastSplashPanel;
    NSImageView *mPhotocastSplashIcon;
    NSTextField *mPhotocastSplashTitle;
    NSTextField *mPhotocastSplashMessage;
    NSButton *mPhotocastSplashDontTellMe;
    NSButton *mPhotocastSplashOK;
    PreferenceKeys *mPK;
    NSMutableArray *mDBList;
    unsigned int mNextDBKey;
    int mStartupLockFile;
    BOOL mLastStartupWasSuccessful;
    BOOL mWroteLastStartupWasSuccessful;
    NSMutableArray *mTerminateQueue;
    NSLock *mTerminateQueueLock;
    NSMutableArray *mDelayedLaunchFiles;
    NSString *mDelayedLaunchURL;
    struct _NSSize mScreenSize;
    NSString *mCCWKeyEquivalent;
    unsigned long mCCWKeyEquivalentModifierMask;
    NSString *mCWKeyEquivalent;
    unsigned long mCWKeyEquivalentModifierMask;
    DPAPClient *mDPAPClient;
    struct SharingContext *mSharingContext;
    DPAPPasswordPanelController *mDPAPPasswordPanelController;
    BOOL mShouldSelectDPAPAlbumDidGenerateMouseEvents;
    BOOL mShouldRunFirewallAlert;
    BOOL mDidBecomeActive;
    NSMutableArray *mTerminateValidators;
}

+ (id)vmiCache;
- (id)init;
- (void)dealloc;
- (id)fontMenu;
- (id)_deepestExtantPath:(id)fp8;
- (unsigned long long)freeSpaceAtPath:(id)fp8;
- (id)preferenceController;
- (void)showKeyboardShortcuts:(id)fp8;
- (id)dbWithKey:(unsigned long)fp8;
- (unsigned long)addDB:(id)fp8;
- (void)removeDB:(id)fp8;
- (void)removeDBWithKey:(unsigned long)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)_checkAlreadyRunning:(id)fp8;
- (BOOL)lastLaunchWasSuccessful;
- (void)setLaunchSucceeded;
- (void)mediaBrowserForAperture:(id)fp8;
- (void)addMediaBrowserIfWeHaveAperture;
- (void)handleGetURLEvent:(id)fp8 withReplyEvent:(id)fp12;
- (void)applicationWillFinishLaunching:(id)fp8;
- (void)applicationDidFinishLaunching:(id)fp8;
- (BOOL)delayWindowVisibility;
- (void)setDelayWindowVisibility:(BOOL)fp8;
- (void)_checkUpdateToNewBackgroundColorDefault;
- (void)showSplashDialogIfNeeded;
- (void)doSetHotPlugAction:(id)fp8;
- (void)dontSetHotPlugAction:(id)fp8;
- (void)askLater:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (id)archiveDocument;
- (BOOL)alreadyRunning;
- (void)applicationDidHide:(id)fp8;
- (void)applicationDidBecomeActive:(id)fp8;
- (void)applicationDidResignActive:(id)fp8;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(id)fp8;
- (BOOL)finishedLaunching;
- (void)addToTerminateQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromTerminateQueue:(id)fp8;
- (void)removeFromTerminateQueue:(id)fp8 selector:(SEL)fp12;
- (void)replyToApplicationShouldTerminate:(BOOL)fp8 fromTarget:(id)fp12 selector:(SEL)fp16;
- (BOOL)validateTerminate;
- (void)addTerminateValidator:(id)fp8;
- (void)removeTerminateValidator:(id)fp8;
- (int)applicationShouldTerminate:(id)fp8;
- (int)applicationCanTerminate:(id)fp8;
- (void)applicationWillTerminate:(id)fp8;
- (BOOL)applicationShouldOpenUntitledFile:(id)fp8;
- (void)_sendOpenAppleEvent;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (void)application:(id)fp8 openFiles:(id)fp12;
- (BOOL)application:(id)fp8 printFile:(id)fp12;
- (void)showSplashImmediately:(BOOL)fp8;
- (void)showSplashPanel:(id)fp8;
- (void)showPhotocastSplashPanel;
- (void)photocastSplashOK:(id)fp8;
- (void)photocastSplashDontTellMe:(id)fp8;
- (void)_photocastSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)goToWebSite:(id)fp8;
- (void)goToHotTipsSite:(id)fp8;
- (void)goToBuySite:(id)fp8;
- (void)goToVideoTutorials:(id)fp8;
- (void)goToGettingStarted:(id)fp8;
- (void)goToFeedbackSite:(id)fp8;
- (void)registerApplication:(id)fp8;
- (void)checkForUpgrades:(id)fp8;
- (void)goToURLWithAppName:(id)fp8;
- (void)goToCustomerServiceSite:(id)fp8;
- (void)showPreferencePanel:(id)fp8;
- (id)normalizedSharedLibraryName;
- (BOOL)doSlideShowPreferences;
- (void)applicationDidChangeScreenParameters:(id)fp8;
- (void)composeEmailWithSubject:(id)fp8 body:(id)fp12;
- (void)runAlertSheetWithTitle:(id)fp8 message:(id)fp12 defaultButton:(id)fp16;
- (void)runAlertSheetOnWindow:(id)fp8 title:(id)fp12 message:(id)fp16 defaultButton:(id)fp20;
- (void)albumViewHasRowCount;
- (void)selectArchiveAlbum;
- (id)mainPhotoViewer;
- (void)setLoadingString:(id)fp8;
- (void)_registerForSleepNotifications;
- (void)restartSharingServerIfRunning;
- (void)toggleSharingServer;

@end

@interface AppTerminateRequestor : NSObject
{
    id mTarget;
    SEL mSelector;
    BOOL mFlaggedLater;
}

- (id)initWithTarget:(id)fp8 selector:(SEL)fp12;
- (void)dealloc;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (BOOL)flaggedLater;
- (void)setFlaggedLater:(BOOL)fp8;
- (BOOL)isEqual:(id)fp8;

@end

@interface AppController (DPAPClientItemDataHinting)
- (void)willRequireDataForDPAPPhotos:(struct IPPhotoList *)fp8 metaField:(id)fp12;
- (void)willRequireDataForDPAPPhotos:(struct IPPhotoList *)fp8 metaField:(id)fp12 blocking:(BOOL)fp16;
@end

@interface AppController (AppControllerDPAPServiceController)
- (void)didResolveLibraryLocation:(BOOL)fp8;
- (id)dpapServiceController;
- (BOOL)isDPAPBlockedBySharingFirewall;
- (void)runFirewallAlertOnWindow:(id)fp8;
@end

@interface AppController (AppControllerDPAPClient)
- (void)_addAlbumsForDPAPService:(id)fp8;
- (void)_addDPAPAlbum:(id)fp8 parentAlbum:(id)fp12;
- (void)_addDPAPClientObservers;
- (id)_albumManager;
- (id)_albumViewController;
- (id)_assuredDPAPBrowserAlbum;
- (void)_autoExpandDPAPBrowser;
- (void)_deselectDPAPService:(id)fp8;
- (void)disableDPAPClient;
- (id)dpapClient:(id)fp8 passwordForService:(id)fp12 attempt:(int)fp16;
- (BOOL)dpapClient:(id)fp8 dpapServiceError:(id)fp12;
- (BOOL)dpapClient:(id)fp8 shouldIncludeService:(id)fp12;
- (void)_dpapClientDidAddService:(id)fp8;
- (void)_dpapClientDidUnloadService:(id)fp8;
- (void)_dpapClientWillUnloadService:(id)fp8;
- (void)_dpapClientWillRemoveService:(id)fp8;
- (void)enableDPAPClient;
- (void)_initDPAPClient;
- (BOOL)isDPAPClient;
- (BOOL)_isOwnSocketAddress:(struct sockaddr_in)fp8;
- (void)_removeDPAPAlbum:(id)fp8;
- (void)_removeAlbumsForDPAPService:(id)fp8;
- (void)_removeDPAPAlbums;
- (void)_removeDPAPClientObservers;
- (BOOL)_shouldIncludeOwnDPAPService;
- (BOOL)shouldSelectDPAPAlbum:(id)fp8;
- (BOOL)shouldSelectDPAPAlbumDidGenerateMouseEvents;
- (void)unloadDPAPDatabaseAlbum:(id)fp8;
- (void)_updateDPAPBrowserAutoExpansionDefault:(id)fp8;
- (id)_canSharingTerminate;
@end

@interface ArchiveController : NSObject
{
    AlbumView *mAlbumView;
    EtchedText *mImageCount;
    id mDocument;
    NSButton *mShowEventsButton;
    NSButton *mShowDetailButton;
    NSButton *mShowAllPhotosButton;
    id mActionButtonMatrix;
    NSButton *mNewAlbumButton;
    NSButton *mPlaySlidesButton;
    id mNewSmartAlbumButton;
    NSButtonCell *mRotateImageButton;
    NSButton *mFullScreenButton;
    PopupSearchField *mSearchField;
    ThumbnailSizer *mThumbnailSizer;
    SmartAlbumInfo *mSmartAlbumInfo;
    KeywordController *mKeywordController;
    struct _NSSize mBaseWindowSize;
    id mSplitView;
    float mSplitViewMinimum;
    InfoInspector *mInfoInspector;
    InfoController *mInfoController;
    id mInfoSplitView;
    float mInfoSplitViewMinimum;
    NSView *mInfoView;
    struct _NSRect mInfoRectLast;
    id mSlideshowPlayer;
    NSView *mDisplayView;
    PhotoDisplay *mOrganizeView;
    ArchiveDisplay *mEditView;
    ArchiveDisplay *mCurrentDisplay;
    Edit *mEditController;
    EditMgr *mEditMgr;
    FullScreen *mFullScreen;
    IPReviewController *mReviewController;
    ImportDisplay *mImportDisplay;
    MovieViewer *mMovieViewer;
    PhotoViewer *mPhotoViewer;
    IPFilterBarView *mFilterBarView;
    IPDetailHeaderView *mDetailHeaderView;
    IPDotMacHeaderView *mDotMacHeaderView;
    IPEventViewController *mEventViewController;
    IPEventView *mEventView;
    IPDetailView *mDetailView;
    BatchChange *mBatchChangePanel;
    id mBurnController;
    id mNewAlbumPanel;
    id mNewAlbumName;
    id mNewAlbumOKButton;
    id mNewObjectPopup;
    float mInfoSplitViewCachedSize;
    float mSplitViewCachedSize;
    BOOL mOptionKeyWasDown;
    BOOL mShowKeywords;
    BOOL mShowCaptions;
    BOOL mShowHiddenPhotos;
    BOOL mShowFileNames;
    BOOL mGridLayout;
    BOOL mInitialized;
    BOOL mActive;
    BOOL mRebuildMatrix;
    BOOL mEnableEditMode;
    BOOL mEnableBookMode;
    BOOL mShowKeywordsWhenAllowed;
    BOOL mShowInfoInspectorWhenAllowed;
    BOOL mHideHiddenPhotosWhenAllowed;
    ExportMgr *mExportMgr;
    PrintController *mPrintController;
    Thumbnailer *mThumbnailer;
    IPArchiveSearcher *mIPSearch;
    struct MessageReceiver mAlbumMessageReceiver;
    id mMinThumbSize;
    id mMaxThumbSize;
    struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> *mExternallyEditedImages;
    NSMutableArray *mSelectionTypeCache;
    struct vector<IPSelectionList*, std::allocator<IPSelectionList*>> *mSelectionKeyCache;
    NSLock *mSelectionCacheLock;
    int mEditButtonState;
    float mPreviousContrastValue;
    NSString *mExternalEditor;
    BOOL mExternalEditorIsRunning;
    id mRepublishDialog;
    id mRepublishMatrix;
    IPBookController *mNewBookController;
    NSMutableArray *mBookDisplayObjects;
    IPSlideshowController *mNewSlideshowController;
    NSMutableArray *mSlideshowNibTopObjects;
    IPRemoteSlideshowPlayer *mRemoteSlideshowPlayer;
    BOOL mCurrentAlbumHasImage;
    BOOL mCurrentAlbumHasMovie;
    BOOL mCurrentAlbumImageSelected;
    BOOL mCurrentAlbumVisibleImageSelected;
    BOOL mCurrentAlbumMovieSelected;
    BOOL mCurrentAlbumVisibleMovieSelected;
    BOOL mCurrentAlbumHasUserSelection;
    BOOL mCurrentAlbumIsMountedAlbum;
    BOOL mCurrentSelectionHasReadOnlyItems;
    BOOL mLastArchiveWasInEvent;
    NSSpeechRecognizer *mSpeechRecognizer;
    Album *mProgressChangedAlbum;
}

+ (void)initialize;
+ (void)cleanUpStatics;
+ (id)getSuggestedBookName:(id)fp8;
+ (id)getSuggestedCalendarName:(id)fp8;
+ (id)getSuggestedCardName:(id)fp8;
+ (id)getSuggestedCutSheetName:(id)fp8;
+ (id)getSuggestedSlideshowName:(id)fp8;
- (id)init;
- (struct _NSRect)window:(id)fp8 willPositionSheet:(id)fp12 usingRect:(struct _NSRect)fp16;
- (void)_dpapItemDataUpdateDidEnd:(id)fp8;
- (void)_dpapItemDataUpdateWillBegin:(id)fp8;
- (void)awakeFromNib;
- (void)prepareForRelease;
- (void)dealloc;
- (id)currentDisplay;
- (void)activate;
- (void)deactivate;
- (BOOL)isActive;
- (int)_infoSplitViewPosition;
- (float)splitView:(id)fp8 constrainSplitPosition:(float)fp12 ofSubviewAt:(int)fp16;
- (void)loadSplitViewPositions;
- (void)_saveSplitViewPositions;
- (void)_loadPreferences:(id)fp8;
- (void)_configureNewAlbumButton;
- (void)_configureFullScreenButton;
- (void)_configureSlideshowButton;
- (void)_modifiersChanged:(id)fp8;
- (void)_hideElement:(id)fp8;
- (void)_showElement:(id)fp8;
- (id)document;
- (id)db;
- (id)currentAlbum;
- (id)realCurrentAlbum;
- (struct IPAlbumList *)selectedAlbums;
- (id)albumView;
- (id)albumViewController;
- (id)albumMgr;
- (id)infoController;
- (id)ipArchiveSearcher;
- (id)searchField;
- (id)keywordController;
- (id)burnController;
- (id)slideshowPlayer;
- (id)thumbnailer;
- (struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> *)externallyEditedImages;
- (void)recordExternallyEditedImage:(struct IPPhotoInfo *)fp8 time:(double)fp12;
- (BOOL)isExternallyEditedImage:(struct IPPhotoInfo *)fp8;
- (void)updateExternallyEditedImages;
- (double)lastModifiedTimeForImageFile:(struct IPPhotoInfo *)fp8;
- (struct IPSelectionList *)imageSelection;
- (struct IPSelectionList *)selection:(int)fp8;
- (struct IPSelectionList *)selectionWithoutCache:(int)fp8;
- (struct IPPhotoList *)volatileImages;
- (void)clearSelectionCache;
- (void)setSelection:(struct IPSelectionList *)fp8;
- (void)selectionChanged;
- (void)installSelectionForMatrix:(struct IPPhotoList *)fp8;
- (void)installSelectionForMatrix:(struct IPPhotoList *)fp8 makeFirstResponder:(BOOL)fp12;
- (void)_calculateValidImageOperations;
- (BOOL)photoListHasMovies:(struct IPPhotoList *)fp8;
- (void)updateStatus;
- (void)configureCutover;
- (void)updateSliderForCurrentDisplay;
- (BOOL)_keywordsInspectorAllowed;
- (void)_showOrHideHUDsAsNecessary;
- (void)_showOrHideHiddenPhotosAsNecessary;
- (void)setDisplayView:(id)fp8;
- (id)displayView;
- (id)organizeView;
- (id)photoViewer;
- (id)filterBar;
- (id)detailHeaderView;
- (id)dotMacHeaderView;
- (void)setDotMacHeaderView:(id)fp8;
- (id)eventView;
- (id)detailView;
- (id)importDisplay;
- (id)editController;
- (BOOL)isInEditMode;
- (BOOL)isSearchingAllowed;
- (BOOL)isKeywordChangingAllowed;
- (BOOL)isSearching;
- (void)clearSearch;
- (id)thumbnailSizer;
- (id)minThumbSizeButton;
- (id)maxThumbSizeButton;
- (void)controlTextDidEndEditing:(id)fp8;
- (BOOL)doSlideShowPreferences;
- (void)showSlideShowPanel:(id)fp8;
- (void)doPlayButton:(id)fp8;
- (void)find:(id)fp8;
- (id)addUniqueArray:(id)fp8 toArray:(id)fp12;
- (void)CreateNewAlbum:(id)fp8 fromSelection:(unsigned char)fp12;
- (id)eventBasedProductNameUsingFormat:(id)fp8;
- (id)CreateBookFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 bookName:(id)fp16;
- (id)CreateBookFromCurrentSelection:(id)fp8 bookName:(id)fp12;
- (id)CreateCardFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 cardName:(id)fp16;
- (id)CreateCutSheetFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 name:(id)fp16;
- (id)CreateThemedSlideshowFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 name:(id)fp16;
- (id)CreateCalendarFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 calendarName:(id)fp16;
- (void)makeNewBook:(id)fp8;
- (void)makeNewCalendar:(id)fp8;
- (void)makeNewCard:(id)fp8;
- (void)makeNewCutSheet:(id)fp8;
- (void)makeNewThemedSlideshow:(id)fp8;
- (void)makeNewPrintProject:(id)fp8;
- (void)loadBookController;
- (id)bookController;
- (id)smartAlbumInfo;
- (void)_makeNewBook:(id)fp8;
- (void)_makeNewCalendar:(id)fp8;
- (void)_getNewCalendarSettings:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCard:(id)fp8;
- (void)_makeNewCutSheet:(id)fp8;
- (void)_makeNewThemedSlideshow:(id)fp8;
- (void)_makeNewBookComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCutSheetComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_themeUpgradeCompletion:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_makeNewBookWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_makeNewCalendarWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCardWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCutSheetWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewThemedSlideshowWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)CreateSlideshowFromCurrentSelection:(id)fp8 slideshowName:(id)fp12;
- (void)CreateSlideshow:(id)fp8 useSelection:(BOOL)fp12 slideshowName:(id)fp16;
- (void)makeNewSlideShow:(id)fp8;
- (id)GetSuggestedAlbumName:(id)fp8;
- (id)GetSuggestedObjectName:(unsigned long)fp8;
- (void)UpdateNewObjectPanelName:(struct CreateNewObjectData *)fp8 forceUpdate:(unsigned char)fp12;
- (void)NewObjectPanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)ChangeNewObjectPopup:(id)fp8;
- (void)HitNewObjectPanelOK:(id)fp8;
- (void)HitNewObjectPanelCancel:(id)fp8;
- (void)AskUserForNewObject:(unsigned char)fp8;
- (void)addSmartAlbum:(id)fp8;
- (void)addAlbum:(id)fp8;
- (void)subscribeToAlbum:(id)fp8;
- (void)subscribeWithConfirmationToAlbumWithURL:(id)fp8;
- (void)subscribePanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)subscribeConfirmPanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)subscribeToAlbumWithURL:(id)fp8;
- (void)duplicateImages:(id)fp8;
- (void)duplicateAlbums:(id)fp8;
- (id)doDuplicateAlbum:(id)fp8 select:(BOOL)fp12;
- (void)removeAlbum:(id)fp8;
- (void)addFolder:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (void)toggleToolbar:(id)fp8;
- (id)makeNewAlbumForAppleScript:(id)fp8;
- (void)emptyTrashForAppleScript;
- (id)keywordsForAppleScript;
- (void)assignKeywordForAppleScript:(id)fp8;
- (void)selectAllForAppleScript:(id)fp8 in:(id)fp12;
- (unsigned int)aeView;
- (void)setAeView:(unsigned int)fp8;
- (void)selectAlbum:(id)fp8;
- (id)_sendToIDVDDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (BOOL)_sendToIDVDHandler:(id)fp8;
- (BOOL)_sendSlideshowAlbumToiDVD:(id)fp8 progress:(id)fp12;
- (BOOL)_sendBookAlbumToiDVD:(id)fp8 progress:(id)fp12;
- (id)_sendSlideshowToiDVDDuring:(id)fp8 path:(id)fp12 script:(id)fp16;
- (void)sendToiDVD:(id)fp8;
- (id)_sendToBladeDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (void)sendToBlade:(id)fp8;
- (id)_sendToBladeBlogDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (void)sendToBladeBlog:(id)fp8;
- (id)_showMailDuring:(id)fp8 arguments:(id)fp12;
- (BOOL)_showMailHandler:(id)fp8;
- (void)showMail:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (void)showImageCapture:(id)fp8;
- (void)showInToolbar:(id)fp8;
- (void)playCurrentSlideshowFromApplescript:(BOOL)fp8 displayIndex:(int)fp12;
- (void)endCurrentSlideshow;
- (void)showSlides:(id)fp8 applescriptMode:(BOOL)fp12 displayIndex:(int)fp16;
- (void)playSlideshow:(id)fp8 fromIndex:(long)fp12 applescriptMode:(BOOL)fp16 displayIndex:(int)fp20;
- (void)_currentAlbumWillSwitch:(id)fp8;
- (void)switchImportToAdvancedView:(id)fp8;
- (void)switchImportToImportView:(id)fp8;
- (void)_currentAlbumDidSwitch:(id)fp8;
- (void)_handleContentsChanged:(id)fp8;
- (void)_albumChangingProgress:(id)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadImportNib:(id)fp8;
- (void)beginImport:(id)fp8;
- (void)endImport:(id)fp8;
- (void)notifyNewDevice:(id)fp8;
- (BOOL)archiveAlbumIsCurrent;
- (BOOL)currentAlbumIsSpecial;
- (BOOL)validateTrashMenuItem:(id)fp8;
- (void)selectedAlbumsHasSlideshows:(char *)fp8 hasBooks:(char *)fp12;
- (void)libraryAsAllPhotos:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)toggleGridLayout:(id)fp8;
- (BOOL)gridLayout;
- (void)setGridLayout:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowKeywords:(id)fp8;
- (BOOL)showKeywords;
- (void)setShowKeywords:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowCaptions:(id)fp8;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowFileNames:(id)fp8;
- (BOOL)showFileNames;
- (void)setShowFileNames:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowFilmRolls:(id)fp8;
- (BOOL)showFilmRolls;
- (void)setShowFilmRolls:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowDateRolls:(id)fp8;
- (void)toggleShowHiddenPhotos:(id)fp8;
- (BOOL)showHiddenPhotos;
- (void)setShowHiddenPhotos:(BOOL)fp8 rebuild:(BOOL)fp12;
- (BOOL)showDateRolls;
- (void)setShowDateRolls:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowRankings:(id)fp8;
- (BOOL)showRankings;
- (void)setShowRanking:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowInContext:(id)fp8;
- (BOOL)showInContext;
- (void)setShowInContext:(BOOL)fp8;
- (void)batchChange:(id)fp8;
- (int)sortDirection;
- (void)setSortDirection:(int)fp8;
- (void)sortDirectionAction:(id)fp8;
- (void)sortEvents:(id)fp8;
- (void)sortBy:(id)fp8;
- (void)sortArchiveBy:(int)fp8;
- (BOOL)isDPAPAlbumSelection;
- (void)configureControlsToActive:(BOOL)fp8;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)addSelectedPhotoToShelf:(id)fp8;
- (void)removeSelectedPhotoFromShelf:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)_undoRedoShowHideFlaggedPhotos:(id)fp8 undoMgr:(id)fp12;
- (void)hideFlaggedPhotos:(id)fp8;
- (void)showFlaggedPhotos:(id)fp8;
- (void)_undoRedoMoveFlaggedPhotosToTrash:(id)fp8 undoMgr:(id)fp12;
- (void)_moveFlaggedPhotosToTrash:(id)fp8;
- (void)_moveFlaggedPhotosToTrashConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)moveFlaggedPhotosToTrash:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)importFiles:(id)fp8;
- (void)importFromCurrentSource:(id)fp8;
- (void)importFromAlbum:(id)fp8 allPhotos:(BOOL)fp12 referenceObj:(id)fp16 toAlbum:(id)fp20 deleteAlbumOnCancel:(BOOL)fp24;
- (void)ejectAction:(id)fp8;
- (void)altEjectAction:(id)fp8;
- (void)showBurnPanel:(id)fp8;
- (void)showExporter:(id)fp8;
- (void)sortAlbums:(id)fp8;
- (void)editSmartAlbum:(id)fp8;
- (void)showInspector:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (id)_pathForRevealInFinder;
- (id)_pathForRevealOriginalInFinder;
- (id)_pathForRevealInFinder:(struct IPPhotoInfo *)fp8;
- (id)_pathForRevealOriginalInFinder:(struct IPPhotoInfo *)fp8;
- (void)_selectInFinder:(id)fp8;
- (void)revealInFinder:(id)fp8;
- (void)revealOriginalInFinder:(id)fp8;
- (void)showKeywords:(id)fp8;
- (void)searchForText:(id)fp8;
- (void)rebuildDisplay;
- (void)resetEdit;
- (void)commitImageEdits;
- (void)finishBackgroundRenderingWork;
- (void)tabToCurrentView;
- (void)switchToSlideshowView;
- (void)switchToBookView;
- (void)switchToEditView;
- (void)switchToOrganizeView;
- (BOOL)inEventView;
- (void)switchToEventView;
- (void)switchToEventViewForCurrentDetail;
- (void)returnToEvents;
- (void)focusOnEventView:(BOOL)fp8;
- (void)switchToDetailView;
- (id)stateDictionary;
- (id)resetState:(id)fp8;
- (void)clearUndoStack;
- (void)_startLiveResize:(id)fp8;
- (void)_endLiveResize:(id)fp8;
- (void)resizeThumbnails:(id)fp8;
- (void)setMaxThumbSize:(id)fp8;
- (void)setMinThumbSize:(id)fp8;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)isTrackingResize;
- (void)_undoRedoCreateEmptyRollWithKey:(unsigned long)fp8 undoManager:(id)fp12;
- (void)_undoRedoCreateRollFromPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 addedKeys:(id)fp20 removedKeys:(id)fp24 undoManager:(id)fp28;
- (void)_createEventWarningSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_createEventFlaggedWarningSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)createRollFromFlaggedPhotos:(id)fp8;
- (void)createRollFromSelection:(id)fp8;
- (void)createEmptyRoll:(id)fp8;
- (void)createAlbumFromSelection:(id)fp8;
- (void)rotateImage:(id)fp8;
- (void)selectPageType:(id)fp8;
- (void)selectPageDesign:(id)fp8;
- (void)_establishEditPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)firstImage:(id)fp8;
- (void)lastImage:(id)fp8;
- (void)nextImage:(id)fp8;
- (void)previousImage:(id)fp8;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (void)_performReprocessRAW;
- (void)_performRevert;
- (void)performRevert;
- (void)reprocessRAW:(id)fp8;
- (void)revertImage:(id)fp8;
- (void)_revertImageSheetCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)saveArchive:(id)fp8;
- (void)editImageUsingPreference:(id)fp8;
- (void)showPhotos:(id)fp8;
- (void)editImage:(id)fp8;
- (void)showMovie:(struct IPPhotoInfo *)fp8;
- (void)editImageInSeparateWindow:(id)fp8;
- (void)exitingReview:(id)fp8;
- (void)editImageFullScreen:(id)fp8;
- (id)fullScreen;
- (void)exitingFullScreen:(id)fp8;
- (id)getExternalEditorPath;
- (void)editImageInExternalEditor:(id)fp8;
- (void)_invokeExternalEditor:(struct IPPhotoInfo *)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)_undoMoveSelectionToTrash:(id)fp8;
- (void)_doMoveSelectionToTrash:(id)fp8;
- (BOOL)deleteSelectedImages:(id)fp8;
- (void)moveToTrash:(id)fp8;
- (void)removeFromTrash:(id)fp8;
- (void)emptyTrash:(id)fp8;
- (void)_emptyTrashSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)DeletePhotosFromTrash:(struct IPPhotoList *)fp8;
- (void)_reallyEmptyTrash;
- (void)_redoSetRankingForSelection:(id)fp8 originalRankings:(id)fp12 newRanking:(short)fp16;
- (void)_undoSetRankingForSelection:(id)fp8 originalRankings:(id)fp12 newRanking:(short)fp16;
- (void)applyRankingToSelection:(id)fp8;
- (void)setRankForSelection:(int)fp8;
- (void)printDocument:(id)fp8;
- (void)printView:(id)fp8;
- (id)_netServicesDictionaryForBook:(id)fp8 path:(id)fp12 generatorTarget:(id)fp16;
- (id)_netServicesDictionaryForSelectionWithRequirements:(id)fp8;
- (id)_netServicesPhotoRecord:(struct IPPhotoInfo *)fp8 withRequirements:(id)fp12;
- (unsigned long long)_preflightPublishSpaceEstimated;
- (unsigned long long)_preflightPublishSpaceAvailable;
- (id)publishNetAlbums:(id)fp8 forAddAlbum:(BOOL)fp12;
- (void)publishNetAlbums:(id)fp8;
- (void)publishSettings:(id)fp8;
- (void)publishAnnounce:(id)fp8;
- (void)_checkNetAlbums:(id)fp8;
- (void)_setNetAlbumList:(id)fp8;
- (void)_netAlbumListRetrieved:(id)fp8 error:(id)fp12;
- (void)_showNetAlbumError:(id)fp8;
- (void)orderPrints:(id)fp8;
- (void)publishNetSlides:(id)fp8;
- (void)invokeNetService:(id)fp8;
- (void)assureDPAPHiResImages:(struct IPPhotoList *)fp8;
- (void)invokeNetServiceWithTag:(int)fp8;
- (void)purchaseBook:(id)fp8 path:(id)fp12 generatorTarget:(id)fp16;
- (void)_doCommandRemoveImages:(id)fp8;
- (void)_undoCommandRemoveImages:(id)fp8;
- (void)_doCommandRotateImagesByDegrees:(float)fp8 withState:(id)fp12;
- (void)setInfoViewHeight:(float)fp8 withAnimation:(BOOL)fp12 snapIncrement:(float)fp16;
- (void)_splitViewDragged:(id)fp8;
- (void)toggleReviewMode:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)windowDidBecomeMain:(id)fp8;
- (void)windowDidResignMain:(id)fp8;
- (id)windowWillReturnUndoManager:(id)fp8;
- (struct _NSSize)windowWillResize:(id)fp8 toSize:(struct _NSSize)fp12;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)warnSteveUndo;
- (void)warnSteve;
- (void)tellSteveWarmupIsComplete;
- (struct _NSPoint)locationForBadgeWithSize:(struct _NSSize)fp8 andPadding:(struct _NSSize)fp16;
- (struct _NSRect)keywordActionIndicatorLocation;
- (id)eventViewController;
- (void)speechRecognizer:(id)fp8 didRecognizeCommand:(id)fp12;

@end

@interface OurBoxView : NSBox
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface ArchiveController (NSSplitViewDelegate)
- (void)_splitView:(id)fp8 resizeSubviewsStretchingFirstWithOldSize:(struct _NSSize)fp12;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingLastWithOldSize:(struct _NSSize)fp12;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (BOOL)splitViewDoubleClicked:(id)fp8;
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
@end

@interface ArchiveController (DesktopScreenEffects)
- (void)_setDesktopPath:(id)fp8 isFolder:(BOOL)fp12;
- (void)_setScreenSaverPreferencesForPath:(id)fp8;
- (void)_createLinksFromSelectionInDirectory:(id)fp8 lastName:(id)fp12;
- (void)showDesktop:(id)fp8;
@end

@interface ArchiveDisplay : NSObject
{
    ArchiveController *mArchiveController;
    NSView *mMainView;
    NSView *mParentView;
    NSView *mPlacardParentView;
    IPToolbarView *mToolbarView;
    NSView *mPlacardView;
    NSView *mParentSuperview;
    OurSplitView *mPlacardSplitView;
    unsigned int mPlacardAutoresizingMask;
    int mPlacardPosition;
    BOOL mPlacardIsPinning;
    float mPlacardMinSize;
    float mPlacardMaxSize;
    BOOL mActive;
    float mSizeIncrement;
    BOOL mInLiveResize;
    struct _NSRect mPlacardStartRect;
    struct _NSRect mPlacardTargetRect;
    struct _NSRect mParentStartRect;
    struct _NSRect mParentTargetRect;
    NSDate *mPlacardAnimationStartDate;
    double mPlacardAnimationTotalTime;
    NSTimer *mPlacardAnimationTimer;
    IPMagnifierController *mMagnifyController;
}

- (void)awakeFromNib;
- (id)init;
- (void)dealloc;
- (void)prepareForRelease;
- (void)setController:(id)fp8;
- (id)controller;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)isBookView;
- (id)mainView;
- (id)parentView;
- (id)placardParentView;
- (id)placardView;
- (float)placardMinSize;
- (void)setPlacardMinSize:(float)fp8;
- (float)placardMaxSize;
- (void)setPlacardMaxSize:(float)fp8;
- (BOOL)_placardIsHorizontal;
- (id)document;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (BOOL)isActive;
- (BOOL)validateMenuItem:(id)fp8;
- (void)updateStatus;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (float)_placardTargetSize;
- (double)_placardAnimationResizeTimeFrom:(float)fp8 to:(float)fp12;
- (void)_stopPlacardAnimation;
- (void)_placardAnimationTimerCB:(id)fp8;
- (id)_makeSplitViewForParent:(id)fp8;
- (void)_installPlacardWithAnimation:(BOOL)fp8;
- (void)_removePlacardWithAnimation:(BOOL)fp8;
- (void)installPlacardView:(id)fp8 position:(int)fp12 animate:(BOOL)fp16;
- (void)removePlacardView;
- (void)removePlacardViewWithAnimation:(BOOL)fp8;
- (BOOL)showingPlacardView;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (BOOL)hasSelection:(int)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (void)updateForSelection:(struct IPPhotoList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeCutover;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)initToolbar;
- (void)freeToolbar;
- (id)toolbar;
- (id)transitionControllerSlideThumbDelegate;
- (id)magnifyController;
- (void)setMagnifyController:(id)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (BOOL)shelfContainsPhoto:(struct IPPhotoInfo *)fp8;
- (void)makePhotoEventKey:(struct IPPhotoInfo *)fp8;
- (void)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)showMagnifierForPhotoAtIndex:(int)fp8 inList:(struct IPPhotoList *)fp12 startingFrom:(struct _NSRect)fp16;
- (void)magnifierIsClosing;
- (void)dismissMagnifier;
- (void)deleteCurrentPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)supportsFindCommand;
- (struct _NSRect)keywordActionIndicatorLocation;

@end

@interface ArchiveDisplay (NSSplitViewDelegate)
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (float)splitView:(id)fp8 constrainMaxCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingFirstWithOldSize:(struct _NSSize)fp12;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingLastWithOldSize:(struct _NSSize)fp12;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (void)splitViewDidResizeSubviews:(id)fp8;
- (BOOL)splitViewDoubleClicked:(id)fp8;
@end

@interface ArchiveDocController : NSDocumentController
{
    NSMutableDictionary *mDiskIDs;
    NSMutableDictionary *mMountedDocuments;
    BOOL mAttemptedOpenUntiledDoc;
}

- (id)init;
- (void)dealloc;
- (BOOL)attemptedOpenUntitledDoc;
- (id)openUntitledDocumentOfType:(id)fp8 display:(BOOL)fp12;
- (void)newDocument:(id)fp8;
- (id)openDocumentWithContentsOfFile:(id)fp8 display:(BOOL)fp12;
- (void)openDocument:(id)fp8;
- (void)mountDocumentAtPath:(id)fp8;
- (void)mountDocument:(id)fp8;
- (id)_doNewLibraryPanel;
- (id)_doOpenLibraryPanel;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (void)_cdMounted:(id)fp8;
- (void)_cdEjected:(id)fp8;
- (void)_prepareForOpeningOfOpenRecentMenu:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;

@end

@interface ArchiveDocument : DBDocument
{
    ArchiveController *mController;
    NSPanel *mMailPanel;
    id mMailPopup;
    id mMailImageCount;
    id mMailFileSize;
    id mMailImageSize;
    id mMailIncludeTitles;
    id mMailIncludeComments;
    BOOL mInitialized;
    BOOL mNotifiedWillTerminate;
    BOOL mSingleRollSelected;
    TempImageManager *mMailFileManager;
    ArchiveWinController *mWindowController;
}

+ (id)defaultRootPath;
+ (void)setDefaultRootPath:(id)fp8;
- (void)dealloc;
- (void)close;
- (void)setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (void)start;
- (void)startThreadManager;
- (void)_verifyRoot:(id)fp8;
- (void)mailCancel:(id)fp8;
- (void)mailOK:(id)fp8;
- (void)mailPopupChange:(id)fp8;
- (BOOL)dialogForEmail;
- (BOOL)prepareImagesForEmail;
- (int)numValidMailFiles;
- (id)pathForEmail:(int)fp8;
- (id)captionForEmail:(struct IPPhotoInfo *)fp8;
- (id)commentsForEmail:(struct IPPhotoInfo *)fp8;
- (id)recipientForEmail;
- (id)addressForEmail;
- (id)controller;
- (struct IPSelectionList *)currentSelection:(BOOL)fp8 pictures:(BOOL)fp12 movies:(BOOL)fp16;
- (struct IPSelectionList *)currentSelection:(BOOL)fp8 pictures:(BOOL)fp12 movies:(BOOL)fp16 hidden:(BOOL)fp20;
- (struct IPSelectionList *)currentSelection:(BOOL)fp8;
- (BOOL)selectionIsSingleRoll;
- (void)awakeFromNib;
- (void)showWindows;
- (void)fitWindowToScreen;
- (void)makeWindowControllers;
- (id)displayName;
- (id)fileName;
- (id)_doCopyLibraryPanel;
- (BOOL)validateMenuItem:(id)fp8;
- (void)windowControllerDidLoadNib:(id)fp8;
- (void)initialize;
- (void)startLoadingProgress;
- (void)endLoadingProgress;
- (void)setPrintInfo:(id)fp8;
- (void)ourRunPageLayout:(id)fp8;
- (void)_pageLayoutDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)selectArchiveAlbum;

@end

@interface ArchiveWinController : NSWindowController
{
}

- (id)windowTitleForDocumentDisplayName:(id)fp8;
- (id)document;

@end

@interface IPArchiveSearcher : NSObject
{
    ArchiveController *_archiveController;
    FilterAlbum *_filterAlbum;
    int _searchState;
}

- (id)initWithArchiveController:(id)fp8;
- (void)clearSearch;
- (int)searchState;
- (void)searchChanged:(id)fp8;
- (void)searchCancelled:(id)fp8;
- (void)searchForObject:(id)fp8 inField:(int)fp12;

@end

@interface OurSplitView : NSSplitView
{
    BOOL mDelegateRespondsToSplitViewDoubleClicked;
    BOOL mDelegateRespondsToSplitViewWillTrackOrResize;
    BOOL mDelegateRespondsToSplitViewDidTrackOrResize;
    float mDividerThickness;
    struct _NSRect mDividerRect;
    NSColor *mFillColor;
    float _initialLength;
    float _targetLength;
    float _deltaLength;
    NSDate *_startAnimationDate;
    double _totalTime;
    NSTimer *_animationTimer;
}

+ (void)initialize;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (float)dividerThickness;
- (float)dividerThicknessForLength:(float)fp8;
- (void)setDividerThickness:(float)fp8;
- (float)normalDividerThickness;
- (void)setNormalDividerThickness;
- (void)setFillColor:(id)fp8;
- (void)drawDividerInRect:(struct _NSRect)fp8;

@end

@interface OurSplitView (Animation)
- (double)animationResizeTime_oldWay:(float)fp8;
- (double)animationResizeTime:(float)fp8;
- (void)_stopAnimation;
- (void)_animationTimerCallback:(id)fp8;
- (void)animateToLength:(float)fp8;
- (void)setDelegate:(id)fp8;
- (void)mouseDown:(id)fp8;
- (float)firstSubviewLength;
- (void)setFirstSubviewLength:(float)fp8;
- (void)dealloc;
@end

@interface OurTextField : NSTextField
{
    id mArchiveController;
}

- (id)initWithCoder:(id)fp8;
- (BOOL)_shouldDrawEtched;
- (void)setEnabled:(BOOL)fp8;
- (void)setEditable:(BOOL)fp8;
- (void)setEtched:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;

@end

@interface ServiceEntry : NSObject
{
    NSDictionary *serviceDictionary;
}

- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (id)executablePath;
- (id)bundlePath;
- (id)portName;
- (id)sendTypes;
- (id)userData;
- (id)message;
- (id)menuItem;
- (id)defaultMenuItem;

@end

@interface ServicesInfo : NSObject
{
}

- (id)serviceEntriesForPboardType:(id)fp8;

@end

@interface AttributeMgr : NSObject <NSCoding, NSCopying>
{
    NSMutableDictionary *mAttributes;
    BOOL mIsModified;
    NSDate *mModificationDate;
    NSLock *mAttrLock;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (BOOL)hasAttribute:(id)fp8;
- (id)attribute:(id)fp8;
- (id)allAttributes;
- (void)setAttribute:(id)fp8 object:(id)fp12;
- (void)removeAttribute:(id)fp8;
- (void)removeAllAttributes;
- (unsigned int)count;
- (BOOL)isModified;
- (void)setIsModified:(BOOL)fp8;
- (id)modificationDate;
- (void)setAttributes:(id)fp8;
- (void)setModificationDate:(id)fp8;

@end

@interface BatchChange : NSObject
{
    id mBatchChangePanel;
    NSPopUpButton *mFieldPopup;
    NSPopUpButton *mValuePopup;
    id mToText;
    NSControl *mOKButton;
    NSPanel *mChangeDatePanel;
    NSTextField *mInstructionText;
    NSDatePicker *mOriginalDate;
    NSDatePicker *mAdjustedDate;
    NSButton *mAdjustButton;
    NSBox *mBoxEnclosingImageView;
    NSImageView *mImageView;
    NSButton *mEmbedInEXIF;
    struct _NSSize mOriginalEnclosingSize;
    BOOL mValuePopupHidden;
    NSView *mValuePopupSuperview;
    struct _NSRect mValuePopupFrame;
    int mChangeType;
    NSView *mDetailView;
    BOOL mDetailInstalled;
    NSView *mInstalledView;
    TitleDateTime *mDateTimeSettingsView;
    SetDateOptions *mDateTimeView;
    SetTitleText *mTitleTextView;
    SetCommentText *mCommentTextView;
    SetRating *mRatingView;
    SetDateIncrementOptions *mDateTimeIncrementView;
    NSMutableArray *mBatchChangeNibObjects;
}

- (void)awakeFromNib;
- (void)_loadNibIfNeeded;
- (void)runModalInWindow:(id)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)_setValueHidden:(BOOL)fp8;
- (void)changeType:(id)fp8;
- (void)_selectType:(int)fp8;
- (void)_switchDetailView:(id)fp8;
- (void)_doUndo:(id)fp8;
- (void)_doRedo:(id)fp8;
- (void)_undoChangeType:(int)fp8 document:(id)fp12 selection:(id)fp16 originalValues:(id)fp20 newValues:(id)fp24 userInfo:(id)fp28;
- (void)_redoChangeType:(int)fp8 document:(id)fp12 selection:(id)fp16 originalValues:(id)fp20 newValues:(id)fp24 userInfo:(id)fp28;
- (void)batchChange:(int)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;
- (void)dealloc;
- (void)_changeDateDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)adjustedDateChanged:(id)fp8;
- (void)runModalDateChangeInWindow:(id)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;

@end

@interface SetCommentText : NSView
{
    NSTextView *mCommentText;
    NSButton *mAppendSwitch;
}

- (id)commentText;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)appendSwitchChanged:(id)fp8;
- (id)text;
- (BOOL)append;

@end

@interface SetDateOptions : NSView
{
    NSDatePicker *mDatePicker;
    NSButton *mAddTimeSwitch;
    NSTextField *mAddTimeValue;
    NSPopUpButton *mAddTimeQuanta;
    NSTextField *mAddTimePrompt;
    NSButton *mEmbedSwitch;
    BOOL mCanAddTime;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setCanAddTime:(BOOL)fp8;
- (void)addTimeSwitchChanged:(id)fp8;
- (void)addTimeValueChanged:(id)fp8;
- (id)date;
- (void)_selectQuanta:(int)fp8;
- (BOOL)embed;
- (BOOL)addTime;
- (int)addTimeValue;
- (int)addTimeQuanta;

@end

@interface SetRating : NSView
{
    RankingTextField *mRatingText;
}

- (void)loadFromPrefs;
- (void)saveToPrefs;
- (int)rating;

@end

@interface SetTitleText : NSView
{
    NSTextField *mTitleText;
    NSButton *mAddNumberSwitch;
    BOOL mCanAddNumber;
}

- (id)titleText;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setCanAddNumber:(BOOL)fp8;
- (void)addNumberSwitchChanged:(id)fp8;
- (id)text;
- (BOOL)addNumber;

@end

@interface TitleDateTime : NSView
{
    NSControl *mOKButton;
    id mDateSwitch;
    id mTimeSwitch;
    id mDateFormatCluster;
    id mDateShortRadio;
    id mDateLongRadio;
    id mDateFullRadio;
    id mTimeFormatCluster;
    id mTime24HourRadio;
    id mTime12HourRadio;
    id mTimeSecondsSwitch;
    id mExampleText;
    NSString *mDateFormat;
}

- (void)awakeFromNib;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (void)changeFormat:(id)fp8;
- (id)format;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)showDateTimePreference:(id)fp8;
- (int)_dateFormatForTag:(int)fp8;
- (int)_tagForDateFormat:(int)fp8;
- (int)_timeFormatForTag:(int)fp8 withSeconds:(BOOL)fp12;
- (int)_tagForTimeFormat:(int)fp8;
- (int)_secondsForTimeFormat:(int)fp8;

@end

@interface DBDocument : NSDocument
{
    IWWindow *mWindow;
    ProgressController *mProgress;
    NSDate *mStartTime;
    BOOL mIsMounted;
    NSRunLoop *mRunLoop;
    NSString *mRoot;
    unsigned int mDBKey;
    unsigned int mTempDBKey;
    AlbumMgr *mAlbumMgr;
    Album *mCurrentAlbum;
    BOOL mIsDPAPDocument;
    ICController *mICController;
    PhotoCDManager *mPhotoCDManager;
    NSMutableArray *mAlbumChangeValidators;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)close;
- (id)runLoop;
- (id)db;
- (id)tempDB;
- (void)setIsMounted:(BOOL)fp8;
- (BOOL)isMounted;
- (id)window;
- (id)currentAlbum;
- (id)executeShellCommand:(id)fp8;
- (void)packageLibrary;
- (id)root;
- (id)albumMgr;
- (BOOL)isDocumentEdited;
- (void)setCurrentAlbum:(id)fp8;
- (void)setCurrentAlbum:(id)fp8 force:(BOOL)fp12;
- (void)_setCurrentAlbum:(id)fp8 force:(BOOL)fp12 notify:(BOOL)fp16;
- (BOOL)validateAlbumChangeFromAlbum:(id)fp8 toAlbum:(id)fp12;
- (void)addAlbumChangeValidator:(id)fp8;
- (void)removeAlbumChangeValidator:(id)fp8;
- (void)_setCurrentAlbumOnLaunch:(id)fp8;
- (id)_doRepairLibraryPanel;
- (void)setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (id)_rootForDPAPDatabase:(id)fp8;
- (id)initWithDPAPDatabase:(id)fp8;
- (void)setNetworkRoot:(id)fp8;
- (void)_setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (id)_canTerminate;
- (void)start;
- (void)_makeAlbumMgr;
- (void)startDeviceManagers;
- (BOOL)documentIsBusy;
- (id)startTime;
- (void)startLoadingProgress;
- (void)endLoadingProgress;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (id)documentWithAlbums:(struct IPAlbumList *)fp8 progress:(id)fp12;
- (id)documentWithPhotos:(struct IPPhotoList *)fp8 progress:(id)fp12;
- (id)virtualArchive;
- (BOOL)isDPAP;

@end

@interface DBImportSpec : ImportSpec
{
    struct IPPhotoInfo *mOriginalPhoto;
    int mImportState;
}

+ (id)importSpecWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (id)initWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (void)dealloc;
- (struct IPPhotoInfo *)originalPhoto;
- (void)setOriginalPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)fileIsMounted;
- (int)importState;
- (void)setImportState:(int)fp8;

@end

@interface DBKeyMgr : KeyMgr
{
    ImageDB *mDB;
}

+ (void)initialize;
+ (id)keyMgrWithKeyMgr:(id)fp8;
+ (id)keyMgrWithKey:(unsigned long)fp8;
+ (id)keyMgr;
- (id)initWithDB:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;

@end

@interface ImageDB : NSObject <ThreadManagerTask, ILShareContentsDelegate>
{
    BOOL mWarnTransactions;
    BOOL mShowLoadSaveTimes;
    BOOL mLogPeriodicSaving;
    BOOL mFinishingWriteTransaction;
    BOOL mTransactionIsPublish;
    // Error parsing type: ^{hash_map<long unsigned int,IPPhotoInfo*,__gnu_cxx::hash<long unsigned int>,std::equal_to<long unsigned int>,std::allocator<IPPhotoInfo*> >={hashtable<std::pair<const long unsigned int, IPPhotoInfo*>,long unsigned int,__gnu_cxx::hash<long unsigned int>,std::_Select1st<std::pair<const long unsigned int, IPPhotoInfo*> >,std::equal_to<long unsigned int>,std::allocator<IPPhotoInfo*> >="_M_node_allocator"{allocator<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> > >=}"_M_hash"{hash<long unsigned int>=}"_M_equals"{equal_to<long unsigned int>=}"_M_get_key"{_Select1st<std::pair<const long unsigned int, IPPhotoInfo*> >=}"_M_buckets"{vector<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >*,std::allocator<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >*> >="_M_impl"{_Vector_impl="_M_start"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}"_M_finish"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}"_M_end_of_storage"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}}}"_M_num_elements"I}}, name: mPhotoKeys
    DBDocument *mDocument;
    unsigned int mKey;
    NSString *mUID;
    NSString *mRoot;
    unsigned int mNextKey;
    unsigned int mNextRollID;
    unsigned int mLastImportRollKey;
    unsigned int mLastEmptyEventKey;
    unsigned int mNextTempKey;
    BOOL mLastImportRollKeyChanged;
    BOOL mLastEmptyEventKeyChanged;
    BOOL _latestEventUpdateEnabled;
    BOOL mRollKeysUpdated;
    BOOL mRollKeysFixed;
    BOOL mPhotocastNotified;
    BOOL mIsModified;
    BOOL mQuitWithoutWrite;
    NSDate *mModificationDate;
    KeywordMgr *mKeywordMgr;
    Thumbnailer *mThumbnailer;
    DirectoryMgr *mDirectoryMgr;
    BOOL mIsTemporary;
    BOOL mWasUpgraded;
    int mRepairOptions;
    struct IPPhotoList *mNeedThumbRegen;
    ThumbnailManager *mThumbnailManager;
    unsigned int mLastAlbum;
    int mLastViewerType;
    unsigned int mLastDetailKey;
    unsigned long mMarkValue;
    BOOL mIsShared;
    short mSharedImagesState;
    struct _opaque_pthread_mutex_t mInstanceLock;
    int mLockCount;
    BOOL mIsWriteTransaction;
    BOOL mGUIThreadWaiting;
    struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *mModifiedPhotos;
    struct set<Album*, std::less<Album*>, std::allocator<Album*>> *mRefilteredAlbums;
    struct _opaque_pthread_t *mMainThread;
    struct _opaque_pthread_t *mCurrentTransactionThread;
    struct _opaque_pthread_mutex_t mHighPriorityLock;
    int mHighPriorityCount;
    FileJournal *mFileJournal;
    struct map<Key, Album*, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> *mAllAlbums;
    struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *mAllRolls;
    struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *mAllStacks;
    NSRunLoop *mRunLoop;
    struct IPPhotoList *mPendingAdd;
    struct IPPhotoList *mPendingRemove;
    double mUpdateStart;
    struct IPRoll *mUpdateRoll;
    BOOL mIsLoading;
    BOOL mArchiveSkip;
    NSMutableArray *mOldPathsToDelete;
    BOOL mIsArchiving;
    int mArchiveNice;
    NSTimer *mArchiveTimer;
    NSDate *mWhenToForceSave;
    ProgressController *mCopyProgress;
    unsigned long mCopyTotalCount;
    unsigned long mCopyCurrentCount;
    float mLastCopyPercent;
    NSMutableArray *mImportQueue;
    NSLock *mImportQueueLock;
    NSInvocation *mCurrentImport;
    struct CodeTimer *mImportTimer;
    NSData *mAlbumData;
    NSData *mRollData;
    NSData *mStackData;
    NSMutableArray *mOldKeywordTable;
    BOOL mDelayLoading;
    int mThumbnailVersion;
    ILPhotoShare *mPhotoShare;
    NSDictionary *mPhotoShareProperties;
    NSDate *mUpgradeStartTime;
    NSDate *mLastUpdateTime;
    double mLastTimeRemaining;
    unsigned long long mTotalUpgradeBytes;
    unsigned long long mCompletedUpgradeBytes;
    struct list<float, std::allocator<float>> *mLastNUpgradedPercent;
    struct list<long long unsigned int, std::allocator<long long unsigned int>> *mLastNUpgradedBytes;
    struct list<NSDate*, std::allocator<NSDate*>> *mLastNUpgradedTime;
    BOOL _integrityCheckFailed;
    BOOL _IntegrityChecked;
    BOOL _dbWasUpgraded;
    NSArray *mPostUnarchiveImportPhotos;
    int mPostUnarchiveImportReference;
    struct IPPhotoList *mUpgradeNewKeyPhotos;
    struct IPPhotoList *mRollPhotoInfos;
    struct KeyRemapArray *mKeyRemapArray;
    BOOL mNeedUpgradeAutoSplit;
    BOOL mEmptyThumbCaches;
    struct MessageSender mMessageSender;
    int mEventSortOrder;
    int mEventSortDirection;
    int mEventSortHonorRolls;
    float mEventLastScrollFloat;
    long mEventLastScrollLong;
    float mMonthsLastScrollFloat;
    long mMonthsLastScrollLong;
    struct IPPhotoList *mCutList;
}

+ (void)initialize;
- (id)init;
- (id)initWithDocument:(id)fp8 isTemporary:(BOOL)fp12;
- (void)dealloc;
- (int)eventSortOrder;
- (int)eventSortDirection;
- (int)eventSortHonorRolls;
- (float)eventLastScrollFloat;
- (long)eventLastScrollLong;
- (float)monthsLastScrollFloat;
- (long)monthsLastScrollLong;
- (void)prepareForRelease;
- (BOOL)isWriteTransactionThread;
- (void)beginTransaction;
- (void)beginTransaction:(BOOL)fp8;
- (void)beginWriteTransaction;
- (void)setTransactionIsPublish:(BOOL)fp8;
- (BOOL)isTransactionPublish;
- (BOOL)guiThreadWaiting;
- (BOOL)highPriorityThreadWaiting;
- (void)endTransaction;
- (BOOL)isInTransaction;
- (BOOL)isInWriteTransaction;
- (void)requireTransaction;
- (void)requireWriteTransaction;
- (void)requireNoTransaction;
- (void)performSetImageOnMainThread:(id)fp8;
- (void)performEnsureOriginalOnMainThread:(id)fp8;
- (void)photoChangedInTransaction:(struct IPPhotoInfo *)fp8;
- (void)_sendRefilterNotifications:(id)fp8;
- (void)albumRefiltered:(id)fp8;
- (void)addAlbumToDB:(id)fp8;
- (void)removeAlbumFromDB:(id)fp8;
- (void)addRollToDB:(struct IPRoll *)fp8;
- (void)removeRollFromDB:(struct IPRoll *)fp8;
- (void)addStackToDB:(struct IPStack *)fp8;
- (void)removeStackFromDB:(struct IPStack *)fp8;
- (id)fileJournal;
- (unsigned long)makeEventWithPhotos:(struct IPPhotoList *)fp8 destination:(struct IPRoll *)fp12 deletedRollKeys:(id *)fp16 undoMgr:(id)fp20;
- (void)ensureAlbumsHaveAllStackMembers:(struct IPStack *)fp8;
- (struct IPStack *)createStackFromListOfPhotos:(struct IPPhotoList *)fp8 forceNewStack:(BOOL)fp12;
- (void)unstackPhotos:(struct IPStack *)fp8;
- (void)removePhotosFromStack:(struct IPPhotoList *)fp8;
- (void)movePhotos:(struct IPPhotoList *)fp8 toStack:(struct IPStack *)fp12 beforePhoto:(struct IPPhotoInfo *)fp16;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (id)document;
- (void)setDocument:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (int)compare:(id)fp8;
- (id)relativePath;
- (id)archivePath;
- (id)tempArchivePath;
- (id)archive5Path;
- (id)oldArchivePath;
- (id)tempPath;
- (id)backupPath;
- (_Bool)layoutInVirtualArchive:(id)fp8;
- (id)archiveRolls;
- (id)archiveStacks;
- (void)unarchiveRolls:(id)fp8;
- (void)unarchiveStacks:(id)fp8;
- (void)loadDPAPPhotos:(id)fp8;
- (BOOL)loadPhotosFromIFFData:(void *)fp8 duringUpgrade:(BOOL)fp12;
- (void)_doUpgradeAutoSplit;
- (void)doUpgradeAutoSplitIfNeeded;
- (void)cleanRollPhotoInfos;
- (BOOL)_verifyUserData:(id)fp8;
- (BOOL)hasPhotocastAlbums;
- (BOOL)photocastNotified;
- (void)setPhotocastNotified:(BOOL)fp8;
- (id)albumData;
- (void)clearCachedAlbumData;
- (id)rollData;
- (void)clearCachedRollData;
- (id)stackData;
- (void)clearCachedStackData;
- (BOOL)isDelayLoading;
- (BOOL)cancelWriteIfRequested;
- (int)writeToFile:(struct __sFILE *)fp8 nice:(BOOL)fp12;
- (void)addOldPathsToDelete:(id)fp8;
- (void)clearLoadingFlag;
- (void)terminateWithoutWrite;
- (int)readFromFile:(struct __sFILE *)fp8 size:(long)fp12;
- (BOOL)dbWasUpgraded;
- (void)unarchive;
- (BOOL)_checkLibraryIntegrity:(id)fp8;
- (void)_checkFilePermissions:(id)fp8 progress:(id)fp12;
- (BOOL)_checkForLocalFiles:(id)fp8 checkChildDirs:(BOOL)fp12;
- (struct KeyRemapArray *)keyRemapArray;
- (void)finishRepair;
- (void)finishUpgrade;
- (void)_removeEmptyDirectoriesRecursively:(id)fp8 pathContents:(id)fp12;
- (void)_autoImportPhotos:(id)fp8;
- (void)_recoverOrphanImportPhotos:(id)fp8;
- (void)_recoverOrphanPhotos:(id)fp8;
- (void)_recoverOrphanPhotosAfterUpgrade;
- (void)_removeSymbolicLinksInFolder:(id)fp8;
- (void)_removeSymbolicLinksInRoot;
- (void)_removeDirsNamed:(id)fp8;
- (void)_removeDirsNamedRecursively:(id)fp8 atPath:(id)fp12;
- (BOOL)needUpgradeAutoSplit;
- (void)setNeedUpgradeAutoSplit:(BOOL)fp8;
- (BOOL)setRoot:(id)fp8;
- (void)empytThumbCachesIfNecessary;
- (id)root;
- (void)_setRoot:(id)fp8;
- (void)setRunLoop:(id)fp8;
- (id)runLoop;
- (id)uid;
- (unsigned long)nextKeyAndIncrement;
- (unsigned long)nextTempKeyAndIncrement;
- (void)_setNextKey:(unsigned long)fp8;
- (unsigned long)nextRollIDAndIncrement;
- (unsigned long)lastImportRollKey;
- (void)setLastImportRollKey:(unsigned long)fp8;
- (unsigned long)lastEmptyEventKey;
- (void)setLastEmptyEventKey:(unsigned long)fp8;
- (BOOL)latestEventUpdateEnabled;
- (void)setLatestEventUpdateEnabled:(BOOL)fp8;
- (id)thumbnailManager;
- (unsigned long)lastAlbumKey;
- (int)lastViewerType;
- (unsigned long)lastDetailKey;
- (struct MessageSender *)messageSender;
- (void)doneWithChanges;
- (void)mark;
- (void)unMark;
- (unsigned long)markValue;
- (BOOL)isShared;
- (void)setShared:(BOOL)fp8;
- (void)invalidateSharedImageState;
- (BOOL)determineSharedImages:(BOOL)fp8;
- (void)_addPhotoInfoFromProxy:(id)fp8;
- (void)_addPhotoInfo:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)addKey:(unsigned long)fp8 caption:(id)fp12 attributes:(id)fp16 destFile:(struct IPFileInfo *)fp20 roll:(unsigned long)fp24 modifiedDate:(double)fp28 archiveDate:(double)fp36 insert:(BOOL)fp44 buildThumbnail:(BOOL)fp48;
- (struct IPPhotoInfo *)_addKey:(unsigned long)fp8 filename:(id)fp12 imageType:(unsigned long)fp16 caption:(id)fp20 attributes:(id)fp24 destFile:(struct IPFileInfo *)fp28 roll:(unsigned long)fp32 modifiedDate:(double)fp36 archiveDate:(double)fp44 insert:(BOOL)fp52 buildThumbnail:(BOOL)fp56;
- (id)filenameForPath:(id)fp8 ofType:(unsigned long)fp12;
- (void)createDestFileFrom:(id)fp8 roll:(struct IPRoll *)fp12 type:(unsigned long)fp16 toFile:(struct IPFileInfo *)fp20;
- (struct IPPhotoInfo *)copyPhoto:(struct IPPhotoInfo *)fp8 intoRoll:(struct IPRoll *)fp12 importSession:(id)fp16 error:(int *)fp20;
- (struct IPPhotoInfo *)photoOfNameIsDuplicate:(id)fp8 originalDate:(double)fp12;
- (struct IPPhotoInfo *)photoAtPathIsDuplicate:(id)fp8;
- (id)importFromPaths:(id)fp8 addToAlbum:(id)fp12 shouldDelete:(BOOL)fp16 deleteAlbumOnCancel:(BOOL)fp20 forceNoAliases:(BOOL)fp24;
- (id)importPhotos:(struct IPPhotoList *)fp8 source:(id)fp12 addToAlbum:(id)fp16 shouldImportDuplicates:(int)fp20 deletePhotosAfterImport:(BOOL)fp24 switchAlbumDuringImport:(BOOL)fp28 waitUntilDone:(BOOL)fp32;
- (id)importFromCurrentSource;
- (id)importFromAlbum:(id)fp8 allPhotos:(BOOL)fp12 reference:(id)fp16 toAlbum:(id)fp20 deleteAlbumOnCancel:(BOOL)fp24;
- (id)importAlbums:(struct IPAlbumList *)fp8;
- (id)importFiles;
- (void)lockImportQueue;
- (void)unlockImportQueue;
- (id)currentImportSession;
- (BOOL)importInProgress;
- (void)_importWithInvocation:(id)fp8;
- (void)_setCurrentImportAndStart:(id)fp8;
- (void)_importFinished:(id)fp8;
- (void)_importCanceled:(id)fp8;
- (struct IPPhotoInfo *)copyAndAdd:(id)fp8 withDate:(double)fp12 importSession:(id)fp20 error:(int *)fp24;
- (struct IPPhotoInfo *)addWithoutCopy:(id)fp8 withDate:(double)fp12 importSession:(id)fp20;
- (void)_nextKeyAndIncrement:(id)fp8;
- (void)_addPhotoToUpdateRoll:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)copyAndAddPhoto:(struct IPPhotoInfo *)fp8 importSession:(id)fp12 error:(int *)fp16;
- (void)_waitForXML:(id)fp8;
- (void)beginUpdate:(id)fp8 fromSource:(id)fp12;
- (void)beginUpdate:(id)fp8;
- (void)notifyPendingAdds;
- (void)notifyPendingRemoves;
- (void)endUpdate;
- (struct IPRoll *)updateRoll;
- (void)setUpdateRoll:(struct IPRoll *)fp8;
- (void)startRoll;
- (void)endRoll;
- (id)nextEmptyEventName;
- (struct IPPhotoList *)cutList;
- (int)cutListCount;
- (void)clearCutList;
- (void)addPhotoToCutList:(struct IPPhotoInfo *)fp8;
- (void)addPhotoListToCutList:(struct IPPhotoList *)fp8;
- (void)removePhotoFromCutList:(struct IPPhotoInfo *)fp8;
- (void)removePhotoListFromCutList:(struct IPPhotoList *)fp8;
- (unsigned int)count;
- (id)allKeys;
- (struct IPPhotoList *)contentsOfRoll:(unsigned long)fp8;
- (struct IPPhotoInfo *)photoForPath:(id)fp8;
- (struct IPPhotoInfo *)photoForUID:(id)fp8;
- (id)albumForKey:(unsigned long)fp8;
- (struct IPRoll *)rollForKey:(unsigned long)fp8;
- (struct IPRoll *)rollForUID:(id)fp8;
- (struct IPRoll *)rollForName:(id)fp8;
- (struct IPStack *)stackForKey:(unsigned long)fp8;
- (BOOL)likelyRollUser;
- (struct IPPhotoList *)photosInUnnamedRolls;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rolls;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollsNoCopy;
- (int)rollCount;
- (struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *)stacks;
- (struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *)stacksNoCopy;
- (int)stackCount;
- (struct IPPhotoInfo *)photoForKey:(unsigned long)fp8;
- (void)getOriginalDir:(id *)fp8 andPath:(id *)fp12 forPhoto:(struct IPPhotoInfo *)fp16;
- (void)removeImageWithKey:(unsigned long)fp8 notify:(BOOL)fp12;
- (void)removeAllObjects;
- (id)thumbnailer;
- (id)directoryMgr;
- (id)keywordMgr;
- (id)oldKeywordTable;
- (id)definedKeywords;
- (BOOL)isModified;
- (void)markAsModified;
- (BOOL)wasUpgraded;
- (BOOL)rebuildArchiveAlbum;
- (BOOL)libraryRebuild;
- (struct IPPhotoList *)needThumbRegen;
- (void)clearNeedThumbRegen;
- (id)modificationDate;
- (id)ensureDateDir:(double)fp8;
- (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
- (void)addToPendingAdd:(struct IPPhotoInfo *)fp8;
- (void)addToPendingRemove:(struct IPPhotoInfo *)fp8;
- (void)removeFromPendingAdd:(struct IPPhotoInfo *)fp8;
- (BOOL)isTemporary;
- (void)setIsTemporary:(BOOL)fp8;
- (void)_renameImageFromKey:(struct IPFileImage *)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)_updateImageDates:(id)fp8 rename:(BOOL)fp12 copyEXIF:(BOOL)fp16 verifyIntegrity:(BOOL)fp20 upgradeThumbs:(BOOL)fp24;
- (void)fileManager:(id)fp8 willProcessPath:(id)fp12;
- (int)_backupLibrary:(id)fp8;
- (id)recoverLostPhotos;
- (id)_beginUpgradeProgress:(id)fp8 thumbsOnly:(BOOL)fp12 updateCachedThumbs:(BOOL)fp16 repairingLibrary:(BOOL)fp20;
- (void)_continueUpgradeProgress:(id)fp8 percentDone:(float)fp12 lastImage:(struct IPPhotoInfo *)fp16 wasUpgraded:(BOOL)fp20;
- (void)_endUpgradeProgress:(id)fp8;
- (BOOL)_upgradeThumbnails:(id)fp8 rebuildAllThumbs:(BOOL)fp12 repairingLibrary:(BOOL)fp16;
- (void)_addPhotoToMap:(struct IPPhotoInfo *)fp8;
- (void)_removePhotoFromMap:(unsigned long)fp8;
- (void)_removeAllPhotosFromMap;
- (id)ilPhotoShare;
- (void)setPersistentDictionary:(id)fp8 forShare:(id)fp12;
- (id)persistentDictionaryForShare:(id)fp8;
- (void)timerWriteDB;
- (void)performTask;
- (id)_canTerminate;
- (void)queueArchivingAsynch:(BOOL)fp8 withDelay:(BOOL)fp12;
- (void)_queueArchivingWithDelay:(unsigned long)fp8;
- (void)_warnArchiveSavingError:(id)fp8;
- (void)_archive:(BOOL)fp8;
- (void)_createDummyOldDBFiles;

@end

@interface ThumbnailManager : NSObject <ThreadManagerTask>
{
    int mObjectCacheCapacity;
    struct SegmentCacheFile *mSegmentCacheFile32;
    struct SegmentCacheFile *mSegmentCacheFile64;
    struct SegmentCacheFile *mSegmentCacheFileJPG;
    struct IPObjectCache *mObjectCache;
    struct _opaque_pthread_mutex_t mThumbnailDataReadLock;
    struct _opaque_pthread_mutex_t mThumbnailDataRequestLock;
    struct _opaque_pthread_mutex_t mThumbnailRequestRunningLock;
    struct _opaque_pthread_mutex_t mPreloadRunningLock;
    struct _opaque_pthread_mutex_t mRebuildRunningLock;
    struct _opaque_pthread_cond_t mPreloadStopCondition;
    struct _opaque_pthread_mutex_t mFragmentedRequestLock;
    struct ThumbDataArray *mThumbnailDataRequest;
    BOOL mThumbnailRequestRunning;
    id mThumbnailRequestObject;
    SEL mThumbnailRequestSelector;
    BOOL mPreloadRunning;
    BOOL mPreloadStop;
    BOOL mRebuildRunning;
    ImageDB *mImageDB;
    BOOL mDBHasCaches;
    int mFragmentedRequestCount;
}

- (void)objectReleased:(unsigned long)fp8 object:(void *)fp12 size:(int)fp16;
- (id)initWithDB:(id)fp8;
- (void)dealloc;
- (void)closeCaches;
- (BOOL)hasCaches;
- (void)preloadThumbnailDataForPhotos:(struct ThumbDataArray *)fp8;
- (BOOL)isPreloadingThumbnailData;
- (int)_nextUnreadThumbIndexInRequest:(struct ThumbDataArray *)fp8 fromIndex:(int)fp12;
- (void)_preloadRequest;
- (void)stopPreloadingThumbnailData;
- (BOOL)isRunningThumbnailRequest;
- (BOOL)isRunningRebuild;
- (BOOL)thumbnailDataInCache:(struct IPPhotoInfo *)fp8 imageType:(int)fp12;
- (float)thumbnailDataInCache:(struct ThumbDataArray *)fp8;
- (void)resetFragmentedRequestCount;
- (int)fragmentedRequestCount;
- (BOOL)thumbnailDataForPhotosThreaded:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12 completionSelector:(SEL)fp16 completionObject:(id)fp20;
- (void)_thumbnailRequest;
- (BOOL)thumbnailDataForPhotos:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12;
- (void)allocateCacheForThumbnails:(int)fp8;
- (void)_thumbnailDataForPhotos:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12;
- (void *)thumbnailDataForPhoto2:(struct IPPhotoInfo *)fp8 imageType:(int)fp12 dataSize:(int *)fp16 cachedOnly:(BOOL)fp20;
- (void *)_thumbnailDataForPhoto:(struct IPPhotoInfo *)fp8 imageType:(int)fp12 dataSize:(int *)fp16 cachedOnly:(BOOL)fp20;
- (void)emptyObjectCaches;
- (void)clearObjectCaches;
- (void)createObjectCaches;
- (void)emptyThumbCaches;
- (void)checkThumbCaches2:(BOOL)fp8;
- (void)generateThumbnailsForPhoto2:(struct IPPhotoInfo *)fp8 forceNewIndex:(BOOL)fp12;
- (void)triggerThumbnailCreationIfNeeded;
- (void)performTask;

@end

@interface TDAHolder : NSObject
{
    struct ThumbDataArray *mThumbDataArray;
}

+ (id)hold:(struct ThumbDataArray *)fp8;
- (id)initWithThumbDataArray:(struct ThumbDataArray *)fp8;
- (struct ThumbDataArray *)thumbDataArray;

@end

@interface DirectoryMgr : NSObject
{
    NSString *mRoot;
    unsigned int mNextKey;
    NSMutableArray *mDirectories;
    DirectoryRec *mLast;
    BOOL mIsModified;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithRoot:(id)fp8;
- (void)setRoot:(id)fp8;
- (void)_setRoot:(id)fp8;
- (id)directoryForKey:(unsigned long)fp8;
- (unsigned long)keyForDirectory:(id)fp8;
- (void)encodeWithArchiver:(id)fp8;
- (void)archive;
- (id)relativePath;
- (id)_archivePath;
- (void)_unarchive;

@end

@interface DirectoryRec : NSObject <NSCoding>
{
    unsigned int mKey;
    NSString *mDirectory;
}

+ (void)initialize;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (id)initWithKey:(unsigned long)fp8 dir:(id)fp12;
- (void)setKey:(unsigned long)fp8;
- (unsigned long)key;
- (void)setDirectory:(id)fp8;
- (id)directory;

@end

@interface BurnButton : FirstMouseButton <HeartBeatClient>
{
}

+ (Class)cellClass;
- (void)close:(id)fp8;
- (void)open:(id)fp8;
- (void)startRotating:(id)fp8;
- (void)stopRotating:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)heartBeat:(CDAnonymousStruct1 *)fp8;

@end

@interface BurnButtonCell : NSButtonCell <HeartBeatClient>
{
    unsigned short m_ButtonState;
    NSImage *m_Image;
    NSImage *m_OverlayImage;
    int m_Sequence;
    unsigned int m_OpenTime;
    SEL m_HeartbeatSelector;
    HeartBeat *m_Heartbeat;
    unsigned int mFadeStartTime;
    NSTimer *mRefreshTrigger;
    NSImage *mRotationImage[12];
    BOOL m_LockOpen;
    NSWindow *mWindow;
}

- (void)registerInWindow:(id)fp8;
- (void)dealloc;
- (void)_windowWillClose:(id)fp8;
- (unsigned short)getButtonState;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)_throbbingSequenceMainThread;
- (void)throbbingSequence;
- (void)setLockedOpen:(BOOL)fp8;
- (void)startThrob;
- (void)stopThrob;
- (void)closeSequence;
- (void)closeButton;
- (void)openSequence;
- (void)openButton;
- (void)startRotation;
- (void)stopRotation;
- (void)heartBeat:(CDAnonymousStruct1 *)fp8;

@end

@interface BurnController : NSObject
{
    DRBurnSetupPanel *mBurnSetup;
    DREraseSetupPanel *mEraseSetup;
    DiscPrompt *mDiscPrompt;
    BurnButtonCell *mBurnButton;
    DRBurnProgressPanel *mBurnProgress;
    DREraseProgressPanel *mEraseProgress;
    DRDevice *mBurnDevice;
    DRDevice *mSelectedDevice;
    DRBurn *mBurn;
    NSString *mDiscName;
    NSString *mBurnPrompt;
    struct IPAlbumList *mAlbums;
    ImageDB *mSourceDB;
    DBDocument *mDocument;
    int mBurnState;
    BOOL mStartedDiscPrompt;
    NSTimer *mSpinUpTimer;
    NSMutableArray *mWatchedDevices;
    NSMutableArray *mReservedDevices;
    NSMutableArray *mDevicesWeOpened;
    BOOL mInitialized;
    BOOL mLoadedDRUI;
    NSMutableArray *mDiscPromptNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)_releaseWatchedDevices;
- (void)_cleanup:(BOOL)fp8;
- (id)burnDevice;
- (id)selectedDevice;
- (id)watchedDevices;
- (BOOL)burnInProgress;
- (void)setBurnButton:(id)fp8;
- (BOOL)armed;
- (void)setArmed:(BOOL)fp8;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)discPromptChangedDevice:(id)fp8;
- (void)_discPromptEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_startDiscPrompt:(id)fp8;
- (void)_closeDiscPrompt;
- (void)_promptForDisc:(id)fp8;
- (void)_promptSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_rejectDiscInDevice:(id)fp8 description:(id)fp12 reason:(id)fp16;
- (void)_rejectSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_foundDeviceForBurn:(id)fp8;
- (void)_ejectMediaInDevice:(id)fp8;
- (void)_deviceStatusChanged:(id)fp8;
- (void)_noDiscInserted:(id)fp8;
- (void)_newDevice:(id)fp8;
- (void)_openTrayIfNeeded:(id)fp8;
- (void)_removedDevice:(id)fp8;
- (void)_startBurn:(id)fp8 withLayout:(id)fp12 inWindow:(id)fp16;
- (id)_canClose;
- (id)_canTerminate;
- (void)_burnDisarmRequested:(id)fp8;
- (void)_burnStarted:(id)fp8;
- (void)_burnFinished:(id)fp8;
- (id)_selectionTextForAlbums:(struct IPAlbumList *)fp8 andPhotos:(struct IPPhotoList *)fp12 fromDB:(id)fp16 fromLibrary:(BOOL)fp20;
- (BOOL)setupPanelShouldHandleMediaReservations:(id)fp8;
- (BOOL)setupPanel:(id)fp8 deviceCouldBeTarget:(id)fp12;
- (BOOL)setupPanel:(id)fp8 deviceContainsSuitableMedia:(id)fp12 promptString:(id *)fp16;
- (void)_cantBurnSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)burnAlbums:(struct IPAlbumList *)fp8 andPhotos:(struct IPPhotoList *)fp12 fromDB:(id)fp16 fromLibrary:(BOOL)fp20 withName:(id)fp24;
- (void)_burnFailedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_virtualDiscNamed:(id)fp8 fromDocument:(id)fp12;
- (void)_printFSObject:(id)fp8;

@end

@interface DRDevice (iPhotoDRAdditions)
- (int)_scopeBurnScore;
@end

@interface BurnDataProducer : NSObject <DRFileDataProduction>
{
    NSData *mData;
    NSString *mPath;
    short mDFRefNum;
    short mRFRefNum;
    BOOL mGotFSRef;
    struct FSRef mFSRef;
    BOOL mDeleteAfter;
}

+ (id)burnDataProducer;
+ (id)burnDataProducerForPath:(id)fp8;
+ (id)burnDataProducerForPath:(id)fp8 deleteAfter:(BOOL)fp12;
+ (id)burnDataProducerWithData:(id)fp8;
- (id)initWithPath:(id)fp8 deleteAfter:(BOOL)fp12;
- (id)initWithPath:(id)fp8;
- (id)initWithData:(id)fp8;
- (void)dealloc;
- (unsigned long long)calculateSizeOfFile:(id)fp8 fork:(unsigned long)fp12 estimating:(BOOL)fp16;
- (BOOL)prepareFileForBurn:(id)fp8;
- (unsigned int)produceFile:(id)fp8 fork:(unsigned long)fp12 intoBuffer:(char *)fp16 length:(unsigned int)fp20 atAddress:(unsigned long long)fp24 blockSize:(unsigned int)fp32;
- (BOOL)prepareFileForVerification:(id)fp8;
- (void)cleanupFileAfterBurn:(id)fp8;

@end

@interface DiscPrompt : NSObject
{
    NSPanel *mDiscPromptPanel;
    NSImageView *mIconImageView;
    NSTextField *mTitleTextField;
    NSTextField *mDevicePrompt;
    DRDeviceChooser *mDeviceMenu;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    BOOL mPromptStarted;
    BurnController *mBurnController;
}

- (void)awakeFromNib;
- (BOOL)showDiscPromptInWindow:(id)fp8 burnController:(id)fp12;
- (id)selectedDevice;
- (void)selectDevice:(id)fp8;
- (void)discPromptChangedDevice:(id)fp8;
- (void)didClose;
- (void)close;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface Edit : ArchiveDisplay
{
    struct OnScreenImage currentImage;
    struct OnScreenImage currentFullImage;
    struct OnScreenImage cacheImages[3];
    CIImage *mCurrentFilterImage;
    CIImage *mCurrentFullFilterImage;
    ContrastFilter *mContrastFilter;
    SaturationFilter *mSaturationFilter;
    BlackAndWhiteFilter *mBlackAndWhiteFilter;
    SepiaFilter *mSepiaFilter;
    BoostFilter *mBoostFilter;
    FadeFilter *mFadeFilter;
    AntiqueFilter *mAntiqueFilter;
    VignetteWhiteFilter *mVignetteWhiteFilter;
    VignetteBlackFilter *mVignetteBlackFilter;
    EdgeBlurFilter *mEdgeBlurFilter;
    BlackAndWhitePointsFilter *mEqualizeFilter;
    TintFilter *mTintFilter;
    HUDSliderFilter *mEmphasisFilter;
    CropEditFilter *mCropFilter;
    PostFiltFilter *mPostFilter;
    ExposureFilter *mLightingFilter;
    RAWTemperatureTintExposureFilter *mRAWAdjustFilter;
    RAWTemperatureTintExposureFilter *mRAWDefaultAdjustFilter;
    EditFilter *mApplyCurvesFilter;
    ColorCorrectionFilter *mColorCorrectionFilter;
    EnhanceFilter *mApplyEnhanceFilter;
    EditFilter *mColorHighlightsShadowsFilter;
    SharpnessFilter *mSharpnessFilter;
    NoiseFilter *mNoiseFilter;
    HighlightShadow *mHighlightsShadowsFilter;
    BitmapFilter *mBlemishFilter;
    EditFilter *mRedeyeFilter;
    RotationEditFilter *mStraightenFilter;
    RotationEditFilter *mRotationFilter;
    CIFilter *mCrystallizeFilter;
    CIFilter *mDotFilter;
    NSMutableArray *mFilterArray;
    char *mBlurWeights;
    struct CGImage *mBlurWeightsRef;
    CIImage *mBlurWeightsImage;
    NSMutableData *mCachedImageData1;
    NSMutableData *mCachedImageData2;
    CIImage *mScreenBlemishImage;
    struct CGImage *mFullBlemishImageRef;
    struct CGImage *mScreenBlemishImageRef;
    CIImage *mFullBlemishImage;
    char *mCachedBlur1;
    CIImage *mBlurImage;
    CIImage *mFlattenedBlurImage;
    BOOL mBlurWithFull;
    CIImage *mSmallBlurImage;
    NSMutableData *mSmallBlurRasterData;
    EditMgr *mEditMgr;
    EditView *mEditView;
    NSSlider *mZoomSlider;
    NSSlider *miPhotoBrightnessSlider;
    NSSlider *miPhotoContrastSlider;
    NSSlider *miPhotoGammaSlider;
    NSSlider *miPhotoLightingSlider;
    NSSlider *miPhotoSaturationSlider;
    NSSlider *miPhotoColorHighlightsSlider;
    NSSlider *miPhotoColorMidtonesSlider;
    NSSlider *miPhotoColorShadowsSlider;
    NSSlider *miPhotoBlackPointSlider;
    NSSlider *miPhotoWhitePointSlider;
    NSSlider *mSharpnessSlider;
    NSSlider *mBlemishRadiusSlider;
    NSSlider *mBlemishOpacitySlider;
    NSSlider *mRedeyeParam1;
    NSSlider *mRedeyeParam2;
    NSSlider *mRedeyeParam3;
    NSTimer *mFullImageLoadTimer;
    struct SThreadedLinkList mNextList;
    struct SThreadedLinkList mPreviousList;
    struct SThreadedLinkList mFreeList;
    struct _opaque_pthread_mutex_t mResizeReloadLock;
    int mResizeThreadState;
    unsigned char mThreadNeedsRestart;
    BOOL mSpawn;
    struct HistogramRecord mHistogram;
    struct HistogramRecord mBaseHistogram;
    float histogramArray[7][256];
    int blackcutoffvals[3];
    int whitecutoffvals[3];
    float mGammaValue;
    NSNumber *meanImageBrightness;
    float mRedeyeRadius;
    float mBlemishRadius;
    float mBlemishOpacity;
    float mToolParam[20];
    float mRedeyeParams[20];
    BOOL mOptionKeyWasDown;
    BOOL mBypassPostFilter;
    BOOL mBypassCropFilter;
    BOOL mBypassRotationFilter;
    BOOL mBypassAdjustmentFilters;
    BOOL mBypassEffectFilters;
    BOOL mBypassAntiqueSepiaAndBW;
    int mCurrentAlgorithm;
    int mLastSharpnessTag;
    struct _NSSize mCurrentFrameSize;
    char *mHistoRaster;
    int mHistoRasterSize;
    int mHistoRasterWidth;
    int mHistoRasterHeight;
    BOOL mHasAlitvec;
    BOOL mRAWOn;
    BOOL mNeedsToChain;
    struct IPPhotoInfo *mRevertInfo;
    BOOL mClearedHisto;
    BOOL mChangingMultipleFilters;
    BOOL mBetterIsActive;
    FullScreen *mFullScreenMgr;
    struct EditListData mEditList;
    BOOL mEditListLoaded;
    NSMutableArray *mBlemishEventList;
    NSMutableArray *mNewBlemishEvents;
    float mDefaultRAWTemperature;
    float mDefaultRAWTint;
    float mDefaultRAWExposure;
    struct _NSRect mStraightenStartCropRect;
    BOOL mResetStraightenStartCropRect;
    NSUndoManager *mEditUndoManager;
    NSUndoManager *mCropModeUndoManager;
    BOOL mUseCropUndoManager;
    int mLastManualConstrainTag;
    int mLastManualConstrainRatio;
    int mLastManualConstrainOrientation;
    struct _NSRect mCropModeInitialCropRect;
    float mCropModeInitialConstrainTag;
    float mCropModeInitialConstrainRatio;
    float mCropModeInitialConstrainOrientation;
    BOOL mPendingEdit;
    BOOL mSliderDragInProgress;
    CIImage *mIconImage;
    char *mIconRaster;
    struct CGImage *mIconImageRef;
}

- (BOOL)infoIsFree:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoAfterOnScreenImage:(struct OnScreenImage *)fp8;
- (struct IPPhotoInfo *)infoBeforeOnScreenImage:(struct OnScreenImage *)fp8;
- (struct IPPhotoInfo *)currentLoadedInfo;
- (struct IPPhotoInfo *)currentInfo;
- (struct CGSize)currentFullSize;
- (void)viewResized;
- (struct IPImage *)croppedPhoto;
- (struct _NSSize)cropSizeToFitSizeForInfo:(struct IPPhotoInfo *)fp8;
- (void)setDrawView:(id)fp8;
- (void)initializeWithRect:(struct _NSRect)fp8 view:(id)fp24;
- (id)transformForImageRotation:(float)fp8 width:(float *)fp12 height:(float *)fp16;
- (void)forMachinesThatShouldBeDestroyedWhackOnRaster:(char *)fp8 forImage:(struct CGImage *)fp12 inPlaceOfFilter:(id)fp16;
- (struct CGColorSpace *)genericRGBProfile;
- (void)commitImageEdits;
- (BOOL)hasPendingEdit;
- (void)lockCurrent;
- (void)unlockCurrent;
- (void)lockFull;
- (void)unlockFull;
- (struct CGImage *)currentImageRef;
- (struct CGImage *)currentFullResImageRef;
- (struct OnScreenImage)currentImage;
- (struct OnScreenImage)currentFullImage;
- (void)chainFilters;
- (void)rechainIfNecessary;
- (id)fullFilteredImage;
- (id)prefilterFullImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (void)freeCachedIconImage;
- (id)filterResult;
- (id)prefilterImage;
- (float)currentSharpnessRatio;
- (id)fullBlemishImage;
- (id)smallBlemishImage;
- (void)resetBlemishFilter;
- (void)updateHistogram;
- (struct HistogramRecord)currentHistogram;
- (void)respondToEffectsViewButton0:(int)fp8;
- (void)respondToEffectsViewButton1:(int)fp8;
- (void)respondToEffectsViewButton2:(int)fp8;
- (void)respondToEffectsViewButton3:(int)fp8;
- (void)respondToEffectsViewButton5:(int)fp8;
- (void)respondToEffectsViewButton6:(int)fp8;
- (void)respondToEffectsViewButton7:(int)fp8;
- (void)respondToEffectsViewButton8:(int)fp8;
- (id)editView;
- (struct _NSRect)rotateCropRect:(struct _NSRect)fp8 degrees:(float)fp24;
- (void)selectAll;
- (void)selectNone;
- (void)resetFilters:(id)fp8;
- (void)resetCurrentImage;
- (struct EditListData)editList;
- (void)resetAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)restoreAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)resetStraightenWithScreenRefresh:(BOOL)fp8;
- (void)restoreStraightenWithScreenRefresh:(BOOL)fp8;
- (void)resetEffectsWithScreenRefresh:(BOOL)fp8;
- (void)resetSlidersWithScreenRefresh:(BOOL)fp8;
- (void)resetUIFromBackground;
- (void)resetCurrentImageAndUI:(BOOL)fp8;
- (BOOL)acceptsFirstResponder;
- (int)effectsViewButtonLevel:(int)fp8;
- (void)startChangingMultipleFilters;
- (void)stopChangingMultipleFilters;
- (void)displayImage;
- (void)hudSliderMouseDown:(id)fp8;
- (void)hudSliderMouseUp:(id)fp8;
- (BOOL)hudSliderDragInProgress;
- (void)currentImageReverted;
- (void)currentImageRotated;
- (void)photoInfoRotated:(struct IPPhotoInfo *)fp8;
- (void)resetImagesAndCaches;
- (void)setPreviousNextFromCurrent;
- (BOOL)alreadyInEdit;
- (void)updateRotationForImage:(struct IPImage *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 loadedImage:(struct IPImage *)fp16;
- (BOOL)isLoadingImage;
- (void)currentPhoto:(struct IPPhotoInfo *)fp8 didFinishLoadingImage:(struct IPImage *)fp12;
- (void)currentPhoto:(struct IPPhotoInfo *)fp8 didFinishLoadingFullResImage:(struct IPImage *)fp12;
- (void)currentPhotoDidRevert;
- (void)setEditMgr:(id)fp8;
- (void)dontSpawn;
- (void)becomeActive;
- (void)resetAllEditContexts;
- (void)windowDidMiniaturize:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)clearQueues;
- (struct IPPhotoList *)volatileImages;
- (void)resetHUDController;
- (id)hudController;
- (id)straightenHUDController;
- (id)editMgr;
- (void)setFullScreenManager:(id)fp8;
- (void)releaseActive;
- (struct IPPhotoInfo *)currentPhoto;
- (float)sizeIncrement;
- (void)updateNavigator;
- (void)updateLoop:(struct _NSPoint)fp8;
- (void)setSizeIncrement:(float)fp8;
- (void)viewScrolled;
- (id)currentAlbum;
- (void)doubleClickPerformed;
- (BOOL)validateMenuItem:(id)fp8;
- (void)dealloc;
- (void)addFilterInOrder:(id)fp8;
- (id)blackAndWhiteFilter;
- (id)sepiaFilter;
- (id)antiqueFilter;
- (id)postFiltFilter;
- (id)preFiltFilter;
- (id)filterArray;
- (void)addFilterBackToFilterArray:(id)fp8;
- (void)removeFilterFromFilterArray:(id)fp8;
- (id)window;
- (id)undoManager;
- (void)addFilterToArray:(id)fp8;
- (void)emphasisChanged:(id)fp8;
- (void)onContrastChanged:(id)fp8;
- (void)onSaturationChanged:(id)fp8;
- (void)onTemperatureChanged:(id)fp8;
- (void)onTintChanged:(id)fp8;
- (void)onSharpnessChanged:(id)fp8;
- (void)onShadowsChanged:(id)fp8;
- (void)onHighlightsChanged:(id)fp8;
- (void)onStraightenChanged:(id)fp8;
- (void)onNoiseChanged:(id)fp8;
- (void)onExposureChanged:(id)fp8;
- (void)onBlackWhitePointsChanged:(id)fp8;
- (void)onRotationChanged:(id)fp8;
- (void)onApplyEnhance;
- (void)onConstrainChange:(int)fp8 withRatio:(int)fp12 withOrientation:(int)fp16;
- (float)calculateConstrain:(float)fp8 denominator:(float)fp12 forceRatio:(BOOL)fp16 orientation:(int)fp20;
- (void)performNothingBecauseOfUndoBugs;
- (void)performContrastChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performSaturationChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performTemperatureChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performTintChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performSharpnessChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performNoiseChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performShadowsChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performHighlightsChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performStraightenChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performExposureChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performBlackWhitePointsChange:(float)fp8 whitePoint:(float)fp12 andGamma:(float)fp16 storeUndo:(BOOL)fp20 updateUI:(BOOL)fp24;
- (void)performRAWSettingsChangeForTemperature:(float)fp8 forTint:(float)fp12 forExposure:(float)fp16 storeUndo:(BOOL)fp20 updateUI:(BOOL)fp24;
- (void)performApplyBlackAndWhiteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplySepiaEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyAntiqueEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyFadeEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBoostEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyWhiteVignetteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBlackVignetteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBlurEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performCropChange:(struct _NSRect)fp8 storeUndo:(BOOL)fp24 updateUI:(BOOL)fp28;
- (void)performCropChangeRespectingStraightenAngle:(struct _NSRect)fp8 storeUndo:(BOOL)fp24 updateUI:(BOOL)fp28;
- (void)performConstrainChange:(int)fp8 constrainRatio:(int)fp12 constrainOrientation:(int)fp16 cropRect:(struct _NSRect)fp20 storeUndo:(BOOL)fp36 updateUI:(BOOL)fp40;
- (void)performRotationChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyEnhance:(struct EditEnhanceData)fp8 storeUndo:(BOOL)fp56 updateUI:(BOOL)fp60;
- (void)performAddBlemishEvents:(id)fp8 toBlemishArray:(id)fp12 ofType:(int)fp16 storeUndo:(BOOL)fp20 updateUI:(BOOL)fp24;
- (void)initializeEditWithEditList:(struct EditListData)fp8;
- (void)initializeEditWithBlemishList:(id)fp8;
- (void)updateDefaultRAWAdjustmentValues;
- (BOOL)currentImageIsRAW;
- (BOOL)currentImageIs16Bit;
- (id)transformForImageRotation:(float)fp8 scale:(float)fp12 width:(float *)fp16 height:(float *)fp20;
- (id)smallBlurredImage:(BOOL)fp8;
- (void)resetBlurImage;
- (id)setBlur:(BOOL)fp8;
- (void)straightenMouseUp:(id)fp8;
- (void)straightenMouseDown:(id)fp8;
- (void)resetStraightenStartCropRect;
- (void)close:(id)fp8;
- (void)blemishRadiusChanged:(id)fp8;
- (void)blemishOpacityChanged:(id)fp8;
- (void)redeyeParam1Changed:(id)fp8;
- (void)redeyeParam2Changed:(id)fp8;
- (void)redeyeParam3Changed:(id)fp8;
- (void)computeImageStatistics;
- (void)redEye:(id)fp8;
- (void)deleteImage;
- (void)initializeRetouchRasters;
- (void)resetRetouchRasters;
- (void)recreateCache1FromCache2;
- (void)recreateCIImagesForBlemishFilter;
- (void)clearRetouchRasters;
- (void)letRedeyeHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withAggressiveness:(int)fp20 expectingSelectionRect:(BOOL)fp24 usingAlgorithm:(int)fp28;
- (void)letWhitenBrushHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withRadius:(float)fp20 invokedWithDrag:(int)fp24;
- (void)letBlemishHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withRadius:(float)fp20 invokedWithDrag:(int)fp24 sourcePoint:(struct _NSPoint)fp28;
- (struct _NSRect)averageAdjacentPixels:(char *)fp8 withBytesPerPixel:(int)fp12 rowBytes:(unsigned long)fp16;
- (void)setTempTintAtPoint:(struct _NSPoint)fp8;
- (void)letColorSamplerHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 usingAlgorithm:(int)fp20;
- (void)letSharpenerHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (void)setCurrentAlgorithm:(int)fp8;
- (void)loadImageBytes:(struct _NSRect)fp8;
- (void)adjustTool:(int)fp8 inDirection:(int)fp12;
- (void)setToolBrushSize:(float)fp8;
- (void)setRedeyeTool:(int)fp8;
- (float)retouchRadiusToSliderValue:(float)fp8;
- (float)sliderValueToRetouchRadius:(float)fp8;
- (float)blemishRadius;
- (float)redeyeRadius;
- (float)blemishOpacity;
- (void)setBlemishRadius:(float)fp8;
- (void)setBlemishOpacity:(float)fp8;
- (void)zoomPopUpChanged:(id)fp8;
- (void)printSelection:(id)fp8;
- (struct CGSize)editSizeForFull:(BOOL)fp8 withRotate:(BOOL)fp12 andStraighten:(BOOL)fp16 andCrop:(BOOL)fp20;
- (struct _NSRect)editCropRectForFull:(BOOL)fp8 withRotate:(BOOL)fp12 andStraighten:(BOOL)fp16 andCrop:(BOOL)fp20;
- (void)setImageRenderModeWithRotate:(BOOL)fp8 andCrop:(BOOL)fp12 andAdjustments:(BOOL)fp16 andEffects:(BOOL)fp20;
- (struct _NSPoint)editLocationFromImageLocation:(struct _NSPoint)fp8 withCrop:(BOOL)fp16;
- (struct _NSPoint)imageLocationFromEditLocation:(struct _NSPoint)fp8 withRotate:(BOOL)fp16 andCrop:(BOOL)fp20;
- (struct _NSRect)recomputeCropRect:(struct _NSRect)fp8 forStraightenAngle:(float)fp24;
- (struct _NSRect)recomputeCropRect:(struct _NSRect)fp8 forFull:(BOOL)fp24 withDrag:(BOOL)fp28 withConstrain:(BOOL)fp32;
- (BOOL)enterCropMode;
- (void)applyCurrentCropAndConstrain:(BOOL)fp8;
- (void)HUDWillClose:(id)fp8;
- (void)saveAdjustmentHUDSettings;
- (void)restoreAdjustmentHUDSettings;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (BOOL)blemishEventListContains:(int)fp8;
- (BOOL)supportsFindCommand;

@end

@interface EditView : IPOpenGLView <ArchiveDisplayProtocol>
{
    Edit *mEdit;
    struct CGAffineTransform mScaleTransform;
    CIFilter *mTransformFilter;
    struct _NSPoint mLastBlemishPoint;
    float mBlemishRadius;
    int mToolChoice;
    float mBlemishRadiusFraction;
    struct _NSRect mCropRect;
    struct _NSRect mCropAsPercentage;
    struct _NSSize mPaddingOffset;
    struct _NSSize mScrollBarSize;
    BOOL mInZoomChanged;
    struct _NSRect mCloseRect;
    BOOL mInBlemishMode;
    BOOL mChangeBlemishCursor;
    struct _NSPoint mSourcePoint;
    BOOL mInBlemishDragMode;
    struct BlemishPointArray *mBlemishPoints;
    BOOL mInRedeyeMode;
    BOOL mInStraightenMode;
    BOOL mInWhiteBalanceMode;
    BOOL mMustUseFullRes;
    float mConstrain;
    BOOL mSizeToFit;
    BOOL mDrawHistogram;
    BOOL mInLiveResize;
    BOOL mInScroll;
    BOOL mAnimatingMultiple;
    struct _NSPoint mCurrentOrigin;
    NSTimer *mScrollTimer;
    CIImage *tmpImage;
    BOOL mInDragMode;
    float mGray;
    BOOL mWasLoading;
    BOOL mlockedFullOnScreen;
    BOOL mLockedCurrentImage;
    BOOL mLockedFullImage;
    BOOL mIsZoomed;
    BOOL mWindowResized;
    BOOL mResetConstrain;
    char *mProxyRaster;
    struct CGImage *mProxyImageRef;
    struct CGContext *mBitmapContext;
    NSImage *mCursorImage[10];
    NSCursor *mBlemishCursor;
    NSCursor *mRedeyeCursor;
    NSCursor *mBrushCursor[4];
    BOOL mInBrushMode;
    int mRedeyeTool;
    int mBlemishTool;
    int mNumberRedeyeCursors;
    int mNumberBlemishCursors;
    struct _NSPoint mFractionalImageZoomToPoint;
    struct _NSPoint mFractionalViewZoomToPoint;
    BOOL mInLoopMode;
    BOOL mShouldMoveLoop;
    float mEditCoordsToViewCoordsScale;
    BOOL mResizeOrDragCropSelection;
    CDAnonymousStruct13 mImageDrawParams;
    BOOL mAnimating;
    NSAnimation *mAnimation;
    float mAnimationPercentage;
    BOOL mAnimatingIn;
    BOOL mLastDrawBeforeAnimation;
    struct _NSRect mInitialAnimationRect;
    struct _NSRect mFinalAnimationRect;
    float mAnimationScale;
    float mInitialAnimationScale;
    BOOL mAnimatingCrop;
    BOOL mAnimateMaskSpecial;
    float mFinalZoom;
    CIImage *mAnimationImage;
    CIContext *mAnimationContext;
    BOOL mCanAnimate;
    BOOL mCheckCanAnimate;
    BOOL mIsGMA950;
    BOOL mCheckIsGMA950;
}

- (struct _NSPoint)distance:(float)fp8 rotatedByAngle:(float)fp12;
- (void)drawArc:(struct _NSPoint)fp8 radius:(float)fp16 startAngle:(float)fp20 endAngle:(float)fp24 lineColor:(id)fp28 borderColor:(id)fp32 centerTick:(BOOL)fp36;
- (id)ciSpotWithRadius:(float)fp8;
- (void)initialize;
- (void)initializeButtons;
- (void)setEdit:(id)fp8;
- (id)editor;
- (void)setBackgroundGray:(float)fp8;
- (void)resetContext;
- (void)clearContext;
- (void)removeFromSuperview;
- (void)dealloc;
- (struct _NSRect)viewImageDrawRect;
- (struct _NSRect)viewVisibleRect;
- (void)initializeRetouchRasters;
- (void)releaseRetouchRasters;
- (void)deleteRetouchImageRef;
- (void)resetRetouchRasters;
- (char *)proxyRaster;
- (struct CGImage *)proxyImageRef;
- (void)setFrame:(struct _NSRect)fp8;
- (void)previousImage:(id)fp8;
- (void)nextImage:(id)fp8;
- (void)markWindowSizeDirty;
- (void)startAnimation;
- (void)endAnimation;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)displayTempImage:(id)fp8;
- (void)drawDirtyRect;
- (void)drawCurrentFrame;
- (void)redrawForScroll;
- (void)redrawForControlKey;
- (void)_drawRectHandler:(struct IPImage *)fp8;
- (void)dragSelection:(id)fp8;
- (void)pan:(id)fp8;
- (void)sizeSelection:(id)fp8 initialMouseLoc:(struct _NSPoint)fp12 fromPoint:(struct _NSPoint)fp20 offset:(struct _NSPoint)fp28 pinX:(unsigned char)fp36 pinY:(unsigned char)fp40;
- (void)updateConstrain:(float)fp8;
- (BOOL)inCropViewMode;
- (void)recomputeCropAsPercentage;
- (struct _NSRect)cropRect;
- (struct _NSRect)cropPercentRect;
- (void)setCropRect:(struct _NSRect)fp8;
- (void)mouseDragged:(id)fp8;
- (void)setBlemishMode:(BOOL)fp8 display:(BOOL)fp12;
- (BOOL)inBlemishMode;
- (void)setBrushMode:(BOOL)fp8 display:(BOOL)fp12;
- (BOOL)inBrushMode;
- (void)setStraightenMode:(BOOL)fp8;
- (BOOL)inStraightenMode;
- (void)setRedeyeMode:(BOOL)fp8 display:(BOOL)fp12;
- (BOOL)inRedeyeMode;
- (void)setRedeyeTool:(int)fp8;
- (int)redeyeTool;
- (void)setWhiteBalanceMode:(BOOL)fp8 display:(BOOL)fp12;
- (BOOL)inWhiteBalanceMode;
- (void)setMustUseFullRes:(BOOL)fp8;
- (struct _NSRect)imageRect;
- (struct _NSRect)currentVisibleRect;
- (void)resetCropRect;
- (void)recalcImageDrawParams;
- (void)recalcImageDrawParams:(CDAnonymousStruct13 *)fp8;
- (void)recRotated;
- (void)scrollWheel:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)updateSlider;
- (void)resetUI;
- (void)scrollToPercentagePoint:(struct _NSPoint)fp8;
- (float)scale;
- (float)magnificationFactor;
- (struct _NSPoint)fractionalLocationInImage:(struct _NSPoint)fp8;
- (void)zoomChanged:(float)fp8 inLiveResize:(BOOL)fp12 forceRecalc:(BOOL)fp16;
- (void)zoomTo:(float)fp8 zoomToCursor:(BOOL)fp12;
- (void)reZoomToCurrent;
- (void)onZoomSliderChanged:(float)fp8 inLiveResize:(BOOL)fp12 forceRecalc:(BOOL)fp16;
- (void)zoomCompleted;
- (void)setZoomFactor:(int)fp8;
- (struct _NSSize)sizeToFitSize;
- (struct _NSSize)cropSizeToFitSize;
- (void)postZoomChanged:(int)fp8;
- (BOOL)isBookView;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (void)updateStatus;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)hasSelection:(int)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)resetCursorRects;
- (id)cursorForBlemishHUD;
- (void)changeBlemishCursor;
- (void)rotateImage:(id)fp8;
- (void)enhance:(id)fp8;
- (void)changeBlemishMode:(id)fp8;
- (void)showToolPanel:(id)fp8;
- (void)redEye:(id)fp8;
- (void)zoomPopUpChanged:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)revertImage:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)applyRankingToSelection:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)resetLastBlemishPoint;
- (void)setBlemishRadius:(float)fp8;
- (BOOL)usingFullRes;
- (void)currentAlbumWillSwitch:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (void)drawCrossCursor:(int)fp8 height:(int)fp12 cursorWidth:(int)fp16 cursorHeight:(int)fp20 mid:(int)fp24 xOffset:(int)fp28 yOffset:(int)fp32;
- (void)drawBlemishCursor:(int)fp8 height:(int)fp12 mid:(int)fp16 xOffset:(int)fp20 yOffset:(int)fp24;
- (void)drawWhitenCursor:(int)fp8 height:(int)fp12 mid:(int)fp16 xOffset:(int)fp20 yOffset:(int)fp24;
- (void)drawRedeyeCursor:(int)fp8 height:(int)fp12 mid:(int)fp16 xOffset:(int)fp20 yOffset:(int)fp24;
- (void)onCrop;
- (struct _NSRect)viewCropRectFromEditCropRect:(struct _NSRect)fp8;
- (struct _NSRect)editCropRectFromViewCropRect:(struct _NSRect)fp8;
- (void)updateCropRectUI;
- (struct _NSPoint)viewPointFromEditPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)editPointFromViewPoint:(struct _NSPoint)fp8;
- (void)allocAndPrepAnimationRaster;
- (void)freeAnimationRaster;
- (void)animateView;
- (void)animation:(id)fp8 didReachProgressMark:(float)fp12;
- (void)animationDidEnd:(id)fp8;
- (BOOL)canAnimate;
- (BOOL)isGMA950;

@end

@interface ExportController : NSObject
{
    id mWindow;
    id mExportView;
    NSButtonCell *mExportButton;
    NSTextField *mImageCount;
    ExportMgr *mExportMgr;
    ExportMgrRec *mCurrentPluginRec;
    ProgressController *mProgressController;
    BOOL mCurrentPluginHandlesMovies;
    BOOL mCancelExport;
    NSTimer *mTimer;
    NSString *mDirectoryPath;
    NSMutableArray *mExportPanelNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)currentPlugin;
- (id)currentPluginRec;
- (void)setCurrentPluginRec:(id)fp8;
- (BOOL)currentPluginHandlesMovies;
- (id)directoryPath;
- (void)setDirectoryPath:(id)fp8;
- (void)show;
- (void)_openPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)panel:(id)fp8 userEnteredFilename:(id)fp12 confirmed:(BOOL)fp16;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (BOOL)filesWillFitOnDisk;
- (void)export:(id)fp8;
- (void)_exportThread:(id)fp8;
- (void)_exportProgress:(id)fp8;
- (void)startExport:(id)fp8;
- (void)finishExport;
- (void)cancelExport;
- (void)cancel:(id)fp8;
- (void)enableControls;
- (id)window;
- (void)disableControls;
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)selectExporter:(id)fp8;
- (id)exportView;
- (BOOL)_hasPlugins;
- (void)_resizeExporterToFitView:(id)fp8;
- (void)_updateImageCount;

@end

@interface ExportMgr : NSObject <ExportImageProtocol>
{
    ArchiveDocument *mDocument;
    NSMutableArray *mExporters;
    NSArray *mSelectedAlbumsArray;
    struct IPPhotoList *mSelection;
    struct IPPhotoList *mMovieSelection;
    struct IPAlbumList *mSelectedAlbums;
    ExportController *mExportController;
    ImageDB *mDB;
    Thumbnailer *mThumbnailer;
    NSString *mOriginalDateFormatString;
    NSString *mDateTimeFormat;
    unsigned int mSessionID;
    struct _NSSize mLastExportSize;
}

+ (id)exportMgr;
+ (id)exportMgrNoAlloc;
- (id)init;
- (void)dealloc;
- (void)releasePlugins;
- (void)setExportController:(id)fp8;
- (id)exportController;
- (void)setDocument:(id)fp8;
- (id)document;
- (void)updateDocumentSelection;
- (unsigned int)count;
- (id)recAtIndex:(unsigned int)fp8;
- (void)scanForExporters;
- (unsigned int)imageCount;
- (BOOL)imageIsEditedAtIndex:(unsigned int)fp8;
- (BOOL)imageIsPortraitAtIndex:(unsigned int)fp8;
- (id)imagePathAtIndex:(unsigned int)fp8;
- (id)sourcePathAtIndex:(unsigned int)fp8;
- (struct _NSSize)imageSizeAtIndex:(unsigned int)fp8;
- (unsigned long)imageFormatAtIndex:(unsigned int)fp8;
- (unsigned long)originalImageFormatAtIndex:(unsigned int)fp8;
- (BOOL)originalIsRawAtIndex:(unsigned int)fp8;
- (BOOL)originalIsMovieAtIndex:(unsigned int)fp8;
- (id)imageTitleAtIndex:(unsigned int)fp8;
- (id)imageCommentsAtIndex:(unsigned int)fp8;
- (float)imageRotationAtIndex:(unsigned int)fp8;
- (id)thumbnailPathAtIndex:(unsigned int)fp8;
- (float)imageAspectRatioAtIndex:(unsigned int)fp8;
- (unsigned long long)imageFileSizeAtIndex:(unsigned int)fp8;
- (id)imageDateAtIndex:(unsigned int)fp8;
- (int)imageRatingAtIndex:(unsigned int)fp8;
- (id)imageTiffPropertiesAtIndex:(unsigned int)fp8;
- (id)imageExifPropertiesAtIndex:(unsigned int)fp8;
- (id)imageKeywordsAtIndex:(unsigned int)fp8;
- (id)imageFileNameAtIndex:(unsigned int)fp8;
- (void)commitImageRotation;
- (unsigned int)albumCount;
- (id)albumNameAtIndex:(unsigned int)fp8;
- (id)albumMusicPathAtIndex:(unsigned int)fp8;
- (id)albumCommentsAtIndex:(unsigned int)fp8;
- (id)albumsOfImageAtIndex:(unsigned int)fp8;
- (unsigned int)positionOfImageAtIndex:(unsigned int)fp8 inAlbum:(unsigned int)fp12;
- (struct IPPhotoInfo *)photoAtIndex:(unsigned int)fp8;
- (void)enableControls;
- (void)disableControls;
- (id)window;
- (void)clickExport;
- (void)startExport;
- (void)cancelExport;
- (void)cancelExportBeforeBeginning;
- (id)directoryPath;
- (unsigned int)sessionID;
- (id)temporaryDirectory;
- (BOOL)doesFileExist:(id)fp8;
- (BOOL)doesDirectoryExist:(id)fp8;
- (BOOL)createDir:(id)fp8;
- (id)uniqueSubPath:(id)fp8 child:(id)fp12;
- (id)makeUniquePath:(id)fp8;
- (id)makeUniqueFilePath:(id)fp8 extension:(id)fp12;
- (id)makeUniqueFileNameWithTime:(id)fp8;
- (BOOL)makeFSSpec:(id)fp8 spec:(struct FSSpec *)fp12;
- (id)pathForFSSpec:(struct FSSpec *)fp8;
- (BOOL)getFSRef:(struct FSRef *)fp8 forPath:(id)fp12 isDirectory:(BOOL)fp16;
- (id)pathForFSRef:(struct FSRef *)fp8;
- (unsigned long)countFiles:(id)fp8 descend:(BOOL)fp12;
- (unsigned long)countFilesFromArray:(id)fp8 descend:(BOOL)fp12;
- (unsigned long long)sizeAtPath:(id)fp8 count:(unsigned long *)fp12 physical:(BOOL)fp16;
- (BOOL)isAliasFileAtPath:(id)fp8;
- (id)pathContentOfAliasAtPath:(id)fp8;
- (id)stringByResolvingAliasesInPath:(id)fp8;
- (BOOL)ensurePermissions:(unsigned long)fp8 forPath:(id)fp12;
- (id)validFilename:(id)fp8;
- (id)getExtensionForImageFormat:(unsigned long)fp8;
- (unsigned long)getImageFormatForExtension:(id)fp8;
- (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 rotation:(float)fp24 colorProfile:(char ***)fp28;
- (void *)createThumbnailer;
- (void *)retainThumbnailer:(void *)fp8;
- (void *)autoreleaseThumbnailer:(void *)fp8;
- (void)releaseThumbnailer:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 maxBytes:(unsigned int)fp12 maxWidth:(unsigned int)fp16 maxHeight:(unsigned int)fp20;
- (struct _NSSize)thumbnailerMaxBounds:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 quality:(int)fp12;
- (int)thumbnailerQuality:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 rotation:(float)fp12;
- (float)thumbnailerRotation:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 outputFormat:(unsigned long)fp12;
- (unsigned long)thumbnailerOutputFormat:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 outputExtension:(id)fp12;
- (id)thumbnailerOutputExtension:(void *)fp8;
- (BOOL)thumbnailer:(void *)fp8 createThumbnail:(id)fp12 dest:(id)fp16;
- (struct _NSSize)lastImageSize:(void *)fp8;
- (struct _NSSize)lastThumbnailSize:(void *)fp8;
- (BOOL)exportImageAtIndex:(unsigned int)fp8 dest:(id)fp12 options:(CDAnonymousStruct17 *)fp16;
- (struct _NSSize)lastExportedImageSize;
- (BOOL)_checkForChangedDateLayout;

@end

@interface ExportMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id mPlugin;
    struct _NSSize mViewSize;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)description;
- (id)initWithPath:(id)fp8;
- (id)path;
- (id)bundle;
- (id)bundleInfo;
- (BOOL)isValidExportPlugin;
- (BOOL)loadPlugin;
- (id)exportPlugin;
- (void)unloadPlugin;
- (id)view;
- (struct _NSSize)viewSize;
- (void)rememberViewSize;
- (void)setPath:(id)fp8;
- (void)setBundle:(id)fp8;

@end

@interface ICController : NSObject
{
    ICObject *mRootObject;
    short mGetDeviceError;
}

+ (void)setHotPlugAction:(id)fp8;
+ (id)hotPlugAction;
+ (id)hotPlugActionPossibilities;
+ (id)retrieveAndSave:(id)fp8;
+ (id)deviceCapabilities:(id)fp8;
- (id)initWithDocument:(id)fp8;
- (void)dealloc;
- (id)_startupDeviceProc:(id)fp8;
- (void)_callCameraTreeWalk:(id)fp8;
- (void)_threadedStartupCheck:(id)fp8;
- (void)startupDeviceCheck;
- (void)_deviceAdded:(id)fp8;
- (void)_deviceRemoved:(id)fp8;
- (id)rootObject;
- (short)findRootObject;
- (short)icRegister;
- (short)_registerEventNotification:(id)fp8 notifyType:(unsigned long)fp12 notifyProc:(void *)fp16 refcon:(unsigned long)fp20;
- (short)icUnregister;
- (short)_unregisterEventNotification:(id)fp8 notifyType:(unsigned long)fp12 refcon:(unsigned long)fp16;

@end

@interface ICImportSpec : DBImportSpec
{
    ICObject *mICObject;
}

+ (id)importSpecWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
+ (id)importSpecWithICObject:(id)fp8 file:(id)fp12 shouldDelete:(BOOL)fp16;
- (id)initWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (void)dealloc;
- (id)initWithICObject:(id)fp8 file:(id)fp12 shouldDelete:(BOOL)fp16;
- (BOOL)fileIsPersistent;
- (id)object;
- (void)setObject:(id)fp8;
- (id)creationDate;
- (id)attributes;
- (BOOL)deleteIfNeeded;

@end

@interface ICObject : NSObject
{
    struct OpaqueICAObject *mICAObject;
    ImageDB *mDB;
    unsigned int mKey;
    struct map<long unsigned int, IPPhotoInfo*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPPhotoInfo*>>> *mRolls;
    BOOL mDeviceFound;
    NSLock *mLock;
    NSDictionary *mPropertyDictionary;
    BOOL mPropertyDictionaryRetrieved;
    NSMutableArray *mChildren;
    BOOL mChildrenRetrieved;
    unsigned long mChildCount;
    BOOL mChildCountRetrieved;
    unsigned long mImageCount;
    BOOL mImageCountRetrieved;
    NSData *mThumbnail;
    BOOL mThumbnailRetrieved;
    NSMutableArray *mPropertyList;
}

+ (short)setHotPlugAction:(id)fp8;
+ (BOOL)asyncCommunication;
+ (void)setAsyncCommunication:(BOOL)fp8;
+ (id)icObjectWithICAObject:(struct OpaqueICAObject *)fp8;
+ (id)ICAThumbnailToNSImage:(struct ICAThumbnail *)fp8;
- (id)init;
- (id)initWithICAObject:(struct OpaqueICAObject *)fp8;
- (void)dealloc;
- (id)description;
- (struct OpaqueICAObject *)icaObject;
- (void)setICAObject:(struct OpaqueICAObject *)fp8;
- (BOOL)isEqual:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)setDeviceFound:(BOOL)fp8;
- (BOOL)deviceFound;
- (BOOL)isCamera;
- (BOOL)isImage;
- (BOOL)isMovie;
- (BOOL)isDirectory;
- (BOOL)isLocked;
- (void)notifyMounted;
- (void)notifyUnmounted;
- (id)countObjectProc:(id)fp8;
- (unsigned long)countCameras;
- (void)threadedCountImages:(BOOL)fp8;
- (BOOL)imageCountRetrieved;
- (void)_doCountImages:(id)fp8;
- (unsigned long)countImages:(BOOL)fp8;
- (id)treeWalk:(unsigned long)fp8 target:(id)fp12 selector:(SEL)fp16 userInfo:(id)fp20;
- (id)getName:(BOOL)fp8;
- (id)getPropertyDictionary:(BOOL)fp8;
- (id)getChildren:(BOOL)fp8;
- (unsigned long)getChildCount:(BOOL)fp8;
- (id)getThumbnail:(BOOL)fp8;
- (id)getPropertyByType:(unsigned long)fp8 forceUpdate:(BOOL)fp12;
- (short)deleteObject;
- (short)eject;
- (short)retrievePropertyDictionary;
- (void)setPropertyDictionary:(id)fp8;
- (short)retrieveChildCount;
- (void)setChildCount:(unsigned long)fp8;
- (short)retrieveChildren;
- (id)_findRolls:(id)fp8;
- (void)setChildren:(id)fp8 needPropertyDictionary:(BOOL)fp12;
- (void)clearThumbnail;
- (void)retrieveThumbnail;
- (id)retrievePropertyByType:(unsigned long)fp8;
- (id)retrievePropertyData:(id)fp8;
- (id)retrievePropertyData:(id)fp8 startByte:(unsigned long)fp12 maxSize:(long)fp16;
- (unsigned long)retrievePropertyDataSize:(id)fp8;
- (id)downloadFile:(id)fp8 deleteAfterDownload:(BOOL)fp12 error:(short *)fp16;

@end

@interface ICProperty : NSObject
{
    struct OpaqueICAProperty *mProperty;
    struct ICAPropertyInfo mPropertyInfo;
}

+ (id)icPropertyWithProperty:(struct OpaqueICAProperty *)fp8 info:(struct ICAPropertyInfo *)fp12;
- (id)init;
- (id)initWithProperty:(struct OpaqueICAProperty *)fp8 info:(struct ICAPropertyInfo *)fp12;
- (struct OpaqueICAProperty *)property;
- (void)setProperty:(struct OpaqueICAProperty *)fp8;
- (struct ICAPropertyInfo *)propertyInfo;
- (void)setPropertyInfo:(struct ICAPropertyInfo *)fp8;

@end

@interface ICTreeWalk : NSObject
{
    ICObject *mObject;
    id mUserInfo;
}

- (id)init;
- (id)initWithObject:(id)fp8 userInfo:(id)fp12;
- (id)object;
- (id)userInfo;

@end

@interface ImageFilterMgr : NSObject <ImageFilterSupportProtocol>
{
    NSMutableArray *mFilters;
}

+ (id)imageFilterMgr;
- (void)scanForFilters;
- (void)releasePlugins;
- (unsigned int)count;
- (id)recAtIndex:(unsigned int)fp8;

@end

@interface ImageFilterMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id mController;
    id mPlugin;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)initWithPath:(id)fp8 controller:(id)fp12;
- (id)path;
- (id)controller;
- (void)setController:(id)fp8;
- (id)bundle;
- (id)bundleInfo;
- (id)title;
- (BOOL)isValidImageFilterPlugin;
- (BOOL)loadPlugin;
- (id)imageFilterPlugin;
- (void)unloadPlugin;
- (void)setPath:(id)fp8;
- (void)setBundle:(id)fp8;

@end

@interface FileImportSpec : ImportSpec
{
    NSMutableArray *mFileContents;
    NSMutableArray *mDirContents;
    NSDictionary *mAttributes;
}

+ (id)fileArrayWithImportSpecArray:(id)fp8;
+ (id)importSpecArrayWithFileArray:(id)fp8 shouldDelete:(BOOL)fp12;
+ (id)importSpecArrayWithFileArray:(id)fp8;
+ (id)importSpecWithFile:(id)fp8;
+ (id)importSpecWithFile:(id)fp8 shouldDelete:(BOOL)fp12;
+ (BOOL)isPath:(id)fp8 inHierarchy:(id)fp12;
- (id)init;
- (void)dealloc;
- (id)fileContents;
- (id)dirContents;
- (unsigned long)countContents;
- (id)creationDate;
- (id)attributes;
- (void)setAttributes:(id)fp8;
- (BOOL)deleteIfNeeded;
- (BOOL)validateWithTarget:(id)fp8 selector:(SEL)fp12 session:(id)fp16;

@end

@interface ImportSession : NSObject
{
    ImageDB *mDB;
    Album *mSourceAlbum;
    Album *mDestinationAlbum;
    Album *mCameraDestinationAlbum;
    NSMutableArray *mSpecList;
    NSMutableArray *mCopiedSpecs;
    NSMutableArray *mCompletedSpecs;
    int mRejectedSpecCount;
    int mShouldImportDupes;
    BOOL mPaused;
    BOOL mStopRequested;
    BOOL mCancelRequested;
    int mCreateDupe;
    BOOL mNotifiedStart;
    BOOL mNotifiedDone;
    NSLock *mPauseLock;
    struct IPPhotoInfo *mLastImportedPhoto;
    BOOL mDeleteAlbumOnCancel;
    PLHolder *mImportedPhotos;
    BOOL mAllowArchiveDirImport;
    NSButton *mApplyToAllCheckbox;
    NSImageView *mImportImageView;
    NSImageView *mExistingImageView;
    NSPanel *mDuplicateImagePanel;
    NSPanel *mFailedPanel;
    NSTextView *mFailedText;
    NSTextField *mFailedCount;
    NSTextField *mFailedReasonField;
    struct ImportWorkSessionData *mImportWorkSessionData;
    int mFailedImageImportCount;
    BOOL mFailedImageDiskFull;
    NSMutableArray *mFailedImages;
    BOOL mInFailedImportEvent;
    int mFailedReason;
    NSMutableArray *mFailedImportNibObjects;
    BOOL mForceNoAliases;
    int mReference;
    BOOL mForceAllPhotos;
    id mReferenceObj;
    BOOL mPerPhotoNotifications;
    BOOL mDontSwitchToSourceAlbum;
    PathLocker *mPathLocker;
    BOOL mNoCache;
}

+ (id)importSession;
+ (id)importSessionForDB:(id)fp8;
- (id)init;
- (id)initWithDB:(id)fp8;
- (void)dealloc;
- (id)db;
- (void)_setDB:(id)fp8;
- (id)document;
- (id)albumMgr;
- (void)setLastImportedPhoto:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)lastImportedPhoto;
- (BOOL)deleteAlbumOnCancel;
- (void)setShouldImportDuplicates:(int)fp8;
- (int)shouldImportDuplicates;
- (id)sourceAlbum;
- (id)destinationAlbum;
- (id)specList;
- (long)remainingCount;
- (void)stop;
- (BOOL)needToStop;
- (void)cancel;
- (void)checkPause;
- (void)pause;
- (BOOL)isPaused;
- (void)resume;
- (void)requestStop;
- (void)_stopRequestSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)importFiles;
- (void)importFromCurrentSource;
- (id)referenceObj;
- (void)setReferenceObj:(id)fp8;
- (void)importFromAlbum:(id)fp8 toAlbum:(id)fp12 deleteAlbumOnCancel:(BOOL)fp16;
- (void)setForceAllPhotos:(BOOL)fp8;
- (BOOL)forceAllPhotos;
- (void)_cameraSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)importAlbumsObj:(id)fp8;
- (void)importAlbums:(struct IPAlbumList *)fp8;
- (void)setDontSwitchToSourceAlbum:(BOOL)fp8;
- (void)importPhotos:(struct IPPhotoList *)fp8 source:(id)fp12 addToAlbum:(id)fp16 deletePhotosAfterImport:(BOOL)fp20 waitUntilDone:(BOOL)fp24;
- (struct IPPhotoList *)_doImportPhotos:(struct IPPhotoList *)fp8 source:(id)fp12 addToAlbum:(id)fp16 deletePhotosAfterImport:(BOOL)fp20 waitUntilDone:(BOOL)fp24;
- (void)importFromPaths:(id)fp8 addToAlbum:(id)fp12 shouldDelete:(BOOL)fp16 deleteAlbumOnCancel:(BOOL)fp20;
- (id)_canTerminate;
- (void)_threadedAcceptInvitations:(id)fp8;
- (void)_beginImport;
- (void)_endImport;
- (id)_createSpecsForList:(struct IPPhotoList *)fp8;
- (void)_sortCompletedSpecs;
- (void)_createWorkThread:(id)fp8;
- (void)_releaseWorkSessionData;
- (id)pathLocker;
- (void)_importFromSource:(id)fp8;
- (BOOL)noCache;
- (void)_addKeyword:(id)fp8 toPhoto:(struct IPPhotoInfo *)fp12;
- (void)_addSpecialKeywordsToPhoto:(struct IPPhotoInfo *)fp8;
- (void)_addKeywords:(id)fp8 toPhoto:(struct IPPhotoInfo *)fp12;
- (void)_addIPTCDataToPhoto:(struct IPPhotoInfo *)fp8;
- (void)_finishImport:(id)fp8;
- (id)importedPhotos;
- (void)_addCopiedSpec:(id)fp8;
- (void)_threadedImportFromSource:(id)fp8;
- (void)_fileFailedImport:(id)fp8 reason:(int)fp12;
- (struct IPPhotoList *)_createPhotos:(id)fp8 db:(id)fp12 parentRoll:(struct IPRoll *)fp16 archiveDate:(double)fp20;
- (void)_addSourceAlbum:(id)fp8;
- (void)_addPhotosToSourceAlbum:(id)fp8;
- (void)_threadedGatherFileSpecs:(id)fp8;
- (void)_fileImportComplete:(id)fp8;
- (void)notifyImportPhotoStart:(id)fp8;
- (void)notifyImportPhotoCancel:(id)fp8;
- (void)notifyImportPhotoFinished:(id)fp8;
- (void)_notifyImportPhotoStart:(id)fp8;
- (void)_notifyImportPhotoCancel:(id)fp8;
- (void)_notifyImportPhotoFinished:(id)fp8;
- (void)notifyImportSpecCopied:(id)fp8 rejected:(BOOL)fp12;
- (void)_notifyCopied:(id)fp8;
- (id)_addSpecsToDB:(id)fp8 shouldDelete:(BOOL)fp12 forceSingleRoll:(BOOL)fp16;
- (void)_failedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_finishAddingImages:(id)fp8;
- (void)_loadFailedNib;
- (void)displayFailedImageList:(id)fp8 count:(int)fp12;
- (void)_runFailedPanel:(id)fp8;
- (void)_closeFailedPanel;
- (void)failedPanelOK:(id)fp8;
- (int)shouldCreateDuplicateOfPhoto:(struct IPPhotoInfo *)fp8 withSourceFile:(id)fp12;
- (void)_shouldCreateDupeMainThread:(id)fp8;
- (void)skipPhoto:(id)fp8;
- (void)cancelImport:(id)fp8;
- (void)duplicatePhoto:(id)fp8;
- (void)_deleteIfNeeded:(id)fp8;
- (void)_deleteFromArchive:(id)fp8 canceled:(BOOL)fp12;
- (id)_validateSpecs:(id)fp8 validator:(id)fp12 selector:(SEL)fp16;
- (id)_skipArchiveDir:(id)fp8;
- (void)setAllowArchiveDirImport:(BOOL)fp8;
- (BOOL)allowArchiveDirImport;
- (void)setForceNoAliases:(BOOL)fp8;
- (BOOL)forceNoAliases;
- (void)setReference:(int)fp8;
- (int)reference;
- (void)setPerPhotoNotifications:(BOOL)fp8;

@end

@interface ImportSheet : NSObject
{
    id mSheet;
    BOOL mDeleteAfter;
}

- (id)init;
- (id)sheet;
- (BOOL)deleteAfter;
- (void)yes:(id)fp8;
- (void)no:(id)fp8;
- (void)toggleDelete:(id)fp8;

@end

@interface ImportSpec : NSObject
{
    NSString *mFile;
    unsigned int mImageFormat;
    struct IPPhotoInfo *mPhoto;
    BOOL mDelete;
    int mValidateResult;
    int mFailReason;
    int mOrder;
}

+ (id)importSpecWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)init;
- (id)initWithFile:(id)fp8;
- (id)initWithFile:(id)fp8 shouldDelete:(BOOL)fp12;
- (void)dealloc;
- (id)initWithPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)fileIsPersistent;
- (BOOL)fileIsMounted;
- (id)file;
- (void)setFile:(id)fp8;
- (struct IPPhotoInfo *)photo;
- (void)setPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)shouldDelete;
- (void)setShouldDelete:(BOOL)fp8;
- (int)validateResult;
- (void)setValidateResult:(int)fp8;
- (int)failReason;
- (void)setFailReason:(int)fp8;
- (id)creationDate;
- (id)attributes;
- (unsigned long)imageFormat;
- (void)setImageFormat:(unsigned long)fp8;
- (int)order;
- (void)setOrder:(int)fp8;
- (int)compareOrder:(id)fp8;
- (BOOL)deleteIfNeeded;

@end

@interface PhotoCD : NSObject
{
    NSString *mName;
    ImageDB *mDB;
    unsigned int mKey;
    NSNumber *mDiskID;
    NSString *mMountPoint;
    unsigned int mImageCount;
    NSString *mImageRoot;
    NSArray *mImages;
    int mPhotoCDFormat;
}

- (id)initWithDiskID:(id)fp8 mountPoint:(id)fp12;
- (void)dealloc;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (int)photoCDFormat;
- (void)_acquireImageList;
- (id)_translateResolutionKeyToString:(int)fp8;
- (id)name;
- (id)mountPoint;
- (id)diskID;
- (id)getThumbnail;
- (BOOL)stillExists;
- (int)imageCount;
- (id)images;
- (id)imageRoot;
- (id)imagePathAtIndex:(int)fp8;
- (id)imageAtIndex:(int)fp8 resolution:(int)fp12;
- (id)jpegAtIndex:(int)fp8 resolution:(int)fp12 compression:(float)fp16 putSize:(struct _NSSize *)fp20;
- (void *)rgbBufferAtIndex:(int)fp8 resolution:(int)fp12 putSize:(struct _NSSize *)fp16;
- (id)modificationDateForPhotoAtIndex:(int)fp8;

@end

@interface PhotoCDImage : NSObject
{
    NSString *mPath;
    PhotoCD *mPhotoCD;
    ImageDB *mDB;
    unsigned int mKey;
}

+ (id)imageArrayWithPaths:(id)fp8 photoCD:(id)fp12;
- (id)initWithPath:(id)fp8 photoCD:(id)fp12;
- (void)dealloc;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;

@end

@interface PhotoCDManager : NSObject
{
    NSMutableDictionary *mPhotoCDs;
    NSMutableDictionary *mMountPoints;
    id mDelegate;
    BOOL mRegistered;
    BOOL mMountNotifySuppressed;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (BOOL)ready;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (int)photoCDCount;
- (id)photoCDs;
- (id)mountPoints;
- (void)suppressMountNotifications:(BOOL)fp8;
- (BOOL)isMountSuppressed;
- (void)registerWithDiskArb:(BOOL)fp8;
- (void)CDInserted:(id)fp8;
- (void)CDEjected:(id)fp8;
- (id)JPEGDataFromPhotoCDFile:(id)fp8 resolution:(id)fp12 compression:(float)fp16 putSize:(struct _NSSize *)fp20;
- (id)NSImageFromPhotoCDFile:(id)fp8 resolution:(id)fp12;
- (id)PPMDataFromPhotoCDFile:(id)fp8 resolution:(id)fp12;
- (CDAnonymousStruct11)rgbBufferFromPPMData:(id)fp8;
- (id)NSBitmapImageRepFromRGB:(CDAnonymousStruct11)fp8;
- (id)NSImageFromRGB:(CDAnonymousStruct11)fp8;

@end

@interface CalendarView : NSControl
{
    NSButton *mReturnToYearsButton;
    NSButton *mClearSelectionButton;
    NSButton *mPreviousButton;
    NSButton *mNextButton;
    BOOL mShowDays;
    int mWeekStartOffset;
    int mYear;
    int mMonth;
    int mMonthsToShow;
    BOOL mShowPartialMonths;
    int mMinYear;
    int mMinMonth;
    int mMaxYear;
    int mMaxMonth;
    struct MapOfDays *mPictureDays;
    struct SetOfDays *mSelectedDays;
    BOOL mClickThroughSelection;
    NSDictionary *mTitleTextAttrs;
    NSDictionary *mTextAttrs;
    NSDictionary *mSelectedTextAttrs;
    NSDictionary *mNoPhotoTextAttrs;
    NSDictionary *mNoPhotoSelectedTextAttrs;
    float mLocalizedWidth;
    float mCellWidth;
    float mCellLeft;
    float mWeekTabWidth;
    float mCellAscent;
    float mCellDescent;
    float mCellLeading;
    float mMonthTextHeight;
    float mWeekTextHeight;
    float mWeekTextExtraHeight;
    float mMonthExtraHeight;
    float mMonthModeYearTextHeight;
    float mMonthModeCenterDividerWidth;
    float mMonthModeExtraHeight;
    float mMonthModeYearMonthHeightSpace;
    float mDayTextSize;
    char *mDayTextFont;
    char *mNoPhotoDayTextFont;
    NSColor *mBlackColor;
    NSColor *mCellBackgroundColor;
    NSColor *mCellSelectedBackgroundColor;
    NSColor *mCellClickThroughSelectedBackgroundColor;
    NSColor *mCellSelectedBackgroundNoPhotoColor;
    NSColor *mCellClickThroughSelectedBackgroundNoPhotoColor;
    NSColor *mNoPhotoTextColor;
    NSColor *mNoPhotoSelectedTextColor;
    NSColor *mTextColor;
    NSColor *mSelectedTextColor;
    NSColor *mWeekTabBackgroundColor;
    NSColor *mWeekTabSelectedBackgroundColor;
    NSColor *mWeekTabClickThroughSelectedBackgroundColor;
    NSColor *mWeekTabDimpleColor;
    NSColor *mWeekTabSelectedDimpleColor;
    float mAnimationOffset;
    double mAnimationDuration;
    SEL mAction;
    id mTarget;
    double mLastScrollWheelEvent;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (BOOL)isShowingDays;
- (void)setShowDays:(BOOL)fp8;
- (void)setShowPartialMonths:(BOOL)fp8;
- (void)showReasonableRange;
- (BOOL)clearPictureDays;
- (BOOL)setPictureDay:(double)fp8;
- (void)doneSetPictureDay;
- (void)selectDate:(double)fp8;
- (void)currentlyShowingStartYear:(int *)fp8 startMonth:(int *)fp12 endYear:(int *)fp16 endMonth:(int *)fp20;
- (void)scrollIntoView:(double)fp8 withAnimation:(BOOL)fp16 atBottom:(BOOL)fp20;
- (void)scrollToToday;
- (void)drawingPreflight;
- (BOOL)hasSelection;
- (BOOL)clickThroughSelection;
- (struct SetOfDays *)selectedDays;
- (struct MapOfDays *)pictureDays;
- (void)showWeekTab:(BOOL)fp8;
- (float)preferredHeightForVerticalSize:(float)fp8 monthsFittingOut:(int *)fp12;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (float)localizedWidth;
- (void)chooseNextMonth:(id)fp8;
- (void)choosePrevMonth:(id)fp8;
- (void)chooseFirstPictureMonth:(id)fp8;
- (void)chooseLastPictureMonth:(id)fp8;
- (void)chooseFirstSelectedMonth:(id)fp8;
- (void)chooseLastSelectedMonth:(id)fp8;
- (void)chooseShowWeekTabs:(id)fp8;
- (void)chooseToggleDays:(id)fp8;
- (void)chooseShowToday:(id)fp8;
- (void)chooseCancelSelection:(id)fp8;
- (void)_forceShowDays:(BOOL)fp8;
- (void)synchYearMonthToggleButton;
- (void)_synchUpDownButtons;
- (id)_pathForRectangle:(struct _NSRect)fp8 leftCurve:(BOOL)fp24 rightCurve:(BOOL)fp28;
- (float)_pointInYear:(int)fp8 inRectangle:(struct _NSRect)fp12 mousePoint:(struct _NSPoint)fp28 partOut:(int *)fp36 dateOut:(double *)fp40;
- (float)_pointInMonth:(int)fp8 forYear:(int)fp12 inRectangle:(struct _NSRect)fp16 mousePoint:(struct _NSPoint)fp32 partOut:(int *)fp40 dateOut:(double *)fp44;
- (float)_drawYear:(int)fp8 inRectangle:(struct _NSRect)fp12;
- (void)_drawWeekTabForWeekStarting:(double)fp8 usingRectangle:(struct _NSRect)fp16;
- (float)_drawMonth:(int)fp8 forYear:(int)fp12 inRectangle:(struct _NSRect)fp16;
- (float)_heightOfMonth:(int)fp8 forYear:(int)fp12;
- (float)_heightOfYear;
- (void)_adjustToViewSize:(struct _NSSize)fp8;
- (void)_showMonth:(double)fp8 atEnd:(BOOL)fp16;
- (void)_findPoint:(struct _NSPoint)fp8 partOut:(int *)fp16 dateOut:(double *)fp20;
- (double)_dateWithClickThrough:(double)fp8;
- (int)_yearWithClickThrough:(int)fp8;
- (void)_setRangeLimits;
- (void)_setupFontCG:(struct CGContext *)fp8 forDrawingDay:(double)fp12;
- (id)_textAttrsForPictures:(BOOL)fp8 selected:(BOOL)fp12;
- (void)_setupFontCG:(struct CGContext *)fp8 pictures:(BOOL)fp12 selected:(BOOL)fp16;
- (id)_backgroundForSelected:(BOOL)fp8 withPictures:(BOOL)fp12;
- (void)_selectionChanged;
- (BOOL)_wholeWeekSelected:(double)fp8;
- (float)_minWidthForLanguage;

@end

@interface ICUndoRec : NSObject
{
    id mId;
    id mValue;
    int mType;
}

- (id)initWithObject:(id)fp8 andValue:(id)fp12 type:(int)fp16;
- (void)dealloc;
- (int)type;
- (id)value;
- (id)object;

@end

@interface InfoCommentView : BackgroundColorView
{
    id commentText;
    BOOL mFullSizeInfo;
}

- (void)_installSubview:(id)fp8;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)setFullSizeInfo:(BOOL)fp8;

@end

@interface InfoController : NSObject
{
    ArchiveController *mArchiveController;
    BurnController *mBurnController;
    InfoView *mBurnInfo;
    BOOL mInited;
    int mSpecialSwitch;
    int mInitialMode;
    float mPreviousViewHeight;
    NSButton *mInfoButton;
    NSButton *mCalendarButton;
    NSButton *mKeywordButton;
    id mSplitView;
    NSView *mBottomView;
    InfoView *mCurrentInfo;
    InfoView *mBlankInfo;
    InfoView *mSuperInfo;
    ImageDB *mCurrentDB;
    struct MessageReceiver mMessageReceiver;
    SuperInfo *mHUDInfo;
    HUDWindow *mHUDPanel;
    BOOL mUpdatePaused;
    BOOL mPausedIsAlbumSwitch;
    BOOL mPausedNeedUpdate;
    NSImage *mButtonInfoH;
    NSImage *mButtonInfoN;
    NSImage *mButtonInfoHP;
    NSImage *mButtonInfoNP;
    BOOL mCurrentAlbumAllowsSearch;
}

- (void)_initializeHUD;
- (void)showHUD:(id)fp8;
- (void)hideHUD:(id)fp8;
- (void)closeHUD:(id)fp8;
- (id)hudInfo;
- (id)hudPanel;
- (void)awakeFromNib;
- (void)dealloc;
- (id)undoManagerForTextView:(id)fp8;
- (id)currentAlbum;
- (id)displayedAlbum;
- (id)albumMgr;
- (void)installSelection:(struct IPPhotoList *)fp8;
- (void)importFromCurrentSource:(id)fp8;
- (void)importFromAlbum:(id)fp8;
- (void)showSlideShowPanel:(id)fp8;
- (void)ensureInfoVisibility;
- (id)aggregateDateForSelection:(struct IPPhotoList *)fp8;
- (void)_setCurrentInfo:(id)fp8;
- (void)selectionChanged:(id)fp8;
- (void)safeToBegin;
- (void)showOrHideIfNeeded;
- (void)pauseUpdating;
- (void)resumeUpdating;
- (void)dataChanged:(id)fp8;
- (float)minimumHeight;
- (void)loadSavedPosition;
- (BOOL)isSearchingAllowed;
- (void)initializeImages;
- (void)refreshModeButtons;
- (void)_setInfoViewHeight:(float)fp8 forView:(id)fp12 withAnimation:(BOOL)fp16;
- (void)cancelInfoSearching;
- (int)currentMode;
- (void)setMode:(int)fp8 withAnimation:(BOOL)fp12;
- (void)infoModeClicked:(id)fp8;
- (void)rememberHeight;
- (BOOL)snapIfNeeded;
- (id)undoManager;
- (id)stateDictionary;
- (void)resetState:(id)fp8;
- (BOOL)burnArmed;
- (BOOL)burnInProgress;
- (void)setBurnInfo:(id)fp8;
- (id)burnInfo;
- (id)discName;
- (void)setDiscName:(id)fp8;
- (id)superInfo;
- (id)archiveController;

@end

@interface InfoInspector : NSObject
{
    ArchiveController *mArchiveController;
    NSWindow *mWindow;
    NSTabView *mTabView;
    id mCameraFormat;
    id mCameraMaker;
    id mCameraModel;
    id mCameraSoftware;
    id mEXIFVersion;
    id mExposureAperture;
    id mExposureBias;
    id mExposureBrightness;
    id mExposureDistance;
    id mExposureFlash;
    id mExposureFocalLength;
    id mExposureIndex;
    id mExposureISOASA;
    id mExposureLightSource;
    id mExposureMaxAperture;
    id mExposureMetering;
    id mExposureProgram;
    id mExposureSensing;
    id mExposureShutter;
    id mGPSLatitude;
    id mGPSLongitude;
    id mGPSAltitude;
    id mGPSShowButton;
    id mFileImportedDate;
    id mFileKind;
    id mFileModifiedDate;
    id mFileName;
    id mFileSize;
    id mFlashPixVersion;
    id mImageColorMode;
    id mImageCompressor;
    id mImageDepth;
    id mImageDigitizedDate;
    id mImageDPI;
    id mImageHeight;
    id mImageOriginalDate;
    id mImageRatio;
    id mImageSize;
    id mImageUserComment;
    id mImageWidth;
    NSFlippedView *mScrollDocumentView;
    double mGPSLatitudeValue;
    double mGPSLongitudeValue;
    NSMutableArray *mInfoPanelNibObjects;
    struct MessageReceiver mMessageReceiver;
    BOOL mMessageReceiverCreated;
    NSString *mDateTimeFormat;
    NSString *mOriginalDateFormatString;
    Ellipsizer *mEllipsizer;
    NSWindow *mRegularWindow;
    HUDWindow *mHUDWindow;
}

+ (void)initialize;
+ (id)dateFormatString;
+ (id)dateString:(id)fp8;
+ (id)fileSizeString:(struct IPPhotoInfo *)fp8;
+ (id)fileImportDateString:(struct IPPhotoInfo *)fp8 format:(id)fp12;
+ (id)fileModifiedDateString:(struct IPPhotoInfo *)fp8 format:(id)fp12;
+ (id)nonEmptyString:(id)fp8;
+ (id)emptyString;
+ (id)nonEmptyDateString:(id)fp8 format:(id)fp12;
+ (id)ellipsizedNonEmptyString:(id)fp8 width:(float)fp12;
+ (id)apertureString:(double)fp8;
+ (id)shutterString:(double)fp8;
+ (id)brightnessString:(double)fp8;
+ (id)biasString:(double)fp8;
+ (id)distanceString:(double)fp8;
+ (id)focalLengthString:(double)fp8;
+ (id)indexString:(double)fp8;
+ (id)sensingString:(short)fp8;
+ (id)meteringString:(short)fp8;
+ (id)lightSourceString:(short)fp8;
+ (id)programString:(short)fp8;
+ (id)flashString:(short)fp8;
+ (id)isoSpeedString:(short)fp8;
+ (id)positionString:(BOOL)fp8 degrees:(double)fp12 minutes:(double)fp20 seconds:(double)fp28;
+ (id)altitudeString:(double)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)_loadNibIfNeeded;
- (void)show;
- (BOOL)isVisible;
- (void)hide;
- (void)windowWillClose:(id)fp8;
- (void)_userDefaultsChanged:(id)fp8;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)selectionChanged:(id)fp8;
- (void)showGPS:(id)fp8;
- (void)_updateImageInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateFileInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateCameraInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateExposureInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateGPSInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)isHUD;
- (void)_layOutSections;
- (void)groupDisclosurePressed:(id)fp8;
- (void)_convertToNewLook;
- (BOOL)closeHUD:(id)fp8;
- (void)useHUDLook:(BOOL)fp8;
- (BOOL)_checkForChangedDateLayout;

@end

@interface NSFavoriteButton : NSButton
{
}

- (void)mouseDown:(id)fp8;

@end

@interface InfoView : NSView
{
    InfoController *mInfoController;
    NSTextField *mTitleText;
    BOOL mAnimatingRightNow;
    BOOL mCurrent;
}

- (id)infoController;
- (void)setInfoController:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)updateData:(BOOL)fp8;
- (float)titleInset;
- (void)setFrameSize:(struct _NSSize)fp8;
- (float)minimumHeight;
- (float)snapSizeForHeight:(float)fp8;
- (float)snapIncrement;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)beginAnimation;
- (void)endAnimation;

@end

@interface KeyClass : NSObject
{
    unsigned long mKey;
}

+ (void)initialize;
+ (id)keyWithKey:(id)fp8;
+ (id)keyWithString:(id)fp8;
+ (id)keyWithUnsignedLong:(unsigned long)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithKey:(id)fp8;
- (id)initWithString:(id)fp8;
- (id)initWithUnsignedLong:(unsigned long)fp8;
- (void)setKey:(id)fp8;
- (void)increment;
- (BOOL)isEqual:(id)fp8;
- (int)compare:(id)fp8;
- (id)description;
- (id)number;
- (unsigned long)unsignedLongValue;
- (void)setUnsignedLongValue:(unsigned long)fp8;
- (id)stringValue;
- (id)stringValueWithExtension:(id)fp8;

@end

@interface KeyMgr : NSObject <NSCoding, KeyProtocol>
{
    struct vector<Key, std::allocator<Key>> *mKeys;
    BOOL mIsModified;
    NSLock *mKeyLock;
}

+ (void)initialize;
+ (id)keyMgrWithKeyMgr:(id)fp8;
+ (id)keyMgrWithCapacity:(unsigned int)fp8;
+ (id)keyMgrWithKey:(unsigned long)fp8;
+ (id)keyMgrWithKeys:(unsigned int *)fp8 count:(unsigned int)fp12;
+ (id)keyMgr;
- (id)init;
- (id)initWithKeyMgr:(id)fp8;
- (id)initWithCapacity:(unsigned int)fp8;
- (id)initWithKey:(unsigned long)fp8;
- (id)initWithKeys:(unsigned int *)fp8 count:(unsigned int)fp12;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (unsigned int)count;
- (struct vector<Key, std::allocator<Key>> *)keys;
- (unsigned long)keyAtIndex:(unsigned int)fp8;
- (BOOL)hasAnyKeys:(id)fp8;
- (BOOL)hasKey:(unsigned long)fp8;
- (BOOL)isEqualKeys:(id)fp8;
- (unsigned int)findIndexForKey:(unsigned long)fp8;
- (void)replaceKeyAtIndex:(unsigned int)fp8 withKey:(unsigned long)fp12;
- (void)addKey:(unsigned long)fp8;
- (void)insertKey:(unsigned long)fp8 atIndex:(int)fp12;
- (id)uniqueKeys:(id)fp8;
- (void)add:(unsigned long)fp8;
- (void)addWithKeyMgr:(id)fp8;
- (void)addUniqueWithKeyMgr:(id)fp8;
- (BOOL)addUnique:(unsigned long)fp8;
- (void)addWithPhotoList:(struct IPPhotoList *)fp8;
- (void)addUniqueWithPhotoList:(struct IPPhotoList *)fp8;
- (void)remove:(unsigned long)fp8;
- (void)removeWithKeyMgr:(id)fp8;
- (void)removeAll;
- (BOOL)isModified;
- (void)replaceContentsWithKeyMgr:(id)fp8;
- (void)_setKeys:(id)fp8;

@end

@interface Keyword : NSObject <NSCoding>
{
    unsigned int mKey;
    NSString *mStringValue;
    NSString *mShortcut;
}

+ (void)initialize;
+ (id)keywordWithKeyword:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)initWithKey:(unsigned long)fp8 stringValue:(id)fp12 shortcut:(id)fp16;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)_setKey:(unsigned long)fp8;
- (id)shortcut;
- (void)setShortcut:(id)fp8;
- (BOOL)_setShortcut:(id)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (BOOL)_setStringValue:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)description;
- (BOOL)isVisible;
- (BOOL)isFavorite;
- (BOOL)isEqual:(id)fp8;
- (int)compareStringValue:(id)fp8;

@end

@interface Keyword (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface KeywordCell : NSActionCell
{
    NSImage *mIcon;
    struct _NSRect mFrame;
}

+ (void)initialize;
+ (unsigned int)desiredHeight;
- (id)init;
- (void)dealloc;
- (BOOL)drawIcon;
- (struct _NSPoint)iconOriginForCell:(struct _NSRect)fp8 iconSize:(struct _NSSize)fp24;
- (struct _NSRect)textFrameForCell:(struct _NSRect)fp8 textSize:(struct _NSSize)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)endEditing;

@end

@interface KeywordController : NSWindowController
{
    ArchiveController *mArchiveController;
    KeywordMgr *mKeywordMgr;
    id mKeywordTable;
    id mSearchResultText;
    int mDraggedRow;
    BOOL mCreatingNewKeyword;
    Album *mOldCurrentAlbum;
    int mOldCurrentAlbumRetainCount;
}

- (id)initWithKeywordMgr:(id)fp8 archiveController:(id)fp12;
- (void)dealloc;
- (id)keywordMgr;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_notifyKeywordsChanged;
- (void)undoAddKeywords:(id)fp8 changeDict:(id)fp12 withState:(id)fp16;
- (void)undoRemoveKeywords:(id)fp8 changeDict:(id)fp12 withState:(id)fp16;
- (void)assignKeywordsToSelectedImages:(id)fp8;
- (void)assignKeywords:(id)fp8 toImages:(struct IPPhotoList *)fp12 writeDB:(BOOL)fp16;
- (void)removeKeywordsFromSelectedImages:(id)fp8;
- (void)removeKeywords:(id)fp8 fromImages:(struct IPPhotoList *)fp12 writeDB:(BOOL)fp16;
- (void)deleteKeywords:(id)fp8;
- (void)renameKeywordAtIndex:(int)fp8 to:(id)fp12;

@end

@interface KeywordMgr : NSObject <NSCoding>
{
    unsigned int mNextKey;
    NSMutableArray *mKeywords;
    NSMutableDictionary *mRootCategory;
    ImageDB *mImageDB;
    Keyword *mFavoriteKeyword;
    unsigned int mCurrentCategory;
    unsigned long long mChangedFields;
}

+ (int)indexOfKeywordString:(id)fp8 inArrayOfKeywordStrings:(id)fp12;
+ (void)initialize;
+ (id)checkmarkString;
- (void)_resort;
- (void)_initBlankKeywordCategories;
- (id)initWithDB:(id)fp8;
- (id)description;
- (void)addDefaultKeywords;
- (void)dealloc;
- (id)stringArrayFromKeywords:(id)fp8;
- (id)keywordStrings;
- (id)keywordStringsForCategory:(id)fp8;
- (void)unarchive:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)keywordData;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)favoriteKeyword;
- (id)favoriteKeywordString;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)nextKeyAndIncrement;
- (void)setKeywordMgrFromKeywordMgr:(id)fp8;
- (BOOL)resortKeywordsToMgrOrder:(id)fp8;
- (id)keywords;
- (int)count;
- (id)keywordAtIndex:(unsigned int)fp8;
- (void)deleteKeyword:(id)fp8;
- (id)findKeywordsContainingString:(id)fp8;
- (unsigned int)findKeywordByString:(id)fp8;
- (id)findOrAddKeywordByString:(id)fp8;
- (id)specialMovieKeyword;
- (id)specialRawKeyword;
- (id)keywordWithKey:(unsigned long)fp8;
- (BOOL)keywordIsDefined:(id)fp8;
- (id)untitledKeywordString;
- (id)addNewUntitledKeyword;
- (BOOL)canRenameKeywordAtIndex:(int)fp8 toString:(id)fp12;
- (BOOL)renameKeywordAtIndex:(int)fp8 toString:(id)fp12;
- (BOOL)_shortcutAlreadyUsed:(id)fp8;
- (id)suggestShortcutForKeywordName:(id)fp8;
- (void)addKeywordObject:(id)fp8;
- (BOOL)notifyChangedFromTransaction:(BOOL)fp8;
- (void)markChangedField:(unsigned long long)fp8;
- (BOOL)hasCategories;
- (id)currentCategory;
- (id)topCategories;
- (id)keywordsNotInACategory;
- (void)setCurrentCategory:(id)fp8;
- (void)setCurrentCategoryKey:(int)fp8;
- (void)_recursiveBuildMenu:(id)fp8 withCategory:(id)fp12 currentDepth:(int)fp16;
- (id)categorySelectionMenu;
- (id)categoryWithKey:(unsigned long)fp8;
- (id)addSubcategoryNamed:(id)fp8 toCategory:(id)fp12;
- (BOOL)removeCategoryHeirarchy:(id)fp8;
- (BOOL)renameCategory:(id)fp8 toString:(id)fp12;
- (BOOL)moveCategory:(id)fp8 toChildOfCategory:(id)fp12;
- (BOOL)reorderCategory:(id)fp8 toIndex:(int)fp12;
- (id)allCategories;
- (id)rootCategory;
- (BOOL)isCategory:(id)fp8;
- (int)depthOfCategory:(id)fp8;
- (id)parentOfItem:(id)fp8;

@end

@interface MovieViewer : ArchiveDisplay
{
    NSMovieView *mMovieView;
    BackgroundColorView *mBackgroundView;
    struct _NSRect mMaxMovieFrame;
    struct _NSSize mBottomLeftMargin;
    struct _NSSize mTopRightMargin;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)_loadBackgroundColor:(id)fp8;
- (void)_calculateMovieFrame;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (void)_backgroundViewChangedFrame:(id)fp8;

@end

@interface IPBook : NSObject
{
    ImageDB *mDB;
    IPBookController *mController;
    IPTemplate *mTemplate;
    BOOL mIsPrototype;
    unsigned long mAlbumKey;
    Album *mAlbum;
    struct _NSSize mBookSize;
    struct _NSSize mBookCoverSize;
    float mBleed;
    struct IPPhotoList *mPhotoList;
    NSMutableArray *mPages;
    BOOL mDoubleSided;
    BOOL mAlternatePages;
    BOOL mShowsCaptions;
    BOOL mIncludeAppleBranding;
    BOOL mShouldAutoflow;
    BOOL mPrintsPageNumbers;
    NSMutableArray *mDefaultPageNumberElements;
    IPPage *mScrapAreaPage;
    IPPage *mDefaultLayoutPage;
    int mLastViewedPage;
    int mRanking;
    BOOL mLeadingEnabled;
    BOOL mAlwaysShowPlacard;
    int mDefaultViewMode;
    float mDefaultZoomLevel;
    BOOL mIsModified;
    struct MessageSender mMessageSender;
    BOOL mNotificationActive;
    NSMutableDictionary *mBookTemplateCache;
    BOOL mIsSwitchingThemes;
    IPPageElement *mDragSource;
    IPPageElement *mDropTarget;
    BOOL mHasUserText;
    BOOL mThumbViewShowing;
    BOOL mSwitchToUnplacedIfModified;
    IPMultiPageTextView *mBookTextSuperview;
    struct CGDataProvider *mBookTextPDFProvider;
    struct CGPDFDocument *mBookTextPDFDoc;
    double mCalendarBaseDate;
    IPCalendarData *mCalendarData;
    NSMutableArray *mCalendarSources;
    NSMutableArray *mCalendarSourceNames;
    NSString *mHolidayCalendar;
    int mHolidayCalendarTag;
    BOOL mIncludeBirthdays;
    NSDictionary *mLocaleDictionary;
    int mStartOfWeek;
    BOOL mIsWireBound;
    NSArray *mUserCustomizedPages;
    BOOL mShouldHideProductRotationPrompt;
    BOOL mModifyBlock;
    BOOL mSoftProofingEnabled;
    BOOL mDrawCropMarks;
    struct _NSSize mEmbeddedPrintSize;
    struct _NSSize mDefaultContactSheetCellSize;
    BOOL mLinkedTextTitlePref;
    BOOL mLinkedTextCommentsPref;
    BOOL mLinkedTextDatePref;
    BOOL mLinkedTextRatingPref;
    BOOL mLinkedTextKeywordsPref;
    BOOL mLinkedTextFilenamePref;
    BOOL mLinkedTextCameraPref;
    BOOL mLinkedTextISOPref;
    BOOL mLinkedTextFlashPref;
    BOOL mLinkedTextShutterPref;
    BOOL mLinkedTextAperturePref;
    BOOL mLinkedTextFocalLengthPref;
    NSMutableArray *mPreservedImageAdjustments;
}

+ (id)bookWithEmbeddedBook:(id)fp8 paperSize:(struct _NSSize)fp12 photoRect:(struct _NSRect)fp20 maximizePageUsage:(BOOL)fp36;
- (id)init;
- (id)initWithAlbum:(id)fp8 theme:(id)fp12;
- (id)initWithOldBookAlbum:(id)fp8 forAlbum:(id)fp12;
- (void)_getImageListFromAlbum:(id)fp8;
- (id)bestThemeForCardBasedOnTheme:(id)fp8 photoInfo:(struct IPPhotoInfo *)fp12;
- (void)ensurePage:(id)fp8 complementsPageType:(id)fp12;
- (void)encodeWithDictionary:(id)fp8 forArchive:(BOOL)fp12;
- (id)initWithDictionary:(id)fp8 bookTemplate:(id)fp12 db:(id)fp16 isPrototype:(BOOL)fp20;
- (void)takeValuesFromDictionary:(id)fp8 bookTemplate:(id)fp12;
- (void)restoreValuesFromDictionary:(id)fp8 bookTemplate:(id)fp12;
- (id)db;
- (void)setDB:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (id)bookTemplate;
- (void)setTemplate:(id)fp8;
- (void)setTemplate:(id)fp8 force:(BOOL)fp12;
- (void)setIsSwitchingThemes:(BOOL)fp8;
- (void)_saveBookTemplateState;
- (BOOL)_restoreBookStateFromTemplate:(id)fp8;
- (void)_clearBookTemplateCache;
- (BOOL)isPrototype;
- (void)setIsPrototype:(BOOL)fp8;
- (BOOL)canUtilizeInsideCovers;
- (BOOL)isBookProduct;
- (BOOL)isWireBound;
- (BOOL)isCalendarProduct;
- (BOOL)isCardProduct;
- (BOOL)isPostcardProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (struct _NSSize)bookSize;
- (void)setBookSize:(struct _NSSize)fp8;
- (struct _NSSize)bookCoverSize;
- (void)setBookCoverSize:(struct _NSSize)fp8;
- (float)bookPageAspectRatio;
- (float)bleedAllowance;
- (struct IPPhotoList *)photoList;
- (void)setPhotoList:(struct IPPhotoList *)fp8;
- (id)pages;
- (id)userPages;
- (id)newPage;
- (id)newPageAfterPage:(id)fp8;
- (id)newPageBeforePage:(id)fp8;
- (id)newPageAtIndex:(int)fp8;
- (void)addPages:(id)fp8 resize:(BOOL)fp12;
- (void)addPage:(id)fp8;
- (void)addPage:(id)fp8 atIndex:(int)fp12;
- (void)removePage:(id)fp8;
- (void)removeAllPages;
- (void)removePageAtIndex:(int)fp8;
- (void)replacePage:(id)fp8 withPage:(id)fp12 reflow:(BOOL)fp16;
- (void)ensureTrailingPages:(BOOL)fp8;
- (int)pageCount;
- (int)perceivedPageCount;
- (int)unplacedPhotoCount;
- (id)pagesWithPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearCacheForPageElementsWithPhoto:(struct IPPhotoInfo *)fp8 refill:(BOOL)fp12;
- (void)createHolesForPageElementsWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)firstPage;
- (id)firstInsidePage;
- (id)lastPage;
- (id)lastInsidePage;
- (BOOL)hasEndingPages;
- (id)pageAtIndex:(int)fp8;
- (int)indexOfPage:(id)fp8;
- (void)movePageFromIndex:(int)fp8 toIndex:(int)fp12;
- (id)pageWithPageDesign:(id)fp8;
- (id)pageWithPageDesignSuffix:(id)fp8 pageType:(id)fp12;
- (id)pageWithPageDesignPrefix:(id)fp8 preferringTextPage:(BOOL)fp12;
- (id)pageWithPageType:(id)fp8 startingPage:(id)fp12 preferringTextPage:(BOOL)fp16;
- (id)pageWithHoleCount:(int)fp8 startingPage:(id)fp12 preferringTextPage:(BOOL)fp16;
- (id)pagesWithPageType:(id)fp8;
- (int)indexOfLastViewedPage;
- (void)setLastViewedPage:(int)fp8;
- (id)defaultLayoutPage;
- (void)updateDefaultLayoutPage;
- (id)scrapAreaPage;
- (void)_scrapChanged:(id)fp8;
- (BOOL)hasScraps;
- (BOOL)switchToUnplacedIfModified;
- (id)moveElement:(id)fp8 from:(id)fp12 to:(id)fp16 notify:(BOOL)fp20 reflow:(BOOL)fp24;
- (void)reflowPage:(id)fp8 preservingBackground:(BOOL)fp12 traverse:(BOOL)fp16;
- (void)reflowPage:(id)fp8 withPage:(id)fp12 preservingBackground:(BOOL)fp16 force:(BOOL)fp20;
- (void)reflowPage:(id)fp8 withPageOfType:(id)fp12 preservingBackground:(BOOL)fp16;
- (void)_preserveImageAdjustmentsBeforeReflow:(id)fp8;
- (void)_applyImageAdjustmentsAfterReflow:(id)fp8;
- (BOOL)canTraversePage:(id)fp8 direction:(int)fp12;
- (int)maximumPageCount;
- (BOOL)shouldAutoflow;
- (void)setShouldAutoflow:(BOOL)fp8;
- (int)ranking;
- (void)setRanking:(int)fp8;
- (struct IPPhotoList *)imagesOnPage:(id)fp8 markForOrientation:(BOOL)fp12;
- (void)_flowPage:(id)fp8 usingPage:(id)fp12 withPhotos:(struct IPPhotoList *)fp16 force:(BOOL)fp20 notify:(BOOL)fp24;
- (BOOL)leadingEnabled;
- (void)setLeadingEnabled:(BOOL)fp8;
- (BOOL)isDoubleSided;
- (void)setDoubleSided:(BOOL)fp8;
- (BOOL)doesAlternatePages;
- (void)setAlternatePages:(BOOL)fp8;
- (BOOL)printsPageNumbers;
- (void)setPrintsPageNumbers:(BOOL)fp8;
- (id)defaultPageNumberElements;
- (BOOL)canPrintPageNumbers;
- (BOOL)showsCaptions;
- (void)setShowsCaptions:(BOOL)fp8;
- (BOOL)includeAppleBrandingOnPage:(id)fp8;
- (void)setIncludeAppleBranding:(BOOL)fp8;
- (BOOL)isModified;
- (void)setModifyBlock:(BOOL)fp8;
- (void)markAsModified;
- (void)clearModified;
- (BOOL)hasEmptyHoles:(BOOL)fp8;
- (void)checkForClipping;
- (BOOL)hasClippedText;
- (void)resizedImageCheck;
- (BOOL)hasLowQualityImages;
- (BOOL)hasDefaultText;
- (BOOL)hasUserText;
- (void)setHasUserText:(BOOL)fp8;
- (id)pageWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)allHoleElements:(BOOL)fp8;
- (id)allTextElements:(BOOL)fp8;
- (id)allGroupElements;
- (struct IPPhotoList *)allPlacedPhotos;
- (struct IPPhotoList *)removeAllPlacedPhotos;
- (id)lastFilledHoleElement;
- (id)lastEmptyHoleElement;
- (id)firstEmptyHoleElement;
- (BOOL)thumbViewShowing;
- (void)setThumbViewShowing:(BOOL)fp8;
- (BOOL)shouldHideProductRotationPrompt;
- (void)setShouldHideProductRotationPrompt:(BOOL)fp8;
- (BOOL)shouldAdjustBrandingAlignment;
- (BOOL)linkedTextTitlePref;
- (BOOL)linkedTextCommentsPref;
- (BOOL)linkedTextDatePref;
- (BOOL)linkedTextRatingPref;
- (BOOL)linkedTextKeywordsPref;
- (BOOL)linkedTextFilenamePref;
- (BOOL)linkedTextCameraPref;
- (BOOL)linkedTextISOPref;
- (BOOL)linkedTextFlashPref;
- (BOOL)linkedTextShutterPref;
- (BOOL)linkedTextAperturePref;
- (BOOL)linkedTextFocalLengthPref;
- (BOOL)setLinkedTextTitlePref:(BOOL)fp8;
- (BOOL)setLinkedTextCommentsPref:(BOOL)fp8;
- (BOOL)setLinkedTextDatePref:(BOOL)fp8;
- (BOOL)setLinkedTextRatingPref:(BOOL)fp8;
- (BOOL)setLinkedTextKeywordsPref:(BOOL)fp8;
- (BOOL)setLinkedTextFilenamePref:(BOOL)fp8;
- (BOOL)setLinkedTextCameraPref:(BOOL)fp8;
- (BOOL)setLinkedTextISOPref:(BOOL)fp8;
- (BOOL)setLinkedTextFlashPref:(BOOL)fp8;
- (BOOL)setLinkedTextShutterPref:(BOOL)fp8;
- (BOOL)setLinkedTextAperturePref:(BOOL)fp8;
- (BOOL)setLinkedTextFocalLengthPref:(BOOL)fp8;
- (id)allCalendarElements;
- (void)populateCalendarsWithEventData;
- (double)calendarBaseDate;
- (void)setCalendarBaseDate:(double)fp8;
- (int)startDayOfWeek;
- (id)calendarData;
- (id)calendarSources;
- (id)calendarSourceNames;
- (BOOL)setCalendarSourcesFromNames:(id)fp8;
- (int)holidayCalendarTag;
- (void)setHolidayCalendarTag:(int)fp8;
- (id)holidayCalendar;
- (BOOL)setHolidayCalendar:(id)fp8;
- (BOOL)calendarIncludesBirthdays;
- (void)setCalendarIncludesBirthdays:(BOOL)fp8;
- (id)localeInfo;
- (BOOL)hasUserCustomizedPages;
- (id)userCustomizedPages;
- (void)clearUserCustomizedPageCache;
- (BOOL)softProofingEnabled;
- (void)setSoftProofingEnabled:(BOOL)fp8;
- (BOOL)cropMarksEnabled;
- (void)setCropMarksEnabled:(BOOL)fp8;
- (struct _NSSize)embeddedPrintSize;
- (void)setEmbeddedPrintSize:(struct _NSSize)fp8;
- (BOOL)canDoMultiUp;
- (struct _NSSize)defaultContactSheetCellSize;
- (void)setDefaultContactSheetCellSize:(struct _NSSize)fp8;
- (id)dragSourceElement;
- (void)setDragSource:(id)fp8;
- (id)dropTargetElement;
- (void)setDropTarget:(id)fp8;
- (BOOL)notificationIsActive;
- (void)setNotificationIsActive:(BOOL)fp8;
- (struct MessageSender *)messageSender;
- (void)beginPDFTextGenerationForResolution:(int)fp8;
- (void)overlayTextInContext:(struct CGContext *)fp8 forPage:(int)fp12 atPoint:(struct _NSPoint)fp16 resolution:(int)fp24 forProduction:(BOOL)fp28 scale:(float)fp32;
- (void)finishPDFTextGeneration;
- (void)_preparePagesForDealloc:(id)fp8;
- (void)prepareForDealloc;
- (void)unloadCachedObjects;
- (BOOL)alwaysShowPlacard;
- (void)setAlwaysShowPlacard:(BOOL)fp8;
- (int)defaultViewMode;
- (void)setDefaultViewMode:(int)fp8;
- (float)defaultZoomLevel;
- (void)setDefaultZoomLevel:(float)fp8;
- (BOOL)validate:(id)fp8;
- (void)dealloc;
- (id)controller;
- (void)setController:(id)fp8;

@end

@interface IPLocalCalendarTableController : NSObject
{
    NSMutableSet *mSelectedCalendarTitles;
}

- (id)selectedCalendarTitles;
- (void)setSelectedCalendarTitles:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)dealloc;

@end

@interface IPBookController : ArchiveDisplay <IPImageMgrDelegate>
{
    IPBook *mBook;
    IPPage *mCurrentPage;
    struct IPSelectionList *mCurrentSelection;
    IPCutSheetPreviewController *mThemePreviewBookController;
    IPBookController *mMainController;
    NSPanel *mThemePanel;
    NSTableView *mThemeTable;
    NSImageView *mThemePreview;
    NSPopUpButton *mBookSizePopup;
    NSButton *mDoubleSidedCheckbox;
    NSMenuItem *mHardcoverMenuItem;
    NSMenuItem *mSoftcoverMenuItem;
    NSMenuItem *mWireboundMenuItem;
    NSButton *mThemeOptionButton;
    NSButton *mThemeCancelButton;
    NSButton *mThemeOKButton;
    BOOL mThemeFlexerEnabled;
    NSPanel *mCalendarThemePanel;
    NSTableView *mCalendarThemeTable;
    NSImageView *mCalendarThemePreview;
    NSPopUpButton *mCalendarTypePopup;
    NSButton *mCalendarThemeOptionButton;
    NSButton *mCalendarThemeCancelButton;
    NSButton *mCalendarThemeOKButton;
    NSPanel *mCardThemePanel;
    DividedTableView *mCardKeywordTable;
    NSTableView *mCardThemeTable;
    NSMatrix *mCardThemeMatrix;
    NSImageView *mCardThemePreview;
    NSPopUpButton *mCardTypePopup;
    NSButton *mCardThemeOptionButton;
    NSButton *mCardThemeCancelButton;
    NSButton *mCardThemeOKButton;
    NSPanel *mCutSheetThemePanel;
    DividedTableView *mCutSheetThemeTable;
    NSMatrix *mCutSheetThemeMatrix;
    NSButton *mCutSheetThemeCancelButton;
    NSButton *mCutSheetThemeOKButton;
    NSPopUpButton *mCutSheetThemePaperSizePopup;
    NSPopUpButton *mCutSheetThemePaperTypePopup;
    NSPopUpButton *mCutSheetThemePrinterPopup;
    NSTextField *mCutSheetThemePrinterLabel;
    NSView *mCutSheetCustomControlView;
    NSView *mCutSheetStandardPrintControls;
    NSPopUpButton *mCutSheetPhotoSizePopup;
    NSTextField *mCutSheetPhotoSizePopupLabel;
    NSView *mCutSheetContactSheetControls;
    PrintAlbum *mCutSheetPreviewAlbum;
    BOOL mCutSheetThemePanelPrintingDisabled;
    NSPanel *mSlideshowThemePanel;
    NSTableView *mSlideshowThemeTable;
    NSImageView *mSlideshowThemePreview;
    NSButton *mSlideshowThemeCancelButton;
    NSButton *mSlideshowThemeOKButton;
    NSPanel *mActiveThemePanel;
    NSPanel *mPageDesignPanel;
    NSPanel *mBookSettingsPanel;
    NSPanel *mCalendarSettingsPanel;
    NSView *mTextStylesView;
    NSView *mCalendarTextStylesView;
    NSView *mTextStylePreview;
    NSImageView *mSettingsPreview;
    NSMenu *mCaptionContentMenu;
    float mSettingsAdjustDelta;
    float mCalendarSettingsPanelBaseHeight;
    float mCalendarSettingsPanelSettingsHolderBaseHeight;
    float mCalendarSettingsPanelStylesHolderBaseHeight;
    float mStyleViewNeededHeight;
    NSTabView *mCalendarSettingsTabView;
    NSButton *mIncludeBrandingCheckbox;
    NSButton *mShowCaptions;
    NSButton *mShowPageNumbers;
    NSButton *mSoftProofingCheckbox;
    NSButton *mSettingsRestoreButton;
    NSButton *mSettingsCancelButton;
    NSButton *mSettingsOKButton;
    NSString *mOriginalShowCaptionsTitle;
    NSPanel *mCardSettingsPanel;
    NSView *mCardTextStylesView;
    NSButton *mCardIncludeBrandingCheckbox;
    NSPanel *mCalendarSettingsDataPanel;
    NSView *mCalendarSettingsContentView;
    NSView *mCalendarDataTabViewPlaceholder;
    NSView *mCalendarDataPanelPlaceholder;
    NSButton *mCalendarDataPanelCancelButton;
    NSButton *mCalendarDataPanelOKButton;
    NSPopUpButton *mHolidayCalendarsPopup;
    NSButton *mBirthdaysCheckbox;
    NSButton *mCalIncludeBrandingCheckbox;
    NSTableView *mLocalCalendarsTable;
    id mCalendarTableController;
    NSPopUpButton *mCalendarStartMonthPopup;
    NSTextField *mCalendarStartYearField;
    NSStepper *mCalendarStartYearStepper;
    NSTextField *mCalendarNumberMonthsField;
    NSStepper *mCalendarNumberMonthsStepper;
    NSButton *mCalendarSettingsCancelButton;
    NSButton *mCalendarSettingsOKButton;
    NSPanel *mCutSheetSettingsPanel;
    NSButton *mMaximizePhotosSetting;
    NSButton *mCropMarksSetting;
    NSButton *mCutSheetAutoflowSetting;
    NSView *mCutSheetTextStylesView;
    NSPanel *mContactSheetSettingsPanel;
    NSView *mContactSheetTextStylesView;
    NSButton *mContactSheetTitleSetting;
    NSButton *mContactSheetCommentsSetting;
    NSButton *mContactSheetDateSetting;
    NSButton *mContactSheetRatingSetting;
    NSButton *mContactSheetKeywordsSetting;
    NSButton *mContactSheetFilenameSetting;
    NSButton *mContactSheetCameraSetting;
    NSButton *mContactSheetISOSetting;
    NSButton *mContactSheetFlashSetting;
    NSButton *mContactSheetShutterSetting;
    NSButton *mContactSheetApertureSetting;
    NSButton *mContactSheetFocalLengthSetting;
    NSPanel *mCustomSizePanel;
    NSTextField *mCustomSizeWidth;
    NSTextField *mCustomSizeHeight;
    NSPopUpButton *mCustomUnitPopup;
    NSButton *mCustomSizeOKButton;
    float mCurrentCustomUnitFactor;
    IPBookInspector *mInspector;
    NSMenu *mBookContextualMenu;
    NSMenu *mCalendarContextualMenu;
    NSMenu *mCardContextualMenu;
    NSMenu *mCutSheetContextualMenu;
    NSMenu *mElementContextualMenu;
    NSView *mAutoflowControls;
    NSButton *mAutoflowTitle;
    NSButton *mAutoflowOnLabel;
    NSButton *mAutoflowOffLabel;
    NSButton *mAutoflowSwitch;
    NSPanel *mAutoflowAtEndPrompt;
    NSPanel *mCalendarAutoflowAtEndPrompt;
    NSButton *mAutoflowAtEndCheckbox;
    NSButton *mCalAutoflowAtEndCheckbox;
    NSButton *mAutoflowAtEndOK;
    NSButton *mCalAutoflowAtEndOK;
    NSButton *mAutoflowAtEndCancel;
    NSTextField *mAutoflowAtEndText;
    NSPanel *mAutoflowRelayoutPrompt;
    NSPanel *mCalendarAutoflowRelayoutPrompt;
    NSButton *mAutoflowRelayoutCheckbox;
    NSButton *mCalAutoflowRelayoutCheckbox;
    NSButton *mAutoflowRelayoutOK;
    NSButton *mAutoflowRelayoutCancel;
    NSTextField *mAutoflowRelayoutTitle;
    NSTextField *mAutoflowRelayoutMessage;
    NSString *mPreviousPromptMessage;
    NSString *mPreviousButtonTitle;
    NSTabView *mBookShelfTabView;
    NSTabView *mCalendarShelfTabView;
    NSTabView *mActiveShelfTabView;
    NSView *mShelfParentView;
    NSView *mSidebarParentView;
    NSView *mCardShelfParentView;
    NSView *mActiveParentView;
    IPPageThumbView *mPageThumbView;
    IPUnplacedPhotoView *mUnplacedPhotosView;
    IPUnplacedPhotoView *mCardUnplacedPhotosView;
    IPPageThumbView *mVerticalPageThumbView;
    IPUnplacedPhotoView *mVerticalUnplacedPhotosView;
    IPPageThumbView *mActivePageThumbView;
    IPUnplacedPhotoView *mActiveUnplacedPhotosView;
    NSButton *mPageThumbButton;
    NSButton *mImageShelfButton;
    NSButton *mVerticalPageThumbButton;
    NSButton *mVerticalImageShelfButton;
    NSView *mBookPlacardParentView;
    NSView *mCalendarPlacardParentView;
    NSScrollView *mBookScrollView;
    IPBookView *mInstalledBookView;
    IPBookView *mHardCoverBookView;
    IPBookView *mHardCoverInsideBookView;
    IPBookView *mCoverBookView;
    IPBookView *mSimplexBookView;
    IPBookView *mSpreadBookView;
    IPBookView *mCoverCalendarView;
    IPBookView *mSimplexCalendarView;
    IPBookView *mSpreadCalendarView;
    IPBookView *mMultiPanelCardView;
    IPBookView *mCardSinglePanelView;
    IPBookView *mCardTwoPanelView;
    IPBookView *mCardThreePanelView;
    IPBookView *mCutSheetView;
    int mViewStylePref;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mAddPageToolbarItem;
    NSButtonCell *mPageButtonCell;
    NSButtonCell *mSpreadButtonCell;
    NSImageView *mPrinterIconView;
    NSMenu *mPaperSizeMenu;
    NSMenu *mPaperTypeMenu;
    NSMenu *mPageTypeMenu;
    IPToolbarItem *mPageTypeToolbarItem;
    NSMenu *mThemesMenu;
    IPToolbarItem *mThemesToolbarItem;
    NSString *mThemesMenuCategory;
    NSMenu *mBackgroundsMenu;
    IPToolbarItem *mBackgroundsToolbarItem;
    NSMenu *mPageDesignMenu;
    IPToolbarItem *mPageDesignToolbarItem;
    IPToolbarItem *mCardOrientationToolbarItem;
    NSMenu *mCardOrientationMenu;
    IPToolbarItem *mElementAdjustToolbarItem;
    NSView *mBookSizeControlView;
    NSTextField *mBookWidthText;
    NSTextField *mBookHeightText;
    NSMenu *mAltElementsMenu;
    IPToolbarItem *mAltElementsToolbarItem;
    IPToolbarItem *mPrinterNameToolbarItem;
    NSView *mPaperSelectionToolbarView;
    NSPopUpButton *mPaperSizeToolbarPopup;
    NSPopUpButton *mPaperTypeToolbarPopup;
    IPToolbarItem *mOnePhotoPerPageToolbarItem;
    IPToolbarItem *mPrintPreviewToolbarItem;
    IPToolbarItem *mCropMarksToolbarItem;
    NSView *mContactSheetToolbarView;
    NSSlider *mContactSheetColumnSlider;
    NSTextField *mContactSheetColumnText;
    IPToolbarItem *mContactSheetToolbarItem;
    ProgressController *mProgress;
    NSString *mMinThumbTooltip;
    NSString *mMaxThumbTooltip;
    NSString *mThumbnailSizerTooltip;
    NSArray *mSavedChildViews;
    NSTimer *mProgressTimer;
    NSMutableDictionary *mSavedStyleSettings;
    BOOL mSavedShowsCaptions;
    BOOL mSavedPrintsPageNumbers;
    NSArray *mSlideshowPages;
    IPBookSlideshowController *mSlideshowController;
    IPPullSlideshow *mSlideshow;
    IPSlideshowSettings *mSlideshowSettings;
    NSView *mExportAccessoryView;
    NSPopUpButton *mExportMovieSizePopup;
    EditHUDController *mImageEditHUD;
    NSPopUpButton *mImageEffectPopup;
    HUDSlider *mAlphaAdjustmentSlider;
    int mProductCategory;
    int mProductType;
    struct _NSRect mBaseElementRect;
    BOOL mAutoPageRotationEnabled;
    BOOL mDeferredApplyCalendarDataSettings;
    BOOL mForceReimport;
    BOOL mPreserveMatrixSelection;
    BOOL mDoNotKillThumbsDoingSlideshow;
    BOOL mSliderDragInProgress;
    CIImage *mSelectedImageEffectPreview;
}

+ (struct _NSSize)cutSheetPaperSize;
+ (struct _NSRect)cutSheetPhotoRect;
+ (struct _NSRect)printAreaOfPageWithSize:(struct _NSSize)fp8;
+ (id)imageMgr;
+ (id)secondaryImageMgr;
+ (void)setAutoPageRotationEnabled:(BOOL)fp8;
+ (BOOL)autoPageRotationEnabled;
- (void)resetViewToDefaults;
- (void)awakeFromNib;
- (void)setMainController:(id)fp8;
- (void)_installBookToolbar;
- (void)_installCalendarToolbar;
- (void)_installCardToolbar;
- (void)_installPrintingToolbar;
- (void)_installSlideshowToolbar;
- (void)_updateToolbarUI;
- (void)_updateImageEditHUD;
- (void)resetInspector:(BOOL)fp8;
- (id)_compositeBackground:(id)fp8 withForeground:(id)fp12;
- (id)_mirrorFlapIcon:(id)fp8;
- (void)_populateThemesMenu;
- (void)_populateBackgroundsMenu;
- (void)_populatePageTypeMenu;
- (void)_populatePageDesignMenuForPageType:(id)fp8;
- (BOOL)_populateMenu:(id)fp8 forPageType:(id)fp12;
- (void)_populateAlternateElementsMenu;
- (void)toggleCardPlacardVisible;
- (void)_textStyleChanged:(id)fp8;
- (void)_bookContentsChanged:(id)fp8;
- (void)_bookElementsChanged:(id)fp8;
- (void)_scrapChanged:(id)fp8;
- (void)loadEditMenuItems;
- (void)loadCurrentBookProductType;
- (void)loadCurrentBook;
- (void)_handleAddedPhotos;
- (id)book;
- (void)recreateBook:(BOOL)fp8;
- (void)_rebuildMultiUpBook;
- (void)_bookRemoved:(id)fp8;
- (id)currentPage;
- (void)_updateViewButtons;
- (void)_updatePageTitleMenuSelection:(id)fp8;
- (void)setCurrentPage:(id)fp8 force:(BOOL)fp12 notify:(BOOL)fp16;
- (id)bookTemplate;
- (id)db;
- (id)album;
- (void)setPrintAlbumInfo:(id)fp8;
- (void)resetBook:(BOOL)fp8;
- (void)_installProgress;
- (void)_removeProgress;
- (id)bookScrollView;
- (id)bookView;
- (id)bookViewForPage:(id)fp8;
- (void)_installBookView:(id)fp8;
- (id)themePanel;
- (id)calendarThemePanel;
- (id)calendarSettingsPanel;
- (id)cardThemePanel;
- (void)prepareForNewCutSheetWithSelection:(struct IPPhotoList *)fp8;
- (void)createCutSheetProject;
- (id)cutSheetThemePanel;
- (id)slideshowThemePanel;
- (int)viewStyle;
- (void)setViewStyle:(int)fp8;
- (id)bookViewContextualMenu;
- (id)elementContextualMenu;
- (void)_shelfViewSizeChanged:(id)fp8;
- (void)toggleCropMarks:(id)fp8;
- (void)toggleColorSoftProofing:(id)fp8;
- (void)toggleDoubleSided:(id)fp8;
- (void)addPage:(id)fp8;
- (void)removePage:(id)fp8;
- (BOOL)canRemovePage;
- (void)autoflowState:(id)fp8;
- (void)autoflow:(id)fp8;
- (void)handleAutoflowRelayoutPrompt:(id)fp8;
- (void)handleCalendarAutoflowRelayoutPrompt:(id)fp8;
- (void)_handleAutoflowRelayoutPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)handleAutoflowAtEndPrompt:(id)fp8;
- (void)handleCalendarAutoflowAtEndPrompt:(id)fp8;
- (void)_handleAutoflowAtEndPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)handleNoAutoflowPrompt:(id)fp8;
- (void)_handleNoAutoflowPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_performAutoflowForBook:(id)fp8 usingMethod:(int)fp12;
- (void)_performAutoflow:(int)fp8;
- (id)_findIcon:(id)fp8;
- (void)resizeWindow:(id)fp8 forString:(id)fp12;
- (void)showAutoflowInfoPrompt:(id)fp8 inWindow:(id)fp12;
- (void)_handleAutoflowInfoPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)cleanupBook:(id)fp8;
- (void)toggleShowPageNumbers:(id)fp8;
- (void)toggleShowCaptions:(id)fp8;
- (void)toggleIncludeBranding:(id)fp8;
- (void)changeSettings:(id)fp8;
- (void)_resetSettingsPanel;
- (void)_resetCutSheetSettingsPanel;
- (void)_resetCalendarSettingsPanel;
- (void)_configureSettingsPanel;
- (void)_configureCutSheetSettingsPanel;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)_configureCalendarSettingsPanel;
- (void)handleSettingsChange:(id)fp8;
- (void)cancelSettingsChange:(id)fp8;
- (void)restoreSettings:(id)fp8;
- (void)handleCardSettingsChange:(id)fp8;
- (void)cancelCardSettingsChange:(id)fp8;
- (void)restoreCardSettings:(id)fp8;
- (void)reimport:(id)fp8;
- (void)handleCalendarSettingsChange:(id)fp8;
- (void)cancelCalendarSettingsChange:(id)fp8;
- (void)handleNewCalendarDataPanel:(id)fp8;
- (void)cancelNewCalendarDataPanel:(id)fp8;
- (void)restoreContactSheetSettings:(id)fp8;
- (void)restoreCutSheetSettings:(id)fp8;
- (void)handleCutSheetSettingsChange:(id)fp8;
- (void)cancelCutSheetSettingsChange:(id)fp8;
- (void)_changeSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeCutSheetSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeContactSheetSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeCalendarSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)calNameArray:(id)fp8 matchesNameArray:(id)fp12;
- (void)_applyCalendarDataSettings;
- (void)resetThemePanel;
- (void)resetCalendarThemePanel;
- (void)resetCardThemePanel;
- (void)resetCutSheetThemePanel;
- (void)resetSlideshowThemePanel;
- (void)selectTheme:(id)fp8;
- (void)_selectBookTheme:(id)fp8;
- (void)_selectCalendarTheme:(id)fp8;
- (void)_selectCardTheme:(id)fp8;
- (void)_selectCutSheetTheme:(id)fp8;
- (void)_selectSlideshowTheme:(id)fp8;
- (id)selectedTheme;
- (id)sampleBookImage;
- (void)updateThemePreview:(id)fp8;
- (id)sampleCalendarImage;
- (void)updateCalendarThemePreview:(id)fp8;
- (void)updateCutSheetThemeControls:(id)fp8;
- (void)updateSlideshowThemePreview:(id)fp8;
- (id)sampleCardImage;
- (void)updateCardThemeMatrix:(id)fp8;
- (void)_updateThemeMatrix:(id)fp8 category:(id)fp12 themes:(id)fp16 columns:(int)fp20;
- (void)handleThemeSelection:(id)fp8;
- (void)cancelThemeSelection:(id)fp8;
- (void)handleCalendarThemeSelection:(id)fp8;
- (void)cancelCalendarThemeSelection:(id)fp8;
- (void)handleCardThemeSelection:(id)fp8;
- (void)cancelCardThemeSelection:(id)fp8;
- (void)handleCutSheetThemeSelection:(id)fp8;
- (void)cancelCutSheetThemeSelection:(id)fp8;
- (void)handleSlideshowThemeSelection:(id)fp8;
- (void)cancelSlideshowThemeSelection:(id)fp8;
- (void)handleThemeFlexer:(id)fp8;
- (void)setThemeFlexerEnabled:(BOOL)fp8;
- (void)_changeTheme:(id)fp8 productType:(int)fp12;
- (void)_ensureLoadedComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_selectThemeCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_selectCutSheetThemeCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)setupNewPrintAlbumBook;
- (void)quickSelectTheme:(id)fp8;
- (void)selectBackground:(id)fp8;
- (void)selectFrame:(id)fp8;
- (void)selectPageType:(id)fp8;
- (void)selectPageDesign:(id)fp8;
- (void)makeCardHorizontal:(id)fp8;
- (void)makeCardVertical:(id)fp8;
- (void)_switchToSiblingTheme;
- (void)updatePageOrientationSelection;
- (void)setCutSheetPaperSize:(struct _NSSize)fp8;
- (void)setCutSheetPhotoRect:(struct _NSRect)fp8;
- (void)selectPrinter:(id)fp8;
- (void)selectPaperSize:(id)fp8;
- (void)_updatePhotoSizeForPaper:(id)fp8;
- (void)showCustomPaperSizePanel:(id)fp8;
- (void)customSizeUnitChanged:(id)fp8;
- (void)selectCustomPaperSize:(id)fp8;
- (struct _NSSize)_bookSizeFromCustomSize;
- (struct _NSSize)_customSizeFromBookSize:(struct _NSSize)fp8;
- (float)_customSizeConversionFactor;
- (void)showCustomPhotoSizePanel:(id)fp8;
- (void)selectCustomPhotoSize:(id)fp8;
- (void)cancelCustomSize:(id)fp8;
- (void)selectPhotoSize:(id)fp8;
- (void)selectPaperType:(id)fp8;
- (void)_populatePrinterMenu;
- (void)_populatePaperSizeMenu:(id)fp8;
- (void)_populatePaperTypeMenu:(id)fp8;
- (id)nextPage:(int)fp8;
- (id)previousPage:(int)fp8;
- (void)selectNextPage:(id)fp8;
- (void)selectPreviousPage:(id)fp8;
- (void)scrollThumbViewToStart:(id)fp8;
- (void)scrollThumbViewToEnd:(id)fp8;
- (void)deleteElements:(id)fp8;
- (void)deleteSelectedElements;
- (void)_removePageSheetCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)removeSelectedUnplacedPhotos;
- (void)makeHolesForSelectedElements:(id)fp8;
- (void)moveSelectionToFront:(id)fp8;
- (void)sendSelectionToBack:(id)fp8;
- (void)toggleSelectionFrameOrientation:(id)fp8;
- (void)moveElementX:(id)fp8;
- (void)moveElementY:(id)fp8;
- (void)panElementX:(id)fp8;
- (void)panElementY:(id)fp8;
- (void)moveSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)beginAdjustElementZoom:(id)fp8;
- (void)adjustElementZoom:(id)fp8;
- (void)beginAdjustElementRotation:(id)fp8;
- (void)adjustElementRotation:(id)fp8;
- (void)beginAdjustElementSize:(id)fp8;
- (void)adjustElementSize:(id)fp8;
- (void)divideSelectedElementsVertically:(id)fp8;
- (void)divideSelectedElementsHorizontally:(id)fp8;
- (void)leftAlignSelectedElements:(id)fp8;
- (void)rightAlignSelectedElements:(id)fp8;
- (void)topAlignSelectedElements:(id)fp8;
- (void)bottomAlignSelectedElements:(id)fp8;
- (void)alignSelectedElementsInColumn:(id)fp8;
- (void)alignSelectedElementsInRow:(id)fp8;
- (void)makeSelectedElementsEqualWidth:(id)fp8;
- (void)makeSelectedElementsEqualHeight:(id)fp8;
- (void)distributeSelectedElementsHorizontally:(id)fp8;
- (void)distributeSelectedElementsVertically:(id)fp8;
- (void)setLeftSelectionInset:(id)fp8;
- (void)setBottomSelectionInset:(id)fp8;
- (void)setRightSelectionInset:(id)fp8;
- (void)setTopSelectionInset:(id)fp8;
- (void)setLeftImageInset:(id)fp8;
- (void)setBottomImageInset:(id)fp8;
- (void)setRightImageInset:(id)fp8;
- (void)setTopImageInset:(id)fp8;
- (void)editImages:(id)fp8;
- (void)toggleFitToSize:(id)fp8;
- (void)toggleMirrorImage:(id)fp8;
- (void)changeBlendMode:(id)fp8;
- (void)changeBookWidth:(id)fp8;
- (void)changeBookHeight:(id)fp8;
- (void)changeSelectedElementToAlternate:(id)fp8;
- (void)changeContactSheetColumns:(id)fp8;
- (void)togglePanAndZoom:(id)fp8;
- (void)toggleResizeAndRotation:(id)fp8;
- (BOOL)moveModeIsEnabled;
- (void)resizedImageCheck;
- (void)resolveAllImageAliases;
- (id)generatePrintPreviewImage;
- (void)cancelPrintProject:(id)fp8;
- (void)printBook:(id)fp8;
- (void)saveBookToPDF:(id)fp8;
- (void)saveProductFile:(id)fp8;
- (void)previewBook:(id)fp8;
- (void)orderPrints:(id)fp8;
- (void)orderBook:(id)fp8;
- (void)sendMail:(id)fp8;
- (void)createPhotosInLibrary:(id)fp8;
- (void)generateBookPDFForPurchase:(id)fp8 path:(id)fp12 sheetOwnerWindow:(id)fp16 success:(char *)fp20;
- (void)gotoBookPricingWebsite:(id)fp8;
- (void)gotoCalendarPricingWebsite:(id)fp8;
- (void)gotoCardPricingWebsite:(id)fp8;
- (void)_showPageThumbView:(BOOL)fp8;
- (void)_showUnplacedPhotosView:(BOOL)fp8;
- (void)_redrawShelfView;
- (id)pageThumbView;
- (id)unplacedPhotosView;
- (id)shelfView;
- (id)inspector;
- (void)setProductType:(int)fp8;
- (int)productType;
- (void)showPageThumbView:(id)fp8;
- (void)showUnplacedPhotosView:(id)fp8;
- (void)_refreshShelfButtons:(BOOL)fp8;
- (void)rebuildView:(id)fp8;
- (void)rebuildShelfView:(id)fp8;
- (void)showCustomControls:(id)fp8;
- (void)showImageEditControls:(id)fp8;
- (id)slideshowForExport;
- (void)playBookSlideshowApplescript:(BOOL)fp8 displayIndex:(int)fp12 export:(BOOL)fp16;
- (void)playBookSlideshow:(id)fp8;
- (void)reloadTheme:(id)fp8;
- (void)saveTemplate:(id)fp8;
- (void)selectFullSpreadView:(id)fp8;
- (void)selectSinglePageView:(id)fp8;
- (void)settingsControlAction:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)bookCategorySelectionDidChange:(id)fp8;
- (void)calendarCategorySelectionDidChange:(id)fp8;
- (void)cutSheetCategorySelectionDidChange:(id)fp8;
- (void)cardCategorySelectionDidChange:(id)fp8;
- (void)clearUndoStack;
- (void)registerUndoForBookWithActionName:(id)fp8;
- (void)undoBookChange:(id)fp8;
- (void)registerUndoForRemovePhotosFromAlbum:(struct IPPhotoList *)fp8;
- (void)undoRemovePhotosFromAlbum:(id)fp8;
- (void)registerUndoForPage:(id)fp8 actionName:(id)fp12;
- (void)undoPageChange:(id)fp8;
- (BOOL)isBookView;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (BOOL)isActive;
- (BOOL)validateMenuItem:(id)fp8;
- (void)updateStatus;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectionChanged:(BOOL)fp8;
- (void)clearSelection:(BOOL)fp8;
- (void)clearPageSelection;
- (void)clearUnplacedPhotosSelection;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)trashAction:(id)fp8;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)installPlacardView:(id)fp8 position:(int)fp12 animate:(BOOL)fp16;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)triggerWriteAndDeleteBook:(id)fp8;
- (void)triggerWriteAndPurgeBook:(id)fp8;
- (void)fillAllTextFields:(id)fp8;
- (void)fillUserTextFields:(id)fp8;
- (void)runTextFlexer:(BOOL)fp8;
- (struct _NSSize)slideshowSizeForScreenSize:(id)fp8 screenSize:(struct _NSSize)fp12;
- (void)slideshowPlayerReleaseResourcesForSlideIndex:(long)fp8;
- (BOOL)slideshowPlayerRenderSlideFrameInContext:(id)fp8 context:(struct CGContext *)fp12 slideIndex:(long)fp16;
- (id)slideshowPlayerTitleForSlideIndex:(id)fp8 slideIndex:(long)fp12;
- (void)exportBookSlideshow;
- (void)_exportPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)onExposureChanged:(id)fp8;
- (void)onTintChanged:(id)fp8;
- (void)onTemperatureChanged:(id)fp8;
- (void)onContrastChanged:(id)fp8;
- (void)onSaturationChanged:(id)fp8;
- (void)onHighlightsChanged:(id)fp8;
- (void)onShadowsChanged:(id)fp8;
- (void)onNoiseChanged:(id)fp8;
- (void)onSharpnessChanged:(id)fp8;
- (void)onAlphaChanged:(id)fp8;
- (void)applyImageEffect:(id)fp8;
- (void)resetAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)hudSliderMouseDown:(id)fp8;
- (void)hudSliderMouseUp:(id)fp8;
- (BOOL)hudSliderDragInProgress;
- (BOOL)hasImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (id)smallBlurredImage;
- (int)effectsViewButtonLevel:(int)fp8;
- (void)effectsViewButton0Action:(id)fp8;
- (void)effectsViewButton1Action:(id)fp8;
- (void)effectsViewButton2Action:(id)fp8;
- (void)_refreshAfterImageAdjustments;
- (void)_updateEffectsView;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
- (BOOL)isThemePreviewController;
- (void)dealloc;
- (void)convertTemplateInsets:(id)fp8;
- (void)convertCoordinatesToCenterBased:(id)fp8;
- (void)convertMediumTemplateToLarge:(id)fp8;
- (id)transitionControllerSlideThumbDelegate;
- (BOOL)transitionControllerRenderSlideThumbInContext:(id)fp8 context:(struct CGContext *)fp12 slideIndex:(long)fp16;
- (void)_refreshCalendars:(id)fp8;

@end

@interface IPBookView : NSView
{
    IPBookController *mBookController;
    NSColor *mBackgroundColor;
    IPPageView *mCurrentPageView;
    IPBookOverlayView *mOverlayView;
    id mActiveHUD;
    ImageSlider *mControlHUD;
    ImageSlider *mBackgroundImageControlHUD;
    IPPageElement *mHUDElement;
    IPPageView *mHUDView;
    BOOL mHUDInstalled;
    NSImage *mSpineShadingTile;
    struct _NSRect mSpreadRect;
    struct _NSRect mPageBoundsLeft;
    struct _NSRect mPageBoundsRight;
    BOOL mViewIsResizing;
    float mViewScale;
    float mDrawScale;
    float mPreviousDrawScale;
    NSTimer *mAnimationTimer;
    double mAnimationStart;
    struct _NSRect mSpreadRectTarget;
    struct _NSRect mPageBoundsLeftTarget;
    struct _NSRect mPageBoundsRightTarget;
    IPTextElementView *mActiveTextEditor;
    NSProgressIndicator *mLoadingProgress;
    struct _NSPoint mCenterPercent;
    BOOL mDrawingSuspended;
    BOOL mIsSecondaryView;
}

+ (id)thumbnailCoverArtForProductType:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)selectionOnPageChanged:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)currentPageView;
- (void)setCurrentPageView:(id)fp8;
- (id)pageViewForPage:(id)fp8;
- (float)drawingScale;
- (void)setDrawingScale:(float)fp8;
- (float)previousDrawingScale;
- (id)book;
- (BOOL)pageIsOnscreen:(id)fp8;
- (id)pageArtNamed:(id)fp8 forSize:(struct _NSSize)fp12;
- (void)loadPreferences;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)pageSelectionDidChange;
- (void)updateDisplayForPage:(id)fp8;
- (void)updateDisplay;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)resizeFrameFromSizeIncrement:(float)fp8;
- (void)viewStyleChanged;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)recenterAreaOfFocus;
- (void)animate:(id)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (id)loadingMessageString;
- (BOOL)drawingSuspended;
- (void)setDrawingSuspended:(BOOL)fp8;
- (void)setShadowInContext:(struct CGContext *)fp8;
- (BOOL)isSecondaryView;
- (void)setIsSecondaryView:(BOOL)fp8;
- (void)_drawLoadingMessage;
- (void)drawOverlayForPageView:(id)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)removeSubviews;
- (void)installOverlayView;
- (struct CGRect)clipRect;
- (BOOL)viewIsResizing;
- (void)setFrameSize:(struct _NSSize)fp8;
- (struct _NSRect)controlHUDFrame;
- (struct _NSRect)backgroundImageControlHUDFrame;
- (void)installControlHUDAtPoint:(struct _NSPoint)fp8 initialValue:(float)fp16 forView:(id)fp20 forElement:(id)fp24;
- (void)installBackgroundImageHUDAtPoint:(struct _NSPoint)fp8 forView:(id)fp16 forElement:(id)fp20;
- (void)installTextHUDAtPoint:(struct _NSPoint)fp8 forView:(id)fp16 forElement:(id)fp20;
- (void)_adjustActiveHUDLocationForPoint:(struct _NSPoint)fp8 inView:(id)fp16;
- (void)moveHudX:(float)fp8 Y:(float)fp12 inView:(id)fp16;
- (id)hudElement;
- (void)removeHUD;
- (void)drawSelectionForElement:(id)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 scale:(float)fp24;
- (void)_initializeControlHUD;
- (void)_initializeBackgroundImageControlHUD;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)setActiveTextEditor:(id)fp8;
- (id)activeTextEditor;
- (void)havePageViewsRemoveEditors;
- (id)overlayView;
- (void)dealloc;

@end

@interface IPPageElement : NSObject <NSCopying>
{
    NSString *mIconPath;
    IPPage *mParent;
    struct _NSPoint mLocation;
    CDAnonymousStruct19 mAnimationStartLocation;
    struct _NSPoint mRelativeLocation;
    BOOL mDrawingRectIsRelative;
    struct _NSSize mSize;
    struct _NSSize mAnimationStartSize;
    NSString *mOrientation;
    NSDictionary *mVariant;
    NSMutableDictionary *mBackgroundVariants;
    NSBezierPath *mPath;
    NSBezierPath *mSelectionPath;
    float mScale;
    float mZoom;
    float mPanX;
    float mPanY;
    float mRotation;
    float mAnimationStartRotation;
    float mAlpha;
    float mAnimationStartAlpha;
    float mLeftSelectionInset;
    float mRightSelectionInset;
    float mTopSelectionInset;
    float mBottomSelectionInset;
    BOOL mSelected;
    BOOL mLocked;
    BOOL mIsBackground;
    BOOL mFitToSize;
    BOOL mRotateToFit;
    BOOL mFlipOrientation;
    BOOL mDraggingInProgress;
    int mLayer;
    BOOL mMirrorHorizontal;
    BOOL mMirrorVertical;
    BOOL mReflect;
    BOOL mIgnoreFrameMasters;
    IPPageElement *mEnclosingElement;
    NSColor *mBorderColor;
    int mBorderBlendMode;
    float mBorderGap;
    float mTopBorderWidth;
    float mBottomBorderWidth;
    float mLeftBorderWidth;
    float mRightBorderWidth;
    float mTopBorderFactor;
    float mBottomBorderFactor;
    float mLeftBorderFactor;
    float mRightBorderFactor;
    NSColor *mFillColor;
    NSColor *mFillTextureColor;
    NSString *mFillTexture;
    struct _NSSize mFillTextureTileSize;
    float mFillTextureAlpha;
    int mFillTextureBlendMode;
    int mFillTextureColorBlendMode;
    float mULCornerRadius;
    float mURCornerRadius;
    float mLLCornerRadius;
    float mLRCornerRadius;
    struct CGPoint mULCornerInset;
    struct CGPoint mURCornerInset;
    struct CGPoint mLLCornerInset;
    struct CGPoint mLRCornerInset;
    int mGradientType;
    struct CGPoint mGradientStartPoint;
    struct CGPoint mGradientEndPoint;
    NSColor *mGradientStartColor;
    NSColor *mGradientEndColor;
    float mGradientStartRadius;
    float mGradientEndRadius;
    float mBevelThickness;
    NSColor *mLeftBevelColor;
    NSColor *mRightBevelColor;
    NSColor *mBottomBevelColor;
    NSColor *mTopBevelColor;
    int mLeftBevelBlendMode;
    int mRightBevelBlendMode;
    int mBottomBevelBlendMode;
    int mTopBevelBlendMode;
    float mOuterBevelThickness;
    float mOuterBevelGap;
    NSColor *mOuterLeftBevelColor;
    NSColor *mOuterRightBevelColor;
    NSColor *mOuterBottomBevelColor;
    NSColor *mOuterTopBevelColor;
    int mOuterLeftBevelBlendMode;
    int mOuterRightBevelBlendMode;
    int mOuterBottomBevelBlendMode;
    int mOuterTopBevelBlendMode;
    NSColor *mBevelGapFillColor;
    NSColor *mBevelGapFillTextureColor;
    NSString *mBevelGapFillTexture;
    struct _NSSize mBevelGapFillTextureTileSize;
    float mBevelGapFillTextureAlpha;
    int mBevelGapFillTextureBlendMode;
    int mBevelGapFillTextureColorBlendMode;
    IPPageElement *mShadowShape;
    NSColor *mShadowColor;
    struct CGColor *mShadowColorRef;
    struct _NSPoint mShadowOffset;
    float mShadowBlur;
    BOOL mShadowIsInner;
    struct _NSSize mShadowChoke;
    BOOL mIsOval;
    float mAnimationStart;
    float mAnimationDuration;
    NSMutableArray *mAnimationEffects;
    int mBlendMode;
    IPPageElement *mSourceElement;
    NSMutableArray *mLinkedElements;
    NSAffineTransform *mTransform;
    BOOL mShouldFlipX;
    BOOL mPanZoomModeEnabled;
    BOOL mRotateModeEnabled;
    BOOL mMoveModeEnabled;
    BOOL mResizeModeEnabled;
    BOOL mDidApplyVariant;
    int mWarningToolTipTag;
    BOOL mNeedFinishTakeValues;
    BOOL mDidRegisterAsNotificationObserver;
    NSMutableArray *mAlternateElements;
    struct _NSRect mBaseDrawingRect;
    float mBaseRotation;
    struct _NSPoint mBasePoint;
    struct IPPageElementEdges mSnapEdges;
}

+ (id)loadElementFromDict:(id)fp8 forPage:(id)fp12 fromTemplate:(id)fp16 errorContext:(id)fp20;
+ (int)blendModeForString:(id)fp8;
+ (id)stringForBlendMode:(int)fp8;
+ (int)flipKnob:(int)fp8 horizontal:(BOOL)fp12;
- (id)init;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)copyLinkedElementsFrom:(id)fp8;
- (struct CGImage *)lowQualityBadge;
- (struct _NSSize)lowQualityBadgeSize;
- (struct _NSRect)rectFromCGRect:(struct CGRect)fp8 inContext:(struct CGContext *)fp24 inView:(id)fp28;
- (struct _NSPoint)badgePointFromCGPoint:(struct CGPoint)fp8 inContext:(struct CGContext *)fp16 inView:(id)fp20;
- (struct CGRect)badgeRectForRect:(struct CGRect)fp8 inContext:(struct CGContext *)fp24 inView:(id)fp28 scale:(float)fp32;
- (id)lowResToolTip;
- (id)textWarningToolTip;
- (void)setWarningToolTipRect:(struct _NSRect)fp8 fromView:(id)fp24 warning:(id)fp28;
- (void)clearWarningToolTipFromView:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)shouldEncodeAllAttributes;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)applyVariant;
- (void)setDidApplyVariant:(BOOL)fp8;
- (BOOL)applyVariantForBackground:(id)fp8;
- (id)applyMasterElement:(id)fp8 toDictionary:(id)fp12 forPage:(id)fp16;
- (BOOL)ignoreFrameMasters;
- (id)iconPath;
- (id)parent;
- (void)setParent:(id)fp8;
- (id)sourceElement;
- (void)setSourceElement:(id)fp8;
- (BOOL)isLinkedElement;
- (id)linkedElements;
- (void)updateLinkedElements;
- (struct _NSPoint)location;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)rotateSizeAndLocation;
- (CDAnonymousStruct19)animationStartLocation;
- (void)snapToGuide:(id)fp8 byResizing:(BOOL)fp12;
- (void)setSnapEdges:(struct IPPageElementEdges)fp8;
- (void)snapToEdgesByResizing:(BOOL)fp8;
- (struct _NSPoint)relativeLocation;
- (void)setRelativeLocation:(struct _NSPoint)fp8;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)fp8;
- (struct _NSSize)animationStartSize;
- (float)frameAspectRatio;
- (float)imageAspectRatio;
- (BOOL)isOval;
- (void)setIsOval:(BOOL)fp8;
- (id)orientation;
- (void)setOrientation:(id)fp8;
- (id)variant;
- (void)setVariant:(id)fp8;
- (id)backgroundVariants;
- (void)cachePDFData;
- (struct _NSRect)insetRect:(float)fp8;
- (struct _NSRect)drawingRect:(float)fp8;
- (struct _NSRect)drawingRectWithReflection:(float)fp8;
- (struct _NSRect)cropRect:(float)fp8;
- (struct _NSRect)rotatedDrawingRect:(float)fp8;
- (struct _NSRect)animationDrawingRect:(float)fp8;
- (struct _NSRect)animationDrawingRectWithReflection:(float)fp8;
- (struct _NSRect)drawingRectWithSelection:(float)fp8;
- (struct _NSRect)drawingRectWithBorders:(float)fp8;
- (struct _NSRect)_scaledDrawingRectForRect:(struct _NSRect)fp8 scale:(float)fp24;
- (BOOL)drawingRectIsRelativeToSource;
- (void)setDrawingRectIsRelativeToSource:(BOOL)fp8;
- (struct IPPageElementCorners)elementCornersAtScale:(float)fp8 forBounds:(struct CGRect)fp12;
- (struct CGPath *)clippingPath:(float)fp8 forBounds:(struct CGRect)fp12;
- (struct _NSRect)pathBounds;
- (struct _NSRect)selectionPathBounds;
- (void)updatePath;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)prepareForLiveAlteration:(struct _NSPoint)fp8;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 scale:(float)fp20 aboutCenter:(BOOL)fp24;
- (float)rawZoom;
- (struct _NSPoint)rawPan;
- (float)zoom;
- (void)setZoom:(float)fp8;
- (BOOL)shouldZoom;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (struct _NSPoint)pan;
- (void)setPan:(struct _NSPoint)fp8;
- (struct _NSPoint)maxPan;
- (BOOL)panX:(float)fp8 Y:(float)fp12;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (float)rotation;
- (float)rotationInRadians;
- (float)animationStartRotation;
- (void)setRotation:(float)fp8;
- (float)alpha;
- (float)animationStartAlpha;
- (void)setAlpha:(float)fp8;
- (int)rotateByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)isSelected;
- (void)setSelected:(BOOL)fp8;
- (BOOL)isLocked;
- (void)setLocked:(BOOL)fp8;
- (void)setIsBackgroundElement:(BOOL)fp8;
- (BOOL)isBackgroundElement;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)rotateToFit;
- (BOOL)canRotateToFit;
- (void)setRotateToFit:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustGradientToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustVariantToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (BOOL)shouldMirrorHorizontally;
- (void)setMirrorHorizontally:(BOOL)fp8;
- (BOOL)shouldMirrorVertically;
- (void)setMirrorVertically:(BOOL)fp8;
- (BOOL)reflectionEnabled;
- (void)setReflectionEnabled:(BOOL)fp8;
- (float)reflectionHeightFactor;
- (int)blendMode;
- (void)setBlendMode:(int)fp8;
- (float)bevelThickness;
- (id)leftBevelColor;
- (id)rightBevelColor;
- (id)topBevelColor;
- (id)bottomBevelColor;
- (int)leftBevelBlendMode;
- (int)rightBevelBlendMode;
- (int)bottomBevelBlendMode;
- (int)topBevelBlendMode;
- (float)outerBevelThickness;
- (float)outerBevelGap;
- (id)outerLeftBevelColor;
- (id)outerRightBevelColor;
- (id)outerTopBevelColor;
- (id)outerBottomBevelColor;
- (int)outerLeftBevelBlendMode;
- (int)outerRightBevelBlendMode;
- (int)outerBottomBevelBlendMode;
- (int)outerTopBevelBlendMode;
- (id)bevelGapFillColor;
- (void)setBevelGapFillColor:(id)fp8;
- (id)bevelGapFillTextureColor;
- (void)setBevelGapFillTextureColor:(id)fp8;
- (id)bevelGapFillTexture;
- (void)setBevelGapFillTexture:(id)fp8;
- (struct _NSSize)bevelGapFillTextureTileSize;
- (void)setBevelGapFillTextureTileSize:(struct _NSSize)fp8;
- (float)bevelGapFillTextureAlpha;
- (void)setBevelGapFillTextureAlpha:(float)fp8;
- (int)bevelGapFillTextureBlendMode;
- (void)setBevelGapFillTextureBlendMode:(int)fp8;
- (int)bevelGapFillTextureColorBlendMode;
- (void)setBevelGapFillTextureColorBlendMode:(int)fp8;
- (int)layer;
- (void)setLayer:(int)fp8;
- (struct _NSRect)selectionInsets;
- (void)setSelectionInsets:(struct _NSRect)fp8;
- (id)enclosingElement;
- (void)setEnclosingElement:(id)fp8;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (id)fillTextureColor;
- (void)setFillTextureColor:(id)fp8;
- (id)fillTexture;
- (void)setFillTexture:(id)fp8;
- (struct _NSSize)fillTextureTileSize;
- (void)setFillTextureTileSize:(struct _NSSize)fp8;
- (float)fillTextureAlpha;
- (void)setFillTextureAlpha:(float)fp8;
- (int)fillTextureBlendMode;
- (void)setFillTextureBlendMode:(int)fp8;
- (int)fillTextureColorBlendMode;
- (void)setFillTextureColorBlendMode:(int)fp8;
- (id)borderColor;
- (void)setBorderColor:(id)fp8;
- (int)borderBlendMode;
- (int)gradientType;
- (void)setGradientType:(int)fp8;
- (struct CGPoint)gradientStartPoint;
- (void)setGradientStartPoint:(struct CGPoint)fp8;
- (struct CGPoint)gradientEndPoint;
- (void)setGradientEndPoint:(struct CGPoint)fp8;
- (id)gradientStartColor;
- (void)setGradientStartColor:(id)fp8;
- (id)gradientEndColor;
- (void)setGradientEndColor:(id)fp8;
- (float)gradientStartRadius;
- (void)setGradientStartRadius:(float)fp8;
- (float)gradientEndRadius;
- (void)setGradientEndRadius:(float)fp8;
- (BOOL)hasDropShadow;
- (BOOL)hasInnerShadow;
- (BOOL)hasCustomShadowShape;
- (id)shadowShape;
- (id)shadowColor;
- (struct _NSPoint)shadowOffset;
- (struct _NSSize)shadowChoke;
- (float)shadowBlur;
- (float)borderGap;
- (float)topBorderWidth;
- (void)setTopBorderWidth:(float)fp8;
- (float)bottomBorderWidth;
- (void)setBottomBorderWidth:(float)fp8;
- (float)leftBorderWidth;
- (void)setLeftBorderWidth:(float)fp8;
- (float)rightBorderWidth;
- (void)setRightBorderWidth:(float)fp8;
- (float)topBorderFactor;
- (void)setTopBorderFactor:(float)fp8;
- (float)bottomBorderFactor;
- (void)setBottomBorderFactor:(float)fp8;
- (float)leftBorderFactor;
- (void)setLeftBorderFactor:(float)fp8;
- (float)rightBorderFactor;
- (void)setRightBorderFactor:(float)fp8;
- (float)upperLeftCornerRadius;
- (void)setUpperLeftCornerRadius:(float)fp8;
- (float)upperRightCornerRadius;
- (void)setUpperRightCornerRadius:(float)fp8;
- (float)lowerLeftCornerRadius;
- (void)setLowerLeftCornerRadius:(float)fp8;
- (float)lowerRightCornerRadius;
- (void)setLowerRightCornerRadius:(float)fp8;
- (struct CGPoint)upperLeftCornerInset;
- (void)setUpperLeftCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)upperRightCornerInset;
- (void)setUpperRightCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)lowerLeftCornerInset;
- (void)setLowerLeftCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)lowerRightCornerInset;
- (void)setLowerRightCornerInset:(struct CGPoint)fp8;
- (float)scale;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setDraggingInProgress:(BOOL)fp8;
- (id)draggingImage:(struct _NSSize)fp8;
- (BOOL)isImageElement;
- (BOOL)isCompoundElement;
- (BOOL)isArtElement;
- (BOOL)isDrawingElement;
- (BOOL)isVectorElement;
- (BOOL)isTextElement;
- (BOOL)isCalendarElement;
- (BOOL)isCalendarCellElement;
- (BOOL)isContainerElement;
- (BOOL)isGuideElement;
- (BOOL)isGroupElement;
- (BOOL)isGridElement;
- (BOOL)isCellElement;
- (id)embeddedTextElements;
- (void)clearElementCache:(BOOL)fp8;
- (void)drawStrokeAndFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 resolution:(int)fp28;
- (void)_cgPatternFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 drawRect:(struct CGRect)fp28;
- (void)_patternWithLayersFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 drawRect:(struct CGRect)fp28;
- (void)drawFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 resolution:(int)fp28;
- (void)drawStrokeInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24;
- (void)enableShadowInContext:(struct CGContext *)fp8 scale:(float)fp12;
- (void)disableShadowInContext:(struct CGContext *)fp8;
- (BOOL)drawsHighlightBorder;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (BOOL)intersectsRect:(struct _NSRect)fp8 scale:(float)fp24;
- (int)knobUnderPoint:(struct _NSPoint)fp8;
- (id)alternateElements;
- (void)setAlternateElements:(id)fp8;
- (float)animationStartTime;
- (float)animationDuration;
- (id)animationEffects;
- (BOOL)animationRequiresAlpha;
- (BOOL)isAnimated;
- (BOOL)shouldFlipX;
- (void)setShouldFlipX:(BOOL)fp8;
- (void)unloadCachedObjects;
- (BOOL)panZoomModeIsEnabled;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (BOOL)rotateModeIsEnabled;
- (void)setRotateModeEnabled:(BOOL)fp8;
- (BOOL)moveModeIsEnabled;
- (void)setMoveModeEnabled:(BOOL)fp8;
- (BOOL)resizeModeIsEnabled;
- (void)setResizeModeEnabled:(BOOL)fp8;
- (void)disableAllEditModes;
- (void)preparePanZoom;
- (int)layerOrderComparison:(id)fp8;
- (int)xPositionComparison:(id)fp8;
- (int)yPositionComparison:(id)fp8;
- (BOOL)validate:(id)fp8;
- (void)_notify;
- (void)prepareForDealloc;
- (void)dealloc;
- (BOOL)needFinishTakeValues;
- (void)setNeedFinishTakeValues:(BOOL)fp8;
- (void)finishTakeValues;

@end

@interface IPPageThumbCell : NSView
{
    IPBookController *mBookController;
    IPPage *mPage;
    float mPageRatio;
    BOOL mIsSelected;
    BOOL mIsDropTarget;
    BOOL mDrawSplitSpreads;
}

- (id)initWithFrame:(struct _NSRect)fp8 forPage:(id)fp24;
- (id)key;
- (void)setController:(id)fp8;
- (id)page;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setIsSelected:(BOOL)fp8;
- (BOOL)isSelected;
- (void)setIsDropTarget:(BOOL)fp8;
- (BOOL)isDropTarget;
- (float)interpageGap;
- (BOOL)shouldDrawSplitSpreads;
- (void)setDrawSplitSpreads:(BOOL)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 withBackground:(BOOL)fp24 isSelected:(BOOL)fp28 isDropTarget:(BOOL)fp32;
- (void)_pageContentsChanged:(id)fp8;
- (struct _NSRect)pageIconRect;
- (id)thumbnail;
- (void)dealloc;

@end

@interface IPPageThumbView : NSView
{
    IPBookController *mBookController;
    struct ElementPageThumbArray *mCells;
    BOOL mVariableWidth;
    BOOL mFixedHeight;
    float mCellSize;
    long mSelectionAnchor;
    long mSelectionExtentStart;
    long mSelectionExtentEnd;
    IPPageThumbCell *mSelectedCell;
    BOOL mInDrag;
    NSTimer *mAnimationTimer;
    long mDragFromIndex;
    float mDragHoleWidth;
    long mDropTargetIndex;
    double mAnimationDuration;
    BOOL mDraggingSpread;
    IPPageThumbCell *mPreviousDropCell;
    unsigned char mDrawShadow;
    unsigned char mDrawBorder;
    BOOL mIsVertical;
    float mScrollStep;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (id)controller;
- (int)cellCount;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)resetCells;
- (void)addCell:(id)fp8 recalc:(BOOL)fp12;
- (id)newCellAtIndex:(int)fp8 forPage:(id)fp12 recalc:(BOOL)fp16;
- (void)insertCell:(id)fp8 atIndex:(int)fp12 recalc:(BOOL)fp16;
- (void)removeCellAtIndex:(int)fp8 recalc:(BOOL)fp12;
- (void)removeCell:(id)fp8 recalc:(BOOL)fp12;
- (void)removeAllCells;
- (int)indexOfCell:(id)fp8;
- (id)cellAtIndex:(int)fp8;
- (void)ensureCellIsVisible:(id)fp8;
- (void)resizeBoundingFrame;
- (void)recalcCellBounds;
- (id)selectedCells;
- (void)setSelectedCells:(id)fp8;
- (BOOL)isVertical;
- (void)setVertical:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)cellAtPoint:(struct _NSPoint)fp8;
- (void)_calculateCellsVisibleFrom:(long *)fp8 to:(long *)fp12 hardWay:(BOOL)fp16 useSelection:(BOOL)fp20 whollyVisible:(BOOL)fp24;
- (long)_firstDroppableIndex;
- (long)_lastDroppableIndex;
- (long)_thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)_moveCell:(id)fp8 toIndex:(long)fp12;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)_animateAHoleAt:(long)fp8;
- (void)_cleanUpAnimation;
- (void)_clearAnimationTimer;
- (void)_serviceAnimation;
- (unsigned int)_determineDragResult:(id)fp8;
- (id)_makeCellThumbnail:(id)fp8;
- (void)_dragCell:(id)fp8 event:(id)fp12;
- (BOOL)isFlipped;

@end

@interface IPPageView : NSView
{
    IPPage *mPage;
    IPBookView *mBookView;
    IPPageView *mProxyView;
    NSMutableArray *mTextEditors;
    struct _NSPoint mOriginOffset;
    float mLocalDrawingScale;
    BOOL mScaleByHeight;
    NSColor *mBackgroundColor;
    BOOL mMouseIsDown;
    NSImage *mEditingCacheImage;
    struct _NSRect mEditingCacheRect;
    IPBookController *mController;
}

+ (id)sharedOffscreenView;
- (void)setController:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)flushWarningToolTips;
- (id)page;
- (void)setPage:(id)fp8;
- (struct _NSRect)focusFrame;
- (float)localDrawingScale;
- (void)setLocalDrawingScale:(float)fp8;
- (void)setScaleByHeight:(BOOL)fp8;
- (void)setProxyView:(id)fp8;
- (id)bookView;
- (void)redrawSelectedElements;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8 atScale:(float)fp24 forResolution:(int)fp28;
- (void)setOriginOffset:(struct _NSPoint)fp8;
- (struct _NSPoint)originOffset;
- (void)_pageContentsChanged:(id)fp8;
- (void)setBounds:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)_ensureTextEditorSizes;
- (void)installEditor:(id)fp8;
- (void)removeEditor:(id)fp8;
- (void)removeEditors;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)_internalMouseDown:(id)fp8 isRightClick:(unsigned char)fp12;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)trackDrag:(id)fp8 element:(id)fp12;
- (void)dragElement:(id)fp8 event:(id)fp12 location:(struct _NSPoint)fp16;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (struct _NSPoint)hudLocationForElement:(id)fp8 hudFrame:(struct _NSRect)fp12;
- (void)selectElement:(id)fp8 notify:(BOOL)fp12;
- (void)deselectElement:(id)fp8 notify:(BOOL)fp12;
- (void)deselectAllElementsAndNotify:(BOOL)fp8;
- (void)reselectAllElements;
- (void)moveOrPanSelectedElements:(id)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (struct _NSRect)_unionRectForSelectedElements;
- (void)trackKnob:(int)fp8 ofElement:(id)fp12 withEvent:(id)fp16;
- (BOOL)isOpaque;
- (void)dealloc;

@end

@interface IPTextElementView : VAlignTextView
{
    IPTextElement *mTargetElement;
    NSTimer *mAnimator;
    BOOL mIsAnimating;
    float mStartingScale;
    BOOL mShouldSelectAll;
    BOOL mTextDidChange;
    BOOL mInDoFirstResponder;
    BOOL isFirst;
    BOOL isTiger;
    BOOL isBadRepaint;
    BOOL isBufferEnabled;
    struct _NSRect lastScrollVisibleRect;
    BOOL mIsPrimaryEditor;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)drawViewBackgroundInRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (void)_doFirstResponderWork;
- (void)_doFirstResponder:(id)fp8;
- (void)setNeedsDisplay:(BOOL)fp8;
- (void)setFrameRotation:(float)fp8;
- (void)_setBufferedBackground:(BOOL)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)mouseUp:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)isAnimating;
- (id)targetElement;
- (void)setTargetElement:(id)fp8;
- (void)pageViewDidResizeInView:(id)fp8;
- (void)setTextDidChange:(BOOL)fp8;
- (BOOL)isPrimaryEditor;
- (void)setIsPrimaryEditor:(BOOL)fp8;
- (void)animateFromBounds:(struct _NSRect)fp8 toBounds:(struct _NSRect)fp24 fromRotation:(float)fp40 toRotation:(float)fp44 inView:(id)fp48 remove:(BOOL)fp52;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation;
- (void)animateNextFrame:(id)fp8;
- (void)didChangeText;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (float)verticalAlignmentWeight;
- (void)dealloc;

@end

@interface IPPhotoObjCProxy : NSObject
{
    struct IPPhotoInfo *mPhotoInfo;
    NSNumber *mUniqueID;
}

+ (id)proxyWithPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)initWithPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)dealloc;
- (struct IPPhotoInfo *)photoInfo;
- (void)setPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)canTerminate;
- (id)uniqueID;
- (id)aeDimensions;
- (id)width;
- (id)height;
- (id)name;
- (void)setName:(id)fp8;
- (id)annotation;
- (void)setAnnotation:(id)fp8;
- (id)imagePath;
- (id)thumbPath;
- (id)aeTitle;
- (void)setAeTitle:(id)fp8;
- (id)aeImageFileName;
- (id)aeThumbFileName;
- (id)aeDate;
- (void)setAeDate:(id)fp8;
- (id)aeKeywords;
- (id)handleAddScriptCommand:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (id)removeKeyword:(id)fp8;

@end

@interface IPPhotoObjCProxy (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface Filter : NSObject <NSCoding>
{
    int mType;
    int mOperation;
    NSDictionary *mUserInfo;
    NSString *mStringArg;
    double mDoubleArg1;
    double mDoubleArg2;
    double mTimeIntervalStart;
    double mTimeIntervalEnd;
    unsigned int *mKeywordKeys;
    int mKeywordKeysCount;
    BOOL mKeywordSearchInvert;
    BOOL mKeywordSearchNone;
    long mLongArg1;
    long mLongArg2;
    unsigned int mKeyArg1;
    int mIntArg1;
    int mIntArg2;
    char *mQueryString;
    NSString *mTextSearchString;
    NSArray *mTextMultiSearch;
    KeyMgr *mKeyMgr;
    AlbumMgr *mAlbumMgr;
    void *mKeySet;
    Album *mShelfAlbum;
}

+ (id)dateFilterWithOperation:(int)fp8 startPhotoDate:(double)fp12 endPhotoDate:(double)fp20;
+ (id)dateFilter:(int)fp8 operation:(int)fp12 startDate:(id)fp16 endDate:(id)fp20;
+ (id)dateFilter:(int)fp8 operation:(int)fp12 value:(int)fp16 span:(int)fp20;
+ (id)userTextFilter:(id)fp8 matchAll:(BOOL)fp12;
+ (id)textFilter:(int)fp8 operation:(int)fp12 text:(id)fp16 caseInsensitive:(BOOL)fp20;
+ (id)albumFilter:(int)fp8 operation:(int)fp12 text:(id)fp16;
+ (id)keywordFilterWithOperation:(int)fp8 keys:(id)fp12;
+ (id)keywordCategoryFilterWithOperation:(int)fp8 categoryKey:(unsigned long)fp12;
+ (id)albumFilter:(int)fp8 operation:(int)fp12 key:(unsigned long)fp16;
+ (id)lastImportFilter:(unsigned long)fp8;
+ (id)rollFilterWithRollsInKeyMgr:(id)fp8;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 key:(unsigned long)fp16;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 startRoll:(int)fp16 endRoll:(int)fp20;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 text:(id)fp16 useSpaceSeparators:(BOOL)fp20 matchAll:(BOOL)fp24;
+ (id)rankingFilterWithOperation:(int)fp8 startRanking:(int)fp12 endRanking:(int)fp16;
+ (id)photoAttributeFilterWithOperation:(int)fp8 value:(int)fp12;
+ (id)exifShutterFilterWithOperation:(int)fp8 min:(float)fp12 max:(float)fp16;
+ (id)exifISOFilterWithOperation:(int)fp8 min:(int)fp12 max:(int)fp16;
+ (id)exifApertureFilterWithOperation:(int)fp8 min:(double)fp12 max:(double)fp20;
+ (id)exifFocalLengthFilterWithOperation:(int)fp8 min:(double)fp12 max:(double)fp20;
+ (id)exifCameraModelFilterWithOperation:(int)fp8 value:(id)fp12;
+ (id)exifFlashFilterWithOperation:(int)fp8 value:(int)fp12;
+ (id)copyFilter:(id)fp8;
+ (void)initialize;
- (id)initWithType:(int)fp8 operation:(int)fp12;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)copyFromFilter:(id)fp8;
- (id)userInfo;
- (void)setUserInfo:(id)fp8;
- (int)type;
- (id)typeLabel;
- (void)setType:(int)fp8;
- (int)operation;
- (id)operationLabel;
- (void)setOperation:(int)fp8;
- (double)doubleArg1;
- (double)doubleArg2;
- (long)longArg1;
- (long)longArg2;
- (unsigned long)keyArg1;
- (int)intArg1;
- (int)intArg2;
- (char *)queryString;
- (id)keyMgr;
- (id)albumMgr;
- (void)setStringArg:(id)fp8;
- (id)stringArg;
- (void)setDoubleArg1:(double)fp8;
- (void)setDoubleArg2:(double)fp8;
- (void)setLongArg1:(long)fp8;
- (void)setLongArg2:(long)fp8;
- (void)setKeyArg1:(unsigned long)fp8;
- (void)setIntArg1:(int)fp8;
- (void)setIntArg2:(int)fp8;
- (void)setQueryString:(id)fp8;
- (void)setAlbumMgr:(id)fp8;
- (void)_initializeKeywordSearch:(id)fp8;
- (struct IPAlbumList *)matchingAlbums;
- (void)initializeFilter;
- (struct IPAlbumList *)observedAlbums;
- (unsigned long long)albumMgrChangeMask;
- (unsigned long long)albumChangeMask;
- (unsigned long long)photoInfoChangeMask;
- (void *)filterFuncForFilter;

@end

@interface PhotoViewer : NSView <ArchiveDisplayProtocol, IPImageMgrDelegate>
{
    ArchiveController *mArchiveController;
    NSMenu *mImageContextMenu;
    NSMenu *mRollContextMenu;
    NSMenu *mNoCellContextMenu;
    float mThumbWidth;
    float mThumbHeight;
    float mThumbHSpace;
    float mThumbVSpace;
    float mReadAheadTop;
    float mReadAheadBottom;
    float mLastScrollPosition;
    unsigned char mForceHighResDraw;
    long mRunningDrawCount;
    double mRunningTimeCount;
    unsigned long mSelectionAnchor;
    float mScrollInterval;
    float mBackfillInterval;
    NSTimer *mHiResScrollTimer;
    NSTimer *mHiResEventScrollTimer;
    NSTimer *mDisplayResultsTimer;
    NSTimer *mAnimationTimer;
    double mAnimationStart;
    unsigned long mCenterZoomIndex;
    unsigned long mCenterZoomLowIndex;
    unsigned long mCenterZoomHighIndex;
    BOOL mResetAllowedToTopScroll;
    BOOL mRegisteredForNotifications;
    BOOL mNeedsRebuild;
    BOOL mNeedsRepaint;
    BOOL mProgressUpdate;
    BOOL mProgressUpdateOverride;
    BOOL mIsFiltered;
    BOOL mInDrag;
    BOOL mDragIsFromOneStack;
    unsigned int mDragSingleStackRollKey;
    unsigned int mDragSingleStackStackKey;
    BOOL mResetSelection;
    float mRegularLineScroll;
    float mOriginalLineScroll;
    struct _NSPoint mLastDragPoint;
    unsigned long mCurrentDragIndex;
    BOOL mCurrentDragBefore;
    struct UnsignedLongSet *mCurrentSelection;
    struct IPSelectionList *mFullSelection;
    int mFullSelectionType;
    struct UnsignedLongSet *mTemporaryRollSelection;
    struct _NSRect mDragSelectionRect;
    KeyMgr *_dragRollKeys;
    BOOL mDragSelectActive;
    BOOL mDragStartedInternal;
    struct _NSPoint mDragStartingPoint;
    BOOL mDrewLowRes;
    float mConstrainAspectRatio;
    BOOL mForceRatio;
    BOOL mConstrainWasOn;
    BOOL mNotLoaded;
    unsigned int mPreZoomState;
    BOOL mWasZoomed;
    NSProgressIndicator *mLoadingProgress;
    BOOL mReloadOfPrefsNeeded;
    NSAttributedString *mLoadingString;
    float mPageHeight;
    struct _NSRect mInsertionRect;
    BOOL mInsertionOnStack;
    unsigned int mInsertionStackKey;
    BOOL mCenteringZoom;
    BOOL mActive;
    float mSizeIncrement;
    unsigned long mLastIdx;
    struct _NSRect mLastPreloadRect;
    struct MessageReceiver mDBMessageReceiver;
    struct MessageReceiver mAlbumMessageReceiver;
    double mEventSplitThreshold;
    unsigned int mEventSplitModeNextKey;
    unsigned long mHoverImageIndex;
    struct vector<MetaTrackingRecord, std::allocator<MetaTrackingRecord>> *mZoneTracking;
    struct map<float, UInt32, std::less<float>, std::allocator<std::pair<const float, UInt32>>> *mRowBreaks;
    float mLastMaxTextHeight;
    OverlayWindow *mOverlay;
    BOOL mLastDrawWasScroll;
    float mAnimationFrameRate;
    float mLineSpeedFactor;
    float mPageSpeedFactor;
    BOOL mUseScrollOverlay;
    NSTimer *mOverlayCloseTimer;
    BOOL mPossibleDoubleClickReturn;
    BOOL mPossibleDoubleClickMagnify;
    id mOriginalScrollerTarget;
    SEL mOriginalScrollerSelector;
    struct _NSRect mCurrentNewVisible;
    struct _NSRect mLatestNewVisible;
    struct ThumbDataArray *mBackgroundThumbDataArray;
    BOOL mBackgroundThumbDataArrayValid;
    BOOL mOverlayFromThumb;
    NSTimer *mScrollAnimateTimer;
    struct _NSPoint mScrollAnimateStart;
    struct _NSPoint mScrollAnimateFinish;
    struct _NSPoint mScrollAnimateFinalFinish;
    double mScrollAnimateStartTime;
    double mScrollAnimateDuration;
    BOOL mForceHUD;
    double mRampDuration;
    float mRampDistance;
    float mScrollDistance;
    struct _NSPoint mScrollAnimatePreviousFinish;
    struct _NSPoint mScrollAnimateLastDraw;
    BOOL mInThumbScroll;
    IPOnscreenImageMgr *mImageMgr;
    struct IPPhotoInfo *mCurrentOneUpImage;
    struct IPPhotoInfo *mCurrentPreOneUpImage;
    struct IPPhotoInfo *mCurrentPostOneUpImage;
    float mUsedFrameHeight;
    NSString *mShortDateFormat;
    struct __CFDateFormatter *mMediumDateFormatter;
    struct __CFDateFormatter *mLongDateFormatter;
    NSDictionary *mCalendarFormattingLocale;
    BOOL mUseScrollAnimation;
    BOOL mOneShotOneUpForceHiRes;
    BOOL mInLinePageScroll;
    BOOL mLastScrollWasWheel;
    NSTextField *mInlineEditor;
    NSTokenField *mInlineKeywordEditor;
    NSTextField *mInlineCommentEditor;
    StarRatingControl *mInlineRatingEditor;
    struct IPPhotoInfo *mInlineEditPhoto;
    struct IPRoll *mInlineEditRoll;
    NSLock *mInlineEditUpdateLock;
    int mSplitModeStartingEventCount;
    IPRollInfoCache *mRollInfoCache;
    struct map<Key, StackFramingEntry, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> *mStackFramingCache;
    NSRecursiveLock *mStackFramingCacheLock;
    unsigned int mHoveringStackKey;
    struct _NSRect mHoveringStackRect;
    Album *mCurrentAlbum;
    BOOL mIgnoreApplicationCurrentAlbum;
    struct RenderCache *mRenderCache;
    NSDictionary *msCaptionAttrsLight;
    NSDictionary *msCaptionAttrsDark;
    NSDictionary *msCaptionAttrs;
    Ellipsizer *msCaptionEllipsizer;
    float msCaptionHeight;
    NSDictionary *msKeywordAttrsLight;
    NSDictionary *msKeywordAttrsDark;
    NSDictionary *msKeywordAttrs;
    Ellipsizer *msKeywordEllipsizer;
    float msKeywordHeight;
    NSDictionary *msRankAttrsLight;
    NSDictionary *msRankAttrsDark;
    NSDictionary *msRankAttrs;
    float msRankHeight;
    NSDictionary *msMainTextRollAttrs;
    NSDictionary *msAltTextRollAttrs;
    NSDictionary *msSelectedMainTextRollAttrs;
    NSDictionary *msSelectedAltTextRollAttrs;
    NSDictionary *msSelectedBubbleTextRollAttrs;
    NSDictionary *msBubbleTextRollAttrs;
    float msTextHeight;
    Ellipsizer *msMainTextRollEllipser;
    Ellipsizer *msAltTextRollEllipser;
    Ellipsizer *msSelectedMainTextRollEllipser;
    Ellipsizer *msSelectedAltTextRollEllipser;
    NSString *mStar;
    NSString *mBullet;
    float mStarSize;
    float msStarSize[6];
    NSString *msStar[6];
    BOOL msWereGonnaQuit;
    float msDiclosureWidth;
    float msRollImageWidth;
    float msDiclosureHeight;
    NSImage *msRollImageSmall;
    NSImage *msStackImageSmall;
    NSImage *msCalImageSmall;
    struct _NSSize msCalImageSmallSize;
    NSImage *msDisclosureOpenH;
    NSImage *msDisclosureClosedH;
    NSImage *msDisclosureWhiteOpenH;
    NSImage *msDisclosureWhiteClosedH;
    NSImage *msDisclosureOpenN;
    NSImage *msDisclosureClosedN;
    NSImage *msDisclosureWhiteOpenN;
    NSImage *msDisclosureWhiteClosedN;
    NSImage *mHiddenBadge;
    struct _NSSize mHiddenBadgeSize;
    NSImage *mShelvedBadge;
    struct _NSSize mShelvedBadgeSize;
    NSImage *msFavoriteBadge;
    struct _NSSize msFavoriteBadgeSize;
    NSImage *msMovieBadge;
    NSImage *msMovieBadgeBlack;
    struct _NSSize msMovieBadgeSize;
    NSImage *msPendingBadge;
    struct _NSSize msPendingBadgeSize;
    BOOL mOverrideColors;
    NSColor *msBackgroundColor;
    NSColor *mStackBackgroundColor;
    NSColor *mStackStrokeColor;
    NSColor *msYearBackgroundColor;
    NSColor *msMonthBackgroundColor;
    NSColor *msDayBackgroundColor;
    struct ViewStruct *msPhotos;
    unsigned long msCellCount;
    struct _opaque_pthread_mutex_t msRebuildLock;
    ImageDB *mgCurrentDB;
    unsigned int mgFavoriteKeywordKey;
    unsigned int mgViewState;
    int mgInterpolation;
    int mgStdInterpolation;
    BOOL mSplitModeHoldRollsVisible;
    BOOL mSplitModeHoldDatesVisible;
    BOOL mSplitModeHoldHiddenVisible;
    float msRollStroke;
    struct CGContext *msGContext;
    BOOL mgCopyOnScroll;
    float msAlpha;
    CDAnonymousStruct7 *msShadowCache;
    CDAnonymousStruct7 *mSelectedShadowCache;
    CDAnonymousStruct7 *mInactiveSelectedShadowCache;
    CDAnonymousStruct7 *msStackShadowCache;
    CDAnonymousStruct7 *mSelectedStackShadowCache;
    CDAnonymousStruct7 *mInactiveSelectedStackShadowCache;
    struct CGImage *_eventFrameImage;
    float msScale;
    struct _NSRect _lastToolTipConfigureRect;
    int mDefeatKeepSelectionVisible;
    BOOL mHaveWrittenMissingThumbnailWarning;
    BOOL mHaveDoneMissingThumbnailWarning;
    int mNeedMissingThumbnailWarning;
    BOOL mgRollDateOnRight;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaBeginRects;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaEndRects;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaFinalRects;
    struct _NSPoint _eaBeginScrollPoint;
    struct _NSPoint _eaEndScrollPoint;
    long _eaBeginIndexRange;
    long _eaEndIndexRange;
    IPAnimator *_eventToggleAnimator;
    NSLock *_eventAnimatingLock;
    unsigned int _eaOldFirstIndex;
    unsigned int _eaOldLastIndex;
    struct _NSRect _eaFinalViewFrame;
    float _eaDuration;
    KeyMgr *_eaFadeOutKeys;
    KeyMgr *_eaFadeInKeys;
    KeyMgr *_eaPreSlideKeys;
    KeyMgr *_eaPostSlideKeys;
    KeyMgr *_eaChangingKeys;
    BOOL _eaEmptyChangingKeys;
    struct map<Key, EventDataCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, EventDataCacheRecord>>> *_eaEventDataCacheMap;
    struct map<Key, ViewStruct, std::less<Key>, std::allocator<std::pair<const Key, ViewStruct>>> *_eaCacheMap;
    struct vector<ViewStruct, std::allocator<ViewStruct>> *_eaCacheVector;
    float _eaFadeAlpha;
    unsigned long _eaActualCount;
    IPAnimation *_eaAnimation;
    NSString *_thumbSizePreferenceKey;
    float _currentAnimationAlpha;
}

+ (void)initialize;
+ (int)_cacheSize;
+ (id)_stringForImageType:(int)fp8;
- (void)handlePhotoInfoRemoved:(struct IPPhotoInfo *)fp8;
- (BOOL)isOpaque;
- (void)showRolls:(char *)fp8 showInvisible:(char *)fp12 showingLibrary:(char *)fp16;
- (void)flagsForPhotoAtIndex:(unsigned int)fp8 isPhoto:(char *)fp12 isRoll:(char *)fp16 isHeader:(char *)fp20 isOpen:(char *)fp24 isVisible:(char *)fp28;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)wasZoomed;
- (void)setWasZoomed:(BOOL)fp8;
- (struct IPPhotoInfo *)currentOneUpImage;
- (void)setCurrentOneUpImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)currentPreOneUpImage;
- (void)setCurrentPreOneUpImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)currentPostOneUpImage;
- (void)setCurrentPostOneUpImage:(struct IPPhotoInfo *)fp8;
- (void)scrollWheel:(id)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)precacheDone:(id)fp8;
- (void)hijackVerticalScroller;
- (void)decoupledScrollAnnounce:(id)fp8;
- (void)scrollPoint:(struct _NSPoint)fp8;
- (void)imageRequestDone:(id)fp8;
- (void)queueRequestForImagesInRect:(struct _NSRect)fp8 cacheOnly:(BOOL)fp24;
- (float)findRowBreakRelativeTo:(struct _NSPoint)fp8 below:(BOOL)fp16;
- (float)findRowBreak:(int)fp8 below:(BOOL)fp12;
- (void)decoupledScroll:(id)fp8;
- (void)maxThumbSizeBumped:(id)fp8;
- (void)initVariables;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)prepareToTerminateApp:(id)fp8;
- (BOOL)isFlipped;
- (void)activate;
- (void)defaultsChanged:(id)fp8;
- (void)deactivate;
- (BOOL)isActive;
- (void)ignoreDPAPNotifications;
- (void)resumeDPAPNotifications;
- (void)becomeActive;
- (id)document;
- (void)releaseActive;
- (void)loadPreferences:(id)fp8;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)_resetToolTips;
- (void)resetCaptionAttributes;
- (void)resetRankingAttributes;
- (void)resetRollAttrributes;
- (void)resetKeywordAttributes;
- (void)resetAttributes;
- (id)imageMgr;
- (void)dealloc;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)indexOfImageInCenterOfRect:(struct _NSRect)fp8;
- (unsigned long)indexOfImageInCenterOfRectOrCurrentSelection:(struct _NSRect)fp8;
- (void)_scrollSelectionIntoView;
- (void)setMetaRectsForViewStruct:(struct ViewStruct *)fp8;
- (void)setMetaRectsForImageAtIndex:(unsigned int)fp8;
- (void)moveSelectionForInlineEditOfItemAtIndex:(unsigned long)fp8;
- (id)proxyForCell:(struct ViewStruct *)fp8;
- (struct ViewStruct *)cellForProxy:(id)fp8;
- (unsigned long)indexForProxy:(id)fp8;
- (struct ViewStruct *)nextPrevInlineTarget:(BOOL)fp8;
- (void)undoRedoInlineCaptionEdit:(id)fp8;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(id)fp8;
- (id)currentKeywordEditor;
- (void)inlineKeywordEditorAction:(id)fp8;
- (void)updateInlineKeywordEditor:(id)fp8;
- (id)tokenField:(id)fp8 completionsForSubstring:(id)fp12 indexOfToken:(int)fp16 indexOfSelectedItem:(int *)fp20;
- (id)tokenField:(id)fp8 shouldAddObjects:(id)fp12 atIndex:(unsigned int)fp16;
- (id)tokenField:(id)fp8 displayStringForRepresentedObject:(id)fp12;
- (void)undoRedoInlineCommentEdit:(id)fp8;
- (void)inlineCommentEditorAction:(id)fp8;
- (void)updateInlineCommentEditor:(id)fp8;
- (void)undoRedoInlineRatingEdit:(id)fp8;
- (void)inlineRatingEditorAction:(id)fp8;
- (void)updateInlineRatingEditor:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)_control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)resetOffset;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setBounds:(struct _NSRect)fp8;
- (void)scrollingStopped:(id)fp8;
- (void)setLoadingString:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)uncacheSelectedPhotos;
- (void)uncachePhotosForStack:(struct IPStack *)fp8;
- (void)uncacheStackedPhotosForAlbum:(id)fp8;
- (void)storeLastFloat:(float)fp8 onAlbum:(id)fp12;
- (void)rebuildView:(id)fp8;
- (id)currentAlbum;
- (BOOL)supportsResizeSlider;
- (float)sliderValueFromThumbValue:(float)fp8;
- (float)sliderValueToThumbSize:(float)fp8;
- (float)sliderPositionToThumbSize;
- (void)zoomBandForThumbSize:(float)fp8 centerIndex:(unsigned long)fp12 visibleRect:(struct _NSRect)fp16 lowIdx:(unsigned long *)fp32 highIdx:(unsigned long *)fp36;
- (float)sizeCutover;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8 forceRebuild:(BOOL)fp12;
- (void)setSizeIncrement:(float)fp8;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (unsigned long)indexWithImageRecKey:(unsigned long)fp8;
- (unsigned long)indexOfRoll:(struct IPRoll *)fp8;
- (unsigned long)indexOfPhoto:(struct IPPhotoInfo *)fp8;
- (void)_checkPhotoListForUpdate:(struct IPPhotoList *)fp8 andReset:(BOOL)fp12;
- (void)_dpapItemDataUpdateDidEnd:(id)fp8;
- (void)networkImageLoadedNotification:(id)fp8;
- (void)setNeedsRebuild:(BOOL)fp8;
- (void)setNeedsRepaint:(BOOL)fp8;
- (void)setProgressUpdate:(BOOL)fp8;
- (void)setProgressUpdateOverride:(BOOL)fp8;
- (void)resizeView:(id)fp8;
- (struct _NSRect)_progressRect;
- (id)_loadingString;
- (void)_createAlbumProgress;
- (void)_removeAlbumProgress;
- (void)updateAlbumProgress;
- (void)_drawLoadingFeedback;
- (float)maxOverlayKeywordWidth;
- (float)maxOverlayRollNamedWidth;
- (void)updateOverlay:(BOOL)fp8 visible:(struct _NSRect)fp12;
- (void)overlayCloser:(id)fp8;
- (BOOL)isScrolled:(struct _NSRect)fp8;
- (float)cacheCheckForRect:(struct _NSRect)fp8;
- (void)prefetchSurroundings;
- (void)missingThumbnailWarningMark;
- (void)missingThumbnailWarning;
- (void)setNSImageInterpolationFromCGInterpolation:(int)fp8;
- (id)thumbSizePreferenceKey;
- (void)setThumbSizePreferenceKey:(id)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (BOOL)hasSelection:(int)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)clearFullSelection;
- (void)clearSelection;
- (struct IPPhotoList *)selectedPhotos;
- (BOOL)trackDisclosureWithIndex:(unsigned long)fp8 rect:(struct _NSRect)fp12 event:(id)fp28 didTrack:(char *)fp32;
- (void)_doClickOnRollWithIndex:(unsigned long)fp8 inDisclosure:(BOOL)fp12 wasSelected:(BOOL)fp16 wasOpen:(BOOL)fp20 doAllRolls:(BOOL)fp24;
- (BOOL)handleMouseEventForRollWithIndex:(unsigned long)fp8 wasSelected:(BOOL)fp12 inDisclosure:(BOOL)fp16 modifierFlags:(unsigned int)fp20 rebuild:(BOOL)fp24 clickCount:(int)fp28;
- (void)_doClickOnDateHeaderWithIndex:(unsigned long)fp8 inDisclosure:(BOOL)fp12 wasSelected:(BOOL)fp16 wasOpen:(BOOL)fp20 doAllRolls:(BOOL)fp24;
- (BOOL)handleMouseEventForDateHeaderWithIndex:(unsigned long)fp8 wasSelected:(BOOL)fp12 inDisclosure:(BOOL)fp16 modifierFlags:(unsigned int)fp20 rebuild:(BOOL)fp24 clickCount:(int)fp28;
- (void)selectFromIndex:(unsigned long)fp8 toIndex:(unsigned long)fp12 inDisclosure:(BOOL)fp16;
- (void)resetCursorRects;
- (unsigned long)_keyOfAdjacentRoll:(long)fp8 below:(BOOL)fp12;
- (void)updateStackHoverState;
- (void)updateHoverImageHoverState;
- (void)updateHoverState;
- (void)_modifiersChanged:(id)fp8;
- (void)updateUIToInfo:(struct IPPhotoInfo *)fp8;
- (void)erIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)_showMagnifierForPhoto:(struct ViewStruct *)fp8;
- (void)mouseMoved:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)jogShuttle:(id)fp8;
- (int)_dotMacAlbumTitleState:(id)fp8;
- (void)_goToDotMacAlbum:(id)fp8;
- (void)_announceDotMacAlbum:(id)fp8;
- (void)toggleRevealConcealForRollWithKey:(unsigned long)fp8;
- (BOOL)trackItemRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28 index:(unsigned long)fp32 stateMask:(unsigned short)fp36;
- (void)mouseDown:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)isBookView;
- (void)ensureImageIsVisible:(unsigned long)fp8;
- (void)ensureImageIsVisibleMovingUp:(unsigned long)fp8;
- (void)ensureImageIsVisibleMovingDown:(unsigned long)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (struct IPPhotoInfo *)nextPrevImageWithOptions:(unsigned char)fp8 isNext:(unsigned char)fp12 returnOnly:(BOOL)fp16;
- (struct IPPhotoInfo *)whatIsNextImage;
- (struct IPPhotoInfo *)whatIsPrevImage;
- (void)nextPrevImageWithOptions:(unsigned char)fp8 isNext:(unsigned char)fp12;
- (void)upDownImageWithOptions:(unsigned char)fp8 isDown:(unsigned char)fp12;
- (void)nextImage;
- (void)previousImage;
- (void)_redoOrderChanges:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 albums:(id)fp20;
- (void)_undoOrderChanges:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 albums:(id)fp20;
- (void)prepareOrderChangeUndo:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 allManualAlbums:(BOOL)fp20 db:(id)fp24;
- (void)toggleOpenStateForStackWithKey:(unsigned long)fp8;
- (void)_redoMakeSelectedPhotoStackKey:(unsigned long)fp8 originalKey:(unsigned long)fp12;
- (void)_undoMakeSelectedPhotoStackKey:(unsigned long)fp8 originalKey:(unsigned long)fp12;
- (void)makeSelectedPhotoStackKey;
- (void)_redoStackSelectedPhotos:(id)fp8 originalRolls:(id)fp12 originalStacks:(id)fp16 newStack:(unsigned long)fp20;
- (void)_undoStackSelectedPhotos:(id)fp8 originalRolls:(id)fp12 originalStacks:(id)fp16 newStack:(unsigned long)fp20;
- (void)closeNewStack:(id)fp8;
- (void)stackSelectedPhotos;
- (void)_redoUnstackSelectedPhotos:(id)fp8 stackKey:(unsigned long)fp12;
- (void)_undoUnstackSelectedPhotos:(id)fp8 stackKey:(unsigned long)fp12;
- (void)unstackSelectedPhotos;
- (void)openSelectedStacks;
- (void)closeSelectedStacks;
- (BOOL)_canOpenStacks;
- (BOOL)_canCloseStacks;
- (BOOL)_canUnstackPhotos;
- (BOOL)_canSetStackKeyPhoto;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)_undoRedoShowHidePhotos:(id)fp8 oldSelection:(id)fp12 newSelection:(id)fp16 undoManager:(id)fp20;
- (BOOL)showingUserHidden;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (BOOL)_canShowUserHiddenPhotos;
- (BOOL)_canHideUserHiddenPhotos;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (struct _NSRect)globalRectForSelectedPhoto;
- (void)keyDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (id)dragRollKeys;
- (void)setDragRollKeys:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)sortPhotoListLikeAlbum:(struct IPPhotoList *)fp8;
- (void)_fillPasteboardWithSelection:(id)fp8 addAllStackMembers:(BOOL)fp12;
- (void)pasteboard:(id)fp8 provideDataForType:(id)fp12;
- (void)_undoRedoMovePhotosToNewEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 addedKeys:(id)fp20 removedKeys:(id)fp24 undoManager:(id)fp28;
- (void)_undoCommandPasteImages:(id)fp8 toAlbum:(id)fp12 overRec:(struct IPPhotoInfo *)fp16 targetRec:(struct IPPhotoInfo *)fp20 originalOrder:(id)fp24 originalSortOrder:(int)fp28 originalSortDirection:(int)fp32 uniqueOnly:(BOOL)fp36;
- (void)_doCommandPasteImages:(id)fp8 toAlbum:(id)fp12 overRec:(struct IPPhotoInfo *)fp16 targetRec:(struct IPPhotoInfo *)fp20 uniqueOnly:(BOOL)fp24;
- (void)_redoMovePhotos:(id)fp8 toStack:(unsigned long)fp12 beforePhoto:(unsigned long)fp16 originalRolls:(id)fp20 originalStacks:(id)fp24;
- (void)_undoMovePhotos:(id)fp8 toStack:(unsigned long)fp12 beforePhoto:(unsigned long)fp16 originalRolls:(id)fp20 originalStacks:(id)fp24;
- (void)movePhotos:(struct IPPhotoList *)fp8 toStack:(struct IPStack *)fp12 beforePhoto:(struct IPPhotoInfo *)fp16;
- (void)_redoRemovePhotos:(id)fp8 beforePhoto:(unsigned long)fp12 originalStacks:(id)fp16;
- (void)_undoRemovePhotos:(id)fp8 beforePhoto:(unsigned long)fp12 originalStacks:(id)fp16;
- (void)removePhotosFromStack:(struct IPPhotoList *)fp8 beforePhoto:(struct IPPhotoInfo *)fp12;
- (void)_undoRedoMakeKeyPhotoForAlbum:(id)fp8 oldPhotoUID:(id)fp12 newPhotoUID:(id)fp16 undoManager:(id)fp20;
- (void)_undoRedoMakeKeyPhotoForRoll:(id)fp8 oldPhoto:(id)fp12 newPhoto:(id)fp16 undoManager:(id)fp20;
- (void)_pasteFromPasteboard:(id)fp8 uniqueOnly:(BOOL)fp12;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)_determineDragResult:(id)fp8;
- (struct _NSSize)_badgeImageSizeForCount:(int)fp8;
- (void)_drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)dragSelection:(id)fp8 location:(struct _NSPoint)fp12 imageIndex:(int)fp20 slideBack:(BOOL)fp24;
- (BOOL)isPasteboardJustOneStack:(id)fp8 stacksRollKey:(unsigned int *)fp12 stacksStackKey:(unsigned int *)fp16;
- (id)rollsRepresentedOnPasteboard:(id)fp8;
- (unsigned long)imageMostUnderPoint:(struct _NSPoint)fp8 leftSide:(char *)fp16 rowTop:(float *)fp20 rowBottom:(float *)fp24 firstIdx:(unsigned long *)fp28 lastIdx:(unsigned long *)fp32;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_acceptDroppedFilesPromised:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (void)resetState:(id)fp8;
- (id)stateDictionary;
- (void)_undoRedoSetCutList:(id)fp8 oldCutList:(id)fp12 undoManager:(id)fp16;
- (void)_setCutList:(id)fp8;
- (void)_doCommandCutImages:(id)fp8 fromAlbum:(id)fp12 withState:(id)fp16;
- (void)_undoCommandCutImages:(id)fp8 fromAlbum:(id)fp12 sortedArray:(id)fp16 withState:(id)fp20;
- (BOOL)_canCut;
- (BOOL)_canCopy;
- (BOOL)_canPaste;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (int)_selectionCount;
- (BOOL)validateMenuItem:(id)fp8;
- (void)setAlignToGrid:(BOOL)fp8;
- (BOOL)rollsVisible;
- (void)setCaptionsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setRollsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setHiddenPhotosVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setHideImportPhotos:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setDatesVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setRankingsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setKeywordsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setDrawFrame:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawShadow:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawFrameOnClosedStacks:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawCount:(BOOL)fp8 display:(BOOL)fp12;
- (void)setConstrainVisible:(BOOL)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (void)rebuildLayout:(id)fp8;
- (void)updateStatus;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (struct IPPhotoInfo *)currentPhoto;
- (void)animateScrollAbsolute:(float)fp8;
- (void)animateScrollDelta:(float)fp8;
- (void)startScrollAnimateFrom:(struct _NSPoint)fp8 to:(struct _NSPoint)fp16;
- (void)finishScrollAnimate;
- (BOOL)isScrollAnimating;
- (void)scrollAnimateHandler:(id)fp8;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;

@end

@interface RBCodec : NSObject
{
}

@end

@interface PreferenceController : NSObject
{
    id mWindow;
    id mTabView;
    NSUserDefaults *mUserDefaults;
    NSDictionary *mOriginalPrefs;
    id mSlideshowPanel;
    id mSlideshowPrefController;
    id mGridAlignBox;
    id mUseFileNamesBox;
    id mHierarchicalAlbumsBox;
    id mBackgroundColorSlider;
    id mPhotoFrameRadioCluster;
    id mEditPopup;
    id mDoubleClickDetail;
    id mRotateRadioCluster;
    id mRotateIcon;
    id mUpdateCheckbox;
    NSPopUpButton *mLibraryContainsOption;
    NSButton *mAutoSplitNonCameraButton;
    NSMatrix *mMagnifyMatrix;
    NSPopUpButton *mAutoSplitGranularityPopup;
    NSButton *mShowReflectionsButton;
    NSButton *mShowEventScrollingInfoButton;
    NSButton *mDPAPClientCheckbox;
    NSButton *mDPAPServiceCheckbox;
    NSMatrix *mDPAPServiceModeMatrix;
    NSMatrix *mSharableAlbumMatrix;
    NSTextField *mDPAPServiceNameText;
    NSButton *mDPAPServicePasswordCheckbox;
    NSSecureTextField *mDPAPServicePasswordText;
    NSTextField *mDPAPServiceStatusText;
    id mShowNMonthsCheckbox;
    id mMonthsString;
    id mNMonthsTextfield;
    id mShowNRollsCheckbox;
    id mRollsString;
    id mRollsTextfield;
    id mMonthStepper;
    id mRollStepper;
    id mLaunchPopup;
    id mCountInAlbumNamesCheckbox;
    id mBorderCheckbox;
    id mShadowCheckbox;
    id mFrameClosedStacksCheckbox;
    id mSourceTextSizePopup;
    NSButton *mCopyFilesCheckbox;
    NSButton *mEmbedColorSyncCheckbox;
    NSButton *mUseColorSyncCheckbox;
    NSTextField *mAdvancedPrefDetails;
    NSButton *mShowScrollingInfoBox;
    NSButton *mUseScrollAnimationBox;
    NSButton *mUseHUDTransparencyBox;
    id mRAWCheckbox;
    id mRAWEditorCheckbox;
    NSPopUpButton *mCameraConnectChoice;
    NSTextField *mPublishedAlbumsPrompt;
    NSOutlineView *mPublishedAlbumsTable;
    NSButton *mUnpublishButton;
    NSButton *mSubPollNowButton;
    NSPopUpButton *mSubscriptionPollingTime;
    NSTextField *mSubscriptionNextPoll;
    NSTextField *mSubStatusText;
    NSProgressIndicator *mSubStatusProgress;
    NSTextField *mGalleryTitlePrompt;
    NSTextField *mGalleryTitleText;
    NSTextField *miDiskStoragePrompt;
    NSTextField *miDiskStorageMinimum;
    NSTextField *miDiskStorageMiddle;
    NSTextField *miDiskStorageMaximum;
    NSLevelIndicator *miDiskStorageMeter;
    NSTextField *miDiskCurrentlyUsedPrompt;
    NSTextField *miDiskCurrentlyUsedValue;
    NSTextField *miDiskCapacityPrompt;
    NSTextField *miDiskCapacityValue;
    NSButton *miDiskBuyMoreButton;
    NSString *miDiskCurrentlyUsedSave;
    NSString *miDiskCapacitySave;
    NSString *mShareFolderName;
    NSString *mSavedPublishedAlbumsPrompt;
    NSMutableArray *mPublishedAlbums;
    NSError *mPubSubError;
    BOOL mUpdatePublishPromptWhenBecomeKey;
    BOOL mDoBackgroundMusic;
    float mFavoriteGray;
    NSMovie *mCurrentSongQT;
    NSTimer *mTuneTimer;
    BOOL mSlideUserClickedButton;
    NSMutableArray *mBackgroundMusicChoices;
    id mMailAppPopup;
    NSString *mMailAppString;
    id mMailAppIcon;
    NSString *mExternalEditorPath;
    NSString *mBackgroundMusicPath;
    NSString *mLastUserChoice;
    ArchiveDocument *mArchiveDocument;
    NSMutableArray *mPreferencePanelObjects;
    NSMutableSet *mSharedAlbumAdjustedIdSet;
    BOOL mDidChangeSharedAlbumDMAPIdSet;
    BOOL mKillUndoStack;
    struct _NSRect mSavedPreviewFrame;
    NSOpenGLPixelFormat *mSavedPixelFormat;
    BOOL mFirstTimeForSlideShowPrefs;
    Album *mCurrentAlbum;
    BOOL mWasShownOnResignActive;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    NSMutableArray *mCameraConnectPaths;
}

- (id)_prefStatesDictionary;
- (void)awakeFromNib;
- (id)init;
- (void)_loadNib;
- (void)dealloc;
- (void)_appResignedActive:(id)fp8;
- (void)_appBecameActive:(id)fp8;
- (void)show;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
- (void)hide;
- (BOOL)doSlideShowPreferencesForDocument:(id)fp8;
- (void)sampleTransition;
- (void)showSlideShowPanel:(id)fp8 forDocument:(id)fp12;
- (BOOL)timeForThemeUpgradeCheck;
- (void)setExternalEditorPath:(id)fp8;
- (void)resetDoubleClickEditor:(id)fp8;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (void)controlTextDidEndEditing:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)_updatePollTime:(id)fp8;
- (BOOL)doesMailAppExistWithName:(id)fp8;
- (void)_updatePublishPrompt2;
- (void)_updatePublishPrompt;
- (void)_readUserDefaultsIntoUI;
- (void)_showQuotaFailure;
- (void)_retrieveQuota;
- (void)_listAlbums;
- (void)_dotMacConfigChanged:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)_canTalkToDotMac:(id)fp8;
- (void)_checkDotMac;
- (void)_setShareFolderName:(id)fp8;
- (void)_createShareFolderWithName:(id)fp8;
- (void)_setGalleryTitleText:(id)fp8;
- (void)_setAlbumList:(id)fp8;
- (void)_showPubSubError:(id)fp8;
- (void)_setPubSubRawError:(id)fp8;
- (void)_setPubSubError:(id)fp8;
- (void)_albumListRetrieved:(id)fp8 error:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)selectPhotoFrame:(id)fp8;
- (void)selectRotation:(id)fp8;
- (void)setHierarchicalAlbums:(id)fp8;
- (void)setAlignToGrid:(id)fp8;
- (void)setShowReflections:(id)fp8;
- (void)setShowEventScrollingInfo:(id)fp8;
- (void)setShowScrollingInfo:(id)fp8;
- (void)setUseScrollAnimation:(id)fp8;
- (void)setUseHUDTransparency:(id)fp8;
- (void)setUseFileNames:(id)fp8;
- (void)setDoubleClickAction:(id)fp8;
- (void)setDoubleClickDetailPreference:(id)fp8;
- (void)setMagnifyPreference:(id)fp8;
- (void)setSourceTextSize:(id)fp8;
- (void)setCheckForUpdates:(id)fp8;
- (void)changeDynamicAlbumSettings:(id)fp8;
- (void)_synchMonthsAndRollsStrings;
- (void)populateLaunchAlbumPopup;
- (void)setLaunchAlbum:(id)fp8;
- (void)toggleShowCountInAlbumNames:(id)fp8;
- (void)_guaranteeDefaults;
- (void)addSongToMusicChoices:(id)fp8;
- (void)removeSongFromMusicChoices:(id)fp8;
- (int)songCount;
- (id)songAtIndex:(int)fp8;
- (void)_writeUserDefaultsFromUI:(id)fp8;
- (BOOL)_boolFromCheckBox:(id)fp8;
- (int)_checkBoxStateForBoolKey:(id)fp8;
- (void)_setExternalEditorPath:(id)fp8;
- (void)_setBackgroundMusicPath:(id)fp8;
- (void)_setExternalEditorPathUI;
- (void)bkgdColorSliderChanged:(id)fp8;
- (void)setBackgroundBrightness:(float)fp8 favorite:(BOOL)fp12;
- (void)chooseMailApp:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)setKillUndoStackOnClose;
- (void)copyPublishLink:(id)fp8;
- (void)unpublishButtonClick:(id)fp8;
- (void)_unpublishSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_removePubAlbumNamed:(id)fp8;
- (void)_removePubAlbum:(id)fp8;
- (void)_albumForcedUnpub:(id)fp8 error:(id)fp12;
- (void)fireSubscriptionTimer:(id)fp8;
- (void)selectSubscriptionPolling:(id)fp8;
- (void)iDiskBuyMoreClick:(id)fp8;
- (void)setAdvancedCheck:(id)fp8;
- (void)setCopyFilesCheck:(id)fp8;
- (void)setRAWEdit:(id)fp8;
- (void)setAutoStackRAWJPG:(id)fp8;
- (void)setRAWExternalEditorPreference:(id)fp8;
- (void)_advancedPanelMagic;
- (void)_initCameraConnectedPopup;
- (void)setCameraConnectionAction:(id)fp8;

@end

@interface ListSource : NSObject
{
    id mPopupMenu;
    NSMutableArray *mList;
}

- (void)setPopupMenu:(id)fp8;
- (void)setList:(id)fp8;
- (id)list;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface PreferenceController (DPAP)
- (void)_dpapServicePasswordTextDidChange:(id)fp8;
- (void)_loadSharableAlbumMatrix;
- (void)_removeDPAPRelatedObservers;
- (void)_serviceShutdownAlertDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)_setBoolIfChanged:(BOOL)fp8 forDefaultsKey:(id)fp12;
- (void)setDPAPServiceName:(id)fp8;
- (void)setDPAPServicePassword:(id)fp8;
- (BOOL)_setStringIfChanged:(id)fp8 forDefaultsKey:(id)fp12;
- (void)_syncDPAPDefaultsWithUI;
- (void)_syncUIWithDPAPDefaults;
- (void)toggleAlbumIsShared:(id)fp8;
- (void)toggleDPAPClientIsEnabled:(id)fp8;
- (void)toggleDPAPServiceIsAlbumSpecific:(id)fp8;
- (void)toggleDPAPServiceIsEnabled:(id)fp8;
- (id)_adjustedDMAPIDForAlbum:(id)fp8;
- (void)toggleDPAPServiceIsPasswordRequired:(id)fp8;
@end

@interface PreferenceKeys : NSObject
{
}

+ (id)_defaultDPAPDatabaseName;
+ (id)defaultBackgroundColorData;
+ (BOOL)systemVersionIsLeopard;
+ (BOOL)systemVersionIsTiger;
+ (BOOL)systemVersionIsSUTiDenver;
+ (BOOL)systemVersionIsPanther;
+ (long)systemVersion;
+ (BOOL)authorizedForSystemPreferences;
+ (BOOL)hasSuitableiDVD;
+ (BOOL)hasSuitableBlade;
+ (unsigned long)megsOfPhysicalMemory;
+ (BOOL)graphiteTheme;
+ (BOOL)libraryShowsAllPhotos;
+ (BOOL)libraryShowsEvents;
+ (BOOL)firstLaunch;
+ (BOOL)capsLockKeyDown;
+ (BOOL)shiftKeyDown;
+ (BOOL)optionKeyDown;
+ (BOOL)commandKeyDown;
+ (BOOL)controlKeyDown;
+ (BOOL)anyModifierKeyDown;
- (void)assureDefaults;
- (id)_defaultPersistentDefaults;
- (void)_synchronizeApplicationDefaultsWithDictionary:(id)fp8;

@end

@interface PreferenceController (NSToolbarDelegate)
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
@end

@interface PreferenceController (Toolbar)
- (void)setupToolbar;
- (void)showGeneralPref:(id)fp8;
- (void)showAppearancePref:(id)fp8;
- (void)showEventsPref:(id)fp8;
- (void)showSharingPref:(id)fp8;
- (void)showSubscriptionsPref:(id)fp8;
- (void)showAdvancedPref:(id)fp8;
@end

@interface SlideshowPrefController : NSObject
{
    id mWindow;
    id mOKButton;
    id mCancelButton;
    id mSaveButton;
    id mTransitionBox;
    id mTransitionPopup;
    id mTransitionDirectionView;
    id mTransitionSpeedSlider;
    id mTransitionPreview;
    id mSlideDurationText;
    id mSlideDurationStepper;
    id mRandomOrderCheckBox;
    id mLoopCheckBox;
    id mFillScreenCheckBox;
    id mDisplayTitlesCheckBox;
    id mDisplayRatingsCheckBox;
    id mDisplayControlsCheckBox;
    id mPlayMusicCheckBox;
    ILMediaBrowserView *mMediaBrowser;
    id mAutoKenBurnsCheckBox;
    ArchiveDocument *mArchiveDocument;
    Album *mCurrentAlbum;
    struct IPPhotoList *mTransitionSampleImages;
    BOOL mFirstTimeForSlideShowPrefs;
    struct _NSRect mSavedPreviewFrame;
    NSOpenGLPixelFormat *mSavedPixelFormat;
    NSArray *mNibTopObjects;
    BOOL mReducedOptions;
}

+ (id)sharedSlideshowPrefController;
- (id)initWithNib:(id)fp8;
- (id)init;
- (void)awakeFromNib;
- (id)mediaBrowserView:(id)fp8 displayNameForMediaGroup:(id)fp12;
- (id)mediaBrowserView:(id)fp8 iconForMediaGroup:(id)fp12;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaObject:(id)fp12;
- (void)dealloc;
- (BOOL)useDocument:(id)fp8;
- (void)sampleTransitionUpdate;
- (void)transitionPreviewUpdateAction:(id)fp8;
- (void)sampleTransition;
- (void)_cleanUpMediaBrowser;
- (void)fillScreenCheckboxAction:(id)fp8;
- (void)chooseOK:(id)fp8;
- (void)chooseCancel:(id)fp8;
- (void)chooseSave:(id)fp8;
- (void)chooseRandomOrderCheckBox:(id)fp8;
- (void)chooseDisplayControlsCheckBox:(id)fp8;
- (void)_setupTransitionPopup;
- (void)chooseTransitionPopup:(id)fp8;
- (void)autoKenBurnsCheckBoxAction:(id)fp8;
- (void)transitionDirectionAction:(id)fp8;
- (void)chooseTransitionSpeedSlider:(id)fp8;
- (void)chooseSlideDurationStepper:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)choosePlayMusicCheckBox:(id)fp8;
- (BOOL)_getTransitionSampleImages;
- (void)_getSettingsFromUI:(id)fp8;
- (void)_setSlideshowPrefsFromUIForAlbum:(id)fp8;
- (void)_writeUserDefaultsFromUI:(id)fp8;
- (BOOL)_slideDurationTextIsValid:(id)fp8;
- (void)_appResignedActive:(id)fp8;
- (void)mediaBrowserViewSelectionDidChange:(id)fp8;
- (void)mediaBrowserView:(id)fp8 didLoadMediaType:(int)fp12;

@end

@interface PrintAccessoryBox : NSBox
{
    PrintController *mPrintController;
}

- (id)printController;
- (void)printController:(id)fp8;
- (void)printSessionDidChange:(struct OpaquePMPrintSession *)fp8;

@end

@interface PrintController : NSObject <PrintFormatterImageProtocol>
{
    NSWindow *mWindow;
    NSPopUpButton *mFormatPopup;
    NSPopUpButton *mPaperSizePopup;
    PrintView *mSampleView;
    NSBox *mPrintFormatPluginBox;
    PrintAccessoryBox *mEnclosingBox;
    NSBox *mEnclosingViewForPage;
    ShadowView *mShadowView;
    Album *mAlbum;
    struct IPPhotoList *mPhotos;
    NSMutableArray *mPrintFormatters;
    PrintMgrRec *mCurrentPluginRec;
    PrintView *mPrintView;
    BOOL mFirstPrintJob;
    struct _NSSize mImageableSize;
    NSMutableArray *mPrintNibObjects;
    NSDictionary *mTextAttributes;
    NSDictionary *mTextAttributesForDisplay;
    Ellipsizer *mEllipser;
    Ellipsizer *mEllipserForDisplay;
    float mTextHeight;
    float mTextHeightForDisplay;
    void *mPaperInfo;
    struct _NSSize mRequiredPaperSize;
    BOOL mRequireBorderless;
    BOOL mRequiredPaperUnavailable;
    NSPrintInfo *mSavePrintInfo;
    BOOL mLastSelectPaperWasBorderless;
    struct OpaquePMPrintSession *mPrintSession;
}

+ (id)printController;
+ (id)printControllerNoAlloc;
- (id)init;
- (void)dealloc;
- (void)setAlbum:(id)fp8 selection:(struct IPPhotoList *)fp12;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct IPPhotoList *)photos;
- (void)setPhotos:(struct IPPhotoList *)fp8;
- (id)sampleView;
- (id)printView;
- (id)printFormatters;
- (id)currentPlugin;
- (id)currentPluginRec;
- (void)setCurrentPluginRec:(id)fp8;
- (struct _NSSize)imageableSize;
- (void)setImageableSize:(struct _NSSize)fp8;
- (void)_updateSampleAspect;
- (BOOL)requiredPaperUnavailable;
- (void)_updateRequiredPaperWarning;
- (id)_findPaperWithSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (int)_findExistingPaperWithWidth:(double)fp8 height:(double)fp16;
- (void)_selectPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (id)_getPapers:(id)fp8 forPrinter:(struct OpaquePMPrinter *)fp12;
- (void)printSessionDidChange:(struct OpaquePMPrintSession *)fp8;
- (void)clearRequiredPaperSize;
- (BOOL)hasRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)setRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)choosePrintFormat:(id)fp8;
- (void)choosePaperSize:(id)fp8;
- (void)showInWindow:(id)fp8;
- (void)populateFormatPopUpButton;
- (void)scanForPrintFormatters;
- (void)calcViewPages;
- (void)calcViewMargins;
- (long)photoCount;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (void)beginWriteTransactionForPhotoAtIndex:(int)fp8;
- (void)endTransactionForPhotoAtIndex:(int)fp8;
- (struct CGSize)photoSizeAtIndex:(int)fp8;
- (float)photoRotationAtIndex:(int)fp8;
- (BOOL)photoIsPortraitAtIndex:(int)fp8;
- (void)rotatePhotoAtIndex:(int)fp8 byAmount:(float)fp12;
- (struct _NSRect)centerRect:(struct _NSRect)fp8 overRect:(struct _NSRect)fp24;
- (struct _NSRect)scaleRect:(struct _NSRect)fp8 toFillRect:(struct _NSRect)fp24;
- (BOOL)rectIsPortrait:(struct _NSRect)fp8;
- (BOOL)rectIsSquare:(struct _NSRect)fp8;
- (float)dpiForPhotoAtIndex:(int)fp8 targetRect:(struct _NSRect)fp12 convertToPrintCoords:(BOOL)fp28;
- (float)warningImageDPI;
- (float)defaultMaximumDPI;
- (struct _NSRect)scaledRectForPhotoAtIndex:(int)fp8 destRect:(struct _NSRect)fp12;
- (void)drawPhotoAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28 zoomAndTrim:(BOOL)fp32;
- (void)_drawJPEGFileFor:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 clipRect:(struct _NSRect)fp28;
- (void)redisplaySample;
- (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
- (id)localizedString:(id)fp8;
- (void)setTextAttributes:(id)fp8 forDisplay:(BOOL)fp12;
- (float)maxTextHeightForDisplay:(BOOL)fp8;
- (void)drawCaptionAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (BOOL)_hasPlugins;
- (void)_resizePrintPanelToFitView:(id)fp8 oldView:(id)fp12;
- (void)_updateSelectedCount;
- (void)_resizeView:(id)fp8;
- (void)_printDocument:(id)fp8 fromWindow:(id)fp12;
- (void)_printPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;

@end

@interface PrintMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id mPlugin;
    struct _NSSize mViewSize;
    id mController;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)description;
- (id)initWithPath:(id)fp8 controller:(id)fp12;
- (id)path;
- (void)setPath:(id)fp8;
- (id)bundle;
- (void)setBundle:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)bundleInfo;
- (BOOL)isValidPrintFormatterPlugin;
- (BOOL)loadPlugin;
- (id)printFormatterPlugin;
- (void)unloadPlugin;
- (id)view;
- (struct _NSSize)viewSize;

@end

@interface PrintView : NSView
{
    unsigned int mNumPages;
    unsigned int mCurrentPageNumber;
    id mPlugin;
    struct _NSSize mImageableSize;
    struct _NSSize mMarginSize;
    BOOL mIsPrinting;
    struct _NSRect mPrintRect;
    struct _NSRect mDisplayRect;
    PrintView *mPrintView;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (unsigned int)numberOfPages;
- (void)setNumberOfPages:(unsigned int)fp8;
- (unsigned int)currentPageNumber;
- (void)setCurrentPageNumber:(unsigned int)fp8;
- (struct _NSSize)marginSize;
- (void)setMarginSize:(struct _NSSize)fp8;
- (id)plugin;
- (void)setPlugin:(id)fp8;
- (struct _NSSize)imageableSize;
- (void)setImageableSize:(struct _NSSize)fp8;
- (BOOL)isPrinting;
- (void)setIsPrinting:(BOOL)fp8;
- (void)calcNumberOfPages;
- (void)setPrintView:(id)fp8;
- (void)calcMarginSize;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (void)_badgeRequiredSize;
- (void)_badgeIncompatibleSize;
- (void)_badgeLowResolution;

@end

@interface ShadowView : NSView
{
}

- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface ProgressController : NSObject
{
    id mWindow;
    id mSheet;
    id mPrimaryText;
    id mSecondaryText;
    id mProgressBar;
    id mCancelButton;
    id mCancelObject;
    SEL mCancelSelector;
    SEL mDoneSelector;
    BOOL mCanceled;
    float mMinimumIncrement;
    float mCurrentValue;
    struct _NSModalSession *modalSession;
    NSMutableArray *mProgressNibObjects;
    BOOL mUsingSheet;
}

- (id)initWithWindow:(id)fp8;
- (void)_start:(id)fp8 enableCancel:(BOOL)fp12 cancelString:(id)fp16 setMinMax:(BOOL)fp20 min:(float)fp24 max:(float)fp28 floatModal:(BOOL)fp32;
- (void)start:(id)fp8;
- (void)start:(id)fp8 enableCancel:(BOOL)fp12;
- (void)start:(id)fp8 cancelString:(id)fp12;
- (void)displayModalWindowWithText:(id)fp8;
- (void)startWithMin:(float)fp8 max:(float)fp12 startText:(id)fp16;
- (void)startWithMin:(float)fp8 max:(float)fp12 startText:(id)fp16 enableCancel:(BOOL)fp20;
- (void)keepModalResponsive;
- (id)window;
- (id)sheet;
- (void)pause;
- (void)resume;
- (void)setMin:(float)fp8 max:(float)fp12;
- (void)stop;
- (void)setPrimaryText:(id)fp8;
- (void)setSecondaryText:(id)fp8;
- (void)setPercentDone:(float)fp8;
- (void)incrementBy:(float)fp8;
- (void)setCancelObject:(id)fp8 andSelector:(SEL)fp12;
- (void)setCancelObject:(id)fp8 cancelSelector:(SEL)fp12 doneSelector:(SEL)fp16;
- (id)progressBar;
- (void)setIndeterminate:(BOOL)fp8;
- (BOOL)isIndeterminate;
- (void)exceptionedOut;
- (void)cancel:(id)fp8;
- (BOOL)isCanceled;
- (BOOL)_ensureNibLoaded;
- (void)_useCancel:(BOOL)fp8;
- (void)_setCancelString:(id)fp8;
- (void)_endProgress:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)dealloc;

@end

@interface SearchCriteria : NSObject
{
    SmartAlbumInfo *mInfo;
    int mCurrentField;
    NSView *mFirstKeyView;
    NSView *mLastKeyView;
    NSView *mContentView;
    NSPopUpButton *mFieldPopup;
    NSTabView *mCriteriaTab;
    NSPopUpButton *mDateComparisons;
    NSPopUpButton *mTextComparisons;
    NSPopUpButton *mKeywordComparisons;
    NSPopUpButton *mAlbumComparisons;
    NSPopUpButton *mRollComparisons;
    NSPopUpButton *mRankingComparisons;
    NSPopUpButton *mShutterComparisons;
    NSPopUpButton *mISOComparisons;
    NSPopUpButton *mApertureComparisons;
    NSPopUpButton *mFocalLengthComparisons;
    NSPopUpButton *mCameraModelComparisons;
    NSPopUpButton *mFlashComparisons;
    NSPopUpButton *mPhotoAttributeComparisons;
    NSTabView *mValueTab;
    NSTextField *mTextValue;
    CALDateControl *mDateValue;
    NSPopUpButton *mAlbumListValue;
    NSPopUpButton *mKeywordListValue;
    NSPopUpButton *mKeywordCategoryListValue;
    NSTextField *mDateInLastText;
    NSPopUpButton *mDateInLastPopup;
    CALDateControl *mDateRangeStart;
    CALDateControl *mDateRangeEnd;
    NSTextField *mRollValue;
    StarRatingControl *mRankingValue;
    StarRatingControl *mRankingStart;
    StarRatingControl *mRankingEnd;
    NSComboBox *mShutterSpeedValue;
    NSComboBox *mShutterSpeedStartValue;
    NSComboBox *mShutterSpeedEndValue;
    NSComboBox *mISOValue;
    NSComboBox *mISOStartValue;
    NSComboBox *mISOEndValue;
    NSComboBox *mApertureValue;
    NSComboBox *mApertureStartValue;
    NSComboBox *mApertureEndValue;
    NSComboBox *mFocalLengthValue;
    NSComboBox *mFocalLengthStartValue;
    NSComboBox *mFocalLengthEndValue;
    NSPopUpButton *mCameraModelValue;
    NSPopUpButton *mFlashValue;
    NSPopUpButton *mPhotoAttributeValue;
    NSButton *mAddCriteriaButton;
    NSButton *mDeleteCriteriaButton;
    NSMenuItem *mCheckItem;
    NSMenuItem *mNoneItem;
}

+ (id)searchCriteriaWithInfo:(id)fp8;
- (id)initWithInfo:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)loadFromFilter:(id)fp8;
- (id)getFilter;
- (id)contentView;
- (id)firstKeyView;
- (id)lastKeyView;
- (void)switchField:(id)fp8;
- (void)switchComparison:(id)fp8;
- (id)info;
- (void)setInfo:(id)fp8;
- (void)setAddEnabled:(BOOL)fp8;
- (void)setDeleteEnabled:(BOOL)fp8;
- (void)addCriteria:(id)fp8;
- (void)deleteCriteria:(id)fp8;
- (void)control:(id)fp8 didFailToValidatePartialString:(id)fp12 errorDescription:(id)fp16;
- (void)_prepareShutterSpeedValueControlWithNone:(BOOL)fp8;
- (void)_prepareISOValueControlWithNone:(BOOL)fp8;
- (void)_prepareApertureValueControlWithNone:(BOOL)fp8;
- (void)_prepareFocalLengthValueControlWithNone:(BOOL)fp8;

@end

@interface SmartAlbumInfo : NSObject
{
    NSWindow *mWindow;
    NSBox *mConditionsBox;
    NSView *mPlaceholderView;
    NSTextField *mAlbumNameText;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    NSTabView *mMatchTabView;
    NSPopUpButton *mMatchPopUp;
    FilterAlbum *mAlbum;
    AlbumViewController *mAlbumViewController;
    NSMutableArray *mSearchCriteria;
    NSMutableArray *mPlaceholderViews;
    NSMutableArray *mAlbumTitles;
    NSArray *mCommonShutterSpeeds;
    NSArray *mCommonISOs;
    NSArray *mCommonApertures;
    NSArray *mCommonFocalLengths;
    NSArray *mCameraModels;
    NSArray *mCameraModelsWithMakes;
    NSMutableArray *mSmartAlbumNibObjects;
    NSMutableArray *mSearchCriteriaNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)albumNameField;
- (void)clearCachedLists;
- (id)db;
- (id)albumMgr;
- (id)loadWithDefaultName:(id)fp8 albumViewController:(id)fp12;
- (id)nameText;
- (void)setNameText:(id)fp8;
- (void)replaceWindowReference:(id)fp8;
- (id)conditionsBox;
- (void)showForAlbum:(id)fp8 defaultName:(id)fp12 inWindow:(id)fp16 albumViewController:(id)fp20;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (void)_loadCriteria;
- (id)keywordTitles;
- (id)keywordWithKey:(unsigned long)fp8;
- (id)keywordCategoryMenu;
- (id)albumTitles;
- (void)updateAlbumTitles;
- (id)albumViewController;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)_setSpringsForChangeAt:(id)fp8;
- (void)rewireNextKeyViews;
- (void)_resizeWindowBy:(float)fp8;
- (void)_setEnableDelete:(BOOL)fp8;
- (void)_setEnableAdd:(BOOL)fp8;
- (void)addCriteriaAfter:(id)fp8;
- (void)deleteCriteria:(id)fp8;
- (int)criteriaCount;
- (id)commonShutterSpeeds;
- (id)commonISOs;
- (id)commonApertures;
- (id)commonFocalLengths;
- (void)_initCameraModels;
- (id)cameraModelsWithMakes;
- (id)cameraModels;
- (id)cameraModelFromModelWithMake:(id)fp8;
- (id)cameraModelWithMakeFromCameraModel:(id)fp8;

@end

@interface IARectCollection : NSObject
{
    NSMutableArray *mRects;
}

+ (id)rectCollection;
- (id)init;
- (void)dealloc;
- (void)addRect:(struct _NSRect)fp8;
- (struct _NSRect)collapse;
- (struct _NSRect)unionWith:(id)fp8;
- (id)objectEnumerator;

@end

@interface IARectWrapper : NSObject
{
    struct _NSRect mRect;
}

+ (id)createWithRect:(struct _NSRect)fp8;
- (id)initWithRect:(struct _NSRect)fp8;
- (struct _NSRect)rect;
- (id)description;

@end

@interface IATransitionCurve : NSObject
{
    NSMutableArray *points;
}

+ (void)_generateSineCurve;
+ (id)_sineCurve;
+ (float)sineMap:(float)fp8;
- (id)init;
- (void)addPoint:(struct _NSPoint)fp8;
- (void)addPointX:(float)fp8 andY:(float)fp12;
- (void)addPoints:(float *)fp8;
- (void)clearPoints;
- (void)redistribute;
- (float)interpolatedYgivenX:(float)fp8 withPoint:(struct _NSPoint)fp12 andPoint:(struct _NSPoint)fp20;
- (float)YgivenX:(float)fp8;
- (void)replaceX:(float)fp8 andY:(float)fp12 atIndex:(int)fp16;
- (void)adjustCurveWithX:(float)fp8 andY:(float)fp12;
- (void)dealloc;

@end

@interface SessionContext : NSObject <IASessionProtocol>
{
    struct _NSRect mSlideRect;
    struct _NSSize mDisplaySize;
    int mDepth;
    struct _CGLContextObject *mCglContext;
    struct _CGLContextObject *mWorkContext;
    BOOL mIsDoubleBuffered;
    BOOL mFlipped;
    NSMutableArray *mClipStack;
    float mMaximumTextureSize;
    NSRecursiveLock *mWorkContextLock;
}

+ (void)lockOpenGL;
+ (void)unlockOpenGL;
+ (id)protocolVersion;
+ (struct _NSRect)bestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16;
+ (void)ratioForBestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16 numerator:(long *)fp24 denominator:(long *)fp28;
+ (int)VRAM;
+ (BOOL)usingRage128;
+ (BOOL)slowMachine;
+ (int)cpuCount;
+ (unsigned long)cpuSpeed;
+ (void)checkMachine;
+ (long)numProcessors;
+ (BOOL)textureRectangleExtAvailable;
+ (BOOL)_determineIfRage128;
+ (BOOL)_determineIfSlowMachine;
+ (BOOL)_determineIfTextureRectangleExtAvailable;
- (void)lockWorkContext;
- (void)unlockWorkContext;
- (id)initWithSlideRect:(struct _NSRect)fp8 displaySize:(struct _NSSize)fp24 displayDepth:(int)fp32 pixelFormat:(struct _CGLPixelFormatObject *)fp36;
- (struct _CGLContextObject *)workContext;
- (float)maximumTextureSize;
- (float)_determineMaximumTextureSize;
- (void)dealloc;
- (void)_computeAndApplyClipping;
- (struct _CGLContextObject *)context;
- (struct _NSSize)displaySize;
- (int)displayDepth;
- (struct _NSRect)slideRect;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (void)updateRenderer;
- (void)enableClipping:(struct _NSRect)fp8;
- (void)disableClipping;
- (void)_forceDisableClipping;
- (void)flushFrame;
- (void)makeCurrentContext;
- (float)perspectiveProjectionFOV;
- (void)applyOrthoProjection;
- (void)applyDefaultProjection;
- (BOOL)doubleBuffered;
- (BOOL)coerceIntoView;

@end

@interface TexturedRectangle : NSObject <IADrawableProtocol>
{
    struct texture_array mTextureArray;
    unsigned int mLoresTextureName[2];
    char *mLoresTextureData;
    struct _NSSize mLoresSize;
    struct _NSSize mDisplaySize;
    struct _NSSize mImageSize;
    int mDepthInBytes;
    unsigned int mGlTarget;
    int mGlInternalFormat;
    unsigned int mGlFormat;
    unsigned int mGlType;
    BOOL mStoreClientSide;
    BOOL mAllowLores;
    int mCoreStride;
    int mAlphaType;
    SessionContext *mSession;
    BOOL mInverted;
    struct _NSPoint mCenter;
    BOOL mTiled;
    struct _CGLContextObject *mWorkContext;
    struct _NSPoint mOffset;
    float mZLocation;
    struct _NSPoint mCenterPointShift;
    float mOpacity;
    float mScale;
    float mRotation;
    float mYRotation;
    float mXRotation;
    BOOL mResState;
}

+ (BOOL)_useLowRes;
+ (id)protocolVersion;
+ (id)scale:(id)fp8 newSize:(struct _NSSize)fp12;
+ (id)scale:(id)fp8 newSize:(struct _NSSize)fp12 frameSize:(struct _NSSize)fp20;
+ (int)getColorBytesPerRow:(int)fp8 trueColor:(BOOL)fp12;
+ (void *)convert:(id)fp8 trueColor:(BOOL)fp12;
+ (int)resampleARGBData:(char *)fp8 colorProfile:(char **)fp12 sourceSize:(struct _NSSize)fp16 sourceRotation:(float)fp24 sourceRowBytes:(int)fp28 sourceRect:(struct _NSRect)fp32 outBuffer:(char **)fp48 destRect:(struct _NSRect)fp52 destSize:(struct _NSSize)fp68;
- (id)initWithBuffer:(void *)fp8 bufferSize:(struct _NSSize)fp12 offset:(struct _NSPoint)fp20 scale:(float)fp28 stride:(int)fp32 depth:(int)fp36 target:(unsigned long)fp40 internalFormat:(long)fp44 format:(unsigned long)fp48 type:(unsigned long)fp52 storeClientSide:(BOOL)fp56 allowLores:(BOOL)fp60 tiled:(BOOL)fp64 alphaType:(int)fp68 session:(id)fp72;
- (BOOL)inverted;
- (id)initFromColorBuffer:(unsigned long)fp8 rect:(struct _NSRect)fp12 session:(id)fp28;
- (id)initWithAlpha:(void *)fp8 bufferSize:(struct _NSSize)fp12 stride:(int)fp20 session:(id)fp24;
- (void)dealloc;
- (void)updateARGB;
- (void)_updateARGB;
- (struct _NSSize)rectSize;
- (struct _NSSize)scaledImageSize;
- (struct texture_array)textureArray;
- (unsigned int *)textureNameArrayLoRes;
- (void)setCenterPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)centerPoint;
- (unsigned long)textureTarget;
- (BOOL)resState;
- (void)setResState:(BOOL)fp8;
- (void)_drawComponentRect:(struct texture_rect)fp8 offset:(struct _NSPoint)fp32 scale:(float)fp40;
- (void)_drawComponentRectClipped:(struct texture_rect)fp8 offset:(struct _NSPoint)fp32 scale:(float)fp40;
- (void)_drawComponent:(struct texture_rect)fp8 subrect:(struct _NSRect)fp32 offset:(struct _NSPoint)fp48 scale:(float)fp56;
- (void)_drawLoresRectAtOffset:(struct _NSPoint)fp8 scale:(float)fp16;
- (BOOL)_enableBlending:(float)fp8;
- (void)draw;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 rotation:(float)fp24;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 highDetail:(BOOL)fp24;
- (void)drawClippedToSlideshowAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16;
- (void)drawSubrect:(struct _NSRect)fp8 opacity:(float)fp24 scale:(float)fp28 offset:(struct _NSPoint)fp32 highDetail:(BOOL)fp40;
- (struct _NSPoint)_interpolatePercent:(float)fp8 endPoint:(struct _NSPoint)fp12 endPoint:(struct _NSPoint)fp20;
- (struct _NSPoint)_interpolatePoint:(struct _NSPoint)fp8 ul:(struct _NSPoint)fp16 ur:(struct _NSPoint)fp24 ll:(struct _NSPoint)fp32 lr:(struct _NSPoint)fp40;
- (void)_drawCorners:(struct FixedPoint *)fp8 atOffset:(struct _NSPoint)fp12 scale:(float)fp20 opacity:(float)fp24;
- (float)opacity;
- (void)setOpacity:(float)fp8;
- (float)rotation;
- (void)setRotation:(float)fp8;
- (float)yRotation;
- (void)setYRotation:(float)fp8;
- (float)xRotation;
- (void)setXRotation:(float)fp8;
- (struct _NSPoint)offset;
- (void)setOffset:(struct _NSPoint)fp8;
- (float)zLocation;
- (void)setZLocation:(float)fp8;
- (struct _NSPoint)centerPointShift;
- (void)setCenterPointShift:(struct _NSPoint)fp8;
- (float)scale;
- (void)setScale:(float)fp8;
- (void)_determineLoresSize;
- (void)_sanityCheckTarget;
- (int)_largestMultipleOf:(int)fp8;
- (int *)_subdivide:(int)fp8 length:(int *)fp12;
- (void *)_pointerIntoData:(struct _NSRect)fp8 bitmap:(void *)fp24 stride:(int)fp28 depthInBytes:(int)fp32;
- (struct texture_array)_createTextureArray:(id)fp8;
- (struct texture_array)_createTextureArrayFromARGB:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_createTextureArrayFromAlpha:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_initializeTextureArray;
- (struct texture_array)_coreCreateTextureArrayFromARGB:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_createTextureArrayFromColorBuffer:(unsigned long)fp8 rect:(struct _NSRect)fp12;
- (void)_freeTextureArray:(struct texture_array)fp8;
- (void)_drawQuadTexTop:(float)fp8 bottom:(float)fp12 left:(float)fp16 right:(float)fp20 VertexTop:(float)fp24 bottom:(float)fp28 left:(float)fp32 right:(float)fp36 inverted:(BOOL)fp40 flipped:(BOOL)fp44;

@end

@interface TransitionManager : NSObject <IAPluginManagerProtocol>
{
    NSArray *mPluginSearchPaths;
    NSMutableArray *mPlugins;
}

+ (Class)_randomTransitionClass;
+ (BOOL)pluginIDIsNone:(id)fp8;
+ (BOOL)pluginIDIsRandom:(id)fp8;
+ (BOOL)selectPopupItem:(id)fp8 withID:(id)fp12 withPluginOfType:(int)fp16;
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)init;
- (void)dealloc;
- (void)populatePopup:(id)fp8 withPluginsOfType:(int)fp12;
- (void)populateMenu:(id)fp8 withPluginsOfType:(int)fp12 withTarget:(id)fp16 andAction:(SEL)fp20;
- (void)populateDirectionsPopup:(id)fp8 forPlugin:(Class)fp12;
- (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
- (id)localizedString:(id)fp8;
- (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
- (id)plugins;
- (id)pluginsOfType:(int)fp8;
- (id)pluginNamesOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8;
- (Class)pluginWithIdentifier:(id)fp8;
- (id)pluginIdentifierForName:(id)fp8;
- (id)randomIdentifierOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8 ofType:(int)fp12;
- (Class)pluginWithIdentifier:(id)fp8 ofType:(int)fp12;
- (id)bundleNameForPlugin:(Class)fp8;
- (id)bundleVersionForPlugin:(Class)fp8;
- (id)pluginName:(Class)fp8;
- (id)pluginNameForIdentifier:(id)fp8;
- (id)pluginIdentifier:(Class)fp8;
- (id)pluginSearchPaths;
- (void)scanForPlugins;
- (void)scanForPluginsInDirectory:(id)fp8;
- (void)openBundle:(id)fp8;
- (void)addPlugin:(Class)fp8;

@end

@interface RandomTransition : NSObject <IAIPPluginProtocol>
{
}

+ (BOOL)canRunWithControllerClass:(Class)fp8;
+ (id)protocolVersion;
+ (int)pluginType;
+ (id)pluginID;
+ (id)pluginInfo;
- (id)initWithController:(id)fp8;
- (id)controller;
- (void)renderFrame:(float)fp8 of:(float)fp12;
- (void)processImage:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)cleanupAfterRender;

@end

@interface ThreadManager : NSObject <ThreadManagerTask>
{
    ArchiveDocument *mArchiveDocument;
    NSMutableDictionary *mTasks;
    NSMutableDictionary *mThreadCounts;
    NSLock *mTaskLock;
    NSLock *mThreadCountLock;
    BOOL mCondition;
    BOOL mStarted;
}

+ (id)sharedManager;
- (id)init;
- (void)setArchiveDocument:(id)fp8;
- (void)dealloc;
- (void)start;
- (void)performTask;
- (BOOL)alreadyHasTask:(id)fp8 withID:(id)fp12;
- (void)registerNewTask:(id)fp8 withID:(id)fp12;
- (void)performThreadedTasks:(id)fp8;
- (void)signalCondition:(BOOL)fp8;
- (void)waitForTasks;
- (BOOL)currentCondition;

@end

@interface ThumbnailSizerCell : NSSliderCell
{
    double _maxFreeSlideValue;
    BOOL _specialTicks;
    BOOL _isTracking;
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (float)knobThickness;
- (struct _NSRect)knobRectFlipped:(BOOL)fp8;
- (void)drawKnob:(struct _NSRect)fp8;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawBarInside:(struct _NSRect)fp8 flipped:(BOOL)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (BOOL)continueTracking:(struct _NSPoint)fp8 at:(struct _NSPoint)fp16 inView:(id)fp24;
- (struct _NSRect)rectOfTickMarkAtIndex:(int)fp8;
- (double)closestTickMarkValueToValue:(double)fp8;
- (double)maxFreeSlideValue;
- (void)setMaxFreeSlideValue:(double)fp8;
- (BOOL)specialTicks;
- (void)setSpecialTicks:(BOOL)fp8;
- (void)setIsTracking:(BOOL)fp8;

@end

@interface ThumbnailSizer : NSSlider
{
    SEL mStartTrackingAction;
    id mStartTrackingTarget;
    SEL mEndTrackingAction;
    id mEndTrackingTarget;
    BOOL mIsTracking;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isTracking;
- (void)setStartTrackingAction:(SEL)fp8 target:(id)fp12;
- (void)setEndTrackingAction:(SEL)fp8 target:(id)fp12;
- (double)maxFreeSlideValue;
- (void)setMaxFreeSlideValue:(double)fp8;
- (BOOL)specialTicks;
- (void)setSpecialTicks:(BOOL)fp8;

@end

@interface IPToolbarItem : NSObject
{
    int mType;
    NSView *mView;
    NSString *mLabel;
    NSAttributedString *mAttributedLabel;
    NSFont *mFont;
    NSString *mTooltip;
    id mTarget;
    SEL mAction;
    BOOL mState;
    BOOL mShowsState;
    BOOL mEnabled;
    NSMenuItem *mMenuItemRep;
    NSString *mMenuFormString;
}

+ (id)buttonItemWithImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)buttonItemWithImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)buttonItemWithImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)backgroundButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 backgroundNormal:(id)fp16 backgroundAlternate:(id)fp20 label:(id)fp24 tag:(int)fp28 font:(id)fp32 target:(id)fp36 action:(SEL)fp40 tooltip:(id)fp44;
+ (id)checkboxItemWithLabel:(id)fp8 tag:(int)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
+ (id)menuItem:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)menuItem:(id)fp8 attributedLabel:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)imageMenuItem:(id)fp8 image:(id)fp12 label:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
+ (id)imageMenuItem:(id)fp8 image:(id)fp12 attributedLabel:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
+ (id)progressItem:(id)fp8 font:(id)fp12 tooltip:(id)fp16;
+ (id)matrixWithButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)segmentsWithImagesNamed:(id)fp8 alternates:(id)fp12 label:(id)fp16 font:(id)fp20 target:(id)fp24 action:(SEL)fp28 tooltip:(id)fp32;
+ (id)segmentsWithTitles:(id)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
+ (id)itemWithView:(id)fp8;
+ (id)separatorItem;
+ (id)flexibleSpaceItem;
+ (id)fixedSpaceItem;
+ (id)overflowItem;
+ (void)checkItemNumber:(int)fp8 ofMenu:(id)fp12;
- (id)init;
- (id)initWithType:(int)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithType:(int)fp8 attributedLabel:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithMenu:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initWithMenu:(id)fp8 attributedLabel:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initWithImageMenu:(id)fp8 image:(id)fp12 label:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
- (id)initWithImageMenu:(id)fp8 image:(id)fp12 attributedLabel:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
- (id)initProgress:(id)fp8 font:(id)fp12 tooltip:(id)fp16;
- (id)initMatrixWithButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initSegmentsWithImagesNamed:(id)fp8 alternates:(id)fp12 label:(id)fp16 font:(id)fp20 target:(id)fp24 action:(SEL)fp28 tooltip:(id)fp32;
- (id)initSegmentsWithTitles:(id)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithButtonImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImage:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithBackgroundButtonImageNamed:(id)fp8 alternate:(id)fp12 backgroundNormal:(id)fp16 backgroundAlternate:(id)fp20 label:(id)fp24 tag:(int)fp28 font:(id)fp32 target:(id)fp36 action:(SEL)fp40 tooltip:(id)fp44;
- (id)initWithNoSpaceButtonImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithNoSpaceButtonImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithNoSpaceButtonImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithCheckboxLabel:(id)fp8 tag:(int)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithView:(id)fp8;
- (void)dealloc;
- (int)type;
- (void)setType:(int)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)menuItemSelected:(id)fp8;
- (void)setMenu:(id)fp8;
- (void)_setMatrixButtons:(id)fp8;
- (void)_setSegmentImages:(id)fp8 alternates:(id)fp12;
- (void)_setSegmentTitles:(id)fp8;
- (id)progressView;
- (id)matrixView;
- (id)segmentedControl;
- (id)menuView;
- (id)titleView;
- (id)view;
- (void)setView:(id)fp8;
- (id)attributedLabel;
- (void)setAttributedLabel:(id)fp8;
- (void)setAttributedTitle:(id)fp8;
- (id)label;
- (void)setLabel:(id)fp8;
- (void)setTitle:(id)fp8;
- (id)tooltip;
- (void)setTooltip:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (int)state;
- (void)setState:(int)fp8;
- (BOOL)showsState;
- (void)setShowsState:(BOOL)fp8;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (void)show;
- (void)hide;
- (BOOL)isHidden;
- (void)displayIfNeeded;
- (void)_performMenuFormRepresentationClick;
- (void)_standardCommonMenuFormRepresentationClicked:(id)fp8;
- (void)_standardCommonMenuFormRepresentationPopupClicked:(id)fp8;
- (void)_standardCustomMenuFormRepresentationClicked:(id)fp8;
- (void)setCheckmarkForMenuItemWithTag:(int)fp8;
- (id)menuFormString;
- (void)setMenuFormString:(id)fp8;
- (id)menuFormRepresentation;
- (void)_updateCheckboxState;
- (void)_toggleCheckbox:(id)fp8;

@end

@interface IPToolbarView : BackgroundColorView
{
    NSMutableArray *mItems;
    float mHSpacing;
    ToolbarClippedItemsIndicator *mClipMenu;
    BOOL mAcceptsFirstMouse;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (id)items;
- (BOOL)hasItem:(id)fp8;
- (void)addItem:(id)fp8;
- (void)addItem:(id)fp8 atIndex:(unsigned int)fp12;
- (void)addItem:(id)fp8 beforeItem:(id)fp12;
- (void)addItem:(id)fp8 afterItem:(id)fp12;
- (void)removeItem:(id)fp8;
- (void)releaseAllItems;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)acceptsFirstMouse;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (BOOL)itemWithViewIsEnabled:(id)fp8;
- (void)layoutViews;

@end

@interface AboutView : NSView
{
    id mVersionText;
    id mAboutImage;
}

- (void)awakeFromNib;
- (void)awakeFromnNib;
- (void)mouseDown:(id)fp8;
- (void)appSwitchOut:(id)fp8;

@end

@interface AutoCompleteFormatter : NSFormatter
{
    NSArray *mWordList;
}

- (void)dealloc;
- (id)wordList;
- (void)setWordList:(id)fp8;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;
- (void)useSampleWordList;

@end

@interface BackgroundColorView : NSView
{
    NSColor *mBackgroundColor;
    BOOL mPunchThrough;
    struct _NSRect mInsetRect;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (BOOL)punchThrough;
- (void)setPunchThrough:(BOOL)fp8;
- (struct _NSRect)insetRect;
- (void)setInsetRect:(struct _NSRect)fp8;
- (void)viewDidEndLiveResize;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledBox : NSBox
{
}

- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledButton : FirstMouseButton
{
}

+ (Class)cellClass;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (int)endCaps;
- (void)setEndCaps:(int)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface BeveledButtonCell : NSButtonCell
{
}

+ (void)initialize;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8;
- (void)_drawRegularButtonWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface BeveledScrollView : NSScrollView
{
}

- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledTabButtonCell : NSButtonCell
{
    int mEndCaps;
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (int)endCaps;
- (void)setEndCaps:(int)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface BeveledTabView : NSTabView
{
    NSImage *mBufferedBkgd;
}

+ (void)initialize;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface CALDateControl : NSControl
{
    int order;
    BOOL leadingZeroDay;
    BOOL leadingZeroMonth;
    BOOL showCentury;
    NSString *sep;
    int controlSize;
    BOOL withYear;
    BOOL editable;
    int numcells;
    int currentRect;
    int fields[3];
    struct _NSRect dataRects[3];
    NSString *datas[3];
    struct _NSRect sepRects[2];
    NSFont *font;
    int currentSelection;
    BOOL active;
    BOOL hasSubscribedNotification;
    NSCalendarDate *date;
    NSCalendarDate *realDate;
    NSStepper *stepper;
    double stepperMidValue;
    NSTimer *mKeyDelayTimer;
    int mKeyedValue;
    BOOL mHasUnhandledKeys;
}

- (void)setEditable:(BOOL)fp8;
- (BOOL)isEditable;
- (BOOL)setupFormatFromPrefs;
- (void)setupDateFields;
- (void)commonInit;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)inspectorClassName;
- (void)windowLostKey:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setSelected:(int)fp8;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)acceptsFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)fireValueChangeNotification;
- (void)rotateLeft;
- (void)rotateRight;
- (void)decrement;
- (void)increment;
- (void)handleKey:(int)fp8;
- (void)_showEnteredValue;
- (void)_delayedKeyHandler:(id)fp8;
- (void)syncDisplay;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)setControlSize:(int)fp8;
- (int)controlSize;
- (void)setShowYear:(BOOL)fp8;
- (BOOL)showYear;
- (void)setDate:(id)fp8;
- (id)date;
- (void)awakeFromNib;
- (void)changeField:(id)fp8;
- (id)stringValue;
- (void)dealloc;

@end

@interface CALTimeControl : NSControl
{
    int numcells;
    int currentRect;
    int currentSelection;
    struct _NSRect dataRects[4];
    NSString *datas[4];
    struct _NSRect sepRects[3];
    NSString *sep;
    NSFont *font;
    BOOL withAMPM;
    BOOL withSeconds;
    BOOL withOneDigitHour;
    BOOL active;
    BOOL editable;
    BOOL hasSubscribedNotification;
    NSCalendarDate *date;
    int controlSize;
    NSStepper *stepper;
    double stepperMidValue;
}

- (void)setEditable:(BOOL)fp8;
- (BOOL)isEditable;
- (void)commonInit;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)inspectorClassName;
- (void)fireValueChangeNotification;
- (void)changeAMPM:(int)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setSelected:(int)fp8;
- (void)windowLostKey:(id)fp8;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)acceptsFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)rotateLeft;
- (void)rotateRight;
- (void)decrement;
- (void)increment;
- (void)handleKey:(int)fp8;
- (void)syncDisplay;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)setControlSize:(int)fp8;
- (int)controlSize;
- (void)setShowSeconds:(BOOL)fp8;
- (BOOL)showSeconds;
- (void)setDate:(id)fp8;
- (id)date;
- (void)awakeFromNib;
- (void)changeField:(id)fp8;
- (id)stringValue;
- (void)dealloc;

@end

@interface DictionaryCodedObject : NSObject <NSCoding>
{
    NSDictionary *mDictionary;
}

- (void)dealloc;
- (id)dictionary;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;

@end

@interface DiscSpaceGaugeView : NSView
{
    NSImage *mEmptyImage;
    NSImage *mBarImage;
    NSImage *mFullImage;
    float mZeroAngle;
    BOOL mClockwise;
    double mMaxValue;
    double mDoubleValue;
    NSTimer *mAnimateTimer;
    float mInitialValue;
    float mTargetValue;
    float mAnimationProgress;
    double mStartTime;
    double mDuration;
    NSTimer *mFullAnimTimer;
    struct {
        double i;
        double f;
        double duration;
        double startTime;
    } mFullAnim;
    double mFullImageAlpha;
    NSRunLoop *mMainRunLoop;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setMaxValue:(double)fp8;
- (double)maxValue;
- (void)setDoubleValue:(double)fp8;
- (void)setDoubleValue:(double)fp8 animate:(BOOL)fp16;
- (double)doubleValue;
- (void)setAnimating:(BOOL)fp8;
- (void)animateValue;
- (void)setFullImageAlpha:(double)fp8 animate:(BOOL)fp16;
- (void)animateFullImage;
- (void)takeDoubleValueFrom:(id)fp8;

@end

@interface Ellipsizer : NSObject
{
    NSDictionary *mAttributes;
    float mEllipsisWidth;
    float **mWidthTable;
}

+ (id)ellipsizerWithAttributes:(id)fp8;
- (id)initWithAttributes:(id)fp8;
- (void)dealloc;
- (float **)_newByteTable;
- (void)_freeByteTable:(float **)fp8;
- (id)attributes;
- (void)setAttributes:(id)fp8;
- (id)ellipsizedString:(id)fp8 toWidth:(float)fp12;
- (id)ellipsizedString_XXX:(id)fp8 toWidth:(float)fp12;

@end

@interface EtchedText : NSTextField
{
    float _shadow;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)setEditable:(BOOL)fp8;
- (void)setSelectable:(BOOL)fp8;
- (void)setBordered:(BOOL)fp8;
- (void)setDrawsBackground:(BOOL)fp8;
- (void)setShadow:(float)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface EtchedTextFieldCell : NSTextFieldCell
{
    BOOL _isEtched;
    float _shadow;
}

+ (void)_drawEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
+ (void)_drawUnderEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
- (id)init;
- (void)setEtched:(BOOL)fp8;
- (BOOL)isEtched;
- (void)setBordered:(BOOL)fp8;
- (void)setBezeled:(BOOL)fp8;
- (void)setShadow:(float)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ExampleTextField : NSTextField
{
    NSString *_exampleText;
}

- (void)dealloc;
- (void)_reallySetStringValue:(id)fp8;
- (void)awakeFromNib;
- (id)exampleString;
- (void)setExampleString:(id)fp8;
- (void)setStringValue:(id)fp8;
- (void)removeGrayExampleString;
- (BOOL)becomeFirstResponder;
- (void)selectText:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)stringValue;

@end

@interface ExtendedApplication : NSApplication
{
    NSWindow *_mainWindowAtBeginningOfSendEvent;
    unsigned int mLastEventModifiers;
    id mAboutWindow;
    NSWindow *mModalPanel;
    NSTextField *mVersionString;
    BOOL mAppleScriptImport;
    NSMutableArray *mAboutPanelNibObjects;
    BOOL mQuitting;
}

- (id)currentDocument;
- (id)archiveController;
- (id)mainWindowAtBeginningOfSendEvent;
- (void)setQuitting:(BOOL)fp8;
- (BOOL)isQuitting;
- (void)sendEvent:(id)fp8;
- (void)orderFrontStandardAboutPanelWithOptions:(id)fp8;
- (id)subjectForEmail;
- (id)recipientForEmail;
- (id)addressForEmail;
- (id)handleAssignKeywordScriptCommand:(id)fp8;
- (id)handleSelectScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (void)doImportScriptCommand:(id)fp8 toAlbum:(id)fp12 forceNoAliases:(BOOL)fp16;
- (id)handleImportScriptCommand:(id)fp8;
- (id)importing;
- (id)handleNewAlbumScriptCommand:(id)fp8;
- (id)handleEmptyTrashScriptCommand:(id)fp8;
- (id)handleStartSlideshowScriptCommand:(id)fp8;
- (id)handleStopSlideshowScriptCommand:(id)fp8;
- (id)handlePauseSlideshowScriptCommand:(id)fp8;
- (id)handleResumeSlideshowScriptCommand:(id)fp8;
- (id)handleNextSlideScriptCommand:(id)fp8;
- (void)handleAutoImportScriptCommand:(id)fp8;
- (id)handlePreviousSlideScriptCommand:(id)fp8;
- (void)_addRecsFromAlbum:(id)fp8 toArray:(id)fp12;
- (id)imageRecs;
- (id)albums;
- (id)localRootAlbums;
- (id)sharedLibraryAlbums;
- (id)currentAlbum;
- (id)slideshowRunning;
- (void)setCurrentAlbum:(id)fp8;
- (id)archiveAlbum;
- (id)trashAlbum;
- (id)lastNRollsAlbum;
- (id)lastNMonthsAlbum;
- (id)aeKeywords;
- (id)selection;
- (unsigned int)aeView;
- (void)setAeView:(unsigned int)fp8;

@end

@interface ExtendedScrollView : NSScrollView
{
}

+ (struct _NSSize)frameSizeForContentSize:(struct _NSSize)fp8 hasHorizontalScroller:(BOOL)fp16 hasVerticalScroller:(BOOL)fp20 borderType:(int)fp24;
+ (struct _NSSize)contentSizeForFrameSize:(struct _NSSize)fp8 hasHorizontalScroller:(BOOL)fp16 hasVerticalScroller:(BOOL)fp20 borderType:(int)fp24;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;

@end

@interface HeartBeat : NSObject
{
    CDAnonymousStruct1 _times;
    NSMutableArray *_clients;
    NSPort *_port;
    NSTimer *_msgSendTimer;
    NSThread *_heartbeatThread;
    NSLock *_clientsLock;
    int _viewCount;
}

+ (id)sharedHeartBeat;
+ (double)heartBeatCycle;
+ (void)setHeartBeatCycle:(double)fp8;
+ (BOOL)isHeartBeatThread;
- (id)init;
- (void)dealloc;
- (void)updateHeartBeatState;
- (void)_activate:(id)fp8;
- (void)addHeartBeatView:(id)fp8;
- (void)removeHeartBeatView:(id)fp8;

@end

@interface ImageTextButton : NSButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (id)text;
- (void)setText:(id)fp8;

@end

@interface ImageTextButtonCell : NSButtonCell
{
    NSString *mText;
}

- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (id)text;
- (void)setText:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface IntegerOnlyFormatter : NSNumberFormatter
{
}

- (BOOL)isPartialStringValid:(id)fp8 newEditingString:(id *)fp12 errorDescription:(id *)fp16;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelecgtedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;

@end

@interface PlainWindow : NSWindow
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (BOOL)canBecomeKeyWindow;

@end

@interface RankingTextField : NSTextField
{
    NSString *mStar;
    NSString *mBullet;
    int mRankingValue;
    BOOL mFieldInitialized;
    BOOL mMinimumRanking;
    BOOL mMaximumRanking;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (int)rankingValue;
- (int)constrainValue:(int)fp8;
- (void)setRankingValue:(int)fp8;
- (int)_mouseLocToRanking:(struct _NSPoint)fp8 forWidth:(float)fp16;
- (void)mouseDown:(id)fp8;
- (void)setMinimum:(int)fp8 maximum:(int)fp12;

@end

@interface RolloverEtchedTextField : NSTextField
{
    BOOL doEtching;
    NSBezierPath *rolloverPath;
    int rolloverTrackingRectTag;
}

- (void)dealloc;
- (void)clearTrackingRect;
- (void)resetTrackingRect;
- (void)setFrameOrigin:(struct _NSPoint)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewDidEndLiveResize;
- (void)_superviewChangedSize:(id)fp8;
- (float)_capRadius;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_drawText:(struct _NSRect)fp8 withEtching:(BOOL)fp24;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface RolloverTextField : NSTextField
{
    NSBezierPath *rolloverPath;
    int rolloverTrackingRectTag;
}

- (void)dealloc;
- (void)clearTrackingRect;
- (void)resetTrackingRect;
- (void)setFrameOrigin:(struct _NSPoint)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewDidEndLiveResize;
- (void)_superviewChangedSize:(id)fp8;
- (float)_capRadius;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface WindowCloseRequestor : NSObject
{
    id mTarget;
    SEL mSelector;
}

- (id)initWithTarget:(id)fp8 selector:(SEL)fp12;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (BOOL)isEqual:(id)fp8;

@end

@interface ScopeWindow : NSWindow
{
    NSMutableArray *mCloseQueue;
}

- (void)awakeFromNib;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (BOOL)windowShouldClose:(id)fp8;

@end

@interface SelectVerb : NSScriptCommand
{
    NSScriptObjectSpecifier *_keySpecifier;
}

- (void)setReceiversSpecifier:(id)fp8;
- (void)dealloc;
- (id)directParameter;
- (id)keySpecifier;
- (id)performDefaultImplementation;
- (id)description;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface SeparatorBar : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface FilePath : NSObject
{
}

+ (id)temporaryDirectory;
+ (BOOL)doesFileExist:(id)fp8;
+ (BOOL)doesDirectoryExist:(id)fp8;
+ (id)pathForAppNamed:(id)fp8;
+ (id)pathForAppWithSignature:(unsigned long)fp8;
+ (BOOL)doesAppExistWithName:(id)fp8;
+ (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
+ (BOOL)createDir:(id)fp8;
+ (void)deleteDirsRecursively:(id)fp8 toRoot:(id)fp12;
+ (BOOL)checkPermissionsRecursively:(id)fp8 toRoot:(id)fp12 mode:(int)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 count:(unsigned long *)fp12 physical:(BOOL)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12 resource:(BOOL)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12;
+ (unsigned long long)dataForkSizeAtPath:(id)fp8;
+ (id)commonPath:(id)fp8 secondPath:(id)fp12;
+ (id)uniqueSubPath:(id)fp8 child:(id)fp12;
+ (id)makeUniquePath:(id)fp8;
+ (id)removeTrailingCountOfPath:(id)fp8;
+ (BOOL)path:(id)fp8 isTrailingCountSiblingOfPath:(id)fp12;
+ (id)makeUniqueFilePath:(id)fp8 extension:(id)fp12;
+ (id)generateUUID;
+ (id)generateMachineLocalUUID;
+ (id)makeUniqueFileNameWithTime:(id)fp8;
+ (id)makeUniquePathWithTime:(id)fp8;
+ (BOOL)makeFSSpec:(id)fp8 spec:(struct FSSpec *)fp12;
+ (unsigned long)countFiles:(id)fp8 descend:(BOOL)fp12;
+ (unsigned long)countFilesFromArray:(id)fp8 descend:(BOOL)fp12;
+ (BOOL)getFSRef:(struct FSRef *)fp8 forPath:(id)fp12 isDirectory:(BOOL)fp16;
+ (id)pathForFSRef:(struct FSRef *)fp8;
+ (id)pathForFSSpecData:(id)fp8;
+ (id)pathForFSSpec:(struct FSSpec *)fp8;
+ (BOOL)isAliasFileAtPath:(id)fp8;
+ (id)pathContentOfAliasAtPath:(id)fp8;
+ (id)stringByResolvingAliasesInPath:(id)fp8;
+ (BOOL)copyDatesFromPath:(id)fp8 toPath:(id)fp12;
+ (BOOL)copyParentPermissionsForPath:(id)fp8;
+ (BOOL)copyPermissionsToPath:(id)fp8 fromPath:(id)fp12;
+ (BOOL)ensurePermissions:(unsigned long)fp8 forPath:(id)fp12;
+ (BOOL)ensureGroupName:(id)fp8 forPath:(id)fp12;
+ (id)validFilename:(id)fp8;
+ (id)os9Filename:(id)fp8;
+ (unsigned long long)adjustSize:(unsigned long long)fp8 toAllocationBlockSize:(unsigned long long)fp16;
+ (id)createVirtualPath:(id)fp8 inFolder:(id)fp12;
+ (id)drfsObjectAtPath:(id)fp8 inFolder:(id)fp12;
+ (id)pathForDRFSObject:(id)fp8;

@end

@interface HiResManager : NSObject
{
    struct IPPhotoList *mLoaded;
    struct IPPhotoList *mToBeLoaded;
    struct IPPhotoList *mToBeUnloaded;
    long mCacheSize;
    struct IPPhotoInfo *mLastPhoto;
    int mThreadState;
    BOOL mHiResThreadHasExited;
    long mCacheLimit;
    struct _opaque_pthread_mutex_t mLock;
    BOOL mRunning;
    BOOL mInSizedMode;
}

+ (id)defaultManager;
- (void)dealloc;
- (id)init;
- (void)_removeDocument:(id)fp8 fromPhotoList:(struct IPPhotoList *)fp12;
- (void)_docEjected:(id)fp8;
- (void)setInSizedMode:(BOOL)fp8;
- (void)stopThreads;
- (void)disableThreads;
- (void)startThreads;
- (void)startProcessing;
- (void)stopProcessing;
- (BOOL)isProcessing;
- (void)loadPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearToBeLoaded;
- (void)unloadPhoto:(struct IPPhotoInfo *)fp8;
- (void)addLoadedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removePhotoFromLoaded:(struct IPPhotoInfo *)fp8;
- (void)unloadPhotos:(struct IPPhotoList *)fp8;
- (void)unloadPhotoNow:(struct IPPhotoInfo *)fp8;
- (void)unloadAllPhotos;
- (void)_unloadImages;
- (void)threadedLoadHiRes:(id)fp8;

@end

@interface ImageUserData : NSObject <NSCoding>
{
    struct UserDataRecord **mUserData;
    NSData *mData;
    NSDictionary *mICProperties;
}

+ (id)imageUserData;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)data;
- (void)setData:(id)fp8;
- (struct UserDataRecord **)userData;
- (struct UserDataRecord **)userDataCopy;
- (void)setUserData:(struct UserDataRecord **)fp8;
- (void)setUserDataNoCopy:(struct UserDataRecord **)fp8;
- (void)stripExcessUserData;
- (void)_clearDataCache;
- (void)setImageIODictionary:(id)fp8;
- (id)getImageIOEXIFDictionary;
- (id)icProperties;
- (void)setICProperties:(id)fp8;
- (char **)_userDataToHandle;
- (id)_getICProperty:(unsigned long)fp8;
- (id)getLengthStringOfType:(unsigned long)fp8;
- (void)setLengthString:(id)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (id)getStringOfType:(unsigned long)fp8;
- (void)setString:(id)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (short)_getNikonMakerdataISO;
- (BOOL)getByteOfType:(unsigned long)fp8;
- (void)setByte:(BOOL)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (BOOL)getASCIIOfType:(unsigned long)fp8;
- (void)setASCII:(BOOL)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (short)getShortOfType:(unsigned long)fp8;
- (void)setShort:(short)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (unsigned short)getUnsignedShortOfType:(unsigned long)fp8;
- (void)setUnsignedShort:(unsigned short)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (long)getLongOfType:(unsigned long)fp8;
- (void)setLong:(long)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (unsigned long)getUnsignedLongOfType:(unsigned long)fp8;
- (void)setUnsignedLong:(unsigned long)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (double)getRationalOfType:(unsigned long)fp8;
- (BOOL)getRationalNumerator:(unsigned long *)fp8 denominator:(unsigned long *)fp12 ofType:(unsigned long)fp16;
- (void)setRational:(double)fp8 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (void)setRationalNumerator:(unsigned long)fp8 denominator:(unsigned long)fp12 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (double)getRationalOfType:(unsigned long)fp8 index:(int)fp12;
- (BOOL)getRationalNumerator:(unsigned long *)fp8 denominator:(unsigned long *)fp12 ofType:(unsigned long)fp16 index:(int)fp20;
- (void)setRational:(double)fp8 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (void)setRationalNumerator:(unsigned long)fp8 denominator:(unsigned long)fp12 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (double)getSRationalOfType:(unsigned long)fp8;
- (BOOL)getSRationalNumerator:(long *)fp8 denominator:(long *)fp12 ofType:(unsigned long)fp16;
- (void)setSRational:(double)fp8 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (void)setSRationalNumerator:(long)fp8 denominator:(long)fp12 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (double)getSRationalOfType:(unsigned long)fp8 index:(int)fp12;
- (BOOL)getSRationalNumerator:(long *)fp8 denominator:(long *)fp12 ofType:(unsigned long)fp16 index:(int)fp20;
- (void)setSRational:(double)fp8 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (void)setSRationalNumerator:(long)fp8 denominator:(long)fp12 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (unsigned long)alphaMode;
- (void)setAlphaMode:(unsigned long)fp8 replace:(BOOL)fp12;
- (id)make;
- (void)setMake:(id)fp8 replace:(BOOL)fp12;
- (id)model;
- (void)setModel:(id)fp8 replace:(BOOL)fp12;
- (id)software;
- (void)setSoftware:(id)fp8 replace:(BOOL)fp12;
- (id)creationDate;
- (void)setCreationDate:(id)fp8 replace:(BOOL)fp12;
- (id)dateTime;
- (void)setDateTime:(id)fp8 replace:(BOOL)fp12;
- (id)dateOriginal;
- (void)setDateOriginal:(id)fp8 replace:(BOOL)fp12;
- (id)dateDigitized;
- (void)setDateDigitized:(id)fp8 replace:(BOOL)fp12;
- (short)orientation;
- (void)setOrientation:(short)fp8 replace:(BOOL)fp12;
- (short)exposureProgram;
- (void)setExposureProgram:(short)fp8 replace:(BOOL)fp12;
- (short)isoSpeedRatings;
- (void)setISOSpeedRatings:(short)fp8 replace:(BOOL)fp12;
- (double)shutterSpeed;
- (void)setShutterSpeed:(double)fp8 replace:(BOOL)fp16;
- (double)aperture;
- (void)setAperture:(double)fp8 replace:(BOOL)fp16;
- (void)setFNumber:(double)fp8 replace:(BOOL)fp16;
- (double)brightness;
- (void)setBrightness:(double)fp8 replace:(BOOL)fp16;
- (double)exposureBias;
- (void)setExposureBias:(double)fp8 replace:(BOOL)fp16;
- (double)maxAperture;
- (void)setMaxAperture:(double)fp8 replace:(BOOL)fp16;
- (double)subjectDistance;
- (void)setSubjectDistance:(double)fp8 replace:(BOOL)fp16;
- (short)meteringMode;
- (void)setMeteringMode:(short)fp8 replace:(BOOL)fp12;
- (short)lightSource;
- (void)setLightSource:(short)fp8 replace:(BOOL)fp12;
- (short)flash;
- (void)setFlash:(short)fp8 replace:(BOOL)fp12;
- (short)EXIFcolorSpace;
- (void)setEXIFcolorSpace:(short)fp8 replace:(BOOL)fp12;
- (double)focalLength;
- (void)setFocalLength:(double)fp8 replace:(BOOL)fp16;
- (double)exposureIndex;
- (void)setExposureIndex:(double)fp8 replace:(BOOL)fp16;
- (short)sensingMethod;
- (void)setSensingMethod:(short)fp8 replace:(BOOL)fp12;
- (BOOL)gpsNorSLatitude;
- (void)setGPSNorSLatitude:(BOOL)fp8 replace:(BOOL)fp12;
- (double)gpsLatitudeDegrees;
- (void)setGPSLatitudeDegrees:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLatitudeMinutes;
- (void)setGPSLatitudeMinutes:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLatitudeSeconds;
- (void)setGPSLatitudeSeconds:(double)fp8 replace:(BOOL)fp16;
- (BOOL)gpsEorWLongitude;
- (void)setGPSEorWLongitude:(BOOL)fp8 replace:(BOOL)fp12;
- (double)gpsLongitudeDegrees;
- (void)setGPSLongitudeDegrees:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLongitudeMinutes;
- (void)setGPSLongitudeMinutes:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLongitudeSeconds;
- (void)setGPSLongitudeSeconds:(double)fp8 replace:(BOOL)fp16;
- (double)gpsAltitude;
- (void)setGPSAltitude:(double)fp8 replace:(BOOL)fp16;

@end

@interface NSString (ScopeNSStringStuff)
- (const char *)myAsciiCString;
@end

@interface NSAppleScript (iPhotoAdditions)
- (id)executeHandlerWithName:(id)fp8 andArguments:(id)fp12 error:(id *)fp16;
@end

@interface NSObject (ScopeAdditions)
+ (id)stackTraceToConsoleWithDepth:(int)fp8;
+ (id)stackTraceToConsole;
+ (id)stackTraceToConsole:(int)fp8 skip:(int)fp12;
+ (int)currentThreadNumber;
+ (BOOL)boolForDefaultsKey:(id)fp8;
+ (id)hostName;
+ (BOOL)isLogEnabled;
+ (id)objectForDefaultsKey:(id)fp8;
+ (id)objectForDefaultsKey:(id)fp8 domainName:(id)fp12;
+ (id)objectForIPhotoDefaultsKey:(id)fp8;
+ (id)_scopeObjectAdditionsLock;
+ (void)setDefaultsDomainName:(id)fp8;
+ (void)setObjectLogProcessPrefix:(id)fp8;
+ (id)timeString;
- (id)stackTraceToConsoleWithDepth:(int)fp8;
- (id)stackTraceToConsole;
- (id)className;
- (void)errorInMethod:(SEL)fp8;
- (void)errorInMethod:(SEL)fp8 string:(id)fp12;
- (BOOL)isRunningInMainThread;
- (void)logAtLevel:(int)fp8 format:(id)fp12;
- (void)logInvocationOfMethod:(SEL)fp8;
- (void)logInvocationOfMethod:(SEL)fp8 withFormat:(id)fp12;
- (id)logId;
- (void)_logFormat:(id)fp8 arguments:(char *)fp12;
- (void)_logString:(id)fp8;
- (void)logWithFormat:(id)fp8;
- (void)raiseExceptionInMethod:(SEL)fp8 name:(id)fp12;
@end

@interface NSString (IPTCAdditions)
- (id)removeIllegalIPTCCharacters;
@end

@interface NSString (NSScopeStringAdditions)
+ (id)numbersWithStrings:(id)fp8;
- (id)abbreviatedPathWithComponentCount:(int)fp8;
- (BOOL)boolValue;
- (id)substringToString:(id)fp8;
- (id)unescapedUnicodeString;
- (void)debugUnicode:(char *)fp8;
@end

@interface NSString (MarkupEscaping)
- (id)htmlEncodedString;
- (id)_markupEscapedString:(BOOL)fp8;
- (id)propertyListXMLEncodedString;
@end

@interface NSString (NumberConversions)
+ (id)stringWithLong:(long)fp8;
+ (id)stringWithUnsignedLong:(unsigned long)fp8;
+ (id)stringWithDouble:(double)fp8;
- (BOOL)stringToUnsignedLongLongInt:(unsigned long long *)fp8;
- (BOOL)stringToUnsignedLongInt:(unsigned long *)fp8;
- (unsigned long long)unsignedLongLongValue;
- (long long)longLongValue;
- (unsigned long)unsignedLongValue;
- (long)longValue;
- (unsigned short)unsignedShortValue;
- (short)shortValue;
- (double)doubleValue;
@end

@interface NSString (Trimming)
- (id)taoStringByTrimmingWhitespace;
- (id)taoStringByTrimmingWhitespaceIncludingNewlines:(BOOL)fp8 atStart:(BOOL)fp12 atEnd:(BOOL)fp16;
@end

@interface NSMutableString (JensAdditions)
- (void)replaceSubstring:(id)fp8 with:(id)fp12;
@end

@interface NSString (JensAdditions)
- (id)stringByReplacing:(id)fp8 with:(id)fp12;
@end

@interface NSString (NiceSizeStrings)
+ (id)sizeStringFromBytes:(unsigned long long)fp8;
@end

@interface NSString (URLExtensions)
- (id)rationalizePathOrURL;
@end

@interface QTUtils : NSObject
{
    NSString *mPath;
    BOOL mAutoRotate;
    struct CGSize mTargetSize;
    BOOL mAllowMainThreadImport;
    BOOL mLoadingThumb;
    CDAnonymousStruct3 *mImageContainer;
    struct CGSize mFullSize;
    float mRotation;
    ImageUserData *mUserData;
    char **mColorProfile;
    unsigned int mImageFormat;
    float mDurationSeconds;
    char *mNeedsToLoadOnMainFlag;
    NSDictionary *mRAWInfo;
    BOOL mExtendRAW;
    unsigned long mBytesWritten;
}

+ (BOOL)quickTimeSupportsColorProfiles;
+ (void)lock;
+ (void)unlock;
+ (struct CGColorSpace *)srgbColorSpace;
+ (struct CGColorSpace *)cameraRGBColorSpace;
+ (struct CGColorSpace *)wideGamutColorSpace;
+ (struct CGColorSpace *)adobe1988GamutColorSpace;
+ (struct CGColorSpace *)printerColorSpaceColorSpace;
+ (struct CGColorSpace *)linearAdobeRGBColorSpace;
+ (BOOL)canUseProfileAsDestination:(char **)fp8;
+ (unsigned long)readImage:(id)fp8 into:(char **)fp12;
+ (BOOL)write24RGBData:(id)fp8 rect:(struct _NSRect)fp12 toFile:(id)fp28 userData:(id)fp32 colorProfile:(char **)fp36;
+ (BOOL)writeGWorld:(struct OpaqueGrafPtr *)fp8 toFile:(id)fp12 imageFormat:(unsigned long)fp16 quality:(int)fp20 userData:(id)fp24 colorProfile:(char **)fp28;
+ (struct _NSSize)bounds:(id)fp8;
+ (struct _NSSize)bounds:(id)fp8 imageFormat:(unsigned long)fp12;
+ (unsigned long)loadableImageFormatAtPath:(id)fp8;
+ (unsigned long)getImporterComponentType:(struct ComponentInstanceRecord *)fp8;
+ (unsigned long)getImageFormat:(id)fp8;
+ (BOOL)imageFormatSupportsTransparency:(unsigned long)fp8;
+ (BOOL)isRawImageFormat:(unsigned long)fp8 path:(id)fp12;
+ (BOOL)isMovieImageFormat:(unsigned long)fp8;
+ (id)getExtensionForImageFormat:(unsigned long)fp8;
+ (id)supportedExtensions;
+ (unsigned long)getImageFormatForExtension:(id)fp8;
+ (id)mimeTypeForExtension:(id)fp8;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 colorProfile:(char ***)fp28;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 storage:(char *)fp28 rowBytes:(long)fp32 colorProfile:(char ***)fp36;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 storage:(char *)fp28 rowBytes:(long)fp32 rotation:(float)fp36 colorProfile:(char ***)fp40;
+ (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 rotation:(float)fp24 colorProfile:(char ***)fp28;
+ (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 colorProfile:(char ***)fp24;
+ (void)uncompressImage:(id)fp8 into:(struct OpaqueGrafPtr *)fp12 rotation:(float)fp16 colorProfile:(char ***)fp20;
+ (void)uncompressImage:(id)fp8 into:(struct OpaqueGrafPtr *)fp12 colorProfile:(char ***)fp16;
+ (void)release;
+ (unsigned int)bitsPerPixelForFormat:(unsigned long)fp8;
+ (unsigned int)bitsPerComponentForFormat:(unsigned long)fp8;
+ (int)alphaInfoForFormat:(unsigned long)fp8;
+ (unsigned long)colorModelPixelFormat:(id)fp8 withDepth:(int)fp12 hasAlpha:(BOOL)fp16;
+ (void)copyBitsFrom:(char *)fp8 srcRowBytes:(unsigned long)fp12 srcFormat:(unsigned long)fp16 srcOrigin:(struct _NSPoint)fp20 to:(char *)fp28 destRowBytes:(unsigned long)fp32 destFormat:(unsigned long)fp36 destOrigin:(struct _NSPoint)fp40 size:(struct _NSSize)fp48;
+ (void)stretchBitsFrom:(char *)fp8 srcRowBytes:(unsigned long)fp12 srcFormat:(unsigned long)fp16 srcSize:(struct _NSSize)fp20 to:(char *)fp28 destRowBytes:(unsigned long)fp32 destSize:(struct _NSSize)fp36;
+ (id)getAvailableSoundTypes;
+ (id)getSongTitleForPath:(id)fp8;
+ (BOOL)does32ARGBBufferContainAllZerosAlphaChannel:(char *)fp8 width:(long)fp12 height:(long)fp16 rowBytes:(long)fp20;
+ (void)fill32ARGBBufferWithOpaqueAlphaChannel:(char *)fp8 width:(long)fp12 height:(long)fp16 rowBytes:(long)fp20;
+ (char **)copyColorProfile:(char **)fp8;
+ (void)addCameraRGBColorProfileToImageAtPath:(id)fp8;
+ (char **)createProfileFromUserDataComponents:(struct UserDataRecord **)fp8;
+ (BOOL)userPrefUseColorProfileEXIF;
+ (BOOL)profileIsScreenOnly:(char **)fp8;
+ (char **)createProfileHandleFromUserData:(struct UserDataRecord **)fp8 alwaysReturnProfile:(BOOL)fp12;
+ (char **)colorProfileFromCGColorSpace:(struct CGColorSpace *)fp8;
+ (struct CGColorSpace *)currentMonitorColorSpace;
+ (struct CGImage *)threadsafeImportRAW:(id)fp8 format:(unsigned long)fp12 RAWInfo:(id *)fp16 targetSize:(struct CGSize *)fp20;
+ (void *)threadsafeImportRAWSmall:(id)fp8 format:(unsigned long)fp12 RAWInfo:(id *)fp16 targetSize:(struct CGSize *)fp20 colorProfile:(char ***)fp24;
+ (void *)threadsafeImport:(id)fp8 imageFormat:(unsigned long)fp12 targetSize:(struct CGSize *)fp16 fullSize:(struct CGSize *)fp20 autoRotate:(BOOL)fp24 rotationResult:(float *)fp28 duration:(float *)fp32 userData:(id *)fp36 colorProfile:(char ***)fp40 allow16Bit:(BOOL)fp44 bitDepth:(int *)fp48 allowMainThreadImport:(BOOL)fp52 needsToLoadOnMainFlag:(char *)fp56 loadingThumb:(BOOL)fp60 noCache:(BOOL)fp64;
+ (id)threadsafeGetMetadata:(id)fp8 imageFormat:(unsigned long)fp12 allowMainThreadImport:(BOOL)fp16 needsToLoadOnMainFlag:(char *)fp20;
+ (short)threadsafeExport:(id)fp8 imageFormat:(unsigned long)fp12 raster:(void *)fp16 rasterRowBytes:(unsigned long)fp20 imageSize:(struct CGSize)fp24 userData:(id)fp32 colorProfile:(char **)fp36 allowMainThreadImport:(BOOL)fp40 needsToLoadOnMainFlag:(char *)fp44 bytesWritten:(unsigned long *)fp48;
- (id)initWithPath:(id)fp8 imageFormat:(unsigned long)fp12;
- (id)initWithPath:(id)fp8 imageFormat:(unsigned long)fp12 autoRotate:(BOOL)fp16 targetSize:(struct CGSize)fp20 loadingThumb:(BOOL)fp28;
- (void)dealloc;
- (char *)raster;
- (struct CGSize)size;
- (struct CGSize)fullSize;
- (float)rotation;
- (float)durationSeconds;
- (id)newUserData;
- (unsigned long)bytesWritten;
- (void)setUserData:(id)fp8;
- (char **)colorProfile;
- (void)setColorProfile:(char **)fp8;
- (struct CGImage *)imageRef;
- (void)setImageRef:(struct CGImage *)fp8;
- (void)setRasterInfo:(void *)fp8 imageSize:(struct CGSize)fp12 rasterRowBytes:(unsigned long)fp20;
- (id)RAWInfo;
- (void)setExtendRAW:(BOOL)fp8;
- (unsigned long)_countMovieFrames:(struct MovieType **)fp8;
- (struct OpaqueGrafPtr *)_makeImageContainerForMovie:(struct MovieType **)fp8;
- (long)_initDecompressSeq:(int *)fp8 gworld:(struct OpaqueGrafPtr *)fp12 imageSize:(long *)fp16;
- (short)_decompress:(int *)fp8 gworld:(struct OpaqueGrafPtr *)fp12 imageSize:(long *)fp16;
- (short)_endDecompress:(int *)fp8;
- (void)setAllowMainThread:(BOOL)fp8 needsToLoadOnMainFlag:(char *)fp12;
- (void)getMetadataQT;
- (void)importQT;
- (short)exportQT;
- (id)_imageIOOptions:(int)fp8 shouldCache:(BOOL)fp12;
- (struct CGImageSource *)imageIOOpen:(int)fp8 shouldCache:(BOOL)fp12;
- (id)_fixCRWDate:(id)fp8;
- (void)getMetadataImageIO:(struct CGImageSource *)fp8;
- (void)importImageIO8Bit:(struct CGImageSource *)fp8;
- (void)importImageIO16Bit:(struct CGImageSource *)fp8;
- (void)importImageIO16BitSmall:(struct CGImageSource *)fp8;

@end

@interface StringUtil : NSObject
{
}

+ (unsigned int)getTrailingCount:(id)fp8 delim:(id)fp12 range:(struct _NSRange *)fp16;
+ (id)incrementTrailingCount:(id)fp8 delim:(id)fp12 first:(BOOL)fp16;
+ (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
+ (id)localizedFormatString:(id)fp8 count:(unsigned int)fp12;
+ (id)localizedValueString:(id)fp8 value:(float)fp12;
+ (id)localizedDurationString:(id)fp8 seconds:(unsigned long)fp12;
+ (id)localizedDurationString:(id)fp8 keyBase:(id)fp12 seconds:(unsigned long)fp16;
+ (id)localizedCountString:(id)fp8 keyBase:(id)fp12 count:(unsigned int)fp16;
+ (id)localizedFormatString:(id)fp8 keyBase:(id)fp12 count:(unsigned int)fp16;
+ (id)localizedValueString:(id)fp8 keyBase:(id)fp12 value:(float)fp16;
+ (id)stringFromClass:(id)fp8 key:(id)fp12;
+ (id)localizedString:(id)fp8;
+ (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
+ (id)stringFromTable:(id)fp8 key:(id)fp12;
+ (id)stringFromTable:(id)fp8 key:(id)fp12 withDefaultValue:(id)fp16;
+ (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
+ (id)stringWithKey:(id)fp8;
+ (id)fileSizeStringFromBytes:(unsigned long long)fp8;
+ (float)maximumDurationStringWidth:(id)fp8;
+ (id)durationString:(double)fp8;
+ (id)timeRemainingString:(double)fp8;
+ (id)stringForDate:(id)fp8 options:(unsigned long)fp12;
+ (id)stringFromFourCharCode:(unsigned long)fp8;
+ (unsigned long)fourCharCodeFromString:(id)fp8;

@end

@interface ThreadsafeMutableArray : NSObject
{
    NSLock *mLock;
    NSMutableArray *mArray;
}

+ (id)array;
- (id)init;
- (void)dealloc;
- (unsigned int)indexOfObject:(id)fp8;
- (unsigned int)count;
- (BOOL)containsObject:(id)fp8;
- (void)addObject:(id)fp8;
- (void)addUniqueObject:(id)fp8;
- (void)addObjectsFromArray:(id)fp8;
- (id)objectAtIndex:(unsigned int)fp8;
- (void)insertObject:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeAllObjects;
- (void)removeLastObject;
- (void)removeObject:(id)fp8;
- (void)removeObjectAtIndex:(unsigned int)fp8;
- (void)removeObjectsInArray:(id)fp8;
- (void)replaceObjectAtIndex:(unsigned int)fp8 withObject:(id)fp12;
- (void)setArray:(id)fp8;
- (void)lock;
- (void)unlock;

@end

@interface Thumbnailer : NSObject <ThreadManagerTask>
{
    struct _NSRect mMaxBounds;
    unsigned long mMaxFileBytes;
    int mQuality;
    float mRotation;
    float mOriginalRotation;
    BOOL mAutoRotate;
    unsigned int mOutputFormat;
    NSString *mOutputExtension;
    ImageUserData *mUserData;
    struct list<JobQueueEntry*, std::allocator<JobQueueEntry*>> *mJobQueue;
    NSLock *mQueueLock;
    BOOL mThreadActive;
    BOOL mClearRequested;
    struct MessageSender mMessageSender;
    struct ComponentInstanceRecord *mImport;
    struct ComponentInstanceRecord *mExport;
    struct UserDataRecord **mUserDataHandle;
    char **mColorProfile;
    struct FSSpec mSrc;
    struct FSSpec mDest;
    struct _NSRect mImageBounds;
    struct _NSSize mLastImageSize;
    struct _NSSize mLastThumbSize;
    NSLock *mLock;
    short mMovieRef;
    struct MovieType **mMovie;
    struct OpaqueGrafPtr *mSrcGWorld;
    int mDecompressSeqID;
    long mImageSize;
    unsigned int mMovieFrameCount;
    unsigned int mMovieFrameNumber;
    int mMovieTime;
}

+ (id)scaleImage:(id)fp8 fromSize:(struct _NSSize)fp12 toSize:(struct _NSSize)fp20;
- (id)init;
- (void)dealloc;
- (struct MessageSender *)messageSender;
- (void)setMax:(unsigned int)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16;
- (struct _NSSize)maxBounds;
- (void)setQuality:(int)fp8;
- (int)quality;
- (void)setRotation:(float)fp8;
- (float)rotation;
- (void)setOriginalRotation:(float)fp8;
- (float)originalRotation;
- (void)setAutoRotate:(BOOL)fp8;
- (float)autoRotate;
- (void)setOutputFormat:(unsigned long)fp8;
- (unsigned long)outputFormat;
- (id)userData;
- (void)setUserData:(id)fp8;
- (void)setOutputExtension:(id)fp8;
- (id)outputExtension;
- (void)clearJobQueue;
- (void)addToJobQueue:(id)fp8 dest:(id)fp12 useTempFile:(BOOL)fp16;
- (void)processJobQueue;
- (int)_queueCount;
- (id)_canTerminate;
- (void)performTask;
- (void)thumbThread;
- (id)userDataForSrc:(id)fp8;
- (BOOL)createThumbnailFromJPEG:(CDAnonymousStruct20 *)fp8 dest:(id)fp12;
- (BOOL)createThumbnailFromJPEG:(CDAnonymousStruct20 *)fp8 handle:(char **)fp12;
- (BOOL)createThumbnail:(id)fp8 dest:(id)fp12;
- (char **)retrieveColorProfile:(id)fp8;
- (BOOL)retrieveMetadata:(id)fp8 userData:(id *)fp12;
- (BOOL)copyUserDataFromPath:(id)fp8 toPath:(id)fp12;
- (struct _NSSize)lastImageSize;
- (struct _NSSize)lastThumbSize;
- (void)releaseImporter;
- (void)releaseExporter;
- (void)releaseUserData;
- (void)releaseColorProfile;
- (struct OpaqueGrafPtr *)_makeGWorldForMovie;
- (long)_initDecompressSeq;
- (short)_decompress;
- (short)_endDecompress;
- (unsigned long)_countMovieFrames;
- (void)_nextFrame;
- (BOOL)_createImporterForJPEG:(CDAnonymousStruct20 *)fp8;
- (void)_openMovie:(id)fp8;
- (BOOL)_createImporterForPath:(id)fp8;
- (void)_getUserData;
- (BOOL)ensureImporterForJPEG:(CDAnonymousStruct20 *)fp8;
- (BOOL)ensureImporterForPath:(id)fp8;
- (void)_prepareImporter;
- (BOOL)ensureExporterCore;
- (BOOL)ensureExporterForPath:(id)fp8;
- (BOOL)ensureExporterForHandle:(char **)fp8;
- (BOOL)createThumbnail:(id)fp8 dest:(id)fp12 options:(CDAnonymousStruct17 *)fp16;
- (BOOL)ensureExporterForPath:(id)fp8 options:(CDAnonymousStruct17 *)fp12;
- (BOOL)ensureExporterCore:(CDAnonymousStruct17 *)fp8;

@end

@interface CalendarInfo : InfoView
{
    CalendarController *mCalendarController;
    CalendarView *mCalendarView;
    Album *mOriginalAlbum;
    FilterAlbum *mFilterAlbum;
    BOOL mDidInitialPositioning;
    BOOL mSelectionChangeInProgress;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)updateData:(BOOL)fp8;
- (void)releaseCurrent;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)becomeCurrent;
- (void)calendarSelectionChanged:(id)fp8;
- (float)titleInset;
- (float)minimumHeight;

@end

@interface EtchedButton : BackgroundButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface EtchedButtonCell : BackgroundButtonCell
{
}

+ (void)_drawEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface GradientView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface PLHolder : NSObject
{
    struct IPPhotoList *mPhotoList;
}

+ (id)hold:(struct IPPhotoList *)fp8;
+ (id)holdNoCopy:(struct IPPhotoList *)fp8;
- (id)initWithPhotoList:(struct IPPhotoList *)fp8;
- (id)initWithPhotoListNoCopy:(struct IPPhotoList *)fp8;
- (void)dealloc;
- (struct IPPhotoList *)photoList;
- (void)setPhotoList:(struct IPPhotoList *)fp8;

@end

@interface ImageSlider : NSControl
{
    NSImage *mBackground;
    NSImage *mKnob;
    NSImage *mOptionOneOffImage;
    NSImage *mOptionOneOnImage;
    NSImage *mOptionTwoOffImage;
    NSImage *mOptionTwoOnImage;
    struct _NSRect mTrackRect;
    struct _NSRect mSecondTrackRect;
    struct _NSRect mKnobBounds;
    struct _NSRect mKnobRect;
    struct _NSRect mSecondSliderKnobRect;
    struct _NSRect mOptionOneRect;
    struct _NSRect mOptionTwoRect;
    float mCurrentValue;
    float mSecondSliderCurrentValue;
    float mMinValue;
    float mSecondSliderMinValue;
    float mMaxValue;
    float mSecondSliderMaxValue;
    SEL mAction;
    SEL mSecondSliderAction;
    SEL mDownAction;
    SEL mSecondSliderDownAction;
    SEL mUpAction;
    SEL mSecondSliderUpAction;
    SEL mOptionOneAction;
    SEL mOptionTwoAction;
    id mTarget;
    BOOL mIsChanging;
    BOOL mIsContinuous;
    BOOL mWholeNumbersOnly;
    float mKnobOffset;
    BOOL mOptionOneOn;
    BOOL mOptionTwoOn;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (BOOL)isOpaque;
- (BOOL)isContinuous;
- (void)setIsContinuous:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setAction:(SEL)fp8;
- (void)setMouseUpAction:(SEL)fp8;
- (void)setMouseDownAction:(SEL)fp8;
- (void)setOptionOneAction:(SEL)fp8;
- (void)setOptionTwoAction:(SEL)fp8;
- (void)setOptionOneOn:(BOOL)fp8;
- (void)setOptionTwoOn:(BOOL)fp8;
- (void)setTarget:(id)fp8;
- (void)setBackground:(id)fp8;
- (void)setKnob:(id)fp8;
- (void)setOptionOneOnImage:(id)fp8 offImage:(id)fp12;
- (void)setOptionTwoOnImage:(id)fp8 offImage:(id)fp12;
- (void)setTrackRect:(struct _NSRect)fp8;
- (void)setOptionOneRect:(struct _NSRect)fp8;
- (void)setOptionTwoRect:(struct _NSRect)fp8;
- (float)floatValue;
- (void)setCurrentValue:(float)fp8;
- (void)setMinValue:(float)fp8;
- (float)minValue;
- (void)setMaxValue:(float)fp8;
- (float)maxValue;
- (void)_adjustValueByMovingKnob:(float)fp8;
- (float)_trackPointForValue:(float)fp8;
- (void)setKnobOffset:(float)fp8;
- (void)setWholeNumbersOnly:(BOOL)fp8;
- (float)_valueForTrackPoint:(float)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isChanging;
- (void)setSecondSliderTrackRect:(struct _NSRect)fp8;
- (float)floatValueForSecondSlider;
- (void)setCurrentValueForSecondSlider:(float)fp8;
- (void)setSecondSliderMinValue:(float)fp8;
- (float)secondSliderMinValue;
- (float)secondSliderMaxValue;
- (void)setSecondSliderMaxValue:(float)fp8;
- (void)setSecondSliderAction:(SEL)fp8;
- (void)setSecondSliderMouseUpAction:(SEL)fp8;
- (void)setSecondSliderMouseDownAction:(SEL)fp8;
- (float)_valueForSecondSliderTrackPoint:(float)fp8;
- (void)_adjustSecondSliderValueByMovingKnob:(float)fp8;
- (float)_trackPointForSecondSliderValue:(float)fp8;
- (void)dealloc;

@end

@interface IPImageElement : IPPageElement
{
    struct IPPhotoInfo *mPhotoInfo;
    struct _NSRect mVisibleRect;
    BOOL mUsingThumbForSized;
    struct CGSize mImageSize;
    struct CGSize mSizedImageSourceSize;
    struct CGRect mSizedImageCropRect;
    float mSizedImageScale;
    float mSizedImageZoom;
    BOOL mSizedImageFit;
    BOOL mSizedImageFlip;
    unsigned long mSizedImageKey;
    BOOL mIsLowQuality;
    BOOL mDrewCorrectResolution;
    BOOL mExposureEnabled;
    float mExposure;
    BOOL mContrastEnabled;
    float mContrast;
    BOOL mSaturationEnabled;
    float mSaturation;
    BOOL mHighlightsEnabled;
    float mHighlights;
    BOOL mShadowsEnabled;
    float mShadows;
    BOOL mTemperatureEnabled;
    float mTemperature;
    BOOL mTintEnabled;
    float mTint;
    BOOL mNoiseEnabled;
    float mNoise;
    BOOL mBlackAndWhiteEnabled;
    BOOL mSepiaEnabled;
    BOOL mAntiqueEnabled;
    BOOL mBoostEnabled;
    BOOL mFadeEnabled;
    BOOL mGloomEnabled;
    float mGloomIntensity;
    float mGloomRadius;
    BOOL mBloomEnabled;
    float mBloomIntensity;
    float mBloomRadius;
    BOOL mPosterizeEnabled;
    float mPosterizeLevels;
    BOOL mSharpenEnabled;
    float mSharpenScale;
    int mHImageAlignment;
    int mVImageAlignment;
}

- (BOOL)isImageElement;
- (id)initWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillPasteboard:(id)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (BOOL)isLowQuality:(BOOL)fp8;
- (void)setPhotoInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)drewCorrectResolution;
- (void)setImageSize:(struct CGSize)fp8;
- (struct CGSize)imageSize;
- (int)horizontalAlignment;
- (int)verticalAlignment;
- (void)setFitToSize:(BOOL)fp8;
- (float)imageAspectRatio;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)shouldZoom;
- (void)setZoom:(float)fp8;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (void)setPan:(struct _NSPoint)fp8;
- (struct _NSPoint)maxPan;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (void)preparePanZoom;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (BOOL)drawsHighlightBorder;
- (BOOL)animationRequiresAlpha;
- (struct _NSRect)_imageDrawingRect:(float)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (struct CGRect)imageDrawRectAtScale:(float)fp8 origin:(struct _NSPoint)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawImageInContext:(struct CGContext *)fp8 forView:(id)fp12 inRect:(struct CGRect)fp16 pan:(struct _NSPoint)fp32 clipOrigin:(struct _NSPoint)fp40 clipScale:(float)fp48 resolution:(int)fp52;
- (id)filteredImageForCoreImage:(id)fp8 includeEffects:(BOOL)fp12 resolution:(int)fp16;
- (struct _NSRect)drawingRectWithSelection:(float)fp8;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)hasImageFilters;
- (void)swapImageAdjustmentsWithElement:(id)fp8;
- (void)encodeImageAdjustmentsInDictionary:(id)fp8;
- (void)takeImageAdjustmentsFromDictionary:(id)fp8;
- (id)exposureFilter;
- (float)exposure;
- (void)setExposure:(float)fp8;
- (BOOL)exposureEnabled;
- (id)contrastFilter;
- (float)contrast;
- (void)setContrast:(float)fp8;
- (BOOL)contrastEnabled;
- (id)highlightsShadowsFilter;
- (float)highlights;
- (void)setHighlights:(float)fp8;
- (BOOL)highlightsEnabled;
- (float)shadows;
- (void)setShadows:(float)fp8;
- (BOOL)shadowsEnabled;
- (id)saturationFilter;
- (float)saturation;
- (void)setSaturation:(float)fp8;
- (BOOL)saturationEnabled;
- (id)temperatureFilter;
- (float)temperature;
- (void)setTemperature:(float)fp8;
- (BOOL)temperatureEnabled;
- (id)tintFilter;
- (float)tint;
- (void)setTint:(float)fp8;
- (BOOL)tintEnabled;
- (id)noiseFilter;
- (float)noise;
- (void)setNoise:(float)fp8;
- (BOOL)noiseEnabled;
- (id)blackAndWhiteFilter;
- (BOOL)blackAndWhiteEnabled;
- (void)setBlackAndWhiteEnabled:(BOOL)fp8;
- (id)sepiaFilter;
- (BOOL)sepiaEnabled;
- (void)setSepiaEnabled:(BOOL)fp8;
- (id)antiqueFilter;
- (BOOL)antiqueEnabled;
- (void)setAntiqueEnabled:(BOOL)fp8;
- (id)boostFilter;
- (BOOL)boostEnabled;
- (void)setBoostEnabled:(BOOL)fp8;
- (id)fadeFilter;
- (BOOL)fadeEnabled;
- (void)setFadeEnabled:(BOOL)fp8;
- (id)gloomFilter;
- (float)gloomIntensity;
- (float)gloomRadius;
- (BOOL)gloomEnabled;
- (void)setGloomEnabled:(BOOL)fp8;
- (id)bloomFilter;
- (float)bloomIntensity;
- (float)bloomRadius;
- (BOOL)bloomEnabled;
- (void)setBloomEnabled:(BOOL)fp8;
- (id)posterizeFilter;
- (float)posterizeLevels;
- (BOOL)posterizeEnabled;
- (void)setPosterizeEnabled:(BOOL)fp8;
- (id)sharpnessFilter;
- (float)sharpenScale;
- (void)setSharpenScale:(float)fp8;
- (BOOL)sharpenEnabled;
- (void)resetAdjustments;
- (void)removeEffects;
- (void)clearElementCache:(BOOL)fp8;
- (void)unloadCachedObjects;
- (struct CGSize)_imageLoadSize:(float)fp8;
- (void)_ensureCropRect;
- (void)_checkImageQuality;
- (BOOL)validate:(id)fp8;
- (void)prepareForDealloc;
- (void)dealloc;

@end

@interface ALHolder : NSObject
{
    struct IPAlbumList *mAlbumList;
}

+ (id)hold:(struct IPAlbumList *)fp8;
- (id)initWithAlbumList:(struct IPAlbumList *)fp8;
- (void)dealloc;
- (struct IPAlbumList *)albumList;

@end

@interface FolderAlbum : Album
{
    struct set<Album*, std::less<Album*>, std::allocator<Album*>> *mChildrenNeedingSynch;
    BOOL mChildChanged;
    struct PhotosCountMap *mPhotosMap;
}

- (id)init;
- (id)initWithAlbum:(id)fp8 staticCopy:(BOOL)fp12;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (BOOL)hasPhoto:(struct IPPhotoInfo *)fp8;
- (void)addChild:(id)fp8;
- (void)removeChild:(id)fp8;
- (void)_photoListOutOfSynch:(id)fp8;
- (BOOL)_checkPhotoListSynch;
- (void)_synch;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (struct PhotosCountMap *)photosCountMap;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeAll;

@end

@interface ToolbarClippedItemsIndicator : NSPopUpButton
{
    NSArray *_clippedItems;
    BOOL _cachedMenuIsValid;
}

+ (void)initialize;
+ (BOOL)isItemShownInPopupIfSoleEntry:(id)fp8;
- (void)_initClipIndicatorImage;
- (id)init;
- (void)dealloc;
- (BOOL)hasItemsToDisplayInPopUp;
- (void)_computeMenuForClippedItems;
- (BOOL)validateMenuItem:(id)fp8;
- (void)_simpleOverflowMenuItemClicked:(id)fp8;
- (void)_computeMenuForClippedItemsIfNeeded;
- (void)_willPopUpNotification:(id)fp8;
- (void)_updateMenuForClippedItems;
- (void)setClippedItems:(id)fp8;
- (id)clippedItems;
- (id)_clipViewAncestor;
- (void)becomeKeyWindow;
- (void)resignKeyWindow;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)acceptsFirstResponder;
- (BOOL)needsPanelToBecomeKey;
- (void)moveRight:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)performClick:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface _ToolbarClippedItemsIndicatorCell : NSPopUpButtonCell
{
}

- (struct _NSRect)imageRectForBounds:(struct _NSRect)fp8;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;
- (void)drawImageWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ButtonGradientControl : NSControl
{
    BOOL mPressed;
    float mLeftInset;
    float mRightInset;
    SEL mAction;
    id mTarget;
    NSImage *mFillNormal;
    NSImage *mFillPressed;
    NSImage *mLeftNormal;
    NSImage *mLeftPressed;
    NSImage *mRightNormal;
    NSImage *mRightPressed;
    BOOL mImmediateMode;
    NSEvent *mCurrentEvent;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setImmediateMode:(BOOL)fp8;
- (id)currentEvent;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;

@end

@interface BlankInfo : InfoView
{
}

@end

@interface KeywordInfo : InfoView
{
    NSButton *mPageUpButton;
    NSButton *mPageDownButton;
    NSView *mTitleView;
    NSView *mButtonContainerView;
    ButtonGradientControl *mGradientButton;
    NSTextField *mCategoryText;
    ArchiveController *mArchiveController;
    KeywordMgr *mKeywordMgr;
    KeywordButton *mResetButton;
    int mNumRealButtons;
    int mNumFillerButtons;
    int mVerticalButtonScrollPosition;
    BOOL mInSearch;
    BOOL mSearchUsingOR;
    NSMutableDictionary *mSavedSearch;
    NSString *mKeywordsText;
    Album *mOriginalAlbum;
    FilterAlbum *mFilterAlbum;
    char *mSelectionChangeInProgress;
}

- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (id)_addButton:(id)fp8 withSpecialIcon:(id)fp12 toggle:(BOOL)fp16;
- (void)_addFillerButton;
- (void)_removeButtons;
- (void)_layoutButtons;
- (void)_addFillerButtons;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (float)titleInset;
- (float)minimumHeight;
- (void)keywordButtonPressed:(id)fp8;
- (void)keywordButtonShiftPressed:(id)fp8;
- (BOOL)keywordButtonReceviedDrag:(id)fp8 drag:(id)fp12 optionKeyDown:(BOOL)fp16;
- (void)scrollWheel:(id)fp8;
- (void)pageUpPressed:(id)fp8;
- (void)pageDownPressed:(id)fp8;
- (void)categorySelected:(id)fp8;
- (void)categorySelectPressed:(id)fp8;
- (void)_scrollWithAnimation:(int)fp8;
- (float)snapSizeForHeight:(float)fp8;
- (float)snapIncrement;
- (void)viewWillStartLiveResize;
- (void)updateKeywordTitles:(id)fp8;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)clearSelection;
- (void)clearSelectionExcept:(int)fp8;
- (void)setOrSearching:(BOOL)fp8;
- (int)_indexOfButton:(id)fp8;
- (void)beginAnimation;
- (void)endAnimation;
- (void)updateData:(BOOL)fp8;
- (void)selectionChanged:(id)fp8;
- (void)_searchForSelectedKeywords;
- (void)_saveSearch;
- (void)_restoreSavedSearch;

@end

@interface ImportDisplay : ArchiveDisplay
{
    ImportView *mImportView;
    BackgroundColorView *mCameraPlacard;
    BackgroundColorView *mPlacardBackground;
    NSTextField *mFromDateText;
    NSTextField *mToDateText;
    NSTextField *mAggregateDateText;
    NSTextField *mCountText;
    NSTextField *mProgressText;
    NSProgressIndicator *mProgressIndicator;
    IPImageView *mThumbnail;
    NSTextField *mRollNameText;
    NSTextField *mRollDescriptionText;
    IPToolbarItem *mEraseCheckbox;
    IPToolbarItem *mImportButton;
    IPToolbarItem *mProgressItem;
    IPToolbarItem *mSelectiveImportButton;
    ImportAlbum *mCurrentAlbum;
    ImportSession *mCurrentSession;
    ICObject *mCamera;
    PhotoCD *mPhotoCD;
    struct IPImage *mDefaultCameraThumbnail;
    struct IPImage *mDefaultPhotoCDThumbnail;
    struct IPImage *mDefaultIPodThumbnail;
    struct IPImage *mPreviewThumbnail;
    NSProgressIndicator *mLoadingProgress;
    long mRemainingCount;
    long mLastRemaining;
    unsigned long mTotalCount;
    BOOL mTotalCalculated;
    BOOL mNeedsUpdate;
    struct MessageReceiver mAlbumMessageReceiver;
    double mLastPreviewTime;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)becomeActive;
- (BOOL)needsUpdate;
- (void)setNeedsUpdate:(BOOL)fp8;
- (id)camera;
- (void)setCamera:(id)fp8;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (id)currentAlbum;
- (void)setCurrentAlbum:(id)fp8;
- (void)rebuildView:(id)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)handleMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_loadPreferences:(id)fp8;
- (void)toggleAdvancedImport:(id)fp8;
- (void)toggleEraseCheckbox:(id)fp8;
- (BOOL)importInProgress;
- (void)_setRemainingCount:(id)fp8;
- (void)import:(id)fp8;
- (void)stopImport:(id)fp8;
- (void)_albumCountChanged;
- (void)_updateUI;
- (void)_updateDate;
- (void)_updateLoadingProgress;
- (void)_updateCount;
- (void)_updateImportButton;
- (void)_updateDeleteCheckbox;
- (id)_eraseMediaTitle;
- (void)_startImport:(id)fp8;
- (void)_importCompleted:(id)fp8;
- (void)_dbBeginUpdate:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_finishingImport:(id)fp8;
- (void)_pauseImport:(id)fp8;
- (void)_resumeImport:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)_setPreviewThumbnailObj:(id)fp8;
- (void)_setPreviewThumbnail:(struct IPImage *)fp8;
- (void)_importProgress:(id)fp8;

@end

@interface ImportAlbum : Album
{
    BOOL mAdvancedImport;
    BOOL mSupportsEject;
    BOOL mSupportsDelete;
    BOOL mShowDelete;
    BOOL mImporting;
    int mMediaType;
    NSString *mFromDate;
    NSString *mToDate;
    NSString *mAggregateDate;
}

- (void)dealloc;
- (BOOL)importing;
- (void)setImporting:(BOOL)fp8;
- (BOOL)advancedImport;
- (void)setAdvancedImport:(BOOL)fp8;
- (BOOL)supportsEject;
- (void)setSupportsEject:(BOOL)fp8;
- (BOOL)supportsDelete;
- (void)setSupportsDelete:(BOOL)fp8;
- (BOOL)showDelete;
- (void)setShowDelete:(BOOL)fp8;
- (BOOL)isRemovable;
- (BOOL)isEjectable;
- (int)mediaType;
- (void)setMediaType:(int)fp8;
- (Class)progressIndicatorClass;
- (id)fromDate;
- (void)setFromDate:(id)fp8;
- (id)toDate;
- (void)setToDate:(id)fp8;
- (id)aggregateDate;
- (void)setAggregateDate:(id)fp8;

@end

@interface KeywordButton : NSButton
{
    SEL mAction;
    SEL mShiftAction;
    id mTarget;
    SEL mDragAction;
    BOOL mPressed;
    BOOL mShiftPressed;
    BOOL mInDrag;
    BOOL mOptionKeyDownInDrag;
    BOOL mDragInvalid;
    NSWindow *mDraggingTooltipWindow;
    BOOL mToggle;
    BOOL mHideTitle;
    NSImage *mSpecialIcon;
    int mPictureCount;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)mouseDown:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (void)setShiftAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setDragAction:(SEL)fp8;
- (void)setShiftPressed:(BOOL)fp8;
- (void)setPictureCount:(int)fp8;
- (void)_setCursor;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)isResetButton;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)_doneDraggingTooltip;
- (void)_createDraggingTooltipForItemCount:(int)fp8;

@end

@interface IPSlideshow : NSObject
{
    Album *mSlideshowAlbum;
    BOOL mIsModified;
    NSMutableArray *mSlides;
    long mLastViewedSlideIndex;
    IPSlideshowSettings *mSlideshowSettings;
    BOOL mDirty;
    long mSelectedCount;
    long *mSelectedIndices;
}

- (id)initWithAlbum:(id)fp8;
- (id)initWithDictionary:(id)fp8 db:(id)fp12 album:(id)fp16;
- (void)dealloc;
- (void)encodeWithDictionary:(id)fp8;
- (id)db;
- (id)album;
- (id)albumForSlideIndex:(long)fp8;
- (id)dbForSlideIndex:(long)fp8;
- (BOOL)imageKeyForSlideIndex:(long)fp8 key:(unsigned int *)fp12;
- (id)slideshowSettings;
- (void)setSlideshowSettings:(id)fp8;
- (id)settingsForSlideIndex:(long)fp8;
- (id)slides;
- (void)add:(id)fp8;
- (void)removeSlideAtIndex:(long)fp8;
- (BOOL)hasSlideWithKey:(unsigned long)fp8;
- (BOOL)removeSlideWithKey:(unsigned long)fp8;
- (void)setDirty:(BOOL)fp8;
- (BOOL)dirty;
- (long)slideCount;
- (long)lastViewedSlideIndex;
- (void)setLastViewedSlideIndex:(long)fp8;
- (BOOL)isModified;
- (void)markAsModified;
- (void)clearModified;
- (void)setSelectedIndices:(long *)fp8 count:(long)fp12;
- (void)getSelectedIndices:(long **)fp8 count:(long *)fp12;
- (id)delegate;

@end

@interface IPSlide : NSObject
{
    unsigned int mKey;
    IPSlideshowSettings *mSettings;
}

- (id)initWithKey:(unsigned long)fp8;
- (id)initWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)encodeWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)dealloc;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (id)slideshowSettings;
- (void)setSlideshowSettings:(id)fp8;

@end

@interface IPSlideshowController : ArchiveDisplay
{
    BOOL mAwakened;
    IPSlideshow *mSlideshow;
    IPSlideThumbView *mSlideThumbView;
    NSScrollView *mThumbViewScrollView;
    IPSlideshowView *mSlideshowView;
    NSView *mSlideshowThumbParent;
    NSView *mToolbarPopups;
    NSPopUpButton *mEffectPopup;
    NSPopUpButton *mTransitionPopup;
    NSPopUpButton *mHUDTransitionPopup;
    HUDDirectionView *mHUDTransitionDirection;
    NSTextField *mHUDSlideDurationText;
    HUDSlider *mHUDTransitionSpeedSlider;
    NSStepper *mHUDSlideDurationStepper;
    HUDImageButton *mHUDIncreaseDurationButton;
    HUDImageButton *mHUDDecreaseDurationButton;
    NSPanel *mMusicPanel;
    ILMediaBrowserView *mMediaBrowser;
    NSButton *mPlayMusicCheckbox;
    NSButton *mMusicOKButton;
    NSButton *mMusicCancelButton;
    NSView *mPanandzoomControls;
    NSButton *mPanandzoomStartEndButton;
    NSControl *mPanandzoomStartLabel;
    NSControl *mPanandzoomEndLabel;
    NSButton *mPanandzoomCheckbox;
    NSView *mSlideTextControls;
    NSPopUpButton *mSlideTextPopup;
    NSMenu *mTransitionContextMenu;
    NSMenu *mEffectContextMenu;
    NSView *mExportAccessoryView;
    NSPopUpButton *mExportMovieSizePopup;
    NSArray *mMusicPanelNibTopObjects;
    NSArray *mHUDSettingsPanelNibTopObjects;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mPreviewToolbarItem;
    IPToolbarItem *mDetailsToolbarItem;
    IPToolbarItem *mPreviewButtonItem;
    BOOL mDontReallyRebuildView;
    IPSlideshowSettingsController *mSheetSettingsController;
    IPSlideshowHUDController *mHUDSettingsController;
}

- (void)awakeFromNib;
- (void)effectMenuAction:(id)fp8;
- (void)transitionMenuAction:(id)fp8;
- (void)_setMenuItemState:(id)fp8 toIndex:(int)fp12;
- (void)_setTransitionPopupDefaultItem;
- (id)slideshow;
- (id)db;
- (id)album;
- (void)resetSlideshow;
- (id)slideshowView;
- (BOOL)hasHUD;
- (void)closeHUD;
- (void)keyDown:(id)fp8;
- (void)previewEndedNotification:(id)fp8;
- (void)previewSlideshowButtonAction:(id)fp8;
- (void)slideshowEndedNotification:(id)fp8;
- (long)firstSelection;
- (void)playSlideButtonAction:(id)fp8;
- (BOOL)slideshowPlayerRenderSlideFrameInContext:(id)fp8 context:(struct CGContext *)fp12 slideIndex:(long)fp16;
- (void)slideMusicButtonAction:(id)fp8;
- (void)conductMusicSheet;
- (id)mediaBrowserView:(id)fp8 displayNameForMediaGroup:(id)fp12;
- (id)mediaBrowserView:(id)fp8 iconForMediaGroup:(id)fp12;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaObject:(id)fp12;
- (void)_musicSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)musicOkayButtonAction:(id)fp8;
- (void)musicCancelButtonAction:(id)fp8;
- (void)mediaBrowserViewSelectionDidChange:(id)fp8;
- (void)slideDetailsButtonAction:(id)fp8;
- (void)slideshowSettingsButtonAction:(id)fp8;
- (void)settingsControllerSettingsChanged:(id)fp8;
- (void)_redoRemoveSelectedPhotos:(id)fp8;
- (void)_undoRemoveSelectedPhotos:(id)fp8;
- (void)removeSelectedPhotos;
- (id)selectedSlides;
- (void)hudTransitionSpeedStepperAction:(id)fp8;
- (void)hudTransitionDirectionAction:(id)fp8;
- (void)hudSlideDurationTextfieldAction:(id)fp8;
- (void)hudSlideDurationDecreaseButtonAction:(id)fp8;
- (void)hudSlideDurationIncreaseButtonAction:(id)fp8;
- (void)hudSlideDurationStepperAction:(id)fp8;
- (void)currentSlideToSettingsPanel:(BOOL)fp8;
- (void)useDefaultSettingsButtonAction:(id)fp8;
- (void)markAsModifiedSansRebuild;
- (void)settingsControllerGetSampleImages:(id)fp8 photos:(struct IPPhotoList *)fp12;
- (void)_selectionChanged:(long)fp8;
- (void)thumbViewSelectionChanged:(id)fp8 photoIndex:(long)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (void)thumbViewRemovePhoto:(id)fp8 index:(long)fp12;
- (void)thumbViewInsertPhoto:(id)fp8 photo:(id)fp12 index:(long)fp16;
- (void)thumbViewFinishedMove:(id)fp8;
- (void)_forceSlideshowOrderOnAlbum;
- (void)selectNextSlideButtonAction:(id)fp8;
- (void)selectPreviousSlideButtonAction:(id)fp8;
- (void)slideTextPopupAction:(id)fp8;
- (void)panandzoomCheckboxAction:(id)fp8;
- (void)_updatePanandzoomState;
- (void)_updateStartEndState;
- (void)panandzoomStartEndRadioClusterAction:(id)fp8;
- (void)effectPopupAction:(id)fp8;
- (void)hudTransitionPopupAction:(id)fp8;
- (void)_setupHUDDirectionViewAndSpeedSlider:(BOOL)fp8;
- (void)transitionPopupAction:(id)fp8;
- (void)_playTransitionPreview;
- (void)rebuildView:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)showCustomControls:(id)fp8;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (void)prepareToEdit;
- (void)slideImageDoubleClicked;
- (void)_thumbViewSelectionToSlideshow;
- (BOOL)isActive;
- (void)updateStatus;
- (BOOL)validateMenuItem:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)slideCount;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)clearSelection;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)selectAll;
- (void)selectNone;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)defaultPan;
- (void)updateSizer:(float)fp8;
- (BOOL)supportsResizeSlider;
- (void)dealloc;
- (void)exportSlideshow;
- (void)exortMovieSizePopupAction:(id)fp8;
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)sendSlideshowToiDVD;
- (id)_sendSlideshowToiDVDDuring:(id)fp8 path:(id)fp12 script:(id)fp16;

@end

@interface IPSlideThumbView : IPThumbView
{
    IPSlideshow *mSlideshow;
}

- (void)clearController;
- (long)_indexForPhotoInto:(struct IPPhotoInfo *)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (id)getImageDB;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)performKeyEquivalent:(id)fp8;
- (BOOL)keyDownIgnoresShiftKey;
- (void)doDeleteKey;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)layoutThumbs:(BOOL)fp8;
- (void)_fillPasteboardWithSelection:(id)fp8;
- (void)thumbWillRemove:(long)fp8;
- (void)thumbDidInterject:(long)fp8;
- (BOOL)allowDragReorder;

@end

@interface IPImageView : NSView
{
    struct IPImage *mImage;
    BOOL mDropShadow;
}

- (void)dealloc;
- (struct IPImage *)image;
- (void)setImage:(struct IPImage *)fp8;
- (BOOL)dropShadow;
- (void)setDropShadow:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface CPlusObjectHolder : NSObject
{
    void *mObject;
    int mType;
}

+ (id)hold:(void *)fp8;
+ (id)hold:(void *)fp8 type:(int)fp12;
- (id)initWithObject:(void *)fp8;
- (id)initWithObject:(void *)fp8 type:(int)fp12;
- (void *)object;
- (int)type;

@end

@interface IPSlideshowSettingsController : NSObject
{
    id mDelegate;
    Album *mAlbum;
    BOOL mSettingsChanged;
    BOOL mChangesOnTheFly;
    BOOL mUsingDefaultSettings;
    IPSlideshowSettings *mSettings;
    NSArray *mNibTopObjects;
    NSPanel *mSettingsPanel;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    NSPopUpButton *mTransitionPopup;
    DirectionView *mTransitionDirection;
    NSSlider *mTransitionSpeedSlider;
    IPSlideshowPlayerView *mTransitionPreview;
    NSPopUpButton *mEffectPopup;
    NSPopUpButton *mFormatPopup;
    NSTextField *mSlideDurationText;
    NSStepper *mSlideDurationStepper;
    NSButton *mLoopCheckBox;
    NSButton *mFillScreenCheckBox;
    NSButton *mUseTitlesCheckBox;
    NSButton *mUseRankingsCheckBox;
    NSButton *mShowControlsCheckBox;
    NSMatrix *mMusicDurationRadioCluster;
    NSButton *mUseDefaultSettingsButton;
    NSButton *mAutoKenBurnsCheckBox;
    struct IPPhotoList *mTransitionSampleImages;
    BOOL mTransitionPreviewFirstTime;
    struct _NSRect mSavedTransitionFrame;
    NSOpenGLPixelFormat *mSavedTransitionPixelFormat;
}

+ (void)cleanUpStatics;
+ (id)sharedSheetInstanceWithDelegate:(id)fp8 album:(id)fp12;
+ (id)sharedPanelInstanceWithDelegate:(id)fp8 album:(id)fp12;
+ (BOOL)hasSharedPanelInstance;
- (id)initWithNib:(id)fp8;
- (void)dealloc;
- (void)conductSheetForWindow:(id)fp8 withSettings:(id)fp12;
- (void)_sheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)showWindow;
- (void)closeWindow;
- (BOOL)windowIsVisible;
- (void)setSettings:(id)fp8;
- (id)settings;
- (void)setUsingDefaultSettings:(BOOL)fp8;
- (BOOL)usingDefaultSettings;
- (void)transitionPreviewUpdateAction:(id)fp8;
- (void)transitionPreviewAction:(id)fp8;
- (void)formatPopupAction:(id)fp8;
- (void)updateUIFromSettings;
- (void)musicDurationRadioClusterAction:(id)fp8;
- (void)updateSettingsFromUI;
- (id)transitionNameFromUI;
- (float)transitionSpeedFromUI;
- (int)transitionDirectionFromUI;
- (int)secondsPerSlideFromUI;
- (void)sampleTransitionUpdate;
- (void)sampleTransition;
- (void)setDelegate:(id)fp8 album:(id)fp12;
- (id)delegate;
- (void)setChangesOnTheFly:(BOOL)fp8;
- (BOOL)changesOnTheFly;
- (void)okayButtonAction:(id)fp8;
- (void)cancelButtonAction:(id)fp8;
- (void)loopCheckboxAction:(id)fp8;
- (void)fillScreenCheckboxAction:(id)fp8;
- (void)useTitlesCheckboxAction:(id)fp8;
- (void)useRankingsCheckboxAction:(id)fp8;
- (void)showControlsCheckboxAction:(id)fp8;
- (void)slideDurationTextfieldAction:(id)fp8;
- (void)slideDurationStepperAction:(id)fp8;
- (void)transitionSpeedStepperAction:(id)fp8;
- (void)transitionPopupAction:(id)fp8;
- (void)transitionDirectionAction:(id)fp8;
- (void)autoKenBurnsCheckBoxAction:(id)fp8;
- (void)effectPopupAction:(id)fp8;
- (void)useDefaultSettingsButtonAction:(id)fp8;
- (void)mediaBrowserViewSelectionDidChange:(id)fp8;

@end

@interface IPSlideshowSettings : NSObject
{
    float mZoom;
    float mPanX;
    float mPanY;
    BOOL mAnimatePanAndZoom;
    float mAnimationStartTime;
    float mAnimationEndTime;
    float mEndZoom;
    float mEndPanX;
    float mEndPanY;
    NSString *mTransitionName;
    NSString *mTransitionIdentifier;
    float mTransitionSpeed;
    int mTransitionDirection;
    NSString *mEffectName;
    NSString *mEffectIdentifier;
    int mSecondsPerSlide;
    unsigned long mUseDefaultFlags;
    BOOL mFillScreen;
    BOOL mRandomOrder;
    BOOL mLoop;
    BOOL mUseTitles;
    float mFontSize;
    BOOL mUseRankings;
    BOOL mShowControls;
    BOOL mPlayMusic;
    BOOL mFitToMusic;
    BOOL mAutoPanAndZoom;
    float mPanAndZoomMaxZoom;
    NSString *mSongPath;
    NSString *mPlaylistName;
    int mSlideshowFormat;
}

+ (id)defaultTransitionIdentifier;
+ (id)defaultSettings;
+ (float)formatAspectRatio:(int)fp8 screenFrame:(struct _NSRect)fp12;
+ (struct _NSRect)screenFrame:(int)fp8 screen:(id)fp12;
- (id)init;
- (id)initWithAlbum:(id)fp8;
- (id)initWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)dealloc;
- (void)encodeWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (id)copyWithDefaults;
- (void)setAutoPanAndZoom:(BOOL)fp8;
- (BOOL)autoPanAndZoom;
- (void)setPanAndZoomMaxZoom:(float)fp8;
- (float)panAndZoomMaxZoom;
- (void)setZoom:(float)fp8;
- (float)zoom;
- (void)setPanX:(float)fp8;
- (float)panX;
- (void)setPanY:(float)fp8;
- (float)panY;
- (void)setAnimatePanAndZoom:(BOOL)fp8;
- (BOOL)animatePanAndZoom;
- (void)setAnimationStartTime:(float)fp8;
- (float)animationStartTime;
- (void)setAnimationEndTime:(float)fp8;
- (float)animationEndTime;
- (void)setEndZoom:(float)fp8;
- (float)endZoom;
- (void)setEndPanX:(float)fp8;
- (float)endPanX;
- (void)setEndPanY:(float)fp8;
- (float)endPanY;
- (void)setUseDefaultFlags:(unsigned long)fp8;
- (unsigned long)useDefaultFlags;
- (void)setUseDefaultFlag:(unsigned long)fp8;
- (void)setUseDefaultFlagsExcept:(unsigned long)fp8;
- (BOOL)getUseDefaultFlag:(unsigned long)fp8;
- (void)clearUseDefaultFlag:(unsigned long)fp8;
- (BOOL)usingAllDefaultSettings;
- (void)setPlayMusic:(BOOL)fp8;
- (BOOL)playMusic;
- (void)setFitToMusic:(BOOL)fp8;
- (BOOL)fitToMusic;
- (void)setSongPath:(id)fp8;
- (id)songPath;
- (id)songTitle;
- (void)setPlaylistName:(id)fp8;
- (id)playlistName;
- (void)setTransitionName:(id)fp8 andID:(BOOL)fp12;
- (id)transitionName;
- (void)setTransitionIdentifier:(id)fp8;
- (id)transitionIdentifier;
- (BOOL)transitionIsNone;
- (void)setTransitionSpeed:(float)fp8;
- (float)transitionSpeed;
- (void)setTransitionDirection:(int)fp8;
- (int)transitionDirection;
- (void)setEffectName:(id)fp8;
- (id)effectName;
- (void)setEffectIdentifier:(id)fp8;
- (id)effectIdentifier;
- (void)setSecondsPerSlide:(int)fp8;
- (int)secondsPerSlide;
- (void)setFillScreen:(BOOL)fp8;
- (BOOL)fillScreen;
- (void)setRandomOrder:(BOOL)fp8;
- (BOOL)randomOrder;
- (void)setLoop:(BOOL)fp8;
- (BOOL)loop;
- (void)setUseTitles:(BOOL)fp8;
- (BOOL)useTitles;
- (void)setFontSize:(float)fp8;
- (float)fontSize;
- (void)setUseRankings:(BOOL)fp8;
- (BOOL)useRankings;
- (void)setShowControls:(BOOL)fp8;
- (BOOL)showControls;
- (void)setSlideshowFormat:(int)fp8;
- (int)slideshowFormat;
- (float)aspectRatioForImage;
- (struct _NSSize)imageSize;

@end

@interface DirectionView : NSView
{
    float mArrowWidth;
    float mArrowHeight;
    struct _NSRect mUpBounds;
    struct _NSRect mDownBounds;
    struct _NSRect mLeftBounds;
    struct _NSRect mRightBounds;
    BOOL mUpSupported;
    BOOL mDownSupported;
    BOOL mLeftSupported;
    BOOL mRightSupported;
    int mDirection;
    BOOL mIsGraphite;
    SEL mAction;
    id mTarget;
    NSBezierPath *mUpPath;
    NSBezierPath *mDownPath;
    NSBezierPath *mLeftPath;
    NSBezierPath *mRightPath;
    int mUpDirection;
    int mDownDirection;
    int mLeftDirection;
    int mRightDirection;
    int mNoDirection;
    struct _NSPoint mUpPt;
    struct _NSPoint mDownPt;
    struct _NSPoint mRightPt;
    struct _NSPoint mLeftPt;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setCompositePoints;
- (void)dealloc;
- (void)_clearPaths;
- (void)setFrame:(struct _NSRect)fp8;
- (id)_pathForDirection:(int)fp8;
- (id)_pathFromAngle:(float)fp8 toAngle:(float)fp12;
- (id)_bevelImage;
- (id)_upImage;
- (id)_downImage;
- (id)_leftImage;
- (id)_rightImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)disableAll;
- (void)enableAll;
- (void)enableVertical;
- (void)enableHorizontal;
- (void)disableUp;
- (void)disableDown;
- (void)disableLeft;
- (void)disableRight;
- (void)enableUp;
- (void)enableDown;
- (void)enableLeft;
- (void)enableRight;
- (void)setDirection:(int)fp8;
- (int)direction;
- (void)setValueForNone:(int)fp8 up:(int)fp12 down:(int)fp16 left:(int)fp20 right:(int)fp24;
- (void)setDirection:(int)fp8 notify:(BOOL)fp12;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseUp:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (void)initializeArt;
- (id)imageForIndex:(int)fp8;

@end

@interface NSView (ImprovedView)
- (void)improvedSetFrame:(struct _NSRect)fp8 needsDisplay:(BOOL)fp24;
- (void)improvedSetFrameOrigin:(struct _NSPoint)fp8 needsDisplay:(BOOL)fp16;
- (void)improvedSetFrameSize:(struct _NSSize)fp8 needsDisplay:(BOOL)fp16;
@end

@interface IPSlideTextView : NSTextView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;

@end

@interface IPSlideshowView : NSView <IPImageMgrDelegate>
{
    IPSlideshowController *mSlideshowController;
    IPSlide *mSlide;
    struct IPPhotoInfo *mPhotoInfo;
    float mZoom;
    float mMinZoom;
    BOOL mEndPanAndZoom;
    float mPanX;
    float mPanY;
    float mMinPanX;
    float mMinPanY;
    float mMaxPanX;
    float mMaxPanY;
    struct _NSSize mFullSize;
    struct _NSSize mLastDrawnSize;
    float mRotation;
    NSColor *mBackgroundColor;
    id mEffect;
    int mScreenFormat;
    BOOL mForceDraw;
    BOOL mPlayingPreview;
    IPOnscreenImageMgr *mImageMgr;
    NSMutableAttributedString *mSlideText;
    int mSlideTextPlacement;
    float mSlideTextOffset;
    IPSlideTextView *mTextView;
    BOOL mIgnoreTextChanges;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_backgroundColorChanged:(id)fp8;
- (void)awakeFromNib;
- (void)_scrollerResized:(id)fp8;
- (void)dealloc;
- (struct _NSRect)_minimumFrame;
- (id)controller;
- (void)loadEffect:(id)fp8;
- (id)imageMgr;
- (void)clearCache;
- (void)setSlide:(id)fp8 withEffect:(id)fp12;
- (void)resizeView:(id)fp8;
- (void)updateText;
- (void)textDidChange:(id)fp8;
- (void)setSlideText:(id)fp8;
- (id)slide;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)_calcZoomLimits;
- (void)_calcPanLimits;
- (void)_applyZoomLimits;
- (void)_applyPanLimits;
- (void)forceDraw;
- (BOOL)playingPreview;
- (void)setPlayingPreview:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)_snapToZero;
- (void)_panSlideToX:(float)fp8 panY:(float)fp12;
- (void)_panSlideByX:(float)fp8 panY:(float)fp12;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (BOOL)acceptsFirstResponder;
- (void)resetCursorRects;
- (void)mouseDown:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (struct _NSRect)_adjustSlideRectForText:(struct _NSRect)fp8;
- (struct _NSRect)_calcPhotoRectForSlideRect:(struct _NSRect)fp8;
- (struct _NSRect)_calcSlideRect;
- (void)clearImage;
- (void)recalcLimitsAndReadSettings:(BOOL)fp8;
- (float)zoomChanged:(float)fp8;
- (BOOL)startEndPanAndZoom;
- (void)setStartEndPanAndZoom:(BOOL)fp8 copyOpposite:(BOOL)fp12;
- (void)zoomToOneToOne;
- (void)zoomCompleted;
- (void)_photoChanged:(id)fp8;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)infoChanged:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;

@end

@interface SlideshowAlbum : Album
{
    IPSlideshow *mSlideshow;
    NSMutableDictionary *mSlideshowData;
}

- (id)init;
- (id)initWithAlbum:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (unsigned int)aeAlbumType;
- (id)slideshowDict;
- (void)encodeWithDictionary:(id)fp8;
- (id)slideshow;
- (void)setSlideshow:(id)fp8;
- (void)_slideshowContentsChanged:(id)fp8;
- (void)dealloc;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)forceSlideshowOrderOnAlbum;
- (BOOL)allowsMovies;
- (BOOL)repeatSlideShow;
- (BOOL)backgroundMusicEnabled;
- (BOOL)slideShowUseTitles;
- (int)secondsPerSlide;
- (id)actualSlideShowSongPath;
- (id)actualSlideShowPlaylistName;
- (int)slideShowTransitionDirection;
- (id)slideShowTransitionName;
- (id)slideshowTransitionIdentifier;
- (float)slideShowTransitionSpeed;

@end

@interface IPPage : NSObject
{
    IPBook *mParent;
    struct _NSSize mPageSize;
    float mBindingMargin;
    NSString *mPageDesignTag;
    NSString *mOriginalPageDesignTag;
    NSString *mBackgroundPageDesignTag;
    IPPage *mBackgroundPage;
    NSArray *mAlternativePageDesigns;
    BOOL mFavorAlternativePages;
    NSString *mIncreasedHoleCountPage;
    NSString *mDecreasedHoleCountPage;
    NSString *mRotationPage;
    NSString *mBackCoverPage;
    NSMutableArray *mElements;
    NSMutableArray *mHoleElements;
    NSMutableArray *mGuideElements;
    NSString *mPageType;
    NSString *mOriginalPageType;
    int mTotalHoleCount;
    BOOL mReverseHoleOrder;
    NSArray *mHoleOrder;
    NSMutableArray *mSelectedElements;
    NSString *mBackgroundImageName;
    BOOL mMirrorBackgroundHorizontal;
    BOOL mMirrorBackgroundVertical;
    NSString *mPageIconName;
    NSImage *mPageIcon;
    NSImage *mPageIconBackground;
    struct CGLayer *mPageImageCache;
    NSString *mBackgroundThumbnailName;
    float mBackgroundTileWidth;
    float mBackgroundTileHeight;
    float mBackgroundTileRotation;
    int mBackgroundMethod;
    NSColor *mBackgroundColor;
    NSColor *mBackgroundTextureColor;
    int mBackgroundTextureColorBlendMode;
    int mBackgroundBlendMode;
    BOOL mIsChanging;
    BOOL mIsPanning;
    BOOL mDisplayIsChanging;
    BOOL mEditingText;
    BOOL mIsTransient;
    BOOL mIsEndingPage;
    BOOL mIsRotated;
    BOOL mCanBeRotated;
    int mFrameOption;
    int mBackgroundOption;
    NSMutableDictionary *mBackgroundVariants;
    NSMutableArray *mPageNumberElements;
    NSMutableArray *mPreservedPageText;
    NSImage *mThumbnail;
    IPPage *mEnclosingPage;
    NSMutableArray *mQueuedElementAddArray;
    BOOL mHasCheckedForClipping;
    BOOL mHasBeenAltered;
    float mMinAnimatedSceneDuration;
    float mAnimatedSceneDurationFactor;
    BOOL mAnimationIncludesBackground;
    float mLeftCropExtent;
    float mRightCropExtent;
    float mTopCropExtent;
    float mBottomCropExtent;
    BOOL mBackgroundDrawingDisabled;
}

+ (void)initialize;
- (id)init;
- (id)initWithBook:(id)fp8 elements:(id)fp12;
- (id)initWithPage:(id)fp8 forBook:(id)fp12;
- (void)takeContentsFromPage:(id)fp8 forBook:(id)fp12 notify:(BOOL)fp16;
- (void)encodeWithDictionary:(id)fp8 forArchive:(BOOL)fp12;
- (id)initWithDictionary:(id)fp8 forBook:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8;
- (void)restoreValuesFromDictionary:(id)fp8;
- (void)copyLegacyBookInfo:(id)fp8 forPage:(int)fp12;
- (id)parent;
- (void)setParent:(id)fp8;
- (struct _NSSize)pageSize;
- (void)setPageSize:(struct _NSSize)fp8;
- (struct _NSRect)boundingBoxOfElements:(id)fp8;
- (void)rotatePage;
- (float)bindingMargin;
- (void)setBindingMargin:(float)fp8;
- (BOOL)isTransient;
- (void)setIsTransient:(BOOL)fp8;
- (BOOL)isEndingPage;
- (void)setIsEndingPage:(BOOL)fp8;
- (BOOL)isRotated;
- (void)setIsRotated:(BOOL)fp8;
- (BOOL)canBeRotated;
- (int)pageNumber;
- (BOOL)isCoverPage;
- (BOOL)isBackCoverPage;
- (BOOL)isCalendarPage;
- (BOOL)isScrapAreaPage;
- (BOOL)isInsideCoverPage;
- (BOOL)isFrontFlapPage;
- (BOOL)isBackFlapPage;
- (BOOL)isFlapPage;
- (BOOL)isFirstInsidePage;
- (BOOL)isLastInsidePage;
- (BOOL)isProductComponentPage;
- (BOOL)isBlankPage;
- (BOOL)isUserCustomizedPage;
- (BOOL)hasBeenAltered;
- (void)setHasBeenAltered:(BOOL)fp8;
- (BOOL)pageLaysToRight;
- (BOOL)pageLaysToLeft;
- (BOOL)pageLaysAbove;
- (BOOL)pageLaysBelow;
- (id)enclosingPage;
- (void)setEnclosingPage:(id)fp8;
- (id)pageDesign;
- (void)setPageDesign:(id)fp8 notify:(BOOL)fp12;
- (id)originalPageDesign;
- (void)setOriginalPageDesign:(id)fp8 notify:(BOOL)fp12;
- (id)alternativePageDesigns;
- (void)setAlternativePageDesigns:(id)fp8;
- (BOOL)favorAlternativePages;
- (id)increasedHoleCountPage;
- (void)setIncreasedHoleCountPage:(id)fp8;
- (id)decreasedHoleCountPage;
- (void)setDecreasedHoleCountPage:(id)fp8;
- (id)rotationPage;
- (void)setRotationPage:(id)fp8;
- (id)backCoverPage;
- (id)pageType;
- (void)setPageType:(id)fp8;
- (id)originalPageType;
- (BOOL)hasText;
- (int)totalHoleCount;
- (void)setTotalHoleCount:(int)fp8;
- (BOOL)hasEmptyHole;
- (int)emptyHoleCount;
- (id)pageIcon;
- (id)pageIconBackground;
- (void)setPageIconBackground:(id)fp8;
- (void)clearPageIconBackground;
- (id)pageIconName;
- (BOOL)usesPhoto:(struct IPPhotoInfo *)fp8;
- (int)frameOption;
- (void)setFrameOption:(int)fp8;
- (int)backgroundOption;
- (void)setBackgroundOption:(int)fp8;
- (void)makeUserCustomizedPage;
- (void)revertToOriginal;
- (BOOL)shouldReverseHoleOrder;
- (void)setShouldReverseHoleOrder:(BOOL)fp8;
- (id)holeOrder;
- (id)elements;
- (void)addElement:(id)fp8 notify:(BOOL)fp12;
- (void)addElement:(id)fp8 atIndex:(int)fp12 notify:(BOOL)fp16;
- (void)addQueuedElements;
- (void)queueAddElement:(id)fp8;
- (void)addArtElementForImageNamed:(id)fp8 atLocation:(struct _NSPoint)fp12;
- (void)addElements:(id)fp8 notify:(BOOL)fp12;
- (void)addElementsForFiles:(id)fp8 atLocation:(struct _NSPoint)fp12;
- (void)removeAllElements;
- (void)removeElements:(id)fp8;
- (void)removeElement:(id)fp8 notify:(BOOL)fp12;
- (id)elementAtIndex:(unsigned int)fp8;
- (id)elementForPhotoElement:(struct IPPhotoInfo *)fp8;
- (int)indexOfPhotoElement:(struct IPPhotoInfo *)fp8;
- (int)indexOfElement:(id)fp8;
- (void)createHoleForElement:(id)fp8;
- (void)clearHoleElementCache;
- (void)makeHolesForElements:(id)fp8 usingScrapArea:(BOOL)fp12;
- (id)pageNumberElements;
- (void)setPageNumberElements:(id)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8 scale:(float)fp16 deep:(BOOL)fp20;
- (id)elementsIntersectingRect:(struct _NSRect)fp8;
- (id)nearestVerticalGuideToElement:(id)fp8;
- (id)nearestHorizontalGuideToElement:(id)fp8;
- (void)moveToFront:(id)fp8 notify:(BOOL)fp12;
- (void)sendToBack:(id)fp8 notify:(BOOL)fp12;
- (int)_indexOfFirstForegroundElement;
- (void)moveElementFromIndex:(int)fp8 toIndex:(int)fp12;
- (void)moveSelectionToFront;
- (void)sendSelectionToBack;
- (void)makeCompoundElementFromSelection;
- (void)splitSelectedCompoundElements;
- (void)verticallyDivideSelectedElementsIntoSegments:(int)fp8 withGap:(float)fp12;
- (void)horizontallyDivideSelectedElementsIntoSegments:(int)fp8 withGap:(float)fp12;
- (void)toggleFitOfSelectedElements;
- (void)toggleMirrorImageOfSelectedElements;
- (void)zoomSelectedElements:(float)fp8;
- (void)rotateSelectedElements:(float)fp8;
- (void)moveSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)moveElements:(id)fp8 X:(float)fp12 Y:(float)fp16;
- (void)panSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)setPanSelectedElements:(struct _NSPoint)fp8 panScale:(float)fp16;
- (struct _NSPoint)getPanSelectedElement:(float)fp8;
- (void)flipOrientationOfSelectedElements;
- (void)setBlendModeOfSelectedElements:(int)fp8;
- (void)setExposureOfSelectedElements:(float)fp8;
- (void)setContrastOfSelectedElements:(float)fp8;
- (void)setHighlightsOfSelectedElements:(float)fp8;
- (void)setShadowsOfSelectedElements:(float)fp8;
- (void)setSaturationOfSelectedElements:(float)fp8;
- (void)setTemperatureOfSelectedElements:(float)fp8;
- (void)setTintOfSelectedElements:(float)fp8;
- (void)setNoiseOfSelectedElements:(float)fp8;
- (void)setSharpnessScaleOfSelectedElements:(float)fp8;
- (void)setAlphaOfSelectedElements:(float)fp8;
- (void)removeEffectsFromSelectedElements;
- (void)setBlackAndWhiteEnabledForSelectedElements:(BOOL)fp8;
- (void)setSepiaEnabledForSelectedElements:(BOOL)fp8;
- (void)setAntiqueEnabledForSelectedElements:(BOOL)fp8;
- (void)setBoostEnabledForSelectedElements:(BOOL)fp8;
- (void)setFadeEnabledForSelectedElements:(BOOL)fp8;
- (void)setBloomEnabledForSelectedElements:(BOOL)fp8;
- (void)setGloomEnabledForSelectedElements:(BOOL)fp8;
- (void)setPosterizeEnabledForSelectedElements:(BOOL)fp8;
- (void)resetAdjustmentsOfSelectedElements;
- (void)adjustElementsToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)applyFrameMasterToElements:(id)fp8;
- (void)setIsChanging:(BOOL)fp8;
- (BOOL)isChanging;
- (void)setIsPanning:(BOOL)fp8;
- (BOOL)isPanning;
- (void)setDisplayIsChanging:(BOOL)fp8;
- (BOOL)displayIsChanging;
- (void)setEditingText:(BOOL)fp8;
- (BOOL)editingText;
- (id)nextHole;
- (id)holeElements;
- (id)holeElementsIncludingBackground;
- (void)createHoles;
- (id)orderedHoleElements;
- (id)wildcardHoleElements;
- (BOOL)hasGroupElements;
- (id)groupElements;
- (void)setBackgroundForGroupElementsFromPageDesign:(id)fp8;
- (id)allPageElements;
- (id)textElements:(BOOL)fp8;
- (id)editableTextElements:(BOOL)fp8;
- (id)preservedPageText;
- (void)copyTextFromTextElements:(id)fp8;
- (void)copyTextFromTextElements:(id)fp8 copyFormatting:(BOOL)fp12;
- (void)copyTextFromTextElements:(id)fp8 copyFormatting:(BOOL)fp12 copyAlignment:(BOOL)fp16;
- (BOOL)hasCheckedForClipping;
- (void)setHasCheckedForClipping:(BOOL)fp8;
- (void)checkForClipping;
- (id)calendarElements;
- (void)copyDataFromCalendarElements:(id)fp8;
- (id)gridElements;
- (void)adjustGridElementRows:(int)fp8 columns:(int)fp12;
- (id)vectorElements;
- (id)animatedElements;
- (id)nonAnimatedElements;
- (id)guideElements;
- (void)copyPanAndZoomFromElements:(id)fp8;
- (id)alternateElementsForSelectedElement;
- (void)changeSelectedElementsToElementWithDictionary:(id)fp8;
- (void)replaceEmbeddedPagesWithPage:(id)fp8 reflow:(BOOL)fp12;
- (void)leftAlignSelectedElements;
- (void)rightAlignSelectedElements;
- (void)topAlignSelectedElements;
- (void)bottomAlignSelectedElements;
- (void)alignSelectedElementsInColumn;
- (void)alignSelectedElementsInRow;
- (void)makeSelectedElementsEqualWidth;
- (void)makeSelectedElementsEqualHeight;
- (void)distributeSelectedElementsHorizontally;
- (void)distributeSelectedElementsVertically;
- (struct IPPageElementEdges)alignmentHintsForElement:(id)fp8 exact:(BOOL)fp12;
- (BOOL)hasClippedText;
- (void)resizedImageCheck;
- (BOOL)hasLowQualityImages;
- (id)selection;
- (id)orderedSelection;
- (id)xOrderedSelection;
- (id)yOrderedSelection;
- (void)addToSelection:(id)fp8;
- (void)removeFromSelection:(id)fp8;
- (void)selectAll;
- (void)clearSelection;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (id)backgroundTextureColor;
- (void)setBackgroundTextureColor:(id)fp8;
- (int)backgroundTextureColorBlendMode;
- (void)setBackgroundTextureColorBlendMode:(int)fp8;
- (int)backgroundImageMethod;
- (void)setBackgroundMethod:(int)fp8;
- (struct _NSSize)backgroundTileSize;
- (void)setBackgroundTileSize:(struct _NSSize)fp8;
- (float)backgroundTileRotation;
- (id)backgroundImageName;
- (void)setBackgroundImageName:(id)fp8 method:(int)fp12;
- (id)backgroundThumbnailName;
- (void)setBackgroundThumbnailName:(id)fp8;
- (int)backgroundBlendMode;
- (void)setBackgroundBlendMode:(int)fp8;
- (id)backgroundPageDesign;
- (id)backgroundPage;
- (void)setBackgroundPage:(id)fp8;
- (id)backgroundVariants;
- (void)applyVariantToElementsForBackground:(id)fp8;
- (void)setBackgroundPageDesign:(id)fp8 icon:(id)fp12 notify:(BOOL)fp16;
- (BOOL)mirrorBackgroundHorizontally;
- (BOOL)mirrorBackgroundVertically;
- (void)_notify:(id)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 forView:(id)fp28 withBleed:(float)fp32 alpha:(float)fp36 scale:(float)fp40 drawSelection:(BOOL)fp44 resolution:(int)fp48;
- (void)_drawInContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 forView:(id)fp28 withBleed:(float)fp32 alpha:(float)fp36 scale:(float)fp40 drawSelection:(BOOL)fp44 resolution:(int)fp48;
- (void)drawElements:(id)fp8 inContext:(struct CGContext *)fp12 inRect:(struct _NSRect)fp16 forView:(id)fp32 withBleed:(float)fp36 alpha:(float)fp40 scale:(float)fp44 drawSelection:(BOOL)fp48 resolution:(int)fp52 flipX:(BOOL)fp56;
- (void)drawSelectionInContext:(struct CGContext *)fp8 scale:(float)fp12 aboveElements:(BOOL)fp16;
- (void)updatePageImageCacheForView:(id)fp8 withBleed:(float)fp12 alpha:(float)fp16 scale:(float)fp20 drawSelection:(BOOL)fp24 resolution:(int)fp28;
- (struct CGLayer *)pageImageCache;
- (BOOL)backgroundDrawingDisabled;
- (void)setBackgroundDrawingDisabled:(BOOL)fp8;
- (float)minimumAnimatedSceneDuration;
- (float)animatedSceneDurationFactor;
- (BOOL)includeBackgroundInAnimation;
- (void)_clearPageImageCache;
- (id)thumbnail:(struct _NSRect)fp8;
- (void)invalidateThumbnail;
- (void)rebuildThumbnail:(struct _NSRect)fp8;
- (void)drawTextAtScale:(float)fp8 inImage:(id)fp12 offset:(struct _NSPoint)fp16;
- (void)unloadCachedObjects;
- (void)_releaseElements;
- (void)releasePageNumberElements;
- (void)_prepareElementsForDealloc:(id)fp8;
- (void)prepareForDealloc;
- (void)dealloc;
- (id)description;
- (BOOL)validate:(id)fp8;

@end

@interface IPTemplate : NSObject
{
    CachedBundle *mTheme;
    IPBook *mPrototypeBook;
    NSString *mThemeName;
    NSArray *mVisiblePageDesignTags;
    NSDictionary *mRenamedPagesDict;
    NSMutableArray *mPageTypes;
    NSMutableDictionary *mPageTypeDict;
    NSString *mDefaultJacketFront;
    NSString *mDefaultJacketFrontFlap;
    NSString *mDefaultJacketBack;
    NSString *mDefaultJacketBackFlap;
    BOOL mHasDustJacket;
    NSMutableArray *mFirstPages;
    NSMutableArray *mCyclePages;
    IPPage *mCustomCyclePage;
    NSMutableArray *mLastPages;
    BOOL mRandomizeCyclePages;
    NSMutableDictionary *mTextStyles;
    NSArray *mTextStyleNames;
    NSArray *mVisibleTextStyleNames;
    NSMutableDictionary *mColors;
    NSMutableDictionary *mPageTypeIcons;
    struct _NSSize mBookSize;
    struct _NSSize mBookCoverSize;
    float mBleed;
    int mLastPrototypePage;
    NSMutableArray *mMasterBackgrounds;
    NSMutableArray *mMasterCoverBackgrounds;
    NSMutableArray *mMasterFlapBackgrounds;
    NSMutableArray *mMasterFrames;
    NSMutableArray *mPagePositions;
    BOOL mAnimatePagePositionPaths;
    float mPagePositionPause;
    NSColor *mPagePositionPathColor;
    float mPagePositionPathWidth;
    struct _NSSize mAnimatedBackgroundOverdraw;
    int mPageScalingMethod;
    BOOL mPreventEmptyHoles;
    BOOL mLeadingEnabled;
    float mPreloadingDrawScale;
    NSMutableArray *mPreloadedScales;
    BOOL mArtCachingDisabled;
    BOOL mThemeFlexerEnabled;
    NSDictionary *mImplementationDict;
    int mMinimumPageCount;
    NSString *_productTypeString;
    int _productType;
    BOOL mIsContactSheet;
    BOOL mIsWireBound;
    BOOL mUsePreciseTiling;
}

+ (unsigned char)_themeIsLegacy:(id)fp8;
+ (int)legacyThemeCount;
+ (int)rankingForTheme:(id)fp8;
+ (id)localizedNameForTheme:(id)fp8;
+ (id)productTypeForTheme:(id)fp8;
+ (id)siblingNameForTheme:(id)fp8;
+ (id)activeTemplate;
+ (id)defaultBrandedPageForSize:(struct _NSSize)fp8;
+ (id)_appWillTerminate;
+ (void)_saveThemeCache;
+ (BOOL)_restoreThemeCache;
+ (void)findAvailableThemes;
+ (void)addThemeBundle:(id)fp8 replace:(BOOL)fp12;
+ (id)replaceTheme:(id)fp8 withThemeAtPath:(id)fp12;
+ (BOOL)_addGlobalTheme:(id)fp8 replace:(BOOL)fp12;
+ (BOOL)_addUpdatedTheme:(id)fp8;
+ (void)_addTheme:(id)fp8 toArray:(id)fp12;
+ (void)_addCardTheme:(id)fp8 toDict:(id)fp12;
+ (void)_sortThemesByRanking;
+ (void)_markUpdatedTheme:(id)fp8 updatedTheme:(id)fp12 existingTheme:(id)fp16;
+ (id)findUpdatedThemes:(id)fp8;
+ (id)hardcoverThemeCategories;
+ (id)softcoverThemeCategories;
+ (id)wireboundThemeCategories;
+ (id)calendarThemeCategories;
+ (id)cardThemeCategories;
+ (id)cutSheetThemeCategories;
+ (id)slideshowThemeCategories;
+ (id)availableThemesForHardcoverCategory:(id)fp8;
+ (id)availableThemesForSoftcoverCategory:(id)fp8;
+ (id)availableThemesForWireboundCategory:(id)fp8;
+ (id)availableThemesForCalendarCategory:(id)fp8;
+ (id)keywordsForCardCategory:(id)fp8;
+ (id)availableThemesForCardCategory:(id)fp8 andKeyword:(id)fp12;
+ (id)availableThemesForCutSheetCategory:(id)fp8;
+ (id)availableThemesForSlideshowCategory:(id)fp8;
+ (id)matchingBundleForCategory:(id)fp8 hardcover:(BOOL)fp12 bundle:(id)fp16;
+ (void)insertThemePath:(id)fp8 atIndex:(unsigned int)fp12;
+ (id)themeBundlePaths;
+ (id)themeBundleWithName:(id)fp8;
+ (id)implementationForTheme:(id)fp8;
+ (id)prototypeForTheme:(id)fp8;
+ (id)relativeResourcePath:(id)fp8;
+ (id)defaultPrintingTheme;
+ (id)artCache;
- (id)initWithBundle:(id)fp8;
- (void)preloadResourcesAtScale:(float)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8;
- (id)localizedStringForKey:(id)fp8;
- (id)themePreview;
- (id)alternateThemePreview;
- (id)themeTextPreview;
- (int)lastPrototypePageIndex;
- (void)setLastPrototypePageIndex:(int)fp8;
- (BOOL)hasDustJacket;
- (id)dustJacketFront;
- (id)dustJacketFrontFlap;
- (id)dustJacketBack;
- (id)dustJacketBackFlap;
- (id)firstPages;
- (id)cyclePages;
- (id)lastPages;
- (id)masterBackgrounds;
- (id)masterCoverBackgrounds;
- (id)masterFlapBackgrounds;
- (id)masterFrames;
- (void)setThemeFlexerEnabled:(BOOL)fp8;
- (id)siblingTheme;
- (void)setMinimumPageCount:(int)fp8;
- (BOOL)isContactSheet;
- (BOOL)isDeprecatedTheme;
- (void)_tileIntoContext:(struct CGContext *)fp8 withImage:(struct CGImage *)fp12 atSize:(struct CGSize)fp16 tileSize:(struct CGSize)fp24;
- (void)_drawBackgroundTextureIntoContext:(struct CGContext *)fp8 withImage:(struct CGImage *)fp12 atSize:(struct _NSSize)fp16 tileSize:(struct _NSSize)fp24;
- (struct CGLayer *)layerForBackgroundTextureNamed:(id)fp8 size:(struct _NSSize)fp12 scale:(float)fp20 tileSize:(struct _NSSize)fp24 destContext:(struct CGContext *)fp32 shouldCache:(BOOL)fp36;
- (id)resourceNamed:(id)fp8;
- (struct IPFileImage *)imageResourceNamed:(id)fp8 forSize:(struct _NSSize)fp12 useLowRes:(BOOL)fp20;
- (id)pathForThemeResource:(id)fp8;
- (struct CGImage *)backgroundImageResourceForPage:(id)fp8 forSize:(struct _NSSize)fp12 useLowRes:(BOOL)fp20;
- (BOOL)hasPreloadedArtElementsAtScale:(float)fp8;
- (void)preloadArtElementsForBook:(id)fp8 pages:(id)fp12 atScale:(float)fp16;
- (void)preloadArtElementsForBook:(id)fp8 atScale:(float)fp12;
- (void)releaseArtElementsForBook:(id)fp8 atScale:(float)fp12;
- (void)releaseAllArtElementsForBook:(id)fp8;
- (void)releaseBackgroundTextureCache;
- (void)_removeCachedArtElement:(id)fp8 size:(struct _NSSize)fp12;
- (void)_preloadArtElementsInQueue:(id)fp8;
- (void)_queuePreloadForImage:(id)fp8 forSize:(struct _NSSize)fp12 inQueue:(id)fp20;
- (void)setArtCachingDisabled:(BOOL)fp8;
- (id)pageTypes;
- (id)pageTypeWithPrefix:(id)fp8 suffix:(id)fp12;
- (id)visiblePagesForPageType:(id)fp8;
- (id)blankPageForPage:(id)fp8;
- (BOOL)pageDesignIsVisibleInTemplate:(id)fp8;
- (id)localizedPageTypeDescription:(id)fp8;
- (id)pageOfType:(id)fp8 forPage:(id)fp12;
- (id)iconForPageType:(id)fp8;
- (BOOL)pagePositionIsDefined;
- (BOOL)animatePagePositionPaths;
- (float)pagePositionPause;
- (id)pagePositionPathColor;
- (float)pagePositionPathWidth;
- (struct _NSPoint)positionForPageIndex:(int)fp8;
- (struct _NSSize)animatedBackgroundOverdraw;
- (id)productDimension;
- (id)prototype;
- (void)setTheme:(id)fp8;
- (id)themeName;
- (id)bundleName;
- (id)themeCategory;
- (id)themeBundle;
- (id)visiblePageDesignTags;
- (id)textStyles;
- (id)textStyleNames;
- (id)visibleTextStyleNames;
- (id)textStyleWithName:(id)fp8;
- (void)encodeTextStylesInDictionary:(id)fp8;
- (void)restoreTextStylesFromDictionary:(id)fp8;
- (void)revertTextStylesToTemplateDefaults;
- (id)colorWithName:(id)fp8;
- (struct _NSSize)bookSize;
- (struct _NSSize)bookCoverSize;
- (float)bleedAllowance;
- (BOOL)printsPageNumbers;
- (BOOL)isDoubleSided;
- (BOOL)canDoSimplex;
- (BOOL)alternatesPages;
- (BOOL)shouldPreventEmptyHoles;
- (BOOL)leadingEnabled;
- (int)maximumPageCount;
- (id)productType;
- (int)productTypeCode;
- (BOOL)isHardcoverBookProduct;
- (BOOL)isBookProduct;
- (BOOL)isWireBound;
- (void)setWireBound:(BOOL)fp8;
- (BOOL)isCalendarProduct;
- (BOOL)isCardProduct;
- (BOOL)isPostcardProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (BOOL)usePreciseTiling;
- (int)contentScalingMethod;
- (void)fillBook:(id)fp8 withPhotos:(struct IPPhotoList *)fp12 onePerPage:(BOOL)fp16 removeExisting:(BOOL)fp20 manipulateCover:(BOOL)fp24;
- (int)fillBook:(id)fp8 fromPage:(id)fp12 withPhotos:(struct IPPhotoList *)fp16 manipulateCover:(BOOL)fp20;
- (void)_ensureMinimumPagesForBook:(id)fp8;
- (void)_removeFrontAndBackPagesForBook:(id)fp8;
- (void)_ensureFrontAndBackPagesForBook:(id)fp8;
- (void)_runThemeFlexerForBook:(id)fp8;
- (void)_flexBookPages:(id)fp8 excludingProcessed:(id)fp12 forBook:(id)fp16;
- (void)_placeFlexerImagesInPage:(id)fp8 iteration:(int)fp12;
- (id)customCyclePage;
- (void)setCustomCyclePage:(id)fp8;
- (id)blankPlaceholderPage;
- (id)nextPrototypePageForBook:(id)fp8;
- (id)selectFromAlternatesForPage:(id)fp8 withPhotos:(struct IPPhotoList *)fp12 forBook:(id)fp16 traverse:(BOOL)fp20;
- (BOOL)canUsePage:(id)fp8 forPhotos:(struct IPPhotoList *)fp12;
- (id)newNameForPageDesign:(id)fp8;
- (void)dealloc;
- (void)_ensureImplementationDict;
- (void)_loadTemplateInfo;
- (void)_adjustScaleOfElements:(id)fp8 toHorizontalScale:(float)fp12 verticalScale:(float)fp16;
- (void)_loadPageTypes;
- (void)_validateTemplate:(id)fp8;

@end

@interface CachedBundle : NSBundle <NSCoding>
{
    BOOL mRankingIsCached;
    BOOL mNameIsCached;
    BOOL mProductTypeIsCached;
    BOOL mSiblingIsCached;
    BOOL mImplementationIsCached;
    BOOL mPrototypeIsCached;
    int mRanking;
    NSString *mName;
    NSString *mProductType;
    NSString *mSibling;
    NSMutableDictionary *mImplementation;
    NSMutableDictionary *mPrototype;
    NSDictionary *mUpdateDescription;
    int mStatus;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)rankingIsCached;
- (int)cachedRanking;
- (void)setCachedRanking:(int)fp8;
- (BOOL)nameIsCached;
- (id)cachedName;
- (void)setCachedName:(id)fp8;
- (BOOL)productTypeIsCached;
- (id)cachedProductType;
- (void)setCachedProductType:(id)fp8;
- (BOOL)siblingIsCached;
- (id)cachedSibling;
- (void)setCachedSibling:(id)fp8;
- (BOOL)implementationIsCached;
- (id)cachedImplementation;
- (void)setCachedImplementation:(id)fp8;
- (BOOL)prototypeIsCached;
- (id)cachedPrototype;
- (void)setCachedPrototype:(id)fp8;
- (id)updateDescription;
- (void)setUpdateDescription:(id)fp8;
- (int)status;
- (void)setStatus:(int)fp8;

@end

@interface IPArtElement : IPPageElement
{
    NSString *mImageName;
    NSString *mThumbnailName;
    BOOL mIsBranding;
    BOOL mOverrideVisibilitySetting;
}

- (BOOL)isArtElement;
- (id)initWithImageNamed:(id)fp8;
- (id)initWithImage:(struct IPFileImage *)fp8 name:(id)fp12;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (id)imageName;
- (void)setImageName:(id)fp8;
- (id)thumbnailName;
- (void)setThumbnailName:(id)fp8;
- (BOOL)elementIsBranding;
- (void)setElementIsBranding:(BOOL)fp8;
- (void)overrideVisibilitySetting:(BOOL)fp8;
- (BOOL)isLocked;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)validate:(id)fp8;
- (id)description;
- (void)unloadCachedObjects;
- (struct CGImage *)_getImageForResolution:(int)fp8 scale:(float)fp12;
- (void)dealloc;

@end

@interface IPCompoundElement : IPPageElement
{
    IPPageElement *mBackingMask;
    IPPageElement *mPrimaryElement;
    IPPageElement *mOverlayMask;
    struct CGImage *mCompositedImage;
    struct CGImage *mCompositedThumb;
    float mCompositedImageScale;
    float mLeftInset;
    float mRightInset;
    float mTopInset;
    float mBottomInset;
    float mAbsoluteLeftInset;
    float mAbsoluteRightInset;
    float mAbsoluteTopInset;
    float mAbsoluteBottomInset;
    float mUniformInset;
    BOOL mInsetSelection;
}

- (BOOL)isCompoundElement;
- (id)initWithElement:(id)fp8 overlay:(id)fp12 backing:(id)fp16;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setParent:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (float)imageAspectRatio;
- (id)draggingImage:(struct _NSSize)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)applyVariant;
- (void)setDidApplyVariant:(BOOL)fp8;
- (BOOL)applyVariantForBackground:(id)fp8;
- (id)backingMask;
- (id)primaryElement;
- (id)overlayMask;
- (BOOL)drawsHighlightBorder;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustVariantToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (void)setRotation:(float)fp8;
- (void)setAlpha:(float)fp8;
- (struct _NSRect)insetRect:(float)fp8;
- (void)insetRight:(float)fp8 left:(float)fp12 top:(float)fp16 bottom:(float)fp20;
- (float)leftInset;
- (float)rightInset;
- (float)topInset;
- (float)bottomInset;
- (float)absoluteLeftInset;
- (float)absoluteRightInset;
- (float)absoluteTopInset;
- (float)absoluteBottomInset;
- (float)uniformInset;
- (BOOL)shouldInsetSelection;
- (BOOL)shouldZoom;
- (float)zoom;
- (void)setZoom:(float)fp8;
- (struct _NSPoint)pan;
- (struct _NSPoint)maxPan;
- (void)setPan:(struct _NSPoint)fp8;
- (BOOL)panX:(float)fp8 Y:(float)fp12;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (void)_syncLayers;
- (void)clearElementCache:(BOOL)fp8;
- (void)_updateCompositedImage:(float)fp8 scale:(float)fp12 resolution:(int)fp16;
- (void)_updateCompositedThumb:(float)fp8 scale:(float)fp12;
- (struct CGImage *)_compositeImageWithAlpha:(float)fp8 forScale:(float)fp12 resolution:(int)fp16;
- (void)unloadCachedObjects;
- (BOOL)validate:(id)fp8;
- (void)dealloc;

@end

@interface IPTextElement : IPPageElement
{
    NSString *mRawText;
    NSString *mRawTextType;
    NSString *mDefaultText;
    NSMutableAttributedString *mAttributedString;
    NSMutableAttributedString *mAttributedStringHUD;
    IPTextElementStyle *mTextStyle;
    BOOL mMakeUpperCase;
    IPTextElementView *mTextEditor;
    IPTextElementView *mSecondaryEditor;
    BOOL mIsBookTitle;
    BOOL mIsBookSubtitle;
    BOOL mRequiresUserEdit;
    BOOL mIsSpecialPurpose;
    BOOL mShouldRequireUserEdit;
    BOOL mShouldInvertColor;
    BOOL mTextIsChangingInternally;
    BOOL mTextIsClipped;
    NSString *mLocalTextAlignment;
    NSString *mLocalVertTextAlignment;
    NSColor *mLocalTextColor;
    float mVertTextAlignmentWeight;
    BOOL mShouldDrawGuides;
    BOOL mShouldShrinkToFit;
    BOOL mLastSkipConvert;
    IPPageElement *_captionOwner;
}

- (BOOL)isTextElement;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)setParent:(id)fp8;
- (void)_observeNotifications;
- (id)textStyle;
- (void)setTextStyle:(id)fp8;
- (id)rawText;
- (void)setRawText:(id)fp8;
- (id)rawTextType;
- (void)setRawTextType:(id)fp8;
- (id)attributedString;
- (id)attributedString:(BOOL)fp8;
- (void)setAttributedString:(id)fp8;
- (int)textAlignment;
- (int)verticalTextAlignment;
- (float)verticalTextAlignmentWeight;
- (BOOL)shouldShrinkTextToFit;
- (void)setShouldShrinkTextToFit:(BOOL)fp8;
- (void)copyTextFromTextElement:(id)fp8 copyFormatting:(BOOL)fp12 copyAlignment:(BOOL)fp16;
- (void)reconvertRawText;
- (void)replaceTextWithString:(id)fp8;
- (void)replaceTextWithAttributedString:(id)fp8;
- (void)fillElementWithString:(id)fp8;
- (id)textAttributes;
- (void)setSourceElement:(id)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)installEditorForView:(id)fp8;
- (void)installSecondaryEditorForView:(id)fp8;
- (id)textEditor;
- (id)secondaryEditor:(BOOL)fp8;
- (id)testEditor;
- (id)_makeTextElementView:(BOOL)fp8 forHUD:(BOOL)fp12;
- (BOOL)isBookTitle;
- (BOOL)isBookSubtitle;
- (BOOL)requiresUserEdit;
- (void)setRequiresUserEdit:(BOOL)fp8;
- (BOOL)isSpecialPurpose;
- (BOOL)hasUserText;
- (BOOL)shouldConvertToUppercase;
- (BOOL)shouldInvertColor;
- (BOOL)textIsClipped;
- (id)localTextAlignment;
- (id)localVertTextAlignment;
- (id)localTextColor;
- (BOOL)shouldDrawGuides;
- (void)checkForClipping;
- (void)textDidChange:(id)fp8;
- (void)textDataChanged;
- (void)textStyleChanged;
- (void)_updateTextStyle;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)setSelected:(BOOL)fp8;
- (void)selectInParent:(BOOL)fp8;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)isLocked;
- (id)_convertRawText;
- (void)_bookContentsChanged:(id)fp8;
- (void)_pageNumberingChanged:(id)fp8;
- (void)dealloc;
- (id)captionOwner;
- (void)setCaptionOwner:(id)fp8;

@end

@interface SuperInfo : InfoView
{
    NSMutableArray *mTrackingRectTagArray;
    NSView *mTrackingView;
    float mVerticalSpaceUsed;
    NSView *mFirstKeyableView;
    NSView *mPreviousKeyableView;
    NSString *mOriginalDateFormatString;
    NSString *mShortDateFormatString;
    NSString *mShortTimeFormatString;
    NSString *mShortDateTimeOrdering;
    NSMutableDictionary *mDateParsingDict;
    BOOL mIsHUD;
    int mMode;
    BOOL mIgnoreUpdates;
    float mLabelWidth;
    int mIndexOfPublishURLLabel;
    int mIndexOfImageURLLabel;
    struct IPSelectable *mSinglePhotoInfo;
    Album *mSingleAlbumInfo;
    InfoTextField *mCaptionEdit;
    InfoTextField *mDateEdit;
    NSTokenField *mKeywordEdit;
    InfoTextField *mTimeEdit;
    InfoTextField *mURLEdit;
    InfoTextField *mCommentsEdit;
    StarRatingControl *mRatingEdit;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)setIsHUD:(BOOL)fp8;
- (BOOL)_checkForChangedDateLayout;
- (id)_activelyEditingInfo;
- (id)foregroundColor;
- (id)backgroundColor;
- (void)setForegroundColor;
- (void)setBackgroundColor;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (float)_topMargin;
- (id)_addInfoLabel:(id)fp8 tokens:(id)fp12 allTokens:(id)fp16 editable:(BOOL)fp20;
- (id)_addInfoLabel:(id)fp8 text:(id)fp12 editable:(BOOL)fp16;
- (id)_addComments:(id)fp8 editable:(BOOL)fp12;
- (void)_updateDataMultipleImage:(struct IPPhotoList *)fp8 forFolder:(id)fp12 forAllEventsAlbum:(id)fp16;
- (void)_updateDataSingleDate:(struct IPSelectable *)fp8 forEditing:(BOOL)fp12;
- (id)dateString:(struct IPPhotoInfo *)fp8;
- (id)timeString:(struct IPPhotoInfo *)fp8;
- (void)_updateDataSingleImage:(struct IPPhotoInfo *)fp8 forEditing:(BOOL)fp12;
- (void)updateData:(BOOL)fp8;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)_removeTrackingRects;
- (struct _NSRect)_trackingRectForView:(id)fp8;
- (void)_addTrackingRects;
- (void)_clearTrackingView;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_keywordControlChanged:(id)fp8;
- (void)_ratingControlChanged:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)controlTextDidEndEditing:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)undoRedoTextEditing:(id)fp8 withState:(id)fp12;
- (void)textDidChange:(id)fp8;
- (float)minimumHeight;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (void)beginAnimation;
- (void)endAnimation;
- (void)_removeContentSubviews;

@end

@interface ExternalEdit : Edit
{
    NSWindow *mWindow;
    NSWindow *mSmallWindow;
    NSMenu *mResizeMenu;
    NSMutableArray *mImageEditNibObjects;
    struct _NSRect mSmallFrame;
    BOOL mClosingForZoom;
    IPToolbarItem *mResizeMenuButton;
}

- (void)zoom:(id)fp8;
- (void)dealloc;
- (void)updateSizer:(float)fp8;
- (void)resetCurrentImageAndUI:(BOOL)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (void)_doCommandRotateImagesByDegrees:(float)fp8;
- (void)rotateImage:(id)fp8;
- (void)refreshRAW;

@end

@interface IPImageIO : NSObject
{
}

+ (id)sharedImageIO;
+ (void)releaseSharedImageIO;
- (struct __CFArray *)supportedExtensionsOfType:(struct __CFString *)fp8;
- (BOOL)isSupportedExtension:(struct __CFString *)fp8 usingType:(struct __CFString *)fp12;
- (BOOL)isExtension:(struct __CFString *)fp8 ofType:(struct __CFString *)fp12 forPath:(id)fp16;
- (unsigned long)formatForExtension:(struct __CFString *)fp8;
- (struct __CFString *)extensionForFormat:(unsigned long)fp8 usingType:(struct __CFString *)fp12;
- (unsigned long)imageSourceGetTypeID;
- (struct __CFArray *)imageSourceCopyTypeIdentifiers;
- (struct CGImageSource *)imageSourceCreateWithDataProvider:(struct CGDataProvider *)fp8 options:(struct __CFDictionary *)fp12;
- (struct CGImageSource *)imageSourceCreateWithData:(struct __CFData *)fp8 options:(struct __CFDictionary *)fp12;
- (struct CGImageSource *)imageSourceCreateWithURL:(struct __CFURL *)fp8 options:(struct __CFDictionary *)fp12;
- (unsigned long)imageSourceGetCount:(struct CGImageSource *)fp8;
- (struct __CFString *)imageSourceGetType:(struct CGImageSource *)fp8;
- (struct __CFDictionary *)imageSourceGetProperties:(struct CGImageSource *)fp8 options:(struct __CFDictionary *)fp12;
- (struct __CFDictionary *)imageSourceGetProperties:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImage *)imageSourceCreateImage:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImage *)imageSourceCreateThumbnail:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImageSource *)imageSourceCreateIncremental:(struct __CFDictionary *)fp8;
- (void)imageSourceUpdate:(struct CGImageSource *)fp8 dataProvider:(struct CGDataProvider *)fp12 final:(BOOL)fp16;
- (void)imageSourceUpdate:(struct CGImageSource *)fp8 data:(struct __CFData *)fp12 final:(BOOL)fp16;
- (int)imageSourceGetStatus:(struct CGImageSource *)fp8;
- (int)imageSourceGetStatus:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12;
- (struct __CFString *)getTypeWithExtension:(struct __CFString *)fp8;
- (struct __CFString *)getTypeWithDataProvider:(struct CGDataProvider *)fp8 hint:(struct __CFString *)fp12 insufficientData:(_Bool *)fp16;
- (struct __CFString *)getTypeWithData:(struct __CFData *)fp8 hint:(struct __CFString *)fp12 insufficientData:(_Bool *)fp16;
- (struct __CFString *)getTypeWithURL:(struct __CFURL *)fp8 hint:(struct __CFString *)fp12;
- (struct __CFArray *)copyTypeExtensions:(struct __CFString *)fp8;
- (unsigned long)imageDestinationGetTypeID;
- (struct __CFArray *)imageDestinationCopyTypeIdentifiers;
- (struct CGImageDestination *)imageDestinationCreateWithDataConsumer:(struct CGDataConsumer *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (struct CGImageDestination *)imageDestinationCreateWithData:(struct __CFData *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (struct CGImageDestination *)imageDestinationCreateWithURL:(struct __CFURL *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (void)imageDestination:(struct CGImageDestination *)fp8 setProperties:(struct __CFDictionary *)fp12;
- (void)imageDestination:(struct CGImageDestination *)fp8 addImage:(struct CGImage *)fp12 properties:(struct __CFDictionary *)fp16;
- (void)imageDestination:(struct CGImageDestination *)fp8 addImageFromSource:(struct CGImageSource *)fp12 index:(unsigned long)fp16 properties:(struct __CFDictionary *)fp20;
- (_Bool)imageDestinationFinalize:(struct CGImageDestination *)fp8;
- (struct __CFArray *)copyImageFormats:(struct __CFString *)fp8;

@end

@interface TransitionController : NSObject <IAIPPluginControllerProtocol>
{
    float mSpeed;
    int mDirection;
    float mForcedOpacity;
    int mFrameCount;
    BOOL mFillScreen;
    float mFontSize;
    NSLock *mSlidePrepThreadLock;
    id mEffect;
    Class mCurrentPluginClass;
    id mRenderer;
    BOOL mRendererSupportsSlideAnimation;
    IPSlideshowPlayerView *mGlView;
    struct _NSRect mGlFrameRect;
    SessionContext *mSession;
    IPSlideshowPlayerView *mSlideshowView;
    NSMutableDictionary *mRenderPlugins;
    NSMutableDictionary *mRenderPluginInfos;
    struct SlideTransformations mTransformA;
    struct SlideTransformations mTransformB;
    struct SlideTransformations *mLoadingTransform;
    TexturedRectangle *mImageA;
    TexturedRectangle *mImageB;
    TexturedRectangle *mImageBBack;
    TexturedRectangle *mTitleImage;
    TexturedRectangle *mCaptionImageA;
    TexturedRectangle *mCaptionImageB;
    TexturedRectangle *mReverseSideTexture;
    struct _NSPoint mCaptionOffsetA;
    struct _NSPoint mCaptionOffsetB;
    struct IPPhotoInfo *mPhotoA;
    struct IPPhotoInfo *mPhotoB;
    long mIndexA;
    long mIndexB;
    Album *mLoadingAlbum;
    BOOL mPhotoBTiled;
    struct _NSRect mRenderRect;
    BOOL mThumbnailPreview;
    BOOL mIsRendering;
    double mPreviewStartTime;
    NSTimer *mPreviewTaskTimer;
    id mSlidehsowPlayerDelegate;
    IPSlideshowPlayer *mPlayer;
    long mSlideIndex;
}

+ (float)checkTextureSize:(float)fp8;
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)init;
- (void)dealloc;
- (void)setDirection:(int)fp8;
- (void)setSpeed:(float)fp8;
- (void)setZoom:(float)fp8 panX:(float)fp12 panY:(float)fp16;
- (void)setAnimatePanAndZoom:(BOOL)fp8 endZoom:(float)fp12 endPanX:(float)fp16 endPanY:(float)fp20;
- (void)setFontSize:(float)fp8;
- (float)fontSize;
- (void)setFillScreen:(BOOL)fp8;
- (BOOL)setupSessionWithRect:(struct _NSRect)fp8 flipped:(BOOL)fp24 pixelFormat:(id)fp28 delegate:(id)fp32;
- (void)playSamplePreviewWithDelegate:(id)fp8 transitionIdentifier:(id)fp12 transitionSpeed:(float)fp16 transitionDirection:(int)fp20 inView:(id)fp24;
- (void)updateSamplePreviewWithDelegate:(id)fp8 album:(id)fp12 inView:(id)fp16;
- (void)updateSamplePreview:(struct IPPhotoList *)fp8 album:(id)fp12 inView:(id)fp16;
- (void)playSamplePreview:(struct IPPhotoList *)fp8 transitionIdentifier:(id)fp12 transitionSpeed:(float)fp16 transitionDirection:(int)fp20 album:(id)fp24 inView:(id)fp28;
- (void)finishSamplePreview;
- (void)_playPreviewTask:(id)fp8;
- (void)reloadImageA:(id)fp8;
- (void)loadPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 threaded:(BOOL)fp16 tiled:(BOOL)fp20;
- (void)_loadImage;
- (void)captureBackSnapshotImage;
- (void)captureFrontSnapshotImage;
- (BOOL)animatingFrontImage;
- (BOOL)animatingBackImage;
- (BOOL)transitionSupportsSlideAnimation;
- (void)renderBackImage;
- (void)serviceBackAnimation:(double)fp8 duration:(double)fp16;
- (void)serviceFrontAnimation:(double)fp8 duration:(double)fp16;
- (void)renderPullTexture:(id)fp8 delegate:(id)fp12 slideIndex:(long)fp16 threaded:(BOOL)fp20;
- (void)_renderThumbnailTextureWithDelegate:(id)fp8 index:(int)fp12;
- (void)_renderPullTexture;
- (id)_loadTexture:(struct IPPhotoInfo *)fp8 album:(id)fp12 tiled:(BOOL)fp16;
- (void)prepareToRenderImage;
- (void)setForcedOpacity:(float)fp8;
- (void)renderImage;
- (void)finishRenderImage:(BOOL)fp8;
- (void)swapImages;
- (struct IPPhotoInfo *)photoA;
- (struct IPPhotoInfo *)photoB;
- (BOOL)setEffectPluginOfName:(id)fp8;
- (BOOL)setTransitionPluginOfIdentifier:(id)fp8 localName:(id)fp12 speed:(float)fp16 direction:(int)fp20 animationSupport:(BOOL)fp24;
- (BOOL)readyToRenderTransition;
- (void)prepareToRenderTransitionFrame;
- (void)finishRenderTransitionFrame:(BOOL)fp8;
- (void)renderTransitionFrame:(float)fp8 of:(float)fp12;
- (void)finishedRenderingTransition;
- (void)applyEffect:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)prepareForRendering:(BOOL)fp8 inView:(id)fp12;
- (void)finishedRendering;
- (Class)currentPluginClass;
- (void)setCurrentPluginClass:(Class)fp8;
- (id)resources:(id)fp8;
- (BOOL)isRendering;
- (void)setIsRendering:(BOOL)fp8;
- (BOOL)isRenderingFirstFrame;
- (void)cancelRender:(id)fp8;
- (float)sineMap:(float)fp8;
- (BOOL)glRendererAccelerationAvailable;
- (unsigned int)glRendererTotalVRAM;
- (unsigned int)glRendererTextureMemory;
- (void)updateSessionRenderer;
- (void)_initRenderer;
- (void)drawTitle;
- (void)drawCaptionAWithOpacity:(float)fp8;
- (void)drawCaptionBWithOpacity:(float)fp8;
- (void)clearCaptionB;
- (void)clearTitle;
- (void)createTextureWithTitle:(id)fp8;
- (void)createTextureWithCaption:(id)fp8 atPosition:(int)fp12 withOffset:(float)fp16;
- (id)createTextureWithString:(id)fp8;
- (id)createTextureWithAttributedString:(id)fp8 ofSize:(struct _NSSize)fp12 inRect:(struct _NSRect)fp20;

@end

@interface NSWindowGraphicsContext (iPhotoAddition)
- (id)initWithCoreGraphicsContext:(struct CGContext *)fp8;
@end

@interface BitmapFilter : EditFilter
{
    struct FilterEventArray *mDraggingEvents;
    unsigned long mBytesPerPixel;
    char *mRasterLarge;
    unsigned long mRowBytesLarge;
    unsigned long mWidthLarge;
    unsigned long mHeightLarge;
    int mRadiusLarge;
    char *mRasterSmall;
    unsigned long mRowBytesSmall;
    unsigned long mWidthSmall;
    unsigned long mHeightSmall;
    int mRadiusSmall;
    float mAngleOfDifference;
    BOOL mWorkingOnRAW;
    float mRedeyeParams[4];
    struct _NSRect mMaskRect;
    int mLastType;
}

+ (id)blemishFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (BOOL)canRebuildAfterUsing;
- (void)initializeWithBytesPerPixel:(unsigned long)fp8 smallRaster:(char *)fp12 smallRowBytes:(unsigned long)fp16 smallWidth:(unsigned long)fp20 smallHeight:(unsigned long)fp24 smallRadius:(int)fp28 largeRaster:(char *)fp32 largeRowBytes:(unsigned long)fp36 largeWidth:(unsigned long)fp40 largeHeight:(unsigned long)fp44 largeRadius:(int)fp48 angleOfDifference:(float)fp52 workingOnRAW:(BOOL)fp56;
- (void)updateSmallRaster:(char *)fp8 smallRowBytes:(unsigned long)fp12 smallWidth:(unsigned long)fp16 smallHeight:(unsigned long)fp20 smallRadius:(int)fp24 fullRaster:(char *)fp28;
- (void)updateLargeRaster:(char *)fp8 largeRowBytes:(unsigned long)fp12 largeWidth:(unsigned long)fp16 largeHeight:(unsigned long)fp20 largeRadius:(int)fp24;
- (struct _NSPoint)rotatePercentageX:(float)fp8 percentageY:(float)fp12 angle:(float)fp16;
- (void)addWhitenBrushX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 usingRadiusFraction:(float)fp24;
- (struct _NSRect)rectCenteredOverPoint:(struct _NSPoint)fp8 withSize:(struct _NSSize)fp16 boundedInSize:(struct _NSSize)fp24;
- (void)paintRaster:(char *)fp8 withRowBytes:(int)fp12 bytesPerPixel:(int)fp16 red:(int)fp20 blue:(int)fp24 green:(int)fp28 atPoint:(struct _NSPoint)fp32 withWidth:(int)fp40 andHeight:(int)fp44;
- (void)initializeReefImage:(struct CReefImage *)fp8 forRaster:(char *)fp12 rowBytes:(int)fp16 boundingRect:(struct _NSRect)fp20;
- (char *)generateMaskForRasterSize:(struct _NSSize)fp8 radius:(float)fp16 maskRect:(struct _NSRect *)fp20;
- (void)fixPointAt:(struct _NSPoint)fp8 withBrushSize:(struct _NSSize)fp16 regionSize:(struct _NSSize)fp24 source:(struct _NSPoint)fp32 imageSize:(struct _NSSize)fp40 raster:(char *)fp48 rowBytes:(unsigned long)fp52 useSource:(BOOL)fp56 blurParms:(struct CReefAutoFixParms)fp60;
- (void)addX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 usingRadiusFraction:(float)fp24 sourceX:(float)fp28 sourceY:(float)fp32;
- (void)addEventWithX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 operatingOnFull:(BOOL)fp24 usingRadiusFraction:(float)fp28 sourceX:(float)fp32 sourceY:(float)fp36;
- (void)addWhitenBrushEventWithX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 operatingOnFull:(BOOL)fp24 usingRadiusFraction:(float)fp28;
- (void)addRedEyeEventWithX:(float)fp8 Y:(float)fp12 params:(float *)fp16;
- (void)addEventWithCropRect:(struct _NSRect)fp8;
- (void)redEyeWithX:(float)fp8 Y:(float)fp12 operatingOnFull:(BOOL)fp16 params:(float *)fp20;
- (void)redEyeWithCropRect:(struct _NSRect)fp8;
- (id)name;
- (void)dealloc;
- (void)performEdits:(id)fp8;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;

@end

@interface CropEditFilter : EditFilter
{
    struct _NSRect mCurrentRect;
    CIFilter *mCropFilter;
    CIFilter *mTransformFilter;
}

+ (id)cropFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (BOOL)oneTimeFilter;
- (void)setCropRect:(struct _NSRect)fp8 absoluteWidth:(float)fp24 absoluteHeight:(float)fp28 ignoreForUndo:(BOOL)fp32;
- (void)setCropRect:(struct _NSRect)fp8;
- (BOOL)canRebuildAfterUsing;
- (id)chainWithImage:(id)fp8;
- (BOOL)filterScales;

@end

@interface PreFiltFilter : EditFilter
{
}

+ (id)preFiltFilter;

@end

@interface PostFiltFilter : EditFilter
{
}

+ (id)postFiltFilter;

@end

@interface GammaFilter : HUDSliderFilter
{
}

+ (id)gammaFilter;
- (void)setGamma:(float)fp8;

@end

@interface BlackAndWhitePointsFilter : HUDDoubleSliderFilter
{
    GammaFilter *mGammaFilter;
}

+ (id)blackAndWhitePointsFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setBlackPoint:(float)fp8 whitePoint:(float)fp12 andCenterPoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)resetValues;
- (BOOL)canRebuildAfterUsing;
- (void)dealloc;

@end

@interface HUDDoubleSliderFilter : EditFilter
{
    float mLeftValue;
    float mRightValue;
}

- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface RotationEditFilter : HUDSliderFilter
{
    float mRotation;
    float mWidth;
    float mHeight;
}

+ (id)rotationFilter;
- (void)setTransformWidth:(float)fp8 height:(float)fp12 rotation:(float)fp16;
- (void)adjustWidth:(float)fp8 height:(float)fp12;
- (id)chainWithImage:(id)fp8;
- (float)rotation;
- (void)resetValues;
- (BOOL)canRebuildAfterUsing;
- (BOOL)filterScales;
- (BOOL)chainNormallyForCommit;

@end

@interface NoiseFilter : HUDSliderFilter
{
}

+ (id)noiseFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (void)setNoiseLevel:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface SharpnessFilter : HUDSliderFilter
{
    CIFilter *mCropFilter;
}

+ (id)iPhotoUnsharpMaskFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (void)setSharpness:(float)fp8;
- (BOOL)canRebuildAfterUsing;
- (id)chainWithImage:(id)fp8;

@end

@interface ContrastFilter : HUDSliderFilter
{
}

+ (id)contrastFilter;
- (void)setContrast:(float)fp8 withMean:(float)fp12;
- (BOOL)canRebuildAfterUsing;

@end

@interface BrightnessFilter : HUDSliderFilter
{
}

+ (id)brightnessFilter;
- (void)setBrightness:(float)fp8 withMean:(float)fp12;
- (BOOL)canRebuildAfterUsing;

@end

@interface EmphasisFilter : HUDSliderFilter
{
}

+ (id)emphasisFilter;

@end

@interface TintFilter : HUDSliderFilter
{
}

+ (id)tintFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setTint:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface ColorCorrectionFilter : HUDSliderFilter
{
}

+ (id)colorCorrectionFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setCorrection:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface ExposureFilter : HUDSliderFilter
{
}

+ (id)exposureFilter;
- (void)setExposure:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface LightingFilter : HUDSliderFilter
{
}

+ (id)lightingFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLighting:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface HighlightShadow : HUDSliderFilter
{
    CIFilter *mCropFilter;
}

+ (id)highlightShadowFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (void)setHighlightValue:(float)fp8;
- (void)setShadowValue:(float)fp8;
- (BOOL)canRebuildAfterUsing;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface SaturationFilter : HUDSliderFilter
{
}

+ (id)saturationFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setSaturation:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface RAWTemperatureTintExposureFilter : EditFilter
{
    CIFilter *mAdjustFilter;
    CIFilter *mOtrcFilter;
}

+ (id)RAWTemperatureTintExposureFilter:(id)fp8;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16 RAWInfo:(id)fp20;
- (void)setTemperature:(float)fp8 tint:(float)fp12 andExposure:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (BOOL)canRebuildAfterUsing;

@end

@interface HUDSliderFilter : EditFilter
{
    float mValue;
}

- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (void)resetValues;

@end

@interface EnhanceFilter : EditFilter
{
}

+ (id)enhanceFilter;
- (BOOL)canRebuildAfterUsing;

@end

@interface BlackAndWhiteFilter : HUDOneClickFilter
{
}

+ (id)blackAndWhiteFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface SepiaFilter : HUDOneClickFilter
{
}

+ (id)sepiaFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface FadeFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mExposureFilter;
    float mSaturation;
    float mTemperature;
    float mExposure;
}

+ (id)fadeFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andExposure:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface BoostFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mBlackAndWhitePointFilter;
    float mSaturation;
    float mTemperature;
    float mBlackPoint;
}

+ (id)boostFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andBlackPoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface EdgeBlurFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
}

+ (id)edgeBlurFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface VignetteBlackFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
    float mDefaultIntensity;
}

+ (id)vignetteBlackFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface VignetteWhiteFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
    float mDefaultIntensity;
}

+ (id)vignetteWhiteFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface AntiqueFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mBlackAndWhitePointFilter;
    float mSaturation;
    float mTemperature;
    float mWhitePoint;
}

+ (id)antiqueFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andWhitePoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface HUDOneClickFilter : EditFilter
{
    int mLevel;
}

- (int)level;
- (void)setLevel:(int)fp8;
- (BOOL)filterScales;
- (void)resetValues;
- (void)fullVersion:(id)fp8;
- (void)setWidth:(float)fp8 andHeight:(float)fp12;
- (BOOL)canRebuildAfterUsing;

@end

@interface EditFilter : NSObject
{
    CIFilter *mFilter;
    NSString *mName;
    int mFilterOrder;
}

+ (void)loadQuartzAndCustomFilters;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (int)filterOrder;
- (id)chainWithImage:(id)fp8;
- (id)name;
- (id)filter;
- (BOOL)oneTimeFilter;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (BOOL)canRebuildAfterUsing;
- (BOOL)chainNormallyForCommit;
- (void)resetValues;

@end

@interface InfoTextField : NSTextField
{
    NSString *mSavedString;
    BOOL mMultiline;
    BOOL mAttributed;
    BOOL mEllipsisState;
    NSColor *mUnderlineColor;
}

- (void)dealloc;
- (void)setAttributedStringValue:(id)fp8;
- (void)setSavedString:(id)fp8;
- (id)savedString;
- (void)setUnderlineColor:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setEllipsisState:(BOOL)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)becomeFirstResponder;
- (void)mouseDown:(id)fp8;
- (BOOL)isMultiline;
- (void)setMultiline:(BOOL)fp8;

@end

@interface StarRatingControl : NSControl
{
    NSString *mStarString;
    NSString *mBulletString;
    NSDictionary *mTextAttrs;
    NSDictionary *mTextDimAttrs;
    int mIntValue;
    id mTarget;
    SEL mSelector;
    BOOL mIsTracking;
    struct _NSSize mStarSize;
    BOOL mDrawBorder;
    BOOL mDrawBackground;
    int mMinimumRanking;
    int mMaximumRanking;
    BOOL mShouldAcceptFirstMouse;
    BOOL mShouldHandleKeyDown;
    BOOL mContinuous;
    float mFontSize;
    float mExtraSpacing;
}

- (void)_setup:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 fontSize:(float)fp24;
- (id)initWithFrame:(struct _NSRect)fp8 fontSize:(float)fp24 extraSpacing:(float)fp28;
- (void)adaptToFrame;
- (void)setFontSize:(float)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setShouldAcceptFirstMouse:(BOOL)fp8;
- (void)setShouldHandleKeyDown:(BOOL)fp8;
- (void)setEnabledColor:(id)fp8 disabledColor:(id)fp12;
- (void)setEnabledColor:(id)fp8 disabledColor:(id)fp12 backgroundColor:(id)fp16;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (float)starWidth;
- (float)extraMargin;
- (void)setExtraSpacing:(float)fp8;
- (void)setIntValue:(int)fp8;
- (int)intValue;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (BOOL)isContinuous;
- (void)setContinuous:(BOOL)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isTracking;
- (void)setDrawBackground:(BOOL)fp8;
- (void)setDrawBorder:(BOOL)fp8;
- (int)rankingValue;
- (void)setRankingValue:(int)fp8;
- (int)constrainedRankingValue:(int)fp8;
- (void)setMinimum:(int)fp8 maximum:(int)fp12;

@end

@interface IPSlideshowPlayer : NSObject
{
    ArchiveController *mArchiveController;
    NSMutableArray *mSongPaths;
    struct MovieType **mSongMovie;
    short mSongRefNum;
    long mSongError;
    struct OpaqueGrafPtr *mGworld;
    NSTimer *mSongTaskTimer;
    unsigned int mSongIndex;
    unsigned long mTotalSongDuration;
    double mSongTimeAccumulator;
    double mSlideTimeAccumulator;
    BOOL mFitToMusic;
    BOOL mPlayMusic;
    SlideShowWindow *mWindow;
    IPSlideshowPlayerView *mSlideView;
    BOOL mDoesntOwnSlideView;
    BOOL mFullScreen;
    float mRefreshRate;
    BOOL mInitialized;
    BOOL mFaderInitialized;
    BOOL mPlaying;
    BOOL mPaused;
    BOOL mMousePaused;
    BOOL mLoop;
    BOOL mFillScreen;
    BOOL mShuffle;
    BOOL mAutoPanAndZoom;
    BOOL mSmallWindow;
    BOOL mShowingControls;
    BOOL mShowRankings;
    BOOL mShowingLCDDisplay;
    float mLCDLingerTime;
    BOOL mApplescriptMode;
    struct _CGDirectDisplayID *mDisplay;
    NSOpenGLContext *mCurrentContext;
    NSOpenGLPixelFormat *mPixelFormat;
    struct __CFDictionary *mSavedDisplayMode;
    BOOL mSwitchedDisplayMode;
    struct _NSRect mScreenFrame;
    NSScreen *mScreen;
    LCDOverlayServer *mLCDOverlay;
    struct _NSRect mSlideshowFrame;
    TransitionController *mSlideRenderer;
    IPSlideshow *mSlideshow;
    int mSlideshowPlayState;
    long *mShuffledSlideIndices;
    double mDurationScale;
    double mShowStartTime;
    double mShowPauseTime;
    long mShowSlideIndex;
    double mMinSlidePlayTime;
    double mMinSlideAnimatedPlayTime;
    long mCurrentSlideIndex;
    double mPlaySlideDuration;
    double mPlaySlideStartTime;
    double mPlaySlideCounter;
    double mPlaySlideTotal;
    NSString *mPlayTransitionIdentifier;
    double mCurrentTransitionSpeed;
    double mCurrentTransitionCounter;
    double mCurrentTransitionTotal;
    double mLastTransitionSpeed;
    NSString *mForcedTransitionIdentifier;
    int mForcedTransitionDirection;
    long mNextSlideIndex;
    double mNextSlideDuration;
    double mNextSlideStartTime;
    int mNextSlideRank;
    double mNextSlideCounter;
    double mNextSlideTotal;
    long mEndSlideIndex;
    BOOL mForceTransitionStart;
    BOOL mDisplayFrameUpdateNeeded;
    BOOL mDisplayFrameUpdateAndIMeanIt;
    BOOL mSkipTransitionAndLoadPrevious;
    BOOL mRemoveCurrentSlide;
    double mForcedSlideDuration;
    double mForcedTransitionSpeed;
    BOOL mMusicOnlyOnce;
    BOOL mUseForcedTransitionSpeed;
    double mLCDStartTime;
    int mLCDState;
    BOOL mEventLoop;
    struct _NSPoint mLastMouseLocation;
    double mLastMouseTime;
    BOOL mWokeMouse;
    int mLastControlHit;
    double mLastControlTime;
    double mMousePausedTime;
    BOOL mCursorHidden;
    id mDelegate;
    NSTimer *mSlideshowTaskTimer;
}

- (void)initialize;
- (void)dealloc;
- (id)controller;
- (float)refreshRate;
- (BOOL)preflightMusic:(id)fp8;
- (void)setupMusic:(id)fp8 playlistName:(id)fp12;
- (void)startMusic;
- (void)nextSong;
- (void)stopMusic;
- (void)clearMusic;
- (void)pauseMusic;
- (void)resumeMusic;
- (void)_songTask:(id)fp8;
- (double)_musicTime;
- (void)_songTaskNeededSooner:(long)fp8;
- (void)_stopCurrentSong;
- (void)_playSong;
- (short)_loadSong:(id)fp8;
- (void)_fadeToBlack;
- (void)_fadeToWhite;
- (BOOL)isPlaying;
- (BOOL)isPaused;
- (BOOL)showingInSmallWindow;
- (BOOL)applescriptMode;
- (void)windowWillClose:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)bumpSpeed:(float)fp8;
- (double)_scaledDuration:(double)fp8;
- (void)rankCurrentImage:(int)fp8;
- (BOOL)pointInLCD:(struct _NSPoint)fp8;
- (void)activateLCDAnimateOut;
- (void)activateRank;
- (void)showCursor;
- (void)hideCursor;
- (void)activateControls:(BOOL)fp8;
- (void)playSlideshowPreview:(id)fp8 fromFrame:(long)fp12 toFrame:(long)fp16 inView:(id)fp20 transitionOnly:(BOOL)fp24;
- (void)_slideshowPlayerViewAction:(id)fp8;
- (BOOL)prepareToPlaySlideshow:(id)fp8 fromIndex:(long)fp12 applescriptMode:(BOOL)fp16 displayIndex:(int)fp20;
- (void)playSlideshow;
- (void)_createRandomList;
- (void)_shuffleRandomList;
- (struct _NSPoint)_currentMouse;
- (void)_mouseTask:(id)fp8;
- (void)togglePause;
- (BOOL)handleMousedown:(struct _NSPoint)fp8 withModifiers:(unsigned int)fp16;
- (void)handleMouseUp;
- (void)_previousSlideIndex;
- (void)_nextSlideIndex;
- (long)_slideIndexToActualIndex:(long)fp8;
- (void)rotateCurrentImage:(int)fp8;
- (BOOL)_queueCommand:(int)fp8;
- (int)_pullNextCommand;
- (void)_clearCommandQueue;
- (void)nextSlide:(BOOL)fp8;
- (void)_beginSlidePlay;
- (void)_pauseTime;
- (void)_resumeTime;
- (void)previousSlide:(BOOL)fp8;
- (void)resumeSlideshow;
- (void)pauseSlideshow;
- (void)_loadNextSlideImage;
- (int)_loadSlideForIndex:(long)fp8 threaded:(BOOL)fp12 swapImages:(BOOL)fp16 rank:(int *)fp20 duration:(double *)fp24;
- (void)_slideshowTimerWithFrameRate:(float)fp8;
- (void)_slideshowTask:(id)fp8;
- (void)_stepFrame:(double)fp8;
- (void)_captureBackSnapshotImage;
- (void)_captureFrontSnapshotImage;
- (void)_displayCurrentSlideFrame:(BOOL)fp8 finish:(BOOL)fp12;
- (void)trashCurrentSlide:(BOOL)fp8;
- (void)endSlideshow;
- (void)_eventLoopDuring;
- (void)_eventLoop;
- (id)_canTerminate;
- (void)_registerForSleepNotifications;
- (BOOL)_testTextureSize:(struct _NSSize)fp8;
- (void)_determineMinSlidePlayTimes:(BOOL)fp8;
- (float)_determineMaxSlideshowWidth:(struct _NSSize)fp8;
- (BOOL)_initViewingAreaWithFormat:(int)fp8;
- (void)_fadeFromGamma:(float)fp8 to:(float)fp12 toMusicVolume:(short)fp16 time:(double)fp20;
- (void)_throwCGException;
- (float)_determineRefreshRate:(BOOL)fp8 width:(float)fp12;
- (struct _NSRect)_findDisplayMode:(long)fp8 screenRect:(struct _NSRect)fp12;
- (void)_captureDisplay;
- (void)_releaseDisplay;
- (void)_initFader;
- (void)_setFaderValue:(float)fp8;
- (void)_closeFader;
- (void)_throwGLException;
- (BOOL)_createNewOpenGLContext;
- (void)_setVBLSynch:(BOOL)fp8;
- (void)_removeGL;
- (BOOL)exportSlideshow:(id)fp8 toFile:(id)fp12 size:(struct _NSSize)fp16 frameRate:(float)fp24 progress:(id)fp28;
- (short)_copyMusicToMovie:(struct MovieType **)fp8;
- (void)_applyFadeOutToAudioTrack:(struct TrackType **)fp8 duration:(float)fp12;
- (short)_renderSlideshowIntoMovieTemporal:(struct MovieType **)fp8 track:(struct TrackType **)fp12 media:(struct MediaType **)fp16 storage:(struct ComponentInstanceRecord *)fp20 size:(struct _NSSize)fp24 frameRate:(float)fp32 movieDuration:(long)fp36 progress:(id)fp40;

@end

@interface NSScreen (NSScreenAccess)
- (void)setFrame:(struct _NSRect)fp8;
@end

@interface VAlignedTextFieldCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)_alternateTextColor;
- (id)attributedStringValue;

@end

@interface IPSlideshowPlayerView : NSOpenGLView
{
    id mTd;
    SEL mAction;
    SEL mUpdateAction;
    id mTarget;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (void)setUpdateAction:(SEL)fp8;

@end

@interface SlideShowWindow : NSWindow
{
    id mController;
}

- (BOOL)canBecomeKeyWindow;
- (void)setSlideshowPlayer:(id)fp8;
- (id)controller;
- (void)close;
- (BOOL)validateMenuItem:(id)fp8;
- (void)rotateImage:(id)fp8;
- (void)applyRankingToSelection:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;

@end

@interface IPThumbView : NSView
{
    id mDelegate;
    ArchiveDisplay *mController;
    struct ThumbArray *mThumbs;
    Album *mCurrentAlbum;
    BOOL mVariableWidth;
    BOOL mFixedHeight;
    long mSelectionAnchor;
    long mSelectionExtentStart;
    long mSelectionExtentEnd;
    int mRowsOrColumns;
    BOOL mInDrag;
    NSTimer *mAnimationTimer;
    BOOL mAnimationWasStarted;
    long mDragFromIndex;
    float mDragHoleWidth;
    float mDragHoleHeight;
    long mDropTargetIndex;
    double mAnimationDuration;
    NSColor *mBackgroundColor;
    struct MessageReceiver mMessageReceiver;
    unsigned char mDrawShadow;
    unsigned char mDrawBorder;
    unsigned char mFrameClosedStacks;
    float mThumbGutter;
    float mWidth;
    float mHeight;
    float mMaxWidth;
    float mMaxHeight;
    float mThumbSize;
    float mThumbMaxSize;
    float mATPAnimStart;
    float mATPAnimDest;
    double mATPAnimationStartTime;
    double mATPAnimationDuration;
    NSTimer *mATPAnimationTimer;
    id originalScrollerTarget;
    SEL originalScrollerSelector;
    BOOL mDoNotAnimateNextMove;
    BOOL mIsVertical;
    BOOL _useCustom;
    NSImage *mShelvedBadge;
    struct _NSSize mShelvedBadgeSize;
    NSImage *mHiddenBadge;
    struct _NSSize mHiddenBadgeSize;
    BOOL mDrawPlaceAtExit;
    BOOL mDontDrawHoles;
}

- (id)shelvedBadge;
- (struct _NSSize)shelvedBadgeSize;
- (id)hiddenBadge;
- (struct _NSSize)hiddenBadgeSize;
- (void)setThumbSizeInfo;
- (void)setRowsOrColumns:(int)fp8;
- (struct _NSRect)_calcThumbRect:(struct Thumb *)fp8 thumbSize:(float)fp12 maxThumbSize:(float)fp16 variableHeight:(BOOL)fp20;
- (void)UpdatePreferences:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)setHidden:(BOOL)fp8;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)layoutThumbs:(BOOL)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (void)activateMessageReceiver:(struct MessageSender *)fp8;
- (void)deactivateMessageReceiver;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (void)_calculateSlidesVisibleFrom:(long *)fp8 to:(long *)fp12 hardWay:(BOOL)fp16 useSelection:(BOOL)fp20 whollyVisible:(BOOL)fp24 subRect:(struct _NSRect)fp28;
- (void)awakeFromNib;
- (void)scrollAnimator:(id)fp8;
- (void)animateToPosition:(float)fp8 from:(float)fp12;
- (void)_clearATPAnimationTimer;
- (void)_serviceATPAnimation;
- (void)_cleanUpATPAnimation;
- (BOOL)thumbScrollRectToVisible:(struct _NSRect)fp8;
- (id)getImageDB;
- (struct IPPhotoInfo *)photoInfoForThumb:(struct Thumb *)fp8;
- (BOOL)squareThumbs;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)keyDownIgnoresShiftKey;
- (void)doDeleteKey;
- (void)keyDown:(id)fp8;
- (void)scrollSelectedThumbToVisible;
- (void)scrollThumbToVisible:(long)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)selectNext:(BOOL)fp8;
- (void)selectPrevious:(BOOL)fp8;
- (void)selectFirstAndForceNotify:(BOOL)fp8;
- (void)selectLast;
- (long)countSelected;
- (float)thumbGutter;
- (struct Thumb *)_thumbAtIndex:(long)fp8;
- (long)count;
- (struct IPPhotoList *)selectedPhotos;
- (struct IPPhotoList *)secondarySelectedPhotos;
- (void)dirtyThumbFrame:(struct _NSRect)fp8;
- (void)clearSelection:(BOOL)fp8 secondarySelection:(BOOL)fp12 notify:(BOOL)fp16;
- (void)clearSelectionAndNotify:(BOOL)fp8;
- (void)clearSecondarySelectionAndNotify:(BOOL)fp8;
- (BOOL)setSelectionFrom:(long)fp8 to:(long)fp12;
- (BOOL)setSecondarySelectionFrom:(long)fp8 to:(long)fp12;
- (BOOL)setSelection:(BOOL)fp8 secondarySelection:(BOOL)fp12 index:(long)fp16;
- (BOOL)setSelection:(BOOL)fp8 index:(long)fp12;
- (BOOL)getSelection:(long)fp8;
- (BOOL)getSecondarySelection:(long)fp8;
- (void)_notifySelection:(long)fp8;
- (long)getFirstSelection;
- (long)getLastSelection;
- (BOOL)getNextSelection:(BOOL)fp8 next:(long *)fp12;
- (BOOL)getPreviousSelection:(BOOL)fp8 previous:(long *)fp12;
- (BOOL)getNextSecondarySelection:(BOOL)fp8 next:(long *)fp12;
- (BOOL)getPreviousSecondarySelection:(BOOL)fp8 previous:(long *)fp12;
- (void)selectedIndices:(long **)fp8 count:(long *)fp12;
- (void)setSelectionToIndices:(long *)fp8 count:(long)fp12;
- (void)setSelectionForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhotoInfo:(struct IPPhotoInfo *)fp8 secondarySelect:(BOOL)fp12;
- (void)secondarySelectFrom:(long)fp8 to:(long)fp12 newSelection:(long)fp16;
- (void)addPhotoToSelection:(struct IPPhotoInfo *)fp8;
- (void)reduceMultiSelectTo:(struct IPPhotoInfo *)fp8;
- (long)indexForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (long)exhaustiveIndexForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (long)thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (void)_sizeFrameWidthOrHeight:(float)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)acceptsFirstMouse;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)_animateAHoleAt:(long)fp8;
- (void)_cleanUpAnimation;
- (void)_clearAnimationTimer;
- (void)_serviceAnimation;
- (BOOL)fillPasteboardWithSelectionDeclaresThumbPBoardType;
- (void)_fillPasteboardWithSelection:(id)fp8;
- (unsigned int)_determineDragResult:(id)fp8;
- (void)thumbWillRemove:(long)fp8;
- (void)thumbDidInterject:(long)fp8;
- (void)_pasteFromPasteboard:(id)fp8;
- (BOOL)allowDragReorder;
- (void)_dragSelection:(id)fp8 index:(long)fp12;
- (id)useBlackScroller;
- (void)setUsesCustomBackgroundColor:(BOOL)fp8;
- (void)_backgroundColorChanged:(id)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (BOOL)isVertical;
- (void)setVertical:(BOOL)fp8;
- (BOOL)renderStackFraming;

@end

@interface BurnInfo : InfoView
{
    id mBackgroundView;
    id mNameText;
    id mSelectedText;
    id mUsedText;
    id mFreeText;
    id mCDGauge;
    id mCancelButton;
    DRDevice *mDevice;
    unsigned long long mSelectionSize;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)becomeCurrent;
- (void)startBurn:(id)fp8;
- (void)cancelBurn:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (void)_deviceStatusChanged:(id)fp8;
- (void)updateData:(BOOL)fp8;
- (id)device;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (unsigned long long)_sizeOfImageRecs:(struct IPSelectionList *)fp8;
- (void)_calculateSelectionSize;
- (void)_setCDGaugeForSelection;
- (void)_updateSelected;
- (void)_updateUsed;
- (void)_updateFree;
- (id)undoManagerForTextView:(id)fp8;

@end

@interface IPShShutdownChecker : NSObject
{
}

+ (void)check:(id)fp8;
+ (void)startChecking:(struct SharingContext *)fp8;

@end

@interface SaturationSlider : HUDSlider
{
}

- (void)loadValue:(float)fp8;
- (void)setCurrentValue:(float)fp8;

@end

@interface HUDSlider : ImageSlider
{
    NSTextField *mTextField;
    float mMinLabelValue;
    float mMaxLabelValue;
    NSString *mFormatString;
    NSString *mZeroString;
    BOOL _useSegmentedTrack;
    NSImage *_trackLeft;
    NSImage *_trackFill;
    NSImage *_trackRight;
    BOOL _leftRightGoToEnd;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setMinLabel:(float)fp8 maxLabel:(float)fp12 formatString:(id)fp16 zeroString:(id)fp20;
- (void)setMinLabel:(float)fp8 maxLabel:(float)fp12 formatString:(id)fp16;
- (id)formatString;
- (void)dealloc;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (BOOL)acceptsFirstMouse;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setCurrentValue:(float)fp8;
- (void)loadValue:(float)fp8;
- (void)resetValue;
- (float)defaultValue;
- (void)setLeftRightGoToEnd:(BOOL)fp8;
- (void)leftButtonClicked:(id)fp8;
- (void)rightButtonClicked:(id)fp8;
- (void)setSliderValue:(float)fp8 andSendAction:(BOOL)fp12;
- (BOOL)useSegmentedTrack;
- (void)setUseNoTickTrack;
- (void)setUseSegmentedTrack:(BOOL)fp8;
- (id)trackLeft;
- (void)setTrackLeft:(id)fp8;
- (id)trackFill;
- (void)setTrackFill:(id)fp8;
- (id)trackRight;
- (void)setTrackRight:(id)fp8;

@end

@interface HUDView : NSView
{
    NSString *_pTitle;
    struct _NSPoint _initialWindowPos;
    struct _NSPoint _initialMousePos;
    BOOL _isMovingWindow;
    BOOL _hasDismissButton;
    BOOL _isDismissingWindow;
    BOOL _isAboutToDismiss;
    BOOL _hasShowInspectorButton;
    BOOL _isShowingInspector;
    BOOL _isAboutToShowInspector;
    BOOL _resizesToTitle;
    BOOL _divideSubviews;
    float _opacity;
    BOOL _useTransparency;
    NSAttributedString *_pDisplayStr;
    struct _NSRect _strDrawRect;
    struct _NSRect _strHitRect;
    struct _NSPoint _imagePoint;
    float _alphaValue;
    NSButton *mCloseButton;
    NSButton *mMenuButton;
    id mDelegate;
    NSAttributedString *mMessageAttString;
    NSString *mMessage;
    NSImage *_bgImage;
}

+ (float)titleBarHeight;
+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8;
- (void)performClose:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)initDialogueViewWithOrigin:(struct _NSPoint)fp8 width:(float)fp16 delegate:(id)fp20;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 delegate:(id)fp24 showMenu:(BOOL)fp28 showClose:(BOOL)fp32;
- (void)setDelegate:(id)fp8;
- (void)dealloc;
- (void)defaultsChanged:(id)fp8;
- (id)backgroundColor;
- (float)alphaValue;
- (void)setAlphaValue:(float)fp8;
- (struct _NSPoint)dismissCenter;
- (BOOL)dismissHitCheck:(struct _NSPoint)fp8;
- (struct _NSPoint)inspectorCenter;
- (BOOL)inspectorHitCheck:(struct _NSPoint)fp8;
- (BOOL)menuHitCheck:(struct _NSPoint)fp8;
- (void)resizeToAccomodateSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)moveWindow:(id)fp8;
- (void)didMoveWindow;
- (id)title;
- (BOOL)isDialogue;
- (void)setTitle:(id)fp8;
- (void)setMessage:(id)fp8;
- (BOOL)hasDismissButton;
- (void)setHasDismissButton:(BOOL)fp8;
- (void)setUsesBGArt:(BOOL)fp8 withName:(id)fp12;
- (struct _NSRect)contentRect;
- (void)doHUDMenu:(id)fp8;
- (BOOL)resizesToTitle;
- (void)setResizesToTitle:(BOOL)fp8;
- (BOOL)divideSubviews;
- (void)setDivideSubviews:(BOOL)fp8;
- (BOOL)useTransparency;
- (void)setUseTransparency:(BOOL)fp8;
- (float)opacity;
- (void)setOpacity:(float)fp8;

@end

@interface HUDWindow : DisappearingWindow
{
    BOOL _isFadingOut;
    BOOL _canBecomeKeyWindow;
}

+ (id)HUDWindowWithContentRect:(struct _NSRect)fp8 title:(id)fp24 delegate:(id)fp28 showMenu:(BOOL)fp32 showClose:(BOOL)fp36;
- (id)view;
- (id)backgroundColor;
- (void)setTitle:(id)fp8;
- (void)setCanBecomeKeyWindow:(BOOL)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)hasCloseButton;
- (void)invalidateShadow;
- (BOOL)isExcludedFromWindowsMenu;
- (BOOL)canBecomeMainWindow;
- (void)setIsHUDFadingOut:(BOOL)fp8;
- (void)fadeClosed;
- (void)mouseMoved:(id)fp8;
- (void)sendEvent:(id)fp8;

@end

@interface EditHUDController : NSObject
{
    Edit *mEdit;
    id mTarget;
    HUDView *mMainView;
    HUDView *mMainMenuView;
    NSPanel *mPanel;
    NSPanel *mMenuPanel;
    int mWindowLevel;
    BOOL mCurrentIsRAW;
    id mBrightnessContrastView;
    id mColorView;
    id mCorrectionView;
    id mAdvancedView;
    id mHighlightsShadowsView;
    HUDHistogram *mHistogramView;
    id mButtonView;
    id mEffectsView;
    id mResetButton;
    id mCopySettingsButton;
    id mPasteSettingsButton;
    HUDImageButton *mNeutralPointDropper;
    HUDSlider *mContrastSlider;
    HUDSlider *mExposureSlider;
    HUDSlider *mShadowsSlider;
    HUDSlider *mHighlightsSlider;
    SaturationSlider *mSaturationSlider;
    HUDSlider *mTintSlider;
    id mWhiteBalancePopUp;
    HUDSlider *mTemperatureSlider;
    HUDSlider *mSharpnessSlider;
    HUDSlider *mNoiseSlider;
    HUDDoubleSlider *mLimitsSlider;
    HUDMenu *mMenuView;
    EffectsView *mRealEffectsView;
    BOOL mFreePanel;
    NSView *mAlternateView;
}

- (id)init;
- (void)processingRAW;
- (void)notProcessingRAW;
- (void)processingRAWTemp:(float)fp8 tint:(float)fp12 andExposure:(float)fp16;
- (void)resetNormalSliders;
- (void)useRAWSliderRanges:(BOOL)fp8;
- (void)initializeUI;
- (void)initializeWithEditList:(struct EditListData)fp8;
- (void)reset:(id)fp8;
- (void)setTarget:(id)fp8;
- (void)setEdit:(id)fp8;
- (id)currentEdit;
- (void)refresh;
- (BOOL)isVisible;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setAlternativeWindow:(id)fp8;
- (void)resetPanel;
- (id)mainView;
- (void)intializeMainView;
- (void)showPanel:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)closePanel;
- (void)toggleMenu:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)showMenu;
- (void)layoutMainView;
- (void)toggleBrightness;
- (void)toggleColor;
- (void)toggleCorrection;
- (void)toggleAdvanced;
- (id)contrastSlider;
- (id)saturationSlider;
- (id)temperatureSlider;
- (id)tintSlider;
- (id)sharpnessSlider;
- (id)exposureSlider;
- (id)highlightsSlider;
- (id)shadowsSlider;
- (id)limitsSlider;
- (id)histogramView;
- (id)noiseSlider;
- (void)optionKeyDown:(BOOL)fp8;
- (void)copySettings:(id)fp8;
- (void)pasteSettings:(id)fp8;
- (void)toggleNeutralPointDropper:(id)fp8;

@end

@interface BackgroundButton : FirstMouseButton
{
    NSImage *mBackgroundImage;
    NSImage *mBackgroundAlternate;
    BOOL mRecordedInitialSize;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)setBackgroundImage:(id)fp8;
- (void)setBackgroundAlternate:(id)fp8;
- (void)sizeToFit;

@end

@interface BackgroundButtonCell : NSButtonCell
{
    NSImage *mBackgroundImage;
    NSImage *mBackgroundAlternate;
    struct _NSSize mInitialSize;
}

- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (void)setBackgroundImage:(id)fp8;
- (void)setBackgroundAlternate:(id)fp8;
- (void)setInitialSize:(struct _NSSize)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface HUDHistogram : NSView
{
    EditHUDController *mHUDController;
    float mBlackPoint;
    float mWhitePoint;
    float mScaleY;
    float mLastScaleY;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)invalidateScale;
- (void)drawChannel:(struct CGContext *)fp8 rect:(struct _NSRect)fp12 histogram:(float *)fp28 color:(const float *)fp32;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setBlackPoint:(float)fp8;
- (void)setWhitePoint:(float)fp8;

@end

@interface IPBookHardCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mSpineEdgeArt;
    NSImage *mFlapEdgeArt;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (struct CGRect)clipRect;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPBookSimplexView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 leftLaying:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface IPBookSoftCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mSpineEdgeArt;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPBookSpreadView : IPBookView
{
    struct _NSRect mArtRect;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)setController:(id)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface LCDGroup : NSObject
{
    NSMutableArray *mAtoms;
    BOOL mGLLoaded;
}

- (id)init;
- (void)dealloc;
- (void)insertAtom:(id)fp8;
- (void)removeAtom:(id)fp8;
- (id)atoms;
- (void)loadGL;
- (void)unloadGL;
- (void)draw;

@end

@interface LCDAtom : NSObject
{
    void *mPixels;
    unsigned int mTexture;
    struct _NSSize mSize;
    struct _NSSize mTextureSize;
    struct _NSRect mRect;
    struct _NSPoint mCenterPoint;
    float mOpacity;
    float mScale;
    NSString *mAtomName;
    BOOL mGLLoaded;
}

- (id)initWithImageNamed:(id)fp8;
- (id)initWithNSImage:(id)fp8;
- (void)dealloc;
- (struct _NSSize)size;
- (struct _NSRect)rect;
- (void)setCenterPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)centerPoint;
- (void)setTopLeftPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)topLeftPoint;
- (void)setOpacity:(float)fp8;
- (float)opacity;
- (void)setScale:(float)fp8;
- (float)scale;
- (id)name;
- (void)loadGL;
- (void)unloadGL;
- (BOOL)glLoaded;
- (void)draw;
- (struct _NSSize)_nextGLSize:(struct _NSSize)fp8;
- (void *)_loadRGBAFromNSImage:(id)fp8 size:(struct _NSSize *)fp12;

@end

@interface LCDOverlayServer : NSObject
{
    LCDGroup *mGroup;
    LCDGroup *mControlGroup;
    LCDAtom *mPlayOverlay;
    LCDAtom *mPlayNextOverlay;
    LCDAtom *mPlayPrevOverlay;
    LCDAtom *mPauseOverlay;
    LCDAtom *mNextOverlay;
    LCDAtom *mPrevOverlay;
    LCDAtom *mTrashOverlay;
    LCDAtom *mRankOverlays[6];
    LCDAtom *mRotationCWOverlay;
    LCDAtom *mRotationCCWOverlay;
    LCDAtom *mBackgroundOverlay;
    LCDAtom *mControlPlayOverlay;
    LCDAtom *mControlPauseOverlay;
    LCDAtom *mControlNextOverlay;
    LCDAtom *mControlPrevOverlay;
    LCDAtom *mControlRotateCWOverlay;
    LCDAtom *mControlRotateCCWOverlay;
    LCDAtom *mControlTrashOverlay;
    LCDAtom *mControlStar1Overlay;
    LCDAtom *mControlStar2Overlay;
    LCDAtom *mControlStar3Overlay;
    LCDAtom *mControlStar4Overlay;
    LCDAtom *mControlStar5Overlay;
    LCDAtom *mControlDot1Overlay;
    LCDAtom *mControlDot2Overlay;
    LCDAtom *mControlDot3Overlay;
    LCDAtom *mControlDot4Overlay;
    LCDAtom *mControlDot5Overlay;
    struct _NSRect mZeroStarRect;
    int mRank;
    BOOL mPaused;
    BOOL mDrawControls;
    int mDisplayCode;
    LCDAtom *mDisplayAtom;
    float mOpacity;
}

- (id)init;
- (void)dealloc;
- (void)setPaused:(BOOL)fp8;
- (void)setRankOpacityWithRank:(int)fp8 andOpacity:(float)fp12;
- (void)setDisplayForCode:(int)fp8;
- (void)setDrawControls:(BOOL)fp8;
- (void)setLCDOpacity:(float)fp8;
- (void)_loadLCDOverlays;
- (void)resetCenterPoints:(struct _NSRect)fp8;
- (void)setRank:(int)fp8;
- (BOOL)pointInControlRect:(struct _NSPoint)fp8 slideshowRect:(struct _NSRect)fp16;
- (int)lcdHitTest:(struct _NSPoint)fp8;
- (void)hilightLCDControl:(int)fp8 hilight:(BOOL)fp12;
- (struct _NSSize)backgroundSize;
- (void)draw;
- (void)loadGL;
- (void)unloadGL;

@end

@interface IPMultiAlbumSlideshow : IPSlideshow
{
    ArchiveController *mArchiveController;
    struct SlideArray *mSlideArray;
}

- (id)initWithSelectedAlbums:(id)fp8;
- (void)dealloc;
- (id)dbForSlideIndex:(long)fp8;
- (BOOL)imageKeyForSlideIndex:(long)fp8 key:(unsigned int *)fp12;
- (void)removeSlideAtIndex:(long)fp8;
- (BOOL)removeSlideWithKey:(unsigned long)fp8;
- (id)albumForSlideIndex:(long)fp8;
- (id)settingsForSlideIndex:(long)fp8;
- (long)slideCount;

@end

@interface HUDDoubleSlider : NSControl
{
    NSImage *mBackground;
    struct _NSRect mTrackRect;
    struct _NSRect mRightKnobRect;
    struct _NSRect mLeftKnobRect;
    struct _NSRect mCenterKnobRect;
    float mCurrentRightValue;
    float mCurrentLeftValue;
    float mCurrentCenterValue;
    float mMinValue;
    float mMaxValue;
    SEL mAction;
    SEL mMouseUpAction;
    SEL mMouseDownAction;
    id mTarget;
    BOOL mIsChanging;
    BOOL mIsChangingLeft;
    BOOL mIsChangingMiddle;
    BOOL mThreeKnobMode;
    NSTextField *mLeftTextField;
    NSTextField *mRightTextField;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)enterThreeKnobMode;
- (void)exitThreeKnobMode;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (BOOL)isOpaque;
- (BOOL)isContinuous;
- (void)setAction:(SEL)fp8;
- (void)setMouseUpAction:(SEL)fp8;
- (void)setMouseDownAction:(SEL)fp8;
- (void)setTarget:(id)fp8;
- (void)setBackground:(id)fp8;
- (void)setTrackRect:(struct _NSRect)fp8;
- (float)floatValue;
- (float)leftFloatValue;
- (float)rightFloatValue;
- (float)centerFloatValue;
- (void)setCurrentRightValue:(float)fp8;
- (void)setCurrentCenterValue:(float)fp8;
- (void)resetCenterValue;
- (void)sendAction;
- (void)setCurrentLeftValue:(float)fp8;
- (void)resetValues;
- (void)loadValuesForLeft:(float)fp8 andRight:(float)fp12;
- (void)setMinValue:(float)fp8;
- (void)setMaxValue:(float)fp8;
- (float)minValue;
- (float)maxValue;
- (void)_adjustValueByMovingKnob:(float)fp8;
- (float)_trackPointForValue:(float)fp8;
- (float)_valueForTrackPoint:(float)fp8;
- (BOOL)isChanging;
- (void)dealloc;
- (void)leftButtonClicked:(id)fp8;
- (void)rightButtonClicked:(id)fp8;

@end

@interface HUDMenu : NSView
{
    NSDictionary *mStringAttributes;
    NSMutableArray *mTitles;
    int mTrackTag;
    EditHUDController *mController;
    NSTextField *mBCLabel;
    NSTextField *mColorLabel;
    NSTextField *mCorrectionLabel;
    NSTextField *mAdvancedLabel;
    struct _NSRect mBCRect;
    struct _NSRect mColorRect;
    struct _NSRect mCorrectionRect;
    struct _NSRect mAdvancedRect;
    struct _NSRect mCurrentRect;
    struct _NSPoint mSlopPoint;
    NSAttributedString *mWhiteCheck;
    NSAttributedString *mBlackCheck;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)addTrackingRect;
- (BOOL)acceptsFirstResponder;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseExited:(id)fp8;

@end

@interface IPTextElementStyle : NSObject
{
    NSString *mName;
    NSFont *mFont;
    NSString *mLabel;
    float mLineSpacing;
    int mAlignment;
    unsigned int mVAlignment;
    float mSize;
    float mPreviousSize;
    float mTargetSize;
    NSColor *mColor;
    NSString *mColorName;
    BOOL mNeedsUpdate;
    BOOL mLeadingEnabled;
    NSView *mEditorView;
    NSTextField *mTextStyleLabel;
    NSPopUpButton *mFontNamePopup;
    NSPopUpButton *mFontStylePopup;
    NSComboBox *mFontSizeCombo;
    NSArray *mFontFamilyMembers;
    NSMutableArray *mFontFamilies;
    float mCachedSampleHeight;
    NSString *mSampleString;
}

+ (id)defaultStyle;
+ (id)defaultTitleStyle;
+ (id)defaultSubtitleStyle;
- (id)initWithString:(id)fp8 name:(id)fp12 forTemplate:(id)fp16;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (struct _NSRect)frameForAttributedString:(id)fp8 maxFrame:(struct _NSRect *)fp12;
- (void)calculateCachedSampleHeight;
- (void)updateFromEncodedString:(id)fp8 forTemplate:(id)fp12;
- (float)cachedSampleHeight;
- (id)sampleString;
- (void)setSampleString:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (id)name;
- (id)label;
- (id)font;
- (void)setFont:(id)fp8;
- (float)lineSpacing;
- (int)alignment;
- (void)setAlignment:(int)fp8;
- (int)verticalAlignment;
- (void)setVerticalAlignment:(int)fp8;
- (float)size;
- (float)previousSize;
- (float)targetSize;
- (id)color;
- (void)setColor:(id)fp8;
- (BOOL)leadingEnabled;
- (void)setLeadingEnabled:(BOOL)fp8;
- (id)encodedString;
- (id)editorView;
- (void)awakeFromNib;
- (void)updateEditorView;
- (void)takeValuesFromEditorView;
- (void)selectFontFamily:(id)fp8;
- (void)notify;
- (id)description;
- (void)dealloc;

@end

@interface ImportView : BackgroundColorView
{
    ImageDB *mDB;
}

- (void)awakeFromNib;
- (void)setDropDB:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface HUDDirectionView : DirectionView
{
}

- (void)initializeArt;
- (void)setCompositePoints;
- (id)_bevelImage;
- (id)imageForIndex:(int)fp8;

@end

@interface IPSlideshowHUDController : NSObject
{
    HUDView *mMainView;
    NSPanel *mPanel;
    int mWindowLevel;
    IPSlideshowController *mController;
    NSView *mSlideDurationView;
    NSView *mPanAndZoomView;
    NSView *mTransitionView;
    NSView *mUseDefaultsView;
}

- (id)init;
- (void)awakeFromNib;
- (void)closePanel;
- (BOOL)panelIsVisible;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)close:(id)fp8;
- (void)layoutMainView;

@end

@interface BeveledPopUpButtonCell : NSPopUpButtonCell
{
    float mTitleOffset;
    float mTitleSizeDiff;
    NSImage *mImages[9];
    NSColor *mColor;
}

+ (void)initialize;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8;
- (void)_initImages;
- (void)dealloc;
- (void)setImages:(id *)fp8;
- (void)setTitleSizeDiff:(float)fp8;
- (void)setTitleOffset:(float)fp8;
- (struct _NSRect)titleRectForBounds:(struct _NSRect)fp8;
- (void)setColor:(id)fp8;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawBorderAndBackgroundWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)__sharedTextCell;

@end

@interface NSTextFieldCell (Access)
- (void)__setControlView:(id)fp8;
@end

@interface BeveledPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface TwoTargetButton : NSButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)setSecondTarget:(id)fp8;
- (void)setSecondAction:(SEL)fp8;

@end

@interface ImagePopUpButton : NSPopUpButton
{
    BOOL mAcceptsFirstMouse;
    BOOL mWasEnabled;
    BOOL mWindowIsKey;
}

+ (Class)cellClass;
- (id)init;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)showsMenuWhenImageClicked;
- (void)setShowsMenuWhenImageClicked:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (id)arrowImage;
- (void)setArrowImage:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;

@end

@interface ImagePopUpButtonCell : NSPopUpButtonCell
{
    NSButtonCell *mButtonCell;
    BOOL mShowsMenuWhenImageClicked;
    NSImage *mImage;
    NSImage *mArrowImage;
    struct _NSSize mImageSize;
}

- (id)init;
- (id)initWithCell:(id)fp8;
- (void)dealloc;
- (struct _NSSize)imageSize;
- (void)setImageSize:(struct _NSSize)fp8;
- (BOOL)showsMenuWhenImageClicked;
- (void)setShowsMenuWhenImageClicked:(BOOL)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (void)setTitle:(id)fp8;
- (void)setAttributedTitle:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;
- (id)arrowImage;
- (struct _NSSize)arrowSize;
- (void)setArrowImage:(id)fp8;
- (struct _NSSize)cellSize;
- (void)performClick:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)highlight:(BOOL)fp8 withFrame:(struct _NSRect)fp12 inView:(id)fp28;

@end

@interface Book : NSObject
{
    id mParentAlbum;
    CDAnonymousStruct18 mPageInfo;
    NSMutableArray *mPageList;
    NSString *mBookDesignName;
    BOOL mDoubleSided;
    BOOL mCustomDesign;
    BOOL mIsModified;
    NSString *mCaptionFontName;
    NSString *mCommentFontName;
    NSString *mTitleFontName;
    NSString *mTextBlockFontName;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)isRealBook;
- (id)dictionaryWithLegacyBookInfo;
- (id)newBookThemeName;
- (BOOL)isModified;
- (void)setIsModified:(BOOL)fp8;
- (void)setParentAlbum:(id)fp8;
- (id)parentAlbum;
- (id)bookDesignName;
- (void)setBookDesignName:(id)fp8;
- (void)setPageList:(id)fp8;
- (id)pageList;
- (BOOL)isCustomDesign;
- (void)setIsCustomDesign:(BOOL)fp8;
- (void)removeAllPageDesigns;
- (void)removePageDesignForPage:(int)fp8;
- (int)pageDesignCount;
- (id)pageAtIndex:(int)fp8;
- (CDAnonymousStruct18 *)bookPageInfoWithPageRect:(struct _NSRect)fp8 album:(id)fp24 start:(int)fp28;
- (void)resetFontsToDefaults;
- (void)setCaptionFontName:(id)fp8;
- (id)captionFontName;
- (void)setCommentFontName:(id)fp8;
- (id)commentFontName;
- (void)setTitleFontName:(id)fp8;
- (id)titleFontName;
- (void)setTextFontName:(id)fp8;
- (id)textFontName;
- (void)_buildBookDesignTables;
- (BOOL)_designIsDefault;
- (id)_defaultPageList_403;
- (id)_defaultPageList_20;

@end

@interface Page : NSObject <NSCoding>
{
    NSString *mName;
    NSString *mPageDesignName;
    Book *mBook;
    BOOL mDoubleSided;
    BOOL mShowPageNumbers;
    int mImageCount;
    BOOL mLockState;
    BOOL mCoverState;
    NSMutableArray *mTextBlockIndexList;
    NSMutableArray *mTextBlockList;
    struct IPPhotoList *mLockedPhotoList;
    KeyMgr *mKeyList;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setBook:(id)fp8;
- (id)book;
- (id)imageDB;
- (id)name;
- (void)setName:(id)fp8;
- (int)imageCount;
- (void)setImageCount:(int)fp8;
- (id)setPageDesignName:(id)fp8;
- (id)pageDesignName;
- (BOOL)isLocked;
- (void)setLockState:(BOOL)fp8;
- (void)clearLockedPhotoList;
- (void)createLockedPhotoListWithCount:(int)fp8;
- (struct IPPhotoList *)lockedPhotoList;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (int)indexOfLockedPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)isCover;
- (void)setCoverState:(BOOL)fp8;
- (BOOL)isDoubleSided;
- (BOOL)shouldShowPageNumbers;
- (void)rebuild;
- (unsigned int)textBlockCount;
- (void)addTextBlock:(id)fp8 atIndex:(int)fp12;
- (id)textBlockAtIndex:(int)fp8;
- (id)arrayWithTextBlocks:(id)fp8;

@end

@interface HUDButton : NSButton
{
    unsigned int mModifiersFromLastClick;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)modifiersFromLastClick;
- (void)setModifiersFromLastClick:(unsigned int)fp8;

@end

@interface HUDButtonCell : NSButtonCell
{
    float mTextNudge;
}

+ (void)initialize;
- (void)setTextNudge:(float)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8;
- (void)_drawRegularButtonWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface DefaultMediaBrowserDelegate : NSObject
{
}

- (id)mediaBrowserView:(id)fp8 displayNameForMediaGroup:(id)fp12;

@end

@interface PhotoDisplay : ArchiveDisplay
{
    NSMenu *mSearchMenu;
    BurnInfo *mBurnPlacard;
    BackgroundColorView *mCameraPlacard;
    NSTextField *mFromDateText;
    NSTextField *mToDateText;
    NSView *mCheckBoxesView;
    NSButton *mEraseCheckbox;
    NSButton *mAutoSplitCheckbox;
    NSButton *mHideImportedCheckBox;
    NSTextField *mRollNameText;
    NSTextField *mRollDescriptionText;
    IPFilterBarView *mFilterBarView;
    NSButtonCell *mModeAllButtonCell;
    NSButtonCell *mModeEventButtonCell;
    NSButtonCell *mModeDetailButtonCell;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mSplitItem;
    IPToolbarItem *mSplitDividerItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mPublishSettingsItem;
    IPToolbarItem *mPublishAnnounceItem;
    IPToolbarItem *mNetAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mShareItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    BOOL mShowingImportPlacard;
    IPToolbarItem *mImportButton;
    IPToolbarItem *mImportAllButton;
    IPToolbarItem *mProgressItem;
    ImportSession *mCurrentSession;
    BOOL mTotalCalculated;
    long mRemainingCount;
    long mLastRemaining;
    unsigned long mTotalCount;
    ImportAlbum *mCurrentImportAlbum;
    ICObject *mCamera;
    struct MessageReceiver mAlbumMessageReceiver;
}

- (void)_handleDoneWithChanges:(id)fp8;
- (void)_albumCountChanged;
- (void)becomeActive;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)prepareForRelease;
- (void)_photoImportStart:(id)fp8;
- (void)_photoImportCancel:(id)fp8;
- (void)_photoImportFinished:(id)fp8;
- (void)initToolbar;
- (void)freeToolbar;
- (void)selectViewMode:(id)fp8;
- (void)doBackButton;
- (BOOL)inAllMode;
- (void)setController:(id)fp8;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKey:(struct IPPhotoInfo *)fp8;
- (void)updateStatus;
- (id)searchItem;
- (void)toggleAdvancedImport:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_startImport:(id)fp8;
- (void)importAll:(id)fp8;
- (void)beginImportToAlbum:(id)fp8 deleteAlbumOnCancel:(BOOL)fp12;
- (void)import:(id)fp8;
- (void)stopImport:(id)fp8;
- (void)_finishingImport:(id)fp8;
- (void)_pauseImport:(id)fp8;
- (void)_resumeImport:(id)fp8;
- (void)_cancelImport:(id)fp8;
- (void)_importCanceled:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)_importCompleted:(id)fp8;
- (void)_updateUI;
- (void)_updateDate;
- (void)_updateImportButton;
- (void)_updateDeleteCheckbox;
- (id)_eraseMediaTitle;
- (void)updateHideImported;
- (void)rebuildView:(id)fp8;
- (void)_setRemainingCount:(id)fp8;
- (void)setCurrentImportAlbum:(id)fp8;
- (id)currentImportAlbum;
- (void)setCamera:(id)fp8;
- (void)_importProgress:(id)fp8;
- (void)_photoImported:(id)fp8;
- (void)_selectionChanged:(id)fp8;
- (void)toggleSplitCheckbox:(id)fp8;
- (void)toggleEraseCheckbox:(id)fp8;
- (void)toggleHideImportedCheckbox:(id)fp8;
- (void)_dbBeginUpdate:(id)fp8;
- (BOOL)supportsFindCommand;
- (struct _NSRect)keywordActionIndicatorLocation;

@end

@interface IPAlbumListState : NSObject
{
    struct vector<IPAlbumState*, std::allocator<IPAlbumState*>> *mAlbumStates;
}

- (id)initWithAlbumList:(struct IPAlbumList *)fp8 manageList:(BOOL)fp12;
- (void)dealloc;
- (struct IPAlbumList *)restoreAlbumList;

@end

@interface DMAPClientLogoutRequest : DMAPClientRequest
{
}

- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface IPUnplacedPhotoView : IPThumbView
{
    IPPage *mScrapPage;
    BookAlbum *mBookAlbum;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setThumbSizeInfo;
- (void)resetCells;
- (void)setBookAlbum:(id)fp8;
- (void)layoutThumbs:(BOOL)fp8;
- (void)_placedPhotosChanged:(id)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (id)getImageDB;
- (struct IPPhotoInfo *)photoInfoForThumb:(struct Thumb *)fp8;
- (void)doDeleteKey;
- (void)clearSelectionAndNotify:(BOOL)fp8;
- (BOOL)setSelectionFrom:(long)fp8 to:(long)fp12;
- (void)mouseDown:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)fillPasteboardWithSelectionDeclaresThumbPBoardType;
- (unsigned int)_determineDragResult:(id)fp8;
- (BOOL)allowDragReorder;
- (void)_dragSelection:(id)fp8 index:(long)fp12;

@end

@interface PDFPrintView : NSImageView
{
}

- (id)pdfRep;
- (void)loadFromPath:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;

@end

@interface HUDImageButton : NSView
{
    NSImage *mNormalImage;
    NSImage *mPressedImage;
    NSImage *mDisabledImage;
    SEL mAction;
    id mTarget;
    BOOL mPressed;
    double mLastNotify;
    BOOL mDisabled;
    NSAttributedString *mTitle;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setAttributedTitle:(id)fp8;
- (void)setNormalImage:(id)fp8;
- (void)setPressedImage:(id)fp8;
- (void)setDisabledImage:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)enabled;
- (void)notify;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;

@end

@interface MXStringUtils : NSObject
{
}

+ (id)localizedString:(id)fp8;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12 withAttributes:(id)fp16 ellipsisString:(id)fp20;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 withAttributes:(id)fp16 ellipsisString:(id)fp20;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 fromCenter:(BOOL)fp16 withAttributes:(id)fp20 ellipsisString:(id)fp24;
+ (struct EllipsizingDataStruct *)ellipsizingDataForString:(id)fp8 withAttributes:(id)fp12 ellipsisString:(id)fp16;
+ (void)freeEllipsizingData:(struct EllipsizingDataStruct *)fp8;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 usingData:(struct EllipsizingDataStruct *)fp16;

@end

@interface VAlignTextView : NSTextView
{
    struct _NSRect mPreservedBounds;
    struct _NSRect _boundingBox;
    int _valign;
    struct _NSPoint _lastOrigin;
    struct _NSPoint _lastSuperOrigin;
    BOOL _cacheDirty;
    struct _NSRect _usedRect;
    float _lastDelta;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_setFrameSize:(struct _NSSize)fp8 forceScroll:(BOOL)fp16;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)bounds;
- (int)vAlignment;
- (void)setVAlignment:(int)fp8;
- (struct _NSRect)roughUsedRect;
- (struct _NSRect)realUsedRect;
- (float)lastDelta;
- (void)didChangeText;
- (struct _NSPoint)textContainerOrigin;

@end

@interface DividedTableView : NSTableView
{
    int mDividerLocation;
    float mDividerHeight;
    NSColor *mDividerColor;
    NSAttributedString *mTitle;
    float mTitleWidth;
    float mTitleLeftInset;
    float mTitleRightSpaceAfter;
    float mTitleFromTop;
    float mHeightAboveLine;
    float mHeightOfLine;
    float mHeightBelowLine;
    float mWidthRightOfLine;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setDividerLocationAfterRow:(int)fp8;
- (void)setBarColor:(id)fp8;
- (void)setTitle:(id)fp8 topInset:(float)fp12 leftInset:(float)fp16 rightSpaceAfter:(float)fp20;
- (void)setSpacingAboveLine:(float)fp8 line:(float)fp12 belowLine:(float)fp16 right:(float)fp20;
- (struct _NSRect)rectOfRow:(int)fp8;
- (int)rowAtPoint:(struct _NSPoint)fp8;

@end

@interface IPShDelayedActions : NSObject
{
}

+ (void)processDelayedActionsOnMain:(id)fp8;

@end

@interface ShCocoaNotification : NSObject
{
}

+ (void)postNotificationOnMain:(id)fp8;
+ (void)dispatchServerEvent:(id)fp8;
+ (void)setUpSharingObserver:(struct ShAppAdapter *)fp8;
+ (void)removeSharingObserver;

@end

@interface IPMultiPageTextView : IPPageView
{
}

- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (id)pdfDataForPage:(int)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)dealloc;

@end

@interface GradientButtonCell : NSButtonCell
{
    struct CGShading *mButtonShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
    BOOL mNoBottom;
    BOOL mNoRight;
}

- (id)initWithCell:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)dealloc;
- (BOOL)noBottom;
- (void)setNoBottom:(BOOL)fp8;
- (BOOL)noRight;
- (void)setNoRight:(BOOL)fp8;

@end

@interface DBRepairPrompt : NSObject
{
    NSWindow *mRepairWindow;
    int mRepairOptions;
    NSButton *mSmallThumbs;
    NSButton *mLargeThumbs;
    NSButton *mUnconvertedImages;
    NSButton *mOrphanedImages;
    NSButton *mRepairPermissions;
    NSButton *mOKButton;
    NSButton *mCancelButton;
}

+ (int)runInWindow:(id)fp8;
- (id)init;
- (int)repairOptions;
- (id)window;
- (void)_updateOptions;
- (void)repairOptionChanged:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface IPEditThumbView : IPThumbView
{
    Album *mOriginalAlbum;
    struct IPPhotoList *mVisiblePhotos;
}

- (void)dealloc;
- (void)_notifySelection:(long)fp8;
- (id)getImageDB;
- (BOOL)extendSelectionForIndex:(long)fp8;
- (void)mouseDown:(id)fp8;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (long)thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (void)setThumbSizeInfo;
- (void)layoutThumbs:(BOOL)fp8;
- (BOOL)renderStackFraming;
- (void)thumbChanged:(id)fp8;

@end

@interface MainThreadMessageReceiver : NSObject
{
    void *mFuncToCall;
}

+ (void)callFunction:(void *)fp8 withMessage:(unsigned long)fp12 data1:(void *)fp16 data2:(void *)fp20 data3:(void *)fp24 userData:(void *)fp28;
- (void)_doItOnMainThread:(id)fp8;

@end

@interface DisappearingWindow : NSWindow
{
    BOOL mTieToMainMenu;
    int mWindowType;
    struct _NSRect mOnScreenRect;
    struct _NSRect mOffScreenRect;
    BOOL mOnTop;
    BOOL mAnimatingOn;
    id mKeyEventHandler;
    id mDelegate;
    int mTrackingTag;
    int mAutoKeyTrackingTag;
    BOOL mHaveEntered;
    id _moveTrackingSibling;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32 type:(int)fp36;
- (void)setType:(int)fp8;
- (void)updateOnAndOffScreenRectsForOnScreenRect:(struct _NSRect)fp8;
- (void)setDelegate:(id)fp8;
- (void)dealloc;
- (void)zoomOntoScreenFromRect:(struct _NSRect)fp8 toFinalRect:(struct _NSRect)fp24;
- (void)flyToFinalRect:(struct _NSRect)fp8;
- (void)animateWindowsOff:(id)fp8;
- (BOOL)isOnScreen;
- (void)tieToMainMenu;
- (void)untieToMainMenu;
- (void)hideMenu;
- (void)enableAutoKey;
- (void)disableAutoKey;
- (double)animationResizeTime:(struct _NSRect)fp8;
- (void)enableAutoHide;
- (void)disableAutoHide;
- (void)siblingMouseMoved:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)setKeyEventHandler:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)mouseInsideWindow;
- (void)displayIfNeeded;
- (void)setAlphaValue:(float)fp8;
- (void)instantOffIfNecessary;
- (void)instantOnIfNecessary;
- (void)addAnimateOnToAnimation:(id)fp8;
- (void)animateOn;
- (void)addAnimateOffToAnimation:(id)fp8;
- (void)animateOff;
- (void)_animationOver;
- (void)animationDidEnd:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (id)moveTrackingSibling;
- (void)setMoveTrackingSibling:(id)fp8;

@end

@interface TransparentView : NSView
{
    NSColor *mColor;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setColor:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPCalendarElement : IPGridElement
{
    double mReferenceDate;
    NSArray *mDropZoneRotations;
    int mLastDropZoneRotationIndex;
    NSArray *mDropZoneOffsets;
    int mLastDropZoneOffsetIndex;
    NSString *mPreviewCellPositioning;
    IPTextElementStyle *mTitleTextStyle;
    IPTextElementStyle *mDayOfWeekTextStyle;
    IPTextElementStyle *mDayTextStyle;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)ensureSubElements;
- (void)changeReferenceDateToDate:(double)fp8;
- (void)ensureReferenceDate;
- (double)referenceDate;
- (void)_ensureMonthPreviewCells;
- (void)setParent:(id)fp8;
- (BOOL)isCalendarElement;
- (BOOL)isGridElement;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)cellIsAtLeftEdge:(id)fp8;
- (BOOL)cellIsAtRightEdge:(id)fp8;
- (BOOL)cellIsAtTopEdge:(id)fp8;
- (BOOL)cellIsAtBottomEdge:(id)fp8;
- (BOOL)cellIsAtLeftEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtRightEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtTopEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtBottomEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)textIsClipped;
- (id)monthName;
- (id)abbreviatedMonthName;
- (id)monthNameAndYear;
- (id)dropZoneRotations;
- (void)setRotationForDropZoneElement:(id)fp8;
- (id)dropZoneOffsets;
- (void)setOffsetForDropZoneElement:(id)fp8;
- (id)previewCellPositioning;
- (BOOL)shouldDrawCalendarPreviews;
- (BOOL)calendarPreviewIsFloating;
- (void)populateCellsWithEventData;
- (void)copyDataFromCalendarElement:(id)fp8;
- (id)availableCaptionLocationsForCell:(id)fp8;
- (id)titleTextStyle;
- (void)setTitleTextStyle:(id)fp8;
- (id)dayOfWeekTextStyle;
- (void)setDayOfWeekTextStyle:(id)fp8;
- (id)dayTextStyle;
- (void)setDayTextStyle:(id)fp8;
- (void)dealloc;

@end

@interface IPCalendarElementCell : IPPageElement
{
    float mCellPaddingLeft;
    float mCellPaddingRight;
    float mCellPaddingTop;
    float mCellPaddingBottom;
    double mDate;
    IPTextElementStyle *mDayTextStyle;
    IPTextElementStyle *mEventDayTextStyle;
    IPTextElementStyle *mUserTextStyle;
    IPTextElementStyle *mDataTextStyle;
    IPTextElementStyle *mCaptionTextStyle;
    IPTextElementStyle *mPrevNextMonthTextStyle;
    IPTextElement *mDayText;
    IPTextElement *mDayContentText;
    NSDictionary *mDropZonePrototype;
    IPPageElement *mDropZoneElement;
    NSString *mCaptionText;
    NSAttributedString *mCaptionPreservedText;
    int mCaptionLocation;
    BOOL mCaptionShowing;
    BOOL mContentIsCaption;
    BOOL mContentIsExternal;
    BOOL mCellIsEmpty;
}

- (id)initWithElement:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)finishTakeValues;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)textIsClipped;
- (float)cellPaddingLeft;
- (float)cellPaddingRight;
- (float)cellPaddingTop;
- (float)cellPaddingBottom;
- (void)setCellPaddingLeft:(float)fp8 right:(float)fp12 top:(float)fp16 bottom:(float)fp20;
- (void)setDate:(double)fp8;
- (double)date;
- (int)dayInMonth;
- (void)setDayTextStyle:(id)fp8;
- (id)dayTextStyle;
- (void)setEventDayTextStyle:(id)fp8;
- (id)eventDayTextStyle;
- (void)setUserTextStyle:(id)fp8;
- (id)userTextStyle;
- (void)setDataTextStyle:(id)fp8;
- (id)dataTextStyle;
- (void)setCaptionTextStyle:(id)fp8;
- (id)captionTextStyle;
- (void)setPrevNextMonthTextStyle:(id)fp8;
- (id)prevNextMonthTextStyle;
- (void)setDayTextElement:(id)fp8;
- (id)dayTextElement;
- (void)setDayContentTextElement:(id)fp8;
- (id)dayContentTextElement;
- (BOOL)showDayText;
- (BOOL)showDayContent;
- (id)dropZonePrototype;
- (void)setDropZonePrototype:(id)fp8;
- (id)dropZoneElement;
- (void)removeDropZoneElement;
- (id)captionText;
- (void)setCaptionTextQuiet:(id)fp8;
- (void)setCaptionText:(id)fp8;
- (id)captionPreservedText;
- (void)setCaptionPreservedText:(id)fp8;
- (int)captionLocation;
- (void)setCaptionLocation:(int)fp8 show:(BOOL)fp12;
- (void)_setCaptionTextIsShowing:(BOOL)fp8;
- (BOOL)captionTextIsShowing;
- (void)showCaptionText:(BOOL)fp8;
- (id)captionDisplayCell;
- (BOOL)contentIsCaption;
- (void)setContentIsCaption:(BOOL)fp8;
- (void)populateCellWithEventData;
- (BOOL)contentIsExternal;
- (void)setContentIsExternal:(BOOL)fp8;
- (void)setCellIsEmpty:(BOOL)fp8;
- (BOOL)cellIsEmpty;
- (BOOL)isCalendarCellElement;
- (void)setLocation:(struct _NSPoint)fp8;
- (BOOL)drawsHighlightBorder;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (void)dealloc;

@end

@interface IPGridElement : IPPageElement
{
    NSDictionary *mCellPrototype;
    NSMutableArray *mHeaderElements;
    NSMutableArray *mColumnHeaderPrototypes;
    NSMutableArray *mColumnHeaderElements;
    NSMutableArray *mFooterElements;
    NSMutableArray *mCellElements;
    float mHorizontalSpacing;
    float mVerticalSpacing;
    int mNumberOfRows;
    int mNumberOfColumns;
    float mHeaderHeight;
    float mColumnHeaderHeight;
    float mFooterHeight;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)ensureSubElements;
- (void)ensureSubElementBounds;
- (id)cellPrototype;
- (id)headerElements;
- (id)columnHeaderElements;
- (id)columnHeaderPrototypes;
- (id)footerElements;
- (id)cellElements;
- (id)cellAboveCell:(id)fp8;
- (id)cellBelowCell:(id)fp8;
- (id)cellToLeftOfCell:(id)fp8;
- (id)cellToRightOfCell:(id)fp8;
- (BOOL)cellIsAtLeftEdge:(id)fp8;
- (BOOL)cellIsAtRightEdge:(id)fp8;
- (BOOL)cellIsAtTopEdge:(id)fp8;
- (BOOL)cellIsAtBottomEdge:(id)fp8;
- (float)horizontalCellSpacing;
- (float)verticalCellSpacing;
- (int)numberOfRows;
- (int)numberOfColumns;
- (void)setNumberOfRows:(int)fp8 columns:(int)fp12;
- (float)headerHeight;
- (float)columnHeaderHeight;
- (float)footerHeight;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (void)setRotation:(float)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setParent:(id)fp8;
- (BOOL)isGridElement;
- (id)holeElements;
- (int)emptyHoleCount;
- (id)embeddedTextElements;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)dealloc;

@end

@interface EditMgr : ArchiveDisplay <IPImageMgrDelegate>
{
    IPToolbarItem *mPreviousButton;
    IPToolbarItem *mNextButton;
    IPToolbarItem *mDoneButton;
    NSButton *mCropButton;
    NSButton *mStraightenButton;
    IPToolbarItem *mEnhanceButton;
    IPToolbarItem *mAdjustButton;
    IPToolbarItem *mEffectsButton;
    NSButton *mRedEyeButton;
    NSButton *mRetouchButton;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mViewToolbarItem;
    BOOL mRAWOn;
    NSImageView *mRAWBadge;
    Album *_currentAlbum;
    struct _NSModalSession *mModalSession;
    NSMenu *mContextualMenu;
    IPEditThumbView *mThumbView;
    NSView *mThumbPlacard;
    NSSplitView *mSplitView;
    EditHUDController *mHUDController;
    EffectsController *mEffectsController;
    NavigationController *mNavigationController;
    LoopController *mLoopController;
    CropHUDController *mCropHUDController;
    BlemishHUDController *mBlemishHUDController;
    StraightenHUDController *mStraightenHUDController;
    HUDWindow *mHUDDialogue;
    HUDView *mHUDDialogueView;
    Edit *mCurrentEdit;
    EditView *mCurrentEditView;
    struct IPAnimatingEditStruct mEditStructs[8];
    int mCurrentEditCount;
    double mAnimationDuration;
    NSTimer *mAnimationTimer;
    BOOL mAdding;
    BOOL mOptionKeyWasDown;
    BOOL mShiftKeyDown;
    IPOnscreenImageMgr *mImageMgr;
    EditBackgroundRender *mBackgroundRenderMgr;
    NSTimer *mFullImageLoadTimer;
    int mCurrentInterpolation;
    BOOL mEffectsPanelWasVisible;
    BOOL mToolPanelWasVisible;
    BOOL mNeedForwardActionIndicator;
    BOOL mNeedReverseActionIndicator;
    struct IPPhotoInfo *mPhotoInfoAfterDelete;
}

- (struct IPPhotoInfo *)infoAfterOnScreenImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoAfterAfterOnScreenImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoBeforeOnScreenImage:(struct IPPhotoInfo *)fp8;
- (int)indexOfOnScreenImage;
- (void)selectThumbForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhoto:(struct IPPhotoInfo *)fp8 withSecondary:(struct IPPhotoList *)fp12;
- (void)openStackAction:(id)fp8;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)_hiddenVisibilityChanged:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)_undoRedoHiddenPhotos:(struct IPPhotoInfo *)fp8 show:(BOOL)fp12 undoManager:(id)fp16;
- (void)toggleShowHiddenPhotos:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (BOOL)isThumbWindowVisible;
- (BOOL)isOpenStackEnabled;
- (BOOL)isCloseStackEnabled;
- (void)rebuildThumbView;
- (void)toggleToolbar:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (void)dismissHUDDialogue;
- (void)showHUDDialogue:(id)fp8 message:(id)fp12;
- (void)closeHUD:(id)fp8;
- (void)resetHUDControllers;
- (id)hudController;
- (id)effectsController;
- (id)navigationController;
- (id)loopController;
- (id)cropHUDController;
- (id)blemishHUDController;
- (id)straightenHUDController;
- (void)refreshPanels;
- (void)showThumbWindow;
- (void)showToolWindow;
- (BOOL)inFullScreen;
- (void)keyDown:(id)fp8;
- (float)grayValue;
- (void)_clearAnimationTimer;
- (struct _NSRect)usableArea;
- (void)layoutViews;
- (id)makeEdit;
- (void)addEditView;
- (void)removeEditAtIndex:(int)fp8;
- (id)currentEditView;
- (id)currentEdit;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)makeViewCurrent:(id)fp8;
- (void)updatePanelsForEditChange;
- (void)makeEditCurrent:(id)fp8;
- (BOOL)shouldDrawSelectionFrame:(id)fp8;
- (int)editCount;
- (void)closeEditView:(id)fp8;
- (void)toggleCompareMode;
- (id)onscreenImageMgr;
- (id)backgroundRenderMgr;
- (BOOL)backgroundRenderMgrIsActive;
- (void)finishBackgroundRenderingWork;
- (struct IPFileImage *)loadedImageForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct IPFileImage *)reloadInfo:(struct IPPhotoInfo *)fp8 forNewEditSize:(struct _NSSize)fp12;
- (void)loadedImage:(struct IPImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)cancelFullLoad;
- (void)backgroundLoadFull:(struct IPPhotoInfo *)fp8;
- (void)loadFullRes;
- (void)loadedFullResImage:(struct IPImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)unloadHighResForInfo:(struct IPPhotoInfo *)fp8;
- (void)preloadPrevNextOfInfo:(struct IPPhotoInfo *)fp8;
- (id)editEditingInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (BOOL)photoIsHidden:(struct IPPhotoInfo *)fp8;
- (BOOL)photoIsACurrentPhoto:(struct IPPhotoInfo *)fp8;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)updateThumbViewSelectionsForThumbView;
- (void)albumChanged;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)updateSelection;
- (void)pushNewSelectionToCurrentEdit:(struct IPPhotoInfo *)fp8;
- (void)committingEditForPhoto:(struct IPPhotoInfo *)fp8 edit:(id)fp12;
- (id)window;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)updateStatus;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)dismissMagnify;
- (void)deleteCurrentImage:(BOOL)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)thumbViewSelectionChanged:(id)fp8 photoIndex:(long)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (id)currentAlbum;
- (void)setCurrentAlbum:(id)fp8;
- (void)deactivate;
- (BOOL)allowsPlacard;
- (void)dealloc;
- (void)becomeActive;
- (void)releaseActive;
- (BOOL)showPlacard;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)adjustFrame:(struct _NSRect)fp8;
- (struct IPPhotoList *)volatileImages;
- (void)initializeToolPanel;
- (void)initializeToolPanel:(id)fp8;
- (void)showToolPanel:(id)fp8;
- (void)ensureToolPanel:(id)fp8;
- (void)initializeEffectsPanel;
- (void)showEffectsPanel:(id)fp8;
- (void)ensureEffectsPanel:(id)fp8;
- (void)HUDWillClose:(id)fp8;
- (void)showNavigationPanel:(id)fp8;
- (void)showLoopPanel:(id)fp8;
- (void)showCropPanel:(id)fp8;
- (void)showBlemishPanel:(id)fp8 mode:(int)fp12;
- (void)showStraightenPanel:(id)fp8;
- (void)updateUndoState;
- (void)exitToolbarEditModes:(int)fp8;
- (BOOL)currentEditIsEditable;
- (void)updateToolbarEnableState;
- (void)resetToolbar;
- (BOOL)currentImageIsRAW;
- (BOOL)currentImageIs16Bit;
- (void)refreshRAW;
- (BOOL)hasPendingEdit;
- (void)commitImageEdits;
- (void)resetAllEditContexts;
- (void)resetEdit;
- (void)clearAllEdits;
- (void)nextActionIndicatorFromIndex:(int)fp8;
- (void)nextImage;
- (void)nextImage:(int)fp8;
- (void)prevActionIndicatorFromIndex:(int)fp8;
- (void)previousImage;
- (void)previousImage:(int)fp8;
- (void)nextImageToThe:(int)fp8;
- (void)promoteImage;
- (void)applyEnhance;
- (void)redEye:(id)fp8;
- (void)whiteBalance;
- (void)crop;
- (void)straighten;
- (void)rotateImage;
- (void)resetFilters:(id)fp8;
- (void)changeBlemishMode:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)awakeFromNib;
- (void)done;
- (void)selectViewMode:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (BOOL)showOriginalKeyDown;
- (void)cancelShowOriginalKeyDown;
- (id)thumbnailSizer;
- (void)updateSizer:(float)fp8;
- (id)contextualMenu;
- (void)showInspector:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (id)undoManagerForCurrentEdit;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (struct _NSRect)keywordActionIndicatorLocation;

@end

@interface ExternalEditMgr : EditMgr
{
    NSWindow *mWindow;
    NSWindow *mSmallWindow;
    NSMenu *mResizeMenu;
    NSMutableArray *mImageEditNibObjects;
    IPToolbarItem *mResizeMenuButton;
    TransparentView *mRawSuperview;
}

- (id)makeEdit;
- (void)addEditView;
- (void)initializeExternalWindow;
- (BOOL)showPlacard;
- (id)initWithPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 sequence:(int)fp16 archiveController:(id)fp20 currentAlbum:(id)fp24;
- (id)window;
- (void)pushNewSelectionToCurrentEdit:(struct IPPhotoInfo *)fp8;
- (void)updateSelection;
- (void)deleteCurrentImage:(BOOL)fp8;
- (void)_askToSave:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)windowDidDeminiaturize:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)_hiddenVisibilityChanged:(id)fp8;
- (void)done;
- (void)doDoneWork;
- (id)undoManager;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_doCommandRotateImagesByDegrees:(float)fp8;
- (void)rotateImage:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (void)zoomChanged:(id)fp8;
- (void)zoomPopUpChanged:(id)fp8;
- (void)resetZoom;
- (void)refreshRAW;
- (void)awakeFromNib;

@end

@interface MasterEditView : NSView
{
    EditMgr *mEditMgr;
    float mGray;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)supportsResizeSlider;
- (void)setFrame:(struct _NSRect)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)setEditMgr:(id)fp8;
- (void)setGray:(float)fp8;
- (BOOL)acceptsFirstResponder;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;

@end

@interface OverlayWindow : DisappearingWindow
{
}

+ (float)maxMonthWidth;
+ (id)showForRect:(struct _NSRect)fp8 inView:(id)fp24;
- (id)initWithContentRect:(struct _NSRect)fp8;
- (void)setLabel:(id)fp8;
- (void)setLabel:(id)fp8 second:(id)fp12;
- (void)setStarMode:(BOOL)fp8;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface OverlayView : NSView
{
    NSString *mLabel;
    NSString *mSecond;
    NSAttributedString *mTrunc;
    struct _NSRect mImageRect;
    NSImage *mStar;
    NSImage *mDot;
    NSImage *mFavorite;
    BOOL mStarMode;
}

+ (id)largeOverlayAttributes;
+ (id)largeOverlayEllipser;
+ (id)smallOverlayAttributes;
+ (id)smallOverlayEllipser;
+ (float)largeStringWidth:(id)fp8;
+ (float)smallStringWidth:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (id)label;
- (void)setLabel:(id)fp8 second:(id)fp12;
- (void)setStarMode:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPGridElementContainer : IPPageElement
{
    int mIndex;
    NSMutableArray *mElements;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)setIndex:(int)fp8;
- (int)index;
- (void)addElement:(id)fp8;
- (id)elements;
- (void)setParent:(id)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (BOOL)isContainerElement;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)dealloc;

@end

@interface IPCalendarData : NSObject
{
    NSString *mHolidayCalendar;
    NSMutableArray *mCalendarReferences;
    NSMutableDictionary *mReferenceDataDict;
    NSMutableDictionary *mEventDictionary;
    NSMutableDictionary *mBirthdayDictionary;
    NSString *mCurrentRecord;
    double mCurrentStartDate;
    double mCurrentEndDate;
    NSString *mCurrentRecurrenceRule;
    int mCurrentMonth;
    int mCurrentYear;
    int mCurrentDay;
}

+ (id)calendarRootPath;
+ (void)setNeedRefresh;
+ (void)findLocalCalendars;
+ (id)localCalendarNames;
+ (id)relativePathForCalendarNamed:(id)fp8;
- (id)initWithCalendarReferences:(id)fp8;
- (id)holidayCalendar;
- (void)setHolidayCalendar:(id)fp8;
- (id)calendarReferences;
- (void)setCalendarReferences:(id)fp8;
- (BOOL)addCalendarReference:(id)fp8;
- (void)removeCalendarReference:(id)fp8;
- (void)updateFromSource;
- (id)eventsForPhotoDate:(double)fp8 includingBirthdays:(BOOL)fp16;
- (void)_retrieveBirthdayData;
- (void)_reassembleEventData;
- (id)_parseCalendarWithReference:(id)fp8;
- (id)_unescapeString:(id)fp8;
- (void)_parseLine:(id)fp8 intoDictionary:(id)fp12;
- (double)_parseDateString:(id)fp8;
- (id)_parseRecurrenceRule;
- (double)_photoDateFromDaySpec:(id)fp8 andStartingDate:(double)fp12;
- (double)_adjustRecurrenceDate:(double)fp8 byMonth:(id)fp16;
- (int)_dayOfWeekFromTwoCharDayAtEndOfString:(id)fp8;
- (double)_adjustRecurrenceDate:(double)fp8 byDay:(id)fp16;
- (void)_addCurrentRecordWithKey:(id)fp8;
- (void)dealloc;

@end

@interface IPBackgroundImageLoader : NSObject
{
    struct BackgroundArray *mHighPriority;
    struct BackgroundArray *mLowPriority;
    struct BackgroundArray *mHighResPriority;
    struct BackgroundArray *mFinishedLoading;
    struct BGThread mBGThreads[20];
    struct BGThreadParams mParams[20];
    struct _opaque_pthread_mutex_t mListLock;
    struct _opaque_pthread_mutex_t mFinishedLoadingListLock;
    struct _opaque_pthread_mutex_t mBGProcessLock[2];
    struct _opaque_pthread_mutex_t mBGWaitLock[2];
    struct _opaque_pthread_cond_t mBGCondition[2];
    struct _opaque_pthread_mutex_t mHighResProcessLock;
    struct _opaque_pthread_mutex_t mHighResWaitLock;
    struct _opaque_pthread_cond_t mHighResCondition;
    struct _opaque_pthread_mutex_t mHighResQuitLock;
    struct _opaque_pthread_mutex_t mCommunicationProcessLock;
    struct _opaque_pthread_mutex_t mCommunicationWaitLock;
    struct _opaque_pthread_cond_t mCommunicationCondition;
    struct _opaque_pthread_mutex_t mCommunicationQuitLock;
    int mBGThreadState[2];
    int mHighResThreadState;
    int mCommunicationThreadState;
    IPOnscreenImageMgr *mDelegate;
    SEL mSelector;
    int mProcessorCount;
    int mLoaderCount;
}

- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)fp8 withSelector:(SEL)fp12;
- (void)copyFirstImageInQueue:(struct BackgroundArray *)fp8 into:(struct BackgroundImage *)fp12;
- (long)indexOfImage:(struct BackgroundImage *)fp8 inArray:(struct BackgroundArray *)fp12;
- (void)releaseImagesInArray:(struct BackgroundArray *)fp8;
- (struct BackgroundImage *)recordWithInfo:(struct IPPhotoInfo *)fp8 forSize:(struct CGSize)fp12;
- (void)clearQueues;
- (void)removeImage:(struct BackgroundImage *)fp8 withPriority:(int)fp12;
- (void)addImage:(struct BackgroundImage)fp8 withPriority:(int)fp52;
- (void)spawnThreadsForPriority:(int)fp8 backgroundIndex:(int)fp12;
- (void)ensureInfo:(struct IPPhotoInfo *)fp8 hasPriority:(int)fp12 size:(struct _NSSize)fp16;
- (BOOL)queuePhotoInfoForLoad:(struct IPPhotoInfo *)fp8 image:(struct IPFileImage **)fp12 priority:(int)fp16 size:(struct _NSSize)fp20 loadRAW:(BOOL)fp28 allowAliasUI:(BOOL)fp32 forceOriginal:(BOOL)fp36;
- (void)queuePhotoSecondaryLoad:(struct IPPhotoInfo *)fp8 size:(struct _NSSize)fp12 sourceImage:(struct IPImage *)fp20;
- (BOOL)removeInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (void)signalThreadsToDie;
- (void)waitForThreadsToDie;
- (void)moveToCommunicationThread:(struct BackgroundImage)fp8;
- (void)bgLoad:(id)fp8;
- (void)bgHighResLoad;
- (void)communicationThread;

@end

@interface IPImageCapsule : NSObject
{
    struct IPFileImage *mImage;
    struct IPFileImage *mSecondaryImage;
    struct IPPhotoInfo *mInfo;
}

- (id)initWithFileImage:(struct IPFileImage *)fp8 secondaryImage:(struct IPFileImage *)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (struct IPFileImage *)fileImage;
- (struct IPFileImage *)secondaryImage;
- (struct IPPhotoInfo *)photoInfo;
- (void)dealloc;

@end

@interface IPOnscreenImageMgr : NSObject
{
    struct OnscreenArray *mPhotoArray;
    struct OnscreenArray *mThumbArray;
    IPBackgroundImageLoader *mLoader;
    struct MessageReceiver mMessageReceiver;
    struct MessageReceiver mAlbumMessageReceiver;
    id mDelegate;
    struct IPPhotoInfo *mRevertInfo;
    BOOL mProcessingDelete;
}

- (id)init;
- (void)dealloc;
- (void)initializeBackgroundImageLoader;
- (void)setDelegate:(id)fp8;
- (void)installImagesLoadedWithMgr:(id)fp8;
- (struct OnscreenArray *)photoArray;
- (struct OnscreenArray *)thumbArray;
- (long)indexOfRecordWithInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (long)indexOfAnyRecordWithInfo:(struct IPPhotoInfo *)fp8 screenOnLoaded:(BOOL)fp12 fullSizeOkay:(BOOL)fp16 rawOkay:(BOOL)fp20;
- (long)indexOfAnyRecordWithInfo:(struct IPPhotoInfo *)fp8 screenOnLoaded:(BOOL)fp12 fullSizeOkay:(BOOL)fp16;
- (long)indexOfThumbWithInfo:(struct IPPhotoInfo *)fp8;
- (long)indexOfRecordWithImage:(struct IPImage *)fp8;
- (struct OnscreenRecord *)createRecordForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct OnscreenRecord *)createThumbForInfo:(struct IPPhotoInfo *)fp8;
- (void)cacheStatus;
- (void)releaseLoadingThumbForInfo:(struct IPPhotoInfo *)fp8;
- (void)releaseThumbForView:(id)fp8 ifNotForInfo:(struct IPPhotoInfo *)fp12;
- (void)releaseImageForRecord:(struct OnscreenRecord *)fp8;
- (void)releaseLoadedImageForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct _NSRect)drawLoadingThumbForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inView:(id)fp28 textColor:(id)fp32 stretchToFit:(BOOL)fp36 flippedHorizontal:(BOOL)fp40 flippedVertical:(BOOL)fp44 inContext:(struct CGContext *)fp48;
- (struct _NSRect)drawLoadingThumbNoMessageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 stretchToFit:(BOOL)fp28 flippedHorizontal:(BOOL)fp32 flippedVertical:(BOOL)fp36 inContext:(struct CGContext *)fp40;
- (id)transformForImageRotation:(float)fp8 withRect:(struct CGRect *)fp12;
- (BOOL)drawBestPossibleForPhotoInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 usingContext:(id)fp28;
- (BOOL)drawImageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inView:(id)fp28 textColor:(id)fp32 stretchToFit:(BOOL)fp36 flippedHorizontal:(BOOL)fp40 flippedVertical:(BOOL)fp44 inLiveResize:(BOOL)fp48 useBestFit:(BOOL)fp52 inContext:(struct CGContext *)fp56 inAllowZoom:(BOOL)fp60;
- (BOOL)immediatelyDrawImageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inContext:(struct CGContext *)fp28 textColor:(id)fp32 flippedHorizontal:(BOOL)fp36 flippedVertical:(BOOL)fp40;
- (void)clearAllLoadedPhotosForInfo:(struct IPPhotoInfo *)fp8;
- (void)clearAllLoadedPhotos;
- (void)clearOutCachesAndCleanup;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28 forceOriginal:(BOOL)fp32;
- (void)bumpPriorityOfInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowAliasUI:(BOOL)fp24;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28;
- (struct IPFileImage *)loadedImageForPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct IPFileImage *)loadedImageOrStartLoadForPhoto:(struct IPPhotoInfo *)fp8 withPriority:(int)fp12 forSize:(struct _NSSize)fp16 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28;
- (struct IPFileImage *)loadedImageOrStartLoadForPhoto:(struct IPPhotoInfo *)fp8 withPriority:(int)fp12 forSize:(struct _NSSize)fp16 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28 forceOriginal:(BOOL)fp32;
- (BOOL)hasLoadedImageForPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (void)queueLoadForScreenRAW:(struct IPPhotoInfo *)fp8 fromImage:(struct IPFileImage *)fp12 forSize:(struct _NSSize)fp16;
- (void)imageLoaded:(id)fp8;
- (void)synchCache;
- (long)numberOfImagesInCache;
- (void)photoInfoRotated:(struct IPPhotoInfo *)fp8;
- (void)recReverted:(struct IPPhotoInfo *)fp8;
- (void)imageChanged:(struct IPPhotoInfo *)fp8;
- (void)dbDoneWithChanges;
- (BOOL)isProcessingDelete;
- (void)setIsProcessingDelete:(BOOL)fp8;
- (id)currentAlbum;
- (void)photosDeleted;
- (void)createReceivers;
- (void)linkReceivers:(id)fp8 db:(id)fp12;
- (void)disableReceivers;
- (void)destroyReceivers;

@end

@interface IPBookInspector : NSObject
{
    IPBookController *mController;
    HUDWindow *mInspectorPanel;
    HUDView *mPageContentView;
    HUDView *mPageElementContentView;
    HUDView *mCompoundElementContentView;
    HUDView *mArtElementContentView;
    HUDView *mTextElementContentView;
    HUDView *mImageElementContentView;
    HUDView *mCalendarElementContentView;
    HUDView *mCalendarElementCellContentView;
    IPPageView *mCalendarCellPageView;
    IPPageView *mCalendarDropZonePageView;
    HUDSlider *mImageElementZoomSlider;
    NSBox *mCalendarDropZoneBox;
    HUDTextView *mCaptionTextView;
    HUDDirectionView *mCaptionLocationView;
    HUDImageButton *mCaptionCheckbox;
    NSTextField *mCationLabel;
    NSColorWell *mBackgroundColorWell;
    NSColorWell *mBorderColorWell;
    NSColorWell *mFillColorWell;
    struct _NSSize mPageContentViewSize;
    struct _NSSize mPageElementContentViewSize;
    struct _NSSize mCompoundElementContentViewSize;
    struct _NSSize mArtElementContentViewSize;
    struct _NSSize mTextElementContentViewSize;
    struct _NSSize mCalendarElementContentViewSize;
    struct _NSSize mCalendarElementCellContentViewSize;
    struct _NSSize mImageElementContentViewSize;
    IPPageElement *mTargetElement;
    IPPageView *mProxyPageView;
}

- (void)setController:(id)fp8;
- (void)setTargetPage:(id)fp8 makeVisible:(BOOL)fp12;
- (void)setTargetElement:(id)fp8 makeVisible:(BOOL)fp12;
- (void)hideInspector;
- (BOOL)isVisible;
- (void)updateImageViews;
- (void)setProxyPageView:(id)fp8;
- (void)setCaptionLocation:(id)fp8;
- (void)toggleCaption:(id)fp8;
- (void)resetPageToOriginal:(id)fp8;
- (void)setBackgroundColor:(id)fp8;
- (void)setBorderColor:(id)fp8;
- (void)setFillColor:(id)fp8;
- (void)flipImage:(id)fp8;
- (void)alignTextLeft:(id)fp8;
- (void)alignTextCenter:(id)fp8;
- (void)alignTextRight:(id)fp8;
- (void)alignTextTop:(id)fp8;
- (void)alignTextMiddle:(id)fp8;
- (void)alignTextBottom:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)_initializePanel;
- (void)_updatePageContentView;
- (void)_updateImageElementContentView;
- (BOOL)_ensurePageIsCustom;
- (void)textDidChange:(id)fp8;
- (void)dealloc;

@end

@interface IPPullSlideshow : IPSlideshow
{
    long mSlideCount;
    id mDelegate;
}

- (id)initWithSlideshowSettings:(id)fp8 slideCount:(long)fp12 delegate:(id)fp16;
- (void)dealloc;
- (BOOL)imageKeyForSlideIndex:(long)fp8 key:(unsigned int *)fp12;
- (id)albumForSlideIndex:(long)fp8;
- (id)dbForSlideIndex:(long)fp8;
- (id)settingsForSlideIndex:(long)fp8;
- (long)slideCount;
- (id)delegate;

@end

@interface IPCalendarCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mBottomShadingTile;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPCalendarSimplexView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
    BOOL mPageLaysBelow;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 upperPage:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface IPCalendarSpreadView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSSize mResizingCachedSize;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)setController:(id)fp8;
- (void)dealloc;

@end

@interface IPCalendarPreviewElement : IPCalendarElementCell
{
    float mCurrentDrawScale;
    struct CGPDFDocument *mCachedImage;
    float mHeaderHeight;
    struct CGSize mCellSize;
}

- (id)initWithElement:(id)fp8;
- (BOOL)isVectorElement;
- (void)cachePDFData;
- (void)setSize:(struct _NSSize)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)setDate:(double)fp8;
- (void)_updateImageCacheForScale:(float)fp8;
- (BOOL)cellIsEmpty;
- (void)dealloc;

@end

@interface EffectsController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    EffectsView *mEffectsView;
    Edit *mEdit;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)layoutMainView;
- (id)edit;
- (void)setEdit:(id)fp8;
- (void)refresh;
- (void)effectsViewButton0Action:(id)fp8;
- (void)effectsViewButton1Action:(id)fp8;
- (void)effectsViewButton2Action:(id)fp8;
- (void)effectsViewButton3Action:(id)fp8;
- (void)effectsViewButton4Action:(id)fp8;
- (void)effectsViewButton5Action:(id)fp8;
- (void)effectsViewButton6Action:(id)fp8;
- (void)effectsViewButton7Action:(id)fp8;
- (void)effectsViewButton8Action:(id)fp8;
- (BOOL)hasImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (id)smallBlurredImage;
- (int)effectsViewButtonLevel:(int)fp8;

@end

@interface IPBookGenerator : NSObject
{
    IPBook *mBook;
    ProgressController *mProgress;
    BOOL mForPrinting;
    BOOL mFingerprintingDisabled;
}

+ (struct CGColorSpace *)colorProfileForBook:(id)fp8;
+ (unsigned long)compressionQualityForBook:(id)fp8;
+ (id)generatorForProductType:(id)fp8 book:(id)fp12;
- (id)init;
- (void)setForLocalPrint:(BOOL)fp8;
- (void)disableFingerprinting:(BOOL)fp8;
- (id)book;
- (void)setBook:(id)fp8;
- (void)setProgressController:(id)fp8;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePDFWithPath:(id)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (BOOL)generateJPEGWithPath:(id)fp8 dpi:(float)fp12 forPage:(int)fp16 includeText:(BOOL)fp20 forProduction:(BOOL)fp24;
- (void)handleProductGenerationException:(id)fp8;
- (void)addPageImageFingerprintToContext:(struct CGContext *)fp8 width:(float)fp12 height:(float)fp16;
- (BOOL)_compositeWithPath:(id)fp8 type:(unsigned long)fp12 dpi:(float)fp16 forPageReference:(id)fp20 fillSize:(struct _NSSize)fp24 includeText:(BOOL)fp32 forProduction:(BOOL)fp36;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)addSheetWithPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)addBackCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSpotCoatingForPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (struct _NSSize)documentPageSourceSize;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (float)documentBleedAllowance;
- (float)documentScale;
- (struct _NSSize)documentSheetSize:(BOOL)fp8;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (BOOL)requiresCoverSheet;
- (int)documentSheetCount;
- (BOOL)oldstyleGeneratePDFWithPath:(id)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)dealloc;

@end

@interface IPHardcoverBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (int)documentSheetCount;
- (void)_textStyleChanged:(id)fp8;

@end

@interface IPLargeBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPMediumBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPSmallBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPWallCalendarGenerator : IPBookGenerator
{
    IPPage *mBackCoverPage;
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (void)addBackCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSpotCoatingForPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;
- (void)dealloc;

@end

@interface IPPhotoPrintGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generateJPEGWithPath:(id)fp8 dpi:(float)fp12 forPage:(int)fp16 includeText:(BOOL)fp20 forProduction:(BOOL)fp24;
- (float)documentScale;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;

@end

@interface IPFoldedGreetingCardGenerator : IPBookGenerator
{
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;

@end

@interface IPPostcardGenerator : IPBookGenerator
{
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;

@end

@interface IPPageElementCacheMgr : NSObject
{
    NSMutableDictionary *mElementRegistry;
}

+ (id)sharedManager;
- (void)registerElement:(id)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)dealloc;

@end

@interface SlimSplitView : NSSplitView
{
    BOOL mDelegateRespondsToSplitViewDoubleClicked;
    BOOL mDelegateRespondsToSplitViewWillTrackOrResize;
    BOOL mDelegateRespondsToSplitViewDidTrackOrResize;
    float xDelta;
}

- (float)dividerThickness;
- (void)drawDividerInRect:(struct _NSRect)fp8;
- (float)dividerPosition;
- (void)setDelegate:(id)fp8;
- (void)_track:(id)fp8;
- (void)_mouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)trackAsIfOnDivider:(id)fp8;
- (float)dividerThicknessForLength:(float)fp8;
- (float)firstSubviewLength;
- (void)setFirstSubviewLength:(float)fp8;
- (void)setNormalDividerThickness;

@end

@interface IPCardSinglePanelView : IPBookView
{
    struct _NSRect mArtRect;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPCardTwoPanelView : IPBookView
{
    struct _NSRect mArtRect;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface IPCardThreePanelView : IPBookView
{
    struct _NSRect mPanelOneBounds;
    struct _NSRect mPanelTwoBounds;
    NSImage *mSpineShadingTileVertical;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_resizePageViewsForHorizontalCard:(BOOL)fp8;
- (void)_resizePageViewsForVerticalCard:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface SkinBox : NSBox
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface SubscribedAlbum : PublishedAlbum
{
    NSString *mSubscriptionURL;
    _Bool mURLValid;
    _Bool mImagesArePending;
    _Bool mFailedAuthentication;
    _Bool mTriedKeychain;
}

+ (void)initialize;
+ (void)_resetNextPollTimer:(id)fp8;
+ (void)calculateNextPollDate:(id)fp8;
+ (id)nextPollDate;
+ (void)updateAllSubscriptions:(id)fp8;
+ (id)cleanSubscriptionURL:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)urlIsValid;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (BOOL)isEjectable;
- (void)eject;
- (id)publishedName;
- (void)setSubscriptionURL:(id)fp8;
- (id)subscriptionURL;
- (void)_retryUpdate;
- (void)updateNow:(id)fp8;
- (void)updateNowIfNeeded:(id)fp8;
- (void)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (void)setName:(id)fp8;
- (void)_createNewPhotoOnMainThread:(id)fp8;
- (void)albumProgressCanceled:(id)fp8;
- (void)_showSubscriptionError:(id)fp8;
- (void)_noteChangedPublishSize;
- (void)_setSubscribedAlbumName:(id)fp8;
- (void)_subUpdateComplete:(id)fp8;
- (void)_notifyImageChanged:(struct IPPhotoInfo *)fp8;
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (void)_authenticationDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_showAuthentication:(id)fp8;
- (void)statusUpdated:(int)fp8 forAlbum:(id)fp12 withProperties:(id)fp16;

@end

@interface SubscriptionContainer : Album
{
}

- (BOOL)allowsModification;
- (id)init;
- (void)initWithDictionary:(id)fp8;
- (void)setDB:(id)fp8;
- (BOOL)isSelectable;
- (id)nameWithCount;
- (BOOL)isEjectable;
- (void)eject;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;

@end

@interface IWWindow : NSWindow
{
    IWWindowBackgroundView *mIWBackgroundView;
    int mWindowStyle;
    BOOL mShowResizeIndicator;
    BOOL mWindowIsClosing;
    struct _NSPoint mUnobscuredOrigin;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (void)awakeFromNib;
- (BOOL)setFrameUsingName:(id)fp8;
- (struct _NSRect)keepTopVisibleOnMajorityScreen:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8 display:(BOOL)fp24;
- (void)setContentView:(id)fp8;
- (void)setTitleBarHeight:(float)fp8;
- (float)titleBarHeight;
- (void)setBottomBarHeight:(float)fp8;
- (float)bottomBarHeight;
- (void)setMidBarHeight:(float)fp8 originY:(float)fp12;
- (float)midBarHeight;
- (float)midBarOriginY;
- (void)setShowsResizeIndicator:(BOOL)fp8;
- (BOOL)showsResizeIndicator;
- (void)setShowsTrafficLight:(BOOL)fp8;
- (void)performClose:(id)fp8;
- (void)performMiniaturize:(id)fp8;
- (void)_validSize:(struct _NSSize *)fp8 force:(BOOL)fp12;
- (void)performZoom:(id)fp8;
- (void)setDocumentEdited:(BOOL)fp8;
- (void)setRepresentedFilename:(id)fp8;
- (void)setTitle:(id)fp8;
- (void)setWindowStyle:(int)fp8;
- (int)windowStyle;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)becomeMainWindow;
- (void)_shadowFoo;
- (void)resignMainWindow;
- (BOOL)isExcludedFromWindowsMenu;
- (id)backgroundColor;
- (void)obscure;
- (void)unobscure;

@end

@interface IWWindowResizeControl : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;

@end

@interface IWWindowBackgroundView : NSView
{
    NSButton *mCloseButton;
    NSButton *mMinimizeButton;
    NSButton *mZoomButton;
    NSButton *mDocumentButton;
    NSView *mResizeControl;
    float mTitleBarHeight;
    float mBottomBarHeight;
    float mMidBarHeight;
    float mMidBarOriginY;
    int mWindowStyle;
    int mButtonGroupTrackingTag;
    BOOL mMouseInGroup;
    NSString *mWindowTitle;
    NSString *mDocumentDisplayName;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)windowBackgroundViewPrivateInit;
- (void)createWindowButtons;
- (void)refreshWindowButtons;
- (void)setTitleBarHeight:(float)fp8;
- (float)titleBarHeight;
- (void)setBottomBarHeight:(float)fp8;
- (float)bottomBarHeight;
- (void)setMidBarHeight:(float)fp8 originY:(float)fp12;
- (float)midBarHeight;
- (float)midBarOriginY;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)acceptsFirstResponder;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)setWindowStyle:(int)fp8;
- (void)setTitle:(id)fp8;
- (void)setDocumentEdited:(BOOL)fp8;
- (void)setRepresentedFilename:(id)fp8;
- (void)showsTrafficLights:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawTitleBarInRect:(struct _NSRect)fp8;
- (void)drawBottomBarInRect:(struct _NSRect)fp8;
- (void)drawMidBarInRect:(struct _NSRect)fp8;
- (void)drawTopWindowCorners;
- (void)drawBottomWindowCorners;
- (void)drawTitle;
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
- (id)bezierPathWithRoundedRectangle:(struct _NSRect)fp8 withRadius:(float)fp24;
- (id)backgroundColor;
- (id)gradientStartColor;
- (id)gradientEndColor;
- (id)edgeColor;
- (id)bottomEdgeColor;
- (id)topWindowEdgeColor;
- (id)bottomWindowEdgeColor;
- (id)titleColor;
- (struct _NSRect)_buttonGroupRect;
- (void)_updateMouseTracking;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_setMouseEnteredGroup:(BOOL)fp8;
- (BOOL)_mouseInGroup:(id)fp8;
- (void)_setDisplayName:(id)fp8;
- (id)_displayName;
- (id)titleFont;
- (struct _NSRect)titleTextFrame:(id)fp8;
- (void)_updateDocumentButtonPosition;

@end

@interface NSView (IWWindowViewAdditions)
- (float)contentAlpha;
@end

@interface IPHAYAddress : NSObject <NSCopying>
{
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)fp8;
+ (id)_createAddressFromSockaddrBuffer:(struct sockaddr *)fp8;
+ (id)addressWithData:(id)fp8;
+ (id)addressWithString:(id)fp8;
+ (id)addressOfPeerFromSocket:(int)fp8;
+ (id)addressOfLocalFromSocket:(int)fp8;
+ (id)addressesFromDataAddresses:(id)fp8;
+ (id)IPV4AddressesFromDataAddresses:(id)fp8;
- (id)initAddressWithData:(id)fp8;
- (id)initAddressWithString:(id)fp8;
- (id)initAddressWithPeerFromSocket:(int)fp8;
- (id)initAddressWithLocalFromSocket:(int)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)description;
- (id)URLToAddressWithScheme:(id)fp8;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dumpInternal;

@end

@interface IPHAYIPV6Address : IPHAYAddress
{
    struct sockaddr_in6 _saddr;
}

- (id)initWithSockaddrBuffer:(struct sockaddr *)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (void)dumpInternal;

@end

@interface IPHAYIPV4Address : IPHAYAddress
{
    struct sockaddr_in _saddr;
}

- (id)initWithSockaddrBuffer:(struct sockaddr *)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (unsigned int)_s_addr;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (void)dumpInternal;

@end

@interface IPHAYAddress (LocalProtection)
+ (void)startListeningToNetworkConfiguration;
+ (void)updateNetmasksFromStoreWithChangedKeys:(id)fp8;
+ (void)stopListeningToNetworkConfiguration;
+ (unsigned int)netMaskForIPV4Address:(id)fp8;
@end

@interface IPHAYFTPDelete : IPHAYFTPPut
{
}

+ (id)deleteRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (id)initDeleteRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;

@end

@interface IPHAYFTPDelete (Override)
- (void)setStreamProperties:(struct __CFWriteStream *)fp8;
@end

@interface IPHAYFTPGet : IPHAYOperation
{
    NSURL *_url;
    struct __CFReadStream *_readStream;
    CDAnonymousStruct12 _clientContext;
    NSString *_username;
    NSString *_password;
    long long _ressourceSize;
    long long _readSize;
    NSMutableData *_readData;
}

+ (id)getRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (id)initGetRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (void)dealloc;
- (void)resetOperation;
- (void)dispatch;
- (id)data;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (void)_readStreamEvent:(int)fp8;
- (long long)operationProgress;
- (long long)operationTotal;

@end

@interface IPHAYFTPPut : IPHAYOperation
{
    NSString *_username;
    NSString *_password;
    NSURL *_url;
    struct __CFWriteStream *_writeStream;
    NSMutableData *_writeData;
    long long _writeSize;
}

+ (id)putRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16 data:(id)fp20;
- (id)initPutRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16 data:(id)fp20;
- (void)dealloc;
- (void)dispatch;
- (void)setStreamProperties:(struct __CFWriteStream *)fp8;

@end

@interface IPHAYFTPPut (Hidden)
- (void)_writeStreamEvent:(int)fp8;
@end

@interface IPHAYFTPPut (Override)
- (void)resetOperation;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (long long)operationProgress;
- (long long)operationTotal;
@end

@interface IPHAYHost : IPHAYOperation
{
    struct __CFHost *_hostRef;
    struct CFHostClientContext _context;
    NSArray *_names;
    NSArray *_addresses;
    NSData *_isReachable;
    BOOL _wasCreatedFromName;
    id _origin;
    int _infoType;
}

+ (id)hostWithName:(id)fp8;
+ (id)hostWithAddress:(id)fp8;
- (void)_setClient;
- (id)initHostWithName:(id)fp8;
- (id)initHostWithAddress:(id)fp8;
- (void)dealloc;
- (void)_launchInfoResolutionWithType:(int)fp8;
- (void)resolveAddresses;
- (id)addresses;
- (void)resolveNames;
- (id)names;
- (void)checkReachability;
- (unsigned int)reachability;
- (void)endOperationWithError:(id)fp8;
- (void)_handleInfoResolutionEventWithType:(int)fp8 error:(const CDAnonymousStruct10 *)fp12;
- (id)description;

@end

@interface IPHAYLogger : NSObject
{
}

+ (void)initialize;
+ (void)_recalculateCacheWithMask:(int)fp8;
+ (void)addLogger:(id)fp8 forType:(id)fp12 mask:(int)fp16;
+ (void)removeLogger:(id)fp8 forType:(id)fp12 mask:(int)fp16;
+ (id)stderrStreamLogger;
+ (id)fileStreamLogger;
+ (id)urlToFileStreamLogger;
+ (id)loggersForType:(id)fp8 level:(int)fp12;
+ (void)logWithLoggers:(id)fp8 inFile:(char *)fp12 function:(const char *)fp16 line:(unsigned int)fp20 withType:(id)fp24 level:(int)fp28 format:(id)fp32;
+ (void)logInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 format:(id)fp28;
- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface IPH_AYStderrLogger : IPHAYLogger
{
}

- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface IPH_AYFileLogger : IPHAYLogger
{
    struct __sFILE *_logFile;
    NSURL *_urlToFile;
}

- (id)init;
- (void)dealloc;
- (id)urlToFile;
- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface IPHFrame : NSObject
{
    void *_frame;
    NSString *_name;
}

- (id)initWithFrame:(void *)fp8 name:(id)fp12;
- (BOOL)isEqualToFrame:(id)fp8;
- (void *)frame;
- (void)dealloc;
- (id)description;

@end

@interface IPH_AYNoLogger : IPHAYLogger
{
}

- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;
- (id)urlToFile;

@end

@interface IPHAYOperation : NSObject
{
    id _asyncProxy;
    NSThread *_currentThread;
    NSThread *_baseThread;
    IPHAYOperation *_parentOperation;
    IPHAYOperation *_mainOperation;
    IPHAYOperation *_currentChildOperation;
    id _group;
    NSLock *_operationLock;
    NSError *_error;
    BOOL _operationEnded;
    BOOL _operationAborted;
    BOOL _silent;
    BOOL _canAbortNow;
    BOOL _inAbortProcess;
    int _currentMark;
    void *_reserved;
    id _notificationDelegate;
    NSMutableDictionary *_privateInfos;
    id _proxyInBaseThread;
    id _proxyInDispatchThread;
}

+ (void)_initCurrentThread;
+ (void)_initMainThread;
+ (void)initialize;
+ (id)operationRunLoopMode;
+ (void)_noLockForThread:(id)fp8;
+ (void)_lockForAllThreads;
+ (BOOL)_lockWaitingForOperation;
+ (void)lockOperations;
+ (void)unlockOperations;
+ (id)mainThread;
+ (BOOL)_dispatchNextOperationInQueue;
+ (void)_workerThread;
+ (void)_launchOneThread;
+ (void)pushInvocation:(id)fp8;
+ (BOOL)popOperation:(id)fp8;
+ (void)unblockAllOperationsForGroup:(id)fp8;
+ (void)endAllPendingOperationsOfGroup:(id)fp8 withError:(id)fp12;
+ (id)currentOperation;
+ (void)_setCurrentOperation:(id)fp8;
- (void)_setCurrentThread:(id)fp8;
- (void)_setupBaseThreadProxy;
- (void)_cleanBaseThreadProxy;
- (void)_setupDispatchThreadProxy;
- (void)_cleanDispatchThreadProxy;
- (id)init;
- (void)dealloc;
- (id)async;
- (id)syncFor:(id)fp8;
- (id)synchronous;
- (void)_setCurrentChildOperation:(id)fp8;
- (id)_currentChildOperation;
- (id)parentOperation;
- (id)mainOperation;
- (id)operationThread;
- (id)baseThread;
- (BOOL)isAsync;
- (void)lockOperation;
- (void)unlockOperation;
- (void)_handleEventRecursively:(id)fp8;
- (void)_sendEventToThreadLocked:(id)fp8;
- (void)sendEventToThread:(id)fp8;
- (void)_startAbortProcess;
- (BOOL)handleEventInThread:(id)fp8;
- (void)abortOperation;
- (void)waitForOperationToEnd;
- (void)waitForOperationToEndInMode:(id)fp8;
- (BOOL)hasOperationEnded;
- (void)resetOperation;
- (void)setOperationGroup:(id)fp8;
- (id)operationGroup;
- (void)setOperationCompanion:(id)fp8;
- (id)operationCompanion;
- (BOOL)isRunLoopBased;
- (void)runOperationWithTimeOut:(unsigned int)fp8;
- (void)endOperationWithError:(id)fp8;
- (void)markWithTag:(int)fp8;
- (void)markWithTag:(int)fp8 notify:(BOOL)fp12;
- (int)currentMark;
- (void)setSilent:(BOOL)fp8;
- (BOOL)isSilent;
- (void)handleNotificationOfChildOperation:(id)fp8 notification:(id)fp12;
- (void)_postNotificationBaseThread:(id)fp8;
- (void)notifyWithName:(id)fp8 infos:(id)fp12;
- (void)setNotificationDelegate:(id)fp8;
- (id)notificationDelegate;
- (long long)operationProgress;
- (long long)operationTotal;
- (void)setCanAbortNow:(BOOL)fp8;
- (BOOL)canAbortNow;
- (BOOL)isAborting;
- (void)operationWillAbort;
- (void)setError:(id)fp8;
- (id)error;
- (void)finalizeOperation;
- (void)postOperation;
- (void)setInfo:(id)fp8 forKey:(id)fp12;
- (id)infoForKey:(id)fp8;
- (void)removeInfoForKey:(id)fp8;

@end

@interface IPH_AYProxy : NSProxy
{
    IPHAYOperation *_operation;
    BOOL _asyncLaunch;
}

- (id)initWithOperation:(id)fp8;
- (void)setAsyncLaunch:(BOOL)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (id)description;

@end

@interface IPHAYEvent : NSObject
{
    NSString *_domain;
    int _code;
    id _info;
}

+ (id)eventWithDomain:(id)fp8 eventCode:(int)fp12 userInfo:(id)fp16;
- (id)initWithDomain:(id)fp8 eventCode:(int)fp12 userInfo:(id)fp16;
- (void)dealloc;
- (id)domain;
- (int)code;
- (id)userInfo;
- (id)description;

@end

@interface IPH_AYOperationEndWaiter : NSObject
{
    IPHAYOperation *_operation;
    BOOL _finished;
}

- (id)initWithOperation:(id)fp8;
- (void)dealloc;
- (void)waitInMode:(id)fp8;
- (void)operationEnded:(id)fp8;

@end

@interface IPHAYSimpleOperationCompanion : NSObject <AYOperationCompanion>
{
    IPHAYOperation *_operation;
}

- (id)initWithOperation:(id)fp8;
- (id)operation;
- (void)postOperationForOperation:(id)fp8;

@end

@interface AYPerformPool : NSObject
{
    NSThread *_thread;
    BOOL _disabled;
}

+ (void)pushStack;
+ (void)popStack;
+ (id)topPool;
+ (int)performPoolStackCount;
- (id)poolStack;
- (id)init;
- (void)release;
- (void)dealloc;
- (void)_processPerformsInArray:(id)fp8;
- (void)processAllPerforms;
- (void)pushDelayedPerformWithTarget:(id)fp8 selector:(SEL)fp12 object:(id)fp16 soon:(BOOL)fp20;
- (void)_cancelInPerforms:(id)fp8 target:(id)fp12 selector:(SEL)fp16;
- (void)cancelDelayedPerformWithTarget:(id)fp8 selector:(SEL)fp12;

@end

@interface AYPerform : NSObject
{
    id _target;
    SEL _selector;
    id _object;
}

- (id)initWithTarget:(id)fp8 selector:(SEL)fp12 object:(id)fp16;
- (void)dealloc;
- (BOOL)matchTarget:(id)fp8 selector:(SEL)fp12 object:(id)fp16;
- (void)doPerform;
- (id)description;

@end

@interface NSObject (AYPerformPool)
+ (void)cancelDelayedPerformWithTarget:(id)fp8;
+ (void)cancelDelayedPerformWithTarget:(id)fp8 selector:(SEL)fp12;
- (void)performSelectorDelayed:(SEL)fp8 withObject:(id)fp12 soon:(BOOL)fp16;
- (void)performSelectorDelayed:(SEL)fp8 withObject:(id)fp12;
- (void)performSelectorDelayed:(SEL)fp8;
@end

@interface NSStream (IPHCFStreamErrorSupport)
+ (id)IPHerrorForCFStreamError:(CDAnonymousStruct10)fp8;
- (id)IPHbetterStreamError;
@end

@interface IPHAYTimer : IPHAYOperation
{
}

- (void)sleep:(double)fp8;
- (BOOL)isRunLoopBased;
- (void)endTimerOperation;
- (void)finalizeOperation;

@end

@interface CALRunLoopSemaphore : NSObject
{
    struct __CFRunLoop *_rloop;
    int _count;
    int _pipe[2];
    struct __CFSocket *_socket;
    struct __CFRunLoopSource *_socketSource;
    NSLock *_countLock;
}

- (id)init;
- (id)initWithCFRunLoop:(struct __CFRunLoop *)fp8;
- (void)dealloc;
- (void)down;
- (void)up;
- (int)value;

@end

@interface NSError (CALExtensions)
- (BOOL)iCalIsEqualToError:(id)fp8;
@end

@interface NSData (CALExtensions)
- (BOOL)fastWriteToFile:(id)fp8;
@end

@interface NSMutableDictionary (CALExtensions)
+ (id)newDictionaryKeyString;
@end

@interface CALRunLoopSemaphore (Private)
- (void)awake;
@end

@interface NSURL (queryParsingExtensions)
+ (id)URLWithBase:(id)fp8 andFilename:(id)fp12;
+ (id)davCompatibleFilenameForFilename:(id)fp8;
+ (id)iDiskSmallNameCompatibleNameForFilename:(id)fp8;
+ (id)publicDotMacAccessFilename:(id)fp8;
+ (id)publicDotMacAccessURLWithBase:(id)fp8 andFilename:(id)fp12;
- (id)queryParameters;
- (id)IPHURLWithUsername:(id)fp8 withPassword:(id)fp12;
- (id)URLByRemovingLastPathComponent;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 path:(id)fp20;
@end

@interface NSMutableArray (CALExtensions)
- (void)removeAllObjectsWithClass:(Class)fp8;
@end

@interface NSSet (CALExtensions)
- (id)allObjectsWithClass:(Class)fp8;
@end

@interface NSArray (CALExtensions)
+ (id)convertFromXML:(id)fp8;
- (id)allObjectsWithClass:(Class)fp8;
- (id)descriptionByPointer;
- (id)convertToXML;
@end

@interface NSDictionary (CALExtensions)
+ (id)convertFromXML:(id)fp8;
+ (id)convertFromBinaryXML:(id)fp8;
- (id)mutableCopyWithElementsCopy;
- (id)convertToXML;
- (id)convertToBinaryXML;
@end

@interface NSString (IPHURLExtensions)
- (id)stringByEscapingPathForURL;
@end

@interface NSString (CalendarExtensions)
+ (id)stringWithFileSystemRepresentation:(const char *)fp8;
- (id)quote;
- (id)trimWhiteSpace;
- (id)trimFinalComma;
- (id)trimFirstComma;
- (id)trimCommas;
- (id)unquote;
- (id)searchAndReplaceString:(id)fp8 withString:(id)fp12;
- (const char *)fileSystemRepresentation;
- (id)safeFilename;
@end

@interface NSMutableString (CalendarExtensions)
- (void)searchAndReplaceSet:(id)fp8 withString:(id)fp12;
- (void)replaceOccurrencesOfString:(id)fp8 withString:(id)fp12;
- (void)searchAndReplaceInString:(id)fp8 withString:(id)fp12;
@end

@interface NSString (CalendarPathExtensions)
+ (id)stringWithContentsOfFile:(id)fp8 usingEncoding:(unsigned int)fp12;
- (BOOL)isPathToAppleScript;
- (BOOL)isPathToVCalData;
- (BOOL)isPathToICalData;
- (BOOL)isPathToBackupFile;
- (BOOL)isPathToICalBookmark;
@end

@interface NSString (CALIDExtensions)
- (id)stringByEncodingSlashes;
- (id)stringByDecodingSlashes;
@end

@interface NSString (CALExtensions)
+ (id)ellipsisString;
@end

@interface IPHDAVHead : IPHDAVRequest
{
}

+ (id)headRequestWithURL:(id)fp8;
+ (id)headRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)headRequestWithSession:(id)fp8 URI:(id)fp12;
- (id)initHeadWithURL:(id)fp8;
- (id)initHeadWithSession:(id)fp8 path:(id)fp12;
- (id)initHeadWithSession:(id)fp8 URI:(id)fp12;

@end

@interface IPHDAVPost : IPHDAVRequest
{
}

+ (id)postRequestWithURL:(id)fp8 data:(id)fp12;
+ (id)postRequestWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)initPostWithURL:(id)fp8 data:(id)fp12;
- (id)initPostWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)data;

@end

@interface IPHDAVGetToFile : IPHDAVRequest
{
}

+ (id)getRequestWithURL:(id)fp8 toFileHandle:(id)fp12;
+ (id)getRequestWithSession:(id)fp8 path:(id)fp12 toFileHandle:(id)fp16;
+ (id)getRequestWithSession:(id)fp8 URI:(id)fp12 toFileHandle:(id)fp16;
- (id)initGetWithURL:(id)fp8 toFileHandle:(id)fp12;
- (id)initGetWithSession:(id)fp8 path:(id)fp12 toFileHandle:(id)fp16;
- (id)initGetWithSession:(id)fp8 URI:(id)fp12 toFileHandle:(id)fp16;

@end

@interface IPHDAVGet : IPHDAVRequest
{
}

+ (id)getRequestWithURL:(id)fp8;
+ (id)getRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)getRequestWithSession:(id)fp8 URI:(id)fp12;
- (id)initGetWithURL:(id)fp8;
- (id)initGetWithSession:(id)fp8 path:(id)fp12;
- (id)initGetWithSession:(id)fp8 URI:(id)fp12;
- (id)data;

@end

@interface IPHDAVPut : IPHDAVRequest
{
}

+ (id)putRequestWithURL:(id)fp8 data:(id)fp12;
+ (id)putRequestWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)initPutWithURL:(id)fp8 data:(id)fp12;
- (id)initPutWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (long long)operationProgress;
- (long long)operationTotal;

@end

@interface IPH_DAVGetToFileReader : NSObject <DAVResponseBodyReader>
{
    NSFileHandle *_fileHandle;
}

- (id)initWithFileHandle:(id)fp8;
- (void)dealloc;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface IPH_DAVGetReader : NSObject <DAVResponseBodyReader>
{
    NSMutableData *_data;
}

- (id)init;
- (void)dealloc;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;
- (id)data;

@end

@interface NSURL (IPHDAVAdditions)
+ (int)IPHclassicPortForScheme:(id)fp8;
+ (id)IPHURLWithDirtyString:(id)fp8;
+ (id)IPHURLWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 path:(id)fp20;
+ (id)IPHURLWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
- (id)IPHinitWithDirtyString:(id)fp8;
- (id)IPHuri;
- (id)IPHURLWithUsername:(id)fp8;
- (id)IPHURLWithoutUsername;
- (id)IPHURLWithoutPassword;
- (id)IPHinitWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
@end

@interface NSString (IPHDAVAdditions)
+ (unsigned int)IPHencodingForIANACharSetName:(id)fp8;
+ (id)IPHIANACharSetNameFromEncoding:(unsigned int)fp8;
- (id)IPHstringByXMLQuoting;
- (id)IPHstringByURLQuoting;
- (id)IPHstringByURLUnquoting;
- (id)IPHmimeAnalysis;
@end

@interface NSDictionary (IPHDAVHasKeyAddition)
- (BOOL)IPHhasKey:(id)fp8;
@end

@interface IPHDAVUnlock : IPHDAVRequest
{
}

+ (id)unlockRequestWithURL:(id)fp8 lockToken:(id)fp12;
+ (id)unlockRequestWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (void)_initUnlockForToken:(id)fp8;
- (id)initUnlockWithURL:(id)fp8 lockToken:(id)fp12;
- (id)initUnlockWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;

@end

@interface IPHDAVLock : IPHDAVRequest
{
}

+ (id)lockRequestWithURL:(id)fp8;
+ (id)lockRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)relockRequestWithURL:(id)fp8 lockToken:(id)fp12;
+ (id)relockRequestWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (void)_initLockRequest;
- (id)initLockWithURL:(id)fp8;
- (id)initLockWithSession:(id)fp8 path:(id)fp12;
- (void)_initRelockRequestWithToken:(id)fp8;
- (id)initRelockWithURL:(id)fp8 lockToken:(id)fp12;
- (id)initRelockWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (id)lockToken;
- (int)lockTimeout;
- (id)dependenciesList;
- (void)finalizeOperation;

@end

@interface IPH_DAVLockBodyReader : NSObject <DAVResponseBodyReader>
{
    NSMutableData *readData;
    NSString *lockToken;
    int timeout;
}

- (id)init;
- (void)dealloc;
- (id)lockToken;
- (int)lockTimeout;
- (void)_calculateLockInfos;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface IPHDAVMultiStatusBodyReader : NSObject <DAVResponseBodyReader>
{
    Class responseClass;
    NSMutableData *readData;
    NSArray *responses;
}

+ (id)multiStatusBodyReader;
+ (id)multiStatusBodyReaderWithResponseClass:(Class)fp8;
+ (id)propFindBodyReader;
- (id)init;
- (id)initWithResponseClass:(Class)fp8;
- (id)initForPropFind;
- (void)dealloc;
- (id)responses;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)_calculateResponses;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface IPHDAVPropFindResponse : IPHDAVMultiStatusResponse
{
    NSMutableDictionary *categorizedProperties;
}

- (id)init;
- (void)dealloc;
- (id)propertiesWithStatusCode:(int)fp8;
- (id)properties;
- (id)propertyForKey:(id)fp8;
- (int)statusCodeForKey:(id)fp8;
- (BOOL)handleResponseSubnode:(id)fp8;

@end

@interface IPHDAVMultiStatusResponse : NSObject
{
    NSURL *href;
    NSString *responseDescription;
    int statusCode;
}

- (id)init;
- (id)initWithXMLNode:(id)fp8;
- (void)dealloc;
- (id)href;
- (int)statusCode;
- (id)responseDescription;
- (BOOL)handleResponseSubnode:(id)fp8;

@end

@interface IPHDAVPropFindResponse (WebDAVProperties)
- (id)_getPropertyForKey:(id)fp8;
- (long long)getContentLength;
- (id)creationDate;
- (id)getDisplayName;
- (BOOL)isCollection;
- (BOOL)isFolder;
- (id)ressourceType;
- (id)description;
@end

@interface IPHDAVRequest (DAVMultiStatusRequest)
+ (id)multiStatusRequestWithURL:(id)fp8 method:(id)fp12;
+ (id)multiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
+ (id)multiStatusRequestWithURL:(id)fp8 method:(id)fp12 responseClass:(Class)fp16;
+ (id)multiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16 responseClass:(Class)fp20;
+ (id)propFindRequestWithURL:(id)fp8 withDepth:(id)fp12 lookingForProps:(id)fp16;
+ (id)propFindRequestWithSession:(id)fp8 withDepth:(id)fp12 path:(id)fp16 lookingForProps:(id)fp20;
+ (id)propPatchRequestWithURL:(id)fp8 patchProperties:(id)fp12 deleteProperties:(id)fp16;
+ (id)propPatchRequestWithSession:(id)fp8 path:(id)fp12 patchProperties:(id)fp16 deleteProperties:(id)fp20;
- (void)_initReaderWithClass:(Class)fp8;
- (id)initMultiStatusRequestWithURL:(id)fp8 method:(id)fp12;
- (id)initMultiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
- (id)initMultiStatusRequestWithURL:(id)fp8 method:(id)fp12 responseClass:(Class)fp16;
- (id)initMultiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16 responseClass:(Class)fp20;
- (id)responses;
- (void)_initForPropFindWithDepth:(id)fp8 lookingForProps:(id)fp12;
- (id)initPropFindWithURL:(id)fp8 withDepth:(id)fp12 lookingForProps:(id)fp16;
- (id)initPropFindWithSession:(id)fp8 withDepth:(id)fp12 path:(id)fp16 lookingForProps:(id)fp20;
- (void)_initForPropPatchWithPatchDict:(id)fp8 deleteProperties:(id)fp12;
- (id)initPropPatchWithURL:(id)fp8 patchProperties:(id)fp12 deleteProperties:(id)fp16;
- (id)initPropPatchWithSession:(id)fp8 path:(id)fp12 patchProperties:(id)fp16 deleteProperties:(id)fp20;
- (id)initPropPatchWithSession:(id)fp8 path:(id)fp12 deletePropertyNodes:(id)fp16;
@end

@interface IPHDAVOptions : IPHDAVRequest
{
}

+ (id)optionsRequestWithURL:(id)fp8;
+ (id)optionsRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initOptionsWithURL:(id)fp8;
- (id)initOptionsWithSession:(id)fp8 path:(id)fp12;

@end

@interface IPHDAVRequest : IPHAYOperation
{
    struct __CFHTTPMessage *_requestMessage;
    struct __CFHTTPMessage *_responseMessage;
    struct __CFReadStream *_readStream;
    struct __CFReadStream *_bodyStream;
    CDAnonymousStruct12 _clientContext;
    IPHDAVSession *_session;
    NSString *_method;
    NSString *_uri;
    NSMutableSet *_bodyReaders;
    NSMutableSet *_acceptingReaders;
    NSMutableDictionary *_requestHeaders;
    NSDictionary *_headers;
    NSString *_httpStatus;
    unsigned int _httpStatusCode;
    NSMutableDictionary *_attemptDictionary;
    NSData *_requestBodyData;
    long long _contentLength;
    long long _readLength;
    long long _requestLength;
    long long _putLength;
    id _delegate;
    void *_davReserved;
    NSString *_queryString;
    int _certificatePolicy;
}

+ (void)initialize;
+ (id)requestWithURL:(id)fp8 method:(id)fp12;
+ (id)requestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
+ (id)requestWithSession:(id)fp8 method:(id)fp12 URI:(id)fp16;
- (id)initWithURL:(id)fp8 method:(id)fp12;
- (id)initWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
- (id)initWithSession:(id)fp8 method:(id)fp12 URI:(id)fp16;
- (void)dealloc;
- (id)description;
- (id)session;
- (id)method;
- (id)uri;
- (id)url;
- (void)setRequestBodyWithData:(id)fp8;
- (void)setRequestBodyWithString:(id)fp8 encoding:(unsigned int)fp12;
- (void)setHeader:(id)fp8 withValue:(id)fp12;
- (id)requestHeaders;
- (void)addResponseBodyReader:(id)fp8;
- (void)setQueryString:(id)fp8;
- (id)queryString;
- (void)grantRequestWithLockToken:(id)fp8;
- (void)grantRequestWithLockTokens:(id)fp8;
- (void)initBeforeDispatch;
- (void)dispatch;
- (int)httpStatusCode;
- (id)responseHeaders;
- (long long)responseContentLength;
- (long long)readLength;
- (long long)operationProgress;
- (long long)operationTotal;
- (long long)requestLength;
- (long long)putLength;
- (id)httpStatus;
- (id)acceptingReaders;
- (void)finalizeOperation;

@end

@interface IPHDAVRequest (XML_RPC)
+ (id)newDataForXMLRPCRequestWithMethodName:(id)fp8 parameterNames:(id *)fp12 parameterValues:(id *)fp16;
+ (id)responseFromXMLRPCResponseData:(id)fp8;
@end

@interface IPHDAVRequest (SSL)
+ (BOOL)allowsAnyHTTPSCertificateForHost:(id)fp8;
+ (void)setAllowsAnyHTTPSCertificateForHost:(id)fp8 value:(BOOL)fp12;
+ (int)defaultCertificatePolicy;
+ (void)setDefaultCertificatePolicy:(int)fp8;
- (int)certificatePolicy;
- (void)setCertificatePolicy:(int)fp8;
@end

@interface IPHDAVRequest (Private)
- (unsigned char)_bodyStreamOpen:(CDAnonymousStruct10 *)fp8 openComplete:(char *)fp12;
- (long)_bodyStreamRead:(char *)fp8 bufferLength:(long)fp12 error:(CDAnonymousStruct10 *)fp16 atEOF:(char *)fp20;
- (unsigned char)_bodyStreamCanRead;
- (BOOL)_computeHeaders;
- (void)_readStreamEvent:(int)fp8;
- (BOOL)_initHTTPRequest;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (id)getErrorFromHTTPStatus;
@end

@interface IPHDAVRequest (Internal)
- (struct __CFHTTPMessage *)lastResponseMessage;
- (struct __CFHTTPMessage *)lastRequestMessage;
- (int)attemptForHTTPCode:(int)fp8;
- (BOOL)setCertificatePolicyOnStream:(struct __CFReadStream *)fp8;
- (struct __CFReadStream *)newStreamWithRequestMessage:(struct __CFHTTPMessage *)fp8;
@end

@interface IPHDAVRequest (IPHDAVSession)
- (void)setUsername:(id)fp8 andPassword:(id)fp12;
- (id)username;
- (id)password;
@end

@interface IPHDAVDelete : IPHDAVRequest
{
}

+ (id)deleteRequestWithURL:(id)fp8;
+ (id)deleteRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initDeleteWithURL:(id)fp8;
- (id)initDeleteWithSession:(id)fp8 path:(id)fp12;
- (id)dependenciesList;

@end

@interface IPHDAVMakeCollection : IPHDAVRequest
{
}

+ (id)makeCollectionRequestWithURL:(id)fp8;
+ (id)makeCollectionRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initMakeCollectionWithURL:(id)fp8;
- (id)initMakeCollectionWithSession:(id)fp8 path:(id)fp12;

@end

@interface IPHDAVListMembers : IPHDAVRequest
{
    BOOL showHidden;
}

+ (id)listMembersRequestWithURL:(id)fp8 showHidden:(BOOL)fp12;
+ (id)listMembersRequestWithSession:(id)fp8 path:(id)fp12 showHidden:(BOOL)fp16;
- (id)initListMembersWithURL:(id)fp8 showHidden:(BOOL)fp12;
- (id)initListMembersWithSession:(id)fp8 path:(id)fp12 showHidden:(BOOL)fp16;
- (id)members;
- (void)finalizeOperation;

@end

@interface IPHDAVGetInfos : IPHDAVRequest
{
}

+ (id)getInfosRequestWithURL:(id)fp8;
+ (id)getInfosRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initGetInfosWithURL:(id)fp8;
- (id)initGetInfosWithSession:(id)fp8 path:(id)fp12;
- (id)infos;
- (void)finalizeOperation;

@end

@interface IPHDAVSession : NSObject <AYGroup>
{
    NSString *_scheme;
    NSString *_host;
    IPHAYAddress *_address;
    int _port;
    BOOL _bypassProxies;
    BOOL _builtinRedirect;
    NSString *_userAgent;
    NSString *_username;
    NSString *_password;
    unsigned int _readTimeOut;
    id _delegate;
    NSMutableDictionary *_privateInfos;
    NSMutableSet *_adapters;
    int _bufferSize;
    NSLock *_sessionLock;
    int _numWorkerThread;
    id _authStore;
    id _simpleAuthStore;
    void *_davReserved;
}

+ (void)initialize;
+ (id)sessionWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16;
+ (id)sessionWithURL:(id)fp8;
+ (void)setMaxRedirection:(int)fp8;
+ (void)setMaxWorkerThreadsPerSession:(int)fp8;
+ (void)setProxiesDelegate:(id)fp8;
+ (void)setDefaultUserAgent:(id)fp8;
+ (id)defaultUserAgent;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16;
- (id)initWithURL:(id)fp8;
- (void)dealloc;
- (id)description;
- (id)scheme;
- (id)host;
- (int)port;
- (id)URLToURI:(id)fp8;
- (void)setBuiltinRedirect:(BOOL)fp8;
- (BOOL)isBuiltinRedirect;
- (void)setAuthStore:(id)fp8;
- (void)clearAuthChallenge;
- (void)addAdapter:(id)fp8;
- (void)setInfo:(id)fp8 forKey:(id)fp12;
- (id)infoForKey:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setUsername:(id)fp8 andPassword:(id)fp12;
- (id)username;
- (id)password;
- (BOOL)hasCredentials;
- (void)setLockOwner:(id)fp8;
- (id)lockOwner;
- (void)setReadTimeOut:(unsigned int)fp8;
- (unsigned int)readTimeOut;
- (void)setUserAgent:(id)fp8;
- (id)userAgent;
- (void)setBypassProxies:(BOOL)fp8;
- (BOOL)isBypassProxies;
- (void)setKeepAlive:(BOOL)fp8;
- (BOOL)keepAlive;
- (int)workerThreadsCount;
- (BOOL)operationShouldBeLaunchedNow:(id)fp8;
- (void)operationHasEnded:(id)fp8;

@end

@interface IPH_DAVNaiveAuthStore : NSObject <DAVAuthStore>
{
    NSString *baseHost;
    NSString *baseScheme;
    int basePort;
    IPHDAVChallenge *authChallenge;
}

- (id)init;
- (void)dealloc;
- (BOOL)hasCredentialsForSession:(id)fp8;
- (BOOL)session:(id)fp8 addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp12;
- (void)session:(id)fp8 storeAuthChallenge:(id)fp12 forURL:(id)fp16;
- (void)clearAuthChallengeForSession:(id)fp8;

@end

@interface IPH_DAVBasicChallenge : IPHDAVChallenge
{
    NSString *authString;
}

- (id)initWithAuthString:(id)fp8;
- (void)dealloc;
- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface IPH_DAVTotalChallenge : IPHDAVChallenge
{
    struct __CFHTTPMessage *badAuthResponse;
    NSString *username;
    NSString *password;
}

- (id)initWithBadAuthResponse:(struct __CFHTTPMessage *)fp8 username:(id)fp12 password:(id)fp16;
- (void)dealloc;
- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface IPHDAVChallenge : NSObject
{
}

- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface IPH_DAVRunLoopAdder : NSObject
{
    struct __CFRunLoopSource *_source;
}

- (id)initWithRunLoopSource:(struct __CFRunLoopSource *)fp8;
- (void)addRunLoopSource;

@end

@interface IPHDAVSession (Internal)
- (void)notifyAdaptersRequestCreated:(id)fp8;
- (void)notifyAdaptersRequestDestroyed:(id)fp8;
- (id)getNewRequestMessage:(struct __CFHTTPMessage **)fp8 andStream:(struct __CFReadStream **)fp12 forRequest:(id)fp16;
- (long)bufferSize;
- (void)correctBufferSizeWithSize:(long)fp8;
@end

@interface IPHDAVXMLNode : NSObject
{
    NSMutableArray *_children;
    NSDictionary *_attributes;
    NSString *_content;
    NSString *_name;
}

- (id)initWithName:(id)fp8 attributes:(id)fp12;
- (void)dealloc;
- (void)addChild:(id)fp8;
- (void)setContent:(id)fp8;
- (id)name;
- (id)content;
- (id)textContent;
- (id)attributes;
- (id)childrenEnumerator;
- (unsigned int)childrenCount;
- (id)description;
- (id)IPHxmlStringWithBag:(id)fp8;
- (id)dataUsingEncoding:(unsigned int)fp8;
- (id)simpleTraverseWithPath:(id)fp8;
- (id)simpleTraverseWithPathArray:(id)fp8 pos:(unsigned int)fp12;

@end

@interface IPHDAVXMLNode (DAVConvenientAdditions)
+ (id)collectionNode;
@end

@interface NSObject (IPHDAVXMLNode)
- (id)IPHxmlStringWithBag:(id)fp8;
@end

@interface IPHDAVXMLNode (IPHExtensions)
+ (id)smilNode;
+ (id)headNode;
+ (id)metaNodeWithName:(id)fp8 content:(id)fp12;
+ (id)layoutNode;
+ (id)rootLayoutNodeWithWidth:(int)fp8 height:(int)fp12;
+ (id)regionNodeWithID:(id)fp8 width:(int)fp12 height:(int)fp16 left:(int)fp20 top:(int)fp24;
+ (id)bodyNode;
+ (id)parNodeWithDuration:(int)fp8;
+ (id)imgNodeWithSrc:(id)fp8 region:(id)fp12;
+ (id)audioNodeWithSrc:(id)fp8;
+ (id)textNodeWithSrc:(id)fp8 region:(id)fp12;
@end

@interface IPHDAVXMLNSBag : NSObject
{
    NSMutableDictionary *tagMapping;
    NSMutableDictionary *allNS;
    unsigned int nsCounter;
    void *reserved1;
}

+ (void)initialize;
+ (id)_smartTagForTag:(id)fp8;
+ (id)namespaceForTag:(id)fp8;
+ (void)registerNSTags:(id)fp8 withNamespace:(id)fp12;
- (id)init;
- (void)dealloc;
- (id)tagForNSTag:(id)fp8;
- (id)allXMLNSAttributes;

@end

@interface IPH_DAVXMLNSTag : NSObject
{
    NSString *ns;
    NSString *tag;
}

- (id)initWithNS:(id)fp8 andTag:(id)fp12;
- (void)dealloc;
- (id)namespace;
- (id)tag;

@end

@interface IPHDAVXMLTree : NSObject
{
    IPHDAVXMLNode *root;
}

+ (id)treeWithXMLData:(id)fp8;
- (id)initWithXMLData:(id)fp8;
- (void)dealloc;
- (id)root;

@end

@interface ILPublishedPhotoAlbum : ILPhotoAlbum
{
    id _protectionDelegate;
}

- (id)init;
- (BOOL)needsUpdate;
- (id)updateNow;
- (id)publishNow;
- (id)publishOrSync:(BOOL)fp8;
- (void)prepareToSync;
- (void)setRemoteDirectory:(id)fp8;
- (id)_updateStatusOperationType;
- (void)_resetContentOfInternalPhotoDB;
- (void)_postAlbumChangedNotification;
- (void)markAlbumAsModified;
- (void)markPhotoWithUIDasModified:(id)fp8 propertiesOnly:(BOOL)fp12;
- (void)deletePhotoWithUID:(id)fp8;
- (void)newPhotoWithUID:(id)fp8;
- (void)_updatePhotosOrder;
- (void)setPasswordProtectionDelegate:(id)fp8;
- (id)passwordProtectionDelegate;
- (void)protectionSettingsHaveChanged;
- (id)_protectionLogin;
- (id)unpublishNow;
- (void)_unpublishOperationEnded:(id)fp8;

@end

@interface ILSubscribedPhotoAlbum : ILPhotoAlbum
{
    BOOL _previewOnly;
}

- (id)init;
- (BOOL)needsUpdate;
- (void)_notifySubscriptionError:(id)fp8;
- (void)prepareToSync;
- (id)updateNow;
- (id)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (id)_updateStatusOperationType;
- (void)_resetContentOfInternalPhotoDB;
- (void)setSubscribeToPreviewsOnly:(BOOL)fp8;
- (BOOL)subscribeToPreviewsOnly;

@end

@interface ILPhotoAlbum : NSObject
{
    ILPhotoShare *_photoShare;
    id _albumContentsDelegate;
    id _updateDelegate;
    id _privateData;
    id _updateOperation;
    BOOL _needsUpdate;
    NSString *_albumOrder;
    id _reserved;
}

- (id)init;
- (id)initWithContentsDelegate:(id)fp8;
- (void)dealloc;
- (id)photoShare;
- (void)setPhotoShare:(id)fp8;
- (void)setUpdateOperation:(id)fp8;
- (void)resetPhotoDB;
- (void)_resetContentOfInternalPhotoDB;
- (void)_savePersistenceDictionary;
- (id)propertyForKey:(id)fp8;
- (void)setProperty:(id)fp8 forKey:(id)fp12;
- (void)removePropertyForKey:(id)fp8;
- (id)UID;
- (unsigned int)photoCount;
- (id)orderedPhotoUIDs;
- (void)prepareToSync;
- (void)setRemoteDirectory:(id)fp8;
- (BOOL)hasPhotoWithUID:(id)fp8;
- (id)photoWithUID:(id)fp8;
- (id)photoWithPublicationUID:(id)fp8;
- (BOOL)photoWithUIDIsPending:(id)fp8;
- (id)propertiesForPhotoDB;
- (id)propertiesForPhotoWithUID:(id)fp8;
- (id)propertiesForPhotoWithPublicationUID:(id)fp8;
- (void)setAlbumContentsDelegate:(id)fp8;
- (id)albumContentsDelegate;
- (id)_updateStatusOperationType;
- (void)setUpdateDelegate:(id)fp8;
- (id)updateDelegate;
- (BOOL)needsUpdate;
- (BOOL)isUpdating;
- (id)updateNowIfNeeded;
- (id)updateNow;
- (id)publishNow;
- (id)publishOrSync:(BOOL)fp8;
- (void)_setupObservers;
- (void)_unsetupObservers;
- (BOOL)_albumIsConcernedByOperationNotification:(id)fp8;
- (void)operationStarted:(id)fp8;
- (void)operationTasksDetermined:(id)fp8;
- (void)operationMarked:(id)fp8;
- (void)operationEnded:(id)fp8;
- (id)cancelUpdate;
- (BOOL)autoUpdateEnabled;
- (void)setAutoUpdateEnabled:(BOOL)fp8;
- (double)autoUpdateDelay;
- (void)setAutoUpdateDelay:(double)fp8;

@end

@interface _IRLMainProxy : NSProxy
{
    id _originalObject;
    BOOL _wait;
    NSArray *_modes;
    BOOL _shouldRetainOriginal;
}

- (id)initWithOriginalObject:(id)fp8 modes:(id)fp12 wait:(BOOL)fp16;
- (void)dealloc;
- (BOOL)respondsToSelector:(SEL)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)cancelPerforms;
- (id)originalObject;
- (void)setProxyShouldRetainOriginalObject:(BOOL)fp8;
- (id)description;

@end

@interface _IRLProxy : NSProxy
{
    id _original;
    BOOL _wait;
    NSLock *_lock;
    NSRunLoop *_runLoop;
    NSArray *_modes;
    NSMutableArray *_performs;
    int _order;
    BOOL _shouldRetainOriginal;
    struct __CFRunLoopSource *_source;
}

- (BOOL)isAsynchronousProxy;
- (id)initWithObject:(id)fp8 modes:(id)fp12 runLoop:(id)fp16 wait:(BOOL)fp20;
- (void)dealloc;
- (BOOL)respondsToSelector:(SEL)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (void)_sourceCallback;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (id)description;
- (void)cancelPerforms;
- (id)originalObject;
- (void)setProxyShouldRetainOriginalObject:(BOOL)fp8;

@end

@interface NSObject (InterThread)
- (BOOL)isAsynchronousProxy;
- (id)inLoop:(id)fp8;
- (id)inLoop:(id)fp8 wait:(BOOL)fp12;
- (id)inLoop:(id)fp8 modes:(id)fp12 wait:(BOOL)fp16;
- (id)inMainLoopWait:(BOOL)fp8;
- (id)inMainLoopModes:(id)fp8 wait:(BOOL)fp12;
@end

@interface NSInvocation (_IRLMainProxy)
- (void)_mainThreadInvoke;
@end

@interface _IPHKVOWaiter : NSObject
{
    id _object;
    NSString *_key;
    id _value;
    BOOL _continue;
}

- (id)initWithObject:(id)fp8 key:(id)fp12 value:(id)fp16;
- (void)dealloc;
- (void)wait;
- (BOOL)waitWithTimeout:(int)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;

@end

@interface NSDate (IPHExtras)
- (id)iph_RFC1123DateString;
@end

@interface NSTask (IPHExtensions)
- (void)iph_waitUntilExitInMode:(id)fp8;
@end

@interface NSObject (IPHKVOAdditions)
- (void)waitForKey:(id)fp8 toBeEqualTo:(id)fp12;
- (BOOL)waitForKey:(id)fp8 toBeEqualTo:(id)fp12 timeout:(int)fp16;
@end

@interface NSXMLElement (ElementForName)
- (id)elementForName:(id)fp8;
- (id)firstElementForName:(id)fp8;
- (id)findElementForID:(id)fp8;
- (id)findElementForTag:(id)fp8;
- (void)removeChild:(id)fp8;
@end

@interface NSURL (IPHExtensions)
+ (id)URLWithURL:(id)fp8 username:(id)fp12;
@end

@interface NSNotificationCenter (IPHExtensions)
- (void)postNotificationOnMainThreadWithName:(id)fp8 object:(id)fp12;
@end

@interface NSMutableString (IPHExtensions)
- (void)appendUnsignedChar:(unsigned char)fp8;
@end

@interface NSString (HexStringRepresentations)
+ (id)stringWithHexString:(id)fp8;
- (id)hexStringRepresentation;
- (id)convertHexStringToData;
- (unsigned int)hexValueInRange:(struct _NSRange)fp8;
- (BOOL)isCharacterHexAtIndex:(unsigned int)fp8;
@end

@interface NSMutableData (MethodsForLazyMen)
- (void)appendUnsignedChar:(unsigned char)fp8;
- (void)appendUnsignedShort:(unsigned short)fp8;
@end

@interface NSData (HexStringRepresentations)
+ (id)dataWithHexString:(id)fp8;
- (id)hexStringRepresentation;
@end

@interface NSNull (IPHExtension)
- (BOOL)boolValue;
- (int)intValue;
@end

@interface NSXMLElement (IPHExtension)
- (void)addChildIfNotNil:(id)fp8;
@end

@interface NSXMLNode (IPHExtension)
+ (id)elementWithNameIfNotNil:(id)fp8 stringValue:(id)fp12;
@end

@interface NSMutableSet (IPHExtension)
- (void)addObjectIfNotNil:(id)fp8;
@end

@interface NSMutableArray (IPHExtension)
- (void)addObjectIfNotNil:(id)fp8;
- (void)addUniqueObject:(id)fp8;
- (void)addUniqueObjectIfNotNil:(id)fp8;
@end

@interface NSMutableDictionary (IPHExtension)
- (void)setObjectIfNotNil:(id)fp8 forKey:(id)fp12;
@end

@interface NSDictionary (IPHExtension)
- (id)iphObjectForKey:(id)fp8;
@end

@interface NSData (IPHCocoaFixes)
- (id)prettyPrintDescription;
- (id)asUTF8String;
- (id)patchedXMLData;
@end

@interface IPHDiffBag : NSObject
{
    NSMutableDictionary *_localMapping;
    NSMutableArray *_links;
    int _resolvePolicy;
    id _delegate;
    SEL _sortCompareSelector;
}

- (id)init;
- (void)dealloc;
- (int)resolvePolicy;
- (void)setResolvePolicy:(int)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (SEL)sortCompareSelector;
- (void)setSortCompareSelector:(SEL)fp8;
- (id)_stateDescription:(int)fp8;
- (void)normalizeLocalState:(int *)fp8 distantState:(int *)fp12;
- (void)notifyThatLocalResource:(id)fp8 hasChangedStateTo:(int)fp12;
- (void)notifyThatDistantResource:(id)fp8 hasChangedStateTo:(int)fp12;
- (void)setResourceIsSynced:(id)fp8;
- (void)updateWithDistantIDs:(id)fp8;
- (void)updateWithLocalIDs:(id)fp8;
- (void)getLocalState:(int *)fp8 andDistantState:(int *)fp12 forResource:(id)fp16;
- (id)syncTasks;
- (id)links;
- (BOOL)removeLinkForResouce:(id)fp8;
- (void)loadWithPersistencePropertyList:(id)fp8;
- (id)persistencePropertyList;

@end

@interface IPHDiffLink : NSObject
{
    NSString *localID;
    int localState;
    int distantState;
}

- (void)dealloc;
- (id)localID;
- (void)setLocalID:(id)fp8;
- (int)localState;
- (void)setLocalState:(int)fp8;
- (int)distantState;
- (void)setDistantState:(int)fp8;

@end

@interface IPHDiffEnumerator : NSEnumerator
{
    NSDictionary *_diffDictionary;
    int _state;
    NSEnumerator *_currentEnumerator;
}

- (id)initWithDiffDictionary:(id)fp8;
- (void)dealloc;
- (id)_enumeratorForState:(int)fp8;
- (id)_nextLocalID;
- (id)nextObject;

@end

@interface NSDictionary (IPHDiffAdditions)
- (id)diffTaskEnumerator;
@end

@interface IPHDiffUpdateBackgroundSetDistantProxy : NSObject <IPHDiffUpdateProxyProtocol>
{
    NSURL *_baseURL;
    NSString *_path;
    NSString *_directoryName;
    IPHTemporarySpaceManager *_temporarySpaceManager;
    NSString *_username;
    NSString *_password;
    NSString *_subscribeURL;
    NSString *_dataFileName;
    int _albumPropertyDirection;
    id _distantAlbum;
    id _localAlbum;
    BOOL _notifyGalleryChanged;
    BOOL _downloadSettingChanged;
    BOOL _commentSettingChanged;
    BOOL _feedComesFromTruth;
    NSString *_lockedResource;
    NSMutableDictionary *_localPhotosByPublicationUID;
    NSMutableDictionary *_distantPhotosByPublicationUID;
    DMMemberAccount *_credentials;
    DMiDiskSession *_session;
    IPHDiffUpdateOperation *_parentOperation;
}

- (id)init;
- (void)dealloc;
- (id)stringByURLQuoting:(id)fp8;
- (id)stringByURLUnquoting:(id)fp8;
- (id)uriForURL:(id)fp8;
- (BOOL)_initiDiskSession:(id)fp8;
- (id)_readDistantAlbum;
- (BOOL)_pushLocalAlbumProperties;
- (BOOL)_pullDistantAlbumProperties;
- (void)_updatePublishACLs;
- (BOOL)_setupPin;
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)_lookForFilename:(id)fp8 inSet:(id)fp12;
- (void)reorderAndPrepareLocalSet;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)allPublicationUIDs;
- (void)_checkImageNeeded:(id)fp8;
- (void)_clearImageNeeded:(id)fp8;
- (id)objectForPublicationUID:(id)fp8;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (id)_urlBase;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)reorderedTasksFromEnumerator:(id)fp8;
- (id)distantAlbum;
- (void)setDistantAlbum:(id)fp8;
- (id)subscribeURL;
- (void)setSubscribeURL:(id)fp8;
- (id)dataFileName;
- (void)setDataFileName:(id)fp8;
- (void)setUsername:(id)fp8 setPassword:(id)fp12;
- (id)baseURL;
- (void)setBaseURL:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (id)directoryName;
- (void)setDirectoryName:(id)fp8;
- (BOOL)_patchProperties:(id)fp8 atPath:(id)fp12;
- (id)imageFileNameForDistantobjectPublicationUID:(id)fp8;
- (id)previewFileNameForDistantobjectPublicationUID:(id)fp8;
- (id)_derivativePathsForAlbum:(id)fp8;
- (id)_derivativeNameForPhoto:(id)fp8;
- (id)_imagePathForPhoto:(id)fp8;
- (id)_previewPathForPhoto:(id)fp8;
- (id)_originalPathForPhoto:(id)fp8;
- (id)moviePathForPhoto:(id)fp8;
- (id)_localAlbumSourceUID;
- (id)albumSourceUID;
- (id)albumPath;
- (BOOL)_lock:(id)fp8;
- (BOOL)_unlock;
- (id)urlForItemNamed:(id)fp8;
- (id)pathForItemNamed:(id)fp8;
- (id)_contentXMLForPhoto:(id)fp8;
- (BOOL)manageError:(id)fp8;

@end

@interface IPHDiffUpdateBackgroundSetLocalProxy : NSObject <IPHDiffUpdateProxyProtocol>
{
    id _localAlbum;
    BOOL _inChangeSession;
    NSMutableDictionary *_localPhotosByPublicationUID;
}

- (id)init;
- (id)initWithLocalAlbum:(id)fp8;
- (void)dealloc;
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)objectForPublicationUID:(id)fp8;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)allPublicationUIDs;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)reorderedTasksFromEnumerator:(id)fp8;
- (id)albumSourceUID;
- (id)localAlbum;
- (void)setLocalAlbum:(id)fp8;
- (void)removeInvalidPhotoObjects;

@end

@interface IPHDiffUpdateOperation : IPHUpdateOperation
{
    IPHDiffBag *_diffBag;
    id _localProxy;
    id _distantProxy;
    NSString *_uid;
    int _operationMode;
    unsigned int _operationTotal;
    int _operationProgress;
    BOOL _shouldAbortNow;
}

- (id)init;
- (void)dealloc;
- (void)dispatch;
- (void)abortOperation;
- (void)_handleUpdatesOnMainThread:(id)fp8;
- (id)reorderedTasksFromEnumerator:(id)fp8;
- (int)newDistantStateForLocalID:(id)fp8 distantID:(id)fp12;
- (int)newLocalStateForLocalID:(id)fp8 distantID:(id)fp12;
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (id)localProxy;
- (void)setLocalProxy:(id)fp8;
- (id)distantProxy;
- (void)setDistantProxy:(id)fp8;
- (id)uid;
- (long long)operationProgress;
- (long long)operationTotal;
- (float)operationProgressPercentage;
- (BOOL)shouldAbortNow;
- (int)operationMode;
- (void)setOperationMode:(int)fp8;
- (void)sendProgressNotification;

@end

@interface IPHDotMacPublicationSOAPService : NSObject
{
}

+ (id)setKeywordsForURL:(id)fp8 in_keywords:(void *)fp12;
+ (id)addKeywordsForURL:(id)fp8 in_keywords:(void *)fp12;
+ (id)removeThingWithURL:(id)fp8;
+ (id)addThing:(id)fp8 in_type:(id)fp12 in_user:(id)fp16 in_title:(id)fp20 in_description:(id)fp24 in_keywords:(void *)fp28;
+ (id)thingsWithURLs:(void *)fp8;
+ (id)thingsWithKeywords:(void *)fp8 in_limitSize:(void *)fp12;
+ (id)removeKeywordsForURL:(id)fp8 in_keywords:(void *)fp12;

@end

@interface removeKeywordsForURL : WSGeneratedObj
{
}

- (void)setParameters:(id)fp8 in_keywords:(void *)fp12;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface thingsWithKeywords : WSGeneratedObj
{
}

- (void)setParameters:(void *)fp8 in_limitSize:(void *)fp12;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface thingsWithURLs : WSGeneratedObj
{
}

- (void)setParameters:(void *)fp8;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface addThing : WSGeneratedObj
{
}

- (void)setParameters:(id)fp8 in_type:(id)fp12 in_user:(id)fp16 in_title:(id)fp20 in_description:(id)fp24 in_keywords:(void *)fp28;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface removeThingWithURL : WSGeneratedObj
{
}

- (void)setParameters:(id)fp8;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface addKeywordsForURL : WSGeneratedObj
{
}

- (void)setParameters:(id)fp8 in_keywords:(void *)fp12;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface setKeywordsForURL : WSGeneratedObj
{
}

- (void)setParameters:(id)fp8 in_keywords:(void *)fp12;
- (id)resultValue;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;

@end

@interface IPHDotMacUtils : NSObject
{
    NSString *_dotMacLogin;
    NSString *_dotMacPassword;
    IPHDAVSession *_sharedIDiskSession;
    NSLock *_lock;
    NSDictionary *_configDict;
    NSString *_announceDict;
    NSString *_clientID;
    NSString *_updownApplicationFolder;
    BOOL _scheduled;
    BOOL _testServer;
    DMiDiskSession *_truthSession;
    DMMemberAccount *_sharedCredentials;
    NSWindow *_upsellWindow;
}

+ (id)sharedDotMacUtils;
+ (id)_cachedDotMacConfigurationDictionary;
+ (void)_setCachedDotMacConfigurationDictionary:(id)fp8;
+ (id)_lastDotMacConfigurationUpdateDate;
+ (void)_setLastDotMacConfigurationUpdateDate:(id)fp8;
+ (id)_lastDotMacConfigurationDictionaryURL;
+ (void)_setLastDotMacConfigurationDictionaryURL:(id)fp8;
+ (id)_dotMacConfigurationDictionaryURL;
+ (BOOL)_shouldUpdateDotMacConfigurationDictionary:(id *)fp8;
+ (id)dotMacConfigurationDictionaryIfModifiedSinceDate:(id)fp8 error:(id *)fp12;
+ (id)dotMacConfigurationDictionary:(id *)fp8;
+ (id)_cachedDotMacAnnounceDictionary;
+ (void)_setCachedDotMacAnnounceDictionary:(id)fp8;
+ (id)_lastDotMacAnnounceUpdateDate;
+ (void)_setLastDotMacAnnounceUpdateDate:(id)fp8;
+ (id)_lastDotMacAnnounceDictionaryURL;
+ (void)_setLastDotMacAnnounceDictionaryURL:(id)fp8;
+ (id)_dotMacAnnounceDictionaryURL;
+ (BOOL)_shouldUpdateDotMacAnnounceDictionary:(id *)fp8;
+ (id)dotMacAnnounceDictionaryIfModifiedSinceDate:(id)fp8 error:(id *)fp12;
+ (id)dotMacAnnounceDictionary:(id *)fp8;
+ (BOOL)displayDotMacNotConfiguredAlert;
+ (void)openDotMacPrefPane;
- (id)init;
- (void)dealloc;
- (id)dotMacConfigurationDictionary:(id *)fp8;
- (id)dotMacAnnounceDictionary:(id *)fp8;
- (BOOL)isDotMacConfigured;
- (BOOL)canTalkToDotMac:(id *)fp8;
- (void)_getDotMacInfos:(id)fp8;
- (void)_dotMacConfigHasChanged:(id)fp8;
- (void)_changeDotMacInfosInMainThread;
- (void)schedule;
- (void)reset;
- (id)sharedTruthSession;
- (id)sharedCredentials;
- (id)sharedIDiskSession;
- (void)getDotMacLogin:(id *)fp8 andPassword:(id *)fp12;
- (id)temporaryPublishPath;
- (id)uploadHostName;
- (id)uploadFolder;
- (id)photocastHostName;
- (id)photocastPath;
- (id)photocastFolder;
- (id)galleryHostName;
- (id)galleryPath;
- (id)galleryFolder;
- (id)downloadHostName;
- (id)downloadFolder;
- (id)galleryUploadPath;
- (id)galleryUploadPathWithUsername;
- (id)galleryDownloadPath;
- (id)galleryDownloadURL;
- (id)galleryUploadURL;
- (id)galleryUploadHost;
- (id)galleryUploadHostWithUsername;
- (id)galleryDownloadHost;
- (void)setApplicationFolder:(id)fp8;
- (void)setIndexQueryClientID:(id)fp8;
- (id)applicationDownloadPath;
- (id)applicationUploadPath;
- (id)applicationUploadPathWithUsername;
- (id)applicationPhotocastPath;
- (id)applicationPhotocastURL;
- (id)applicationDownloadURL;
- (id)applicationUploadURL;
- (id)applicationUploadURLWithUsername;
- (id)applicationUploadHost;
- (id)applicationUploadHostWithUsername;
- (id)applicationPhotocastHost;
- (unsigned long)viewIdentifierForClass:(int)fp8;
- (id)viewIdentifierStringForClass:(int)fp8;
- (void)awakeFromNib;
- (void)signIn:(id)fp8;
- (void)cancel:(id)fp8;
- (void)learnMore:(id)fp8;

@end

@interface IPHKeychain : NSObject
{
}

+ (id)sharedKeychain;
- (void)saveKeychainInformationsForURL:(id)fp8 andPassword:(id)fp12;
- (id)loadKeychainInformationsForURL:(id)fp8 login:(id *)fp12;
- (id)loadKeychainInformationsForURL:(id)fp8;
- (void)removeKeychainInformationsForURL:(id)fp8;
- (id)loadOldKeychainForURL:(id)fp8;
- (void)guessLoginPasswordForURL:(id)fp8 login:(id *)fp12 password:(id *)fp16;
- (id)guessPasswordForURL:(id)fp8;

@end

@interface IPHKeychain (WallpapersExtensions)
- (BOOL)guessUsernameAndPasswordForBackgroundSet:(id)fp8 username:(id *)fp12 password:(id *)fp16;
@end

@interface IPHKeychain (Private)
- (void)guessLoginPasswordForThisURL:(id)fp8 login:(id *)fp12 password:(id *)fp16;
@end

@interface IPHNetworkErrorFormater : NSObject
{
}

+ (id)errorDisplayStringForError:(id)fp8 url:(id)fp12;
+ (id)errorFromDMKitTransaction:(id)fp8;

@end

@interface IPHNetworkErrorFormater (Private)
+ (id)translateCFNetworkHTTPError:(id)fp8;
+ (id)errorDisplayStringForCFNetworkHTTPError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForCFNetworkHTTPError:(id)fp8;
+ (id)translateDMKitError:(id)fp8;
+ (id)errorDisplayStringForDMKitError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForDMKitError:(id)fp8;
+ (id)errorDisplayStringForDAVError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForDAVError:(id)fp8;
+ (id)errorDisplayStringForAYError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForAYError:(id)fp8;
+ (id)errorDisplayStringForOSStatusError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForOSStatusError:(id)fp8;
+ (id)errorDisplayStringForPOSIXError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForPOSIXError:(id)fp8;
+ (id)errorDisplayStringForNetDBError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForNetDBError:(id)fp8;
+ (id)errorDisplayStringForStreamSocketSSLError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForStreamSocketSSLError:(id)fp8;
+ (void)tobysErrorsThatNeedToBeLocalizedBeforeTheCodeContainingThemCanBeCheckedIn;
@end

@interface IPHDotMacUtils (MiscTools)
- (id)uploadURLForAlbumNamed:(id)fp8;
- (id)downloadURLForAlbumNamed:(id)fp8;
- (id)photocastURLForAlbumNamed:(id)fp8;
@end

@interface NSObject (WallpaperAdditions)
- (BOOL)isPublished;
- (BOOL)isSubscribed;
- (BOOL)isPublishable;
- (id)publicationName;
- (id)subscribeURL;
- (id)publicationUID;
- (BOOL)allowItemEdition;
- (void)setAllowItemEdition:(BOOL)fp8;
- (BOOL)isImportingPhoto;
- (void)setIsImportingPhoto:(BOOL)fp8;
- (BOOL)isAbortingImport;
- (void)setIsAbortingImport:(BOOL)fp8;
- (void)abortImport;
- (id)allPhotosByPublicationUID;
- (BOOL)subscribeLimitEnabled;
- (void)setSubscribeLimitEnabled:(BOOL)fp8;
- (int)subscribeLimitNumber;
- (void)setSubscribeLimitNumber:(int)fp8;
- (id)subscribeUnwantedPhotoUIDs;
- (BOOL)autoRefreshEnabled;
- (void)setAutoRefreshEnabled:(BOOL)fp8;
- (BOOL)firstPublish;
- (void)setFirstPublish:(BOOL)fp8;
- (double)autoRefreshInterval;
- (void)setAutoRefreshInterval:(double)fp8;
@end

@interface IPHPhotoObject : NSObject
{
    NSMutableDictionary *_properties;
    ILPhotoAlbum *_photoAlbum;
}

- (id)init;
- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)dictionaryToSave;
- (id)UID;
- (void)setUID:(id)fp8;
- (id)publicationUID;
- (void)setPublicationUID:(id)fp8;
- (id)photoObject;
- (id)imageFilePath;
- (id)thumbnailFilePath;
- (id)originalFilePath;
- (id)keywords;
- (id)informationDictionary;
- (void)remapILPubSubKeysToIPHKeys;
- (id)informationForKey:(id)fp8;
- (void)setInformation:(id)fp8 forKey:(id)fp12;
- (id)setInformation:(id)fp8 forKey:(id)fp12 notify:(BOOL)fp16;
- (void)updateInformation:(id)fp8;
- (void)markDirty;
- (id)photoAlbum;
- (void)setPhotoAlbum:(id)fp8;
- (BOOL)imageIsNeeded;
- (BOOL)thumbnailIsNeeded;
- (void)setFileIsAvailable:(BOOL)fp8;
- (void)setPreviewIsAvailable:(BOOL)fp8;
- (id)sourceUID;
- (void)setContentVersion:(id)fp8;
- (id)contentVersion;
- (void)bumpContentVersion;
- (void)setPropertiesVersion:(id)fp8;
- (id)propertiesVersion;
- (void)bumpPropertiesVersion;
- (void)setOtherMetadataDictionary:(id)fp8;
- (id)otherMetadataDictionary;
- (void)updatePublishPhotoInformationFromPhoto:(id)fp8;
- (void)setNeedsToUpdateDotMacIndexing:(BOOL)fp8;
- (BOOL)needsToUpdateDotMacIndexing;

@end

@interface IPHArchivedPhotoDB : NSObject <IPHPhotoDBProtocol>
{
    NSMutableDictionary *_properties;
    NSMutableArray *_photos;
    IPHDiffBag *_diffBag;
    ILPhotoAlbum *_photoAlbum;
    IPHPhotoObject *_currentPhotoBeingUpdated;
}

- (id)init;
- (id)initWithPhotos:(id)fp8 properties:(id)fp12;
- (id)copy;
- (void)dealloc;
- (id)initWithTruthArray:(id)fp8 downloadedAtURL:(id)fp12;
- (void)updatePhotosOrder;
- (BOOL)readTruthArray:(id)fp8 downloadedAtURL:(id)fp12;
- (id)initWithRSSFeedData:(id)fp8 downloadedAtURL:(id)fp12;
- (BOOL)readRSSFeedData:(id)fp8 downloadedAtURL:(id)fp12;
- (id)imageLinkFromXHTML:(id)fp8 feedBaseURLString:(id)fp12;
- (id)imageLinkFromDescription:(id)fp8 feedBaseURLString:(id)fp12;
- (id)RSSFeedData;
- (id)initWithSerializedPropertyListData:(id)fp8;
- (id)serializedPropertyListData;
- (id)dictionaryToSave;
- (id)initWithDictionary:(id)fp8;
- (id)informationForKey:(id)fp8;
- (void)setInformation:(id)fp8 forKey:(id)fp12;
- (id)informationDictionary;
- (BOOL)allowReorder;
- (BOOL)allowDeletion;
- (BOOL)allowAddition;
- (id)UID;
- (id)readableName;
- (void)setReadableName:(id)fp8;
- (void)setPublishServerSetUID:(id)fp8;
- (id)photoDBExportedProperties;
- (id)photoDBLocalProperties;
- (id)photoShare;
- (unsigned int)photoCount;
- (id)allPhotos;
- (id)orderedPhotoUIDs;
- (id)allPhotosByUID;
- (id)photoWithPublicationUID:(id)fp8;
- (int)indexOfPhoto:(id)fp8;
- (id)photoAtIndex:(unsigned int)fp8;
- (id)photoWithFilepath:(id)fp8;
- (id)nextPhoto:(id)fp8 loop:(BOOL)fp12;
- (id)previousPhoto:(id)fp8 loop:(BOOL)fp12;
- (id)ensureOriginalForPhoto:(id)fp8;
- (void)prepareToSync;
- (void)addPhoto:(id)fp8;
- (void)insertPhoto:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removePhoto:(id)fp8;
- (void)removePhotoAtIndex:(unsigned int)fp8;
- (void)replacePhototAtIndex:(unsigned int)fp8 withPhoto:(id)fp12;
- (void)removeAllPhotos;
- (void)movePhotoAtIndex:(unsigned int)fp8 toIndex:(unsigned int)fp12;
- (void)movePhotosAtIndexes:(id)fp8 toIndex:(unsigned int)fp12;
- (void)setVersion:(id)fp8;
- (id)version;
- (void)bumpVersion;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)fp8;
- (void)markDirty;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)save;
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (void)resetDiffBag;
- (void)markDiffBagChangedToState:(int)fp8 forPhotoObject:(id)fp12;
- (void)markDiffBagChangedToState:(int)fp8 forDistantPhotoObject:(id)fp12;
- (id)photoAlbum;
- (void)setPhotoAlbum:(id)fp8;
- (id)albumContentsDelegate;
- (id)updateDelegate;
- (BOOL)isLive;
- (void)setIsLive:(BOOL)fp8;
- (id)currentPhotoBeingUpdated;
- (void)setCurrentPhotoBeingUpdated:(id)fp8;
- (void)setOtherMetadataDictionary:(id)fp8;
- (id)otherMetadataDictionary;

@end

@interface NSMutableString (IPHStringExtensions)
- (void)deleteCharactersFromSet:(id)fp8;
@end

@interface NSString (IPHStringExtensions)
+ (id)iph_stringFromUTF8HexaString:(id)fp8;
+ (id)iph_stringFromUCS2HexaString:(id)fp8;
+ (id)uuidString;
+ (id)guessedStringForDefaultString:(id)fp8 andUsedStrings:(id)fp12;
+ (id)iph_stringWithLegalURLCharactersThatShouldBeEscapedIfYouWantToEmbedThemInAURLSafely;
- (id)iph_convertToUTF8Hexa;
- (id)iph_convertToUCS2Hexa;
- (unsigned int)unsignedIntValue;
- (id)_stringByReplacingChar:(BOOL)fp8 withChar:(BOOL)fp12;
- (id)stringByConvertingToDottedName;
- (id)stringByConvertingToUnderscoredName;
- (int)iphNumericalCompare:(id)fp8;
- (id)stringWithLossyASCIIConversion;
- (id)stringWithUTF8Conversion;
- (id)prettyPrintKeepCR:(BOOL)fp8;
- (id)prettyPrint;
- (id)stringByReplacingMarkupEntities;
- (id)stringByAddingMarkupEntities;
- (id)stringByAddingAmpersandMarkupEntity;
- (id)iph_stringByRemovingHTMLTags;
- (unsigned int)iph_countOfCharactersFromSet:(id)fp8;
- (id)iph_stringByAddingPercentEscapesUsingEncoding:(unsigned int)fp8 legalURLCharactersToEscape:(id)fp12;
- (id)_stringWithSpecialConversionForNameOnServer:(id)fp8;
- (id)iph_stringByCleaningForServer;
- (int)caseInsensitiveDiacriticalCompare:(id)fp8;
- (BOOL)isCaseInsensitiveDiacriticalEqualToString:(id)fp8;
- (int)iTunesCompare:(id)fp8;
- (BOOL)iph_canReallyBeEncodedLosslessInEncoding:(unsigned int)fp8;
@end

@interface NSString (IPHMD5Extensions)
- (id)md5Digest;
@end

@interface IPHUnpublishOperation : IPHUpdateOperation
{
    DMiDiskSession *_deleteSession;
    NSURL *_url;
    id _album;
    NSArray *_allPhotos;
}

+ (void)initialize;
- (id)initWithBackgroundSet:(id)fp8 URL:(id)fp12 username:(id)fp16 password:(id)fp20;
- (void)dealloc;
- (id)stringByURLQuoting:(id)fp8;
- (id)stringByURLUnquoting:(id)fp8;
- (id)uriForURL:(id)fp8;
- (void)dispatch;
- (void)unpublish;
- (void)finalizeUnpublish;
- (void)manageError:(id)fp8;

@end

@interface IPHUpdateOperation : IPHAYOperation
{
    NSString *_operationKey;
    id _activity;
}

- (void)dispatch;
- (id)operationKey;
- (void)setOperationKey:(id)fp8;
- (id)activity;
- (void)setActivity:(id)fp8;
- (void)dealloc;

@end

@interface IPHUpdateManager : NSObject
{
    NSMutableDictionary *_updateOperationsByKey;
    BOOL _isBusy;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)addUpdateOperation:(id)fp8;
- (void)addUpdateOperationOnMainThread:(id)fp8;
- (void)operationEnded:(id)fp8;
- (BOOL)isBusy;
- (void)setIsBusy:(BOOL)fp8;

@end

@interface IPHUpdateManager (WallpapersAdditions)
+ (id)publishOperationForBackgroundSet:(id)fp8 password:(id)fp12;
+ (id)publishBackgroundSet:(id)fp8 withPassword:(id)fp12;
+ (id)syncBackgroundSet:(id)fp8 withPassword:(id)fp12;
+ (id)updateSubscribeForBackgroundSet:(id)fp8;
+ (BOOL)parseSubscribeURL:(id)fp8 getBaseURL:(id *)fp12 getPath:(id *)fp16 getDirectoryName:(id *)fp20 getDataFileName:(id *)fp24 getUsername:(id *)fp28 getPassword:(id *)fp32;
+ (id)subscribeOperationWithURL:(id)fp8 username:(id)fp12 password:(id)fp16 autoShow:(BOOL)fp20;
+ (id)subscribeToURL:(id)fp8 username:(id)fp12 password:(id)fp16 autoShow:(BOOL)fp20;
+ (id)subscribeToURL:(id)fp8 username:(id)fp12 password:(id)fp16 backgroundSet:(id)fp20;
+ (id)unpublishOperationForBackgroundSet:(id)fp8 username:(id)fp12 password:(id)fp16;
+ (id)unpublishBackgroundSet:(id)fp8 username:(id)fp12 password:(id)fp16;
@end

@interface IPHWallpaperAutoPublicationScheduler : NSObject
{
    NSMutableDictionary *_retriesNumberByWallpaperSetUID;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)updateOperationEnded:(id)fp8;
- (void)wallpaperVersionChanged:(id)fp8;
- (void)rescheduleNextUpdateForWallapperSet:(id)fp8;
- (void)scheduledUpdateTriggeredForWallpaperSet:(id)fp8;
- (void)updateWallpaperSetNowIfNeeded:(id)fp8;
- (void)updateWallpaperSetNow:(id)fp8;
- (void)cancelUpdatesForWallpaperSet:(id)fp8;

@end

@interface IPHFriendlyException : NSException
{
}

+ (void)poseAs;
+ (id)_symbolsForCurrentThreadStack;
+ (id)_appendSymbolsForCurrentThreadStackToString:(id)fp8;
+ (id)symbolsForCurrentThreadStack;
+ (id)stackTrace;
- (id)_stackTrace;
- (void)_generateStackTrace;
- (id)initWithName:(id)fp8 reason:(id)fp12 userInfo:(id)fp16;
- (id)reason;
- (id)description;
- (void)raise;

@end

@interface NSImage (IPHAdditions)
- (id)JPEGRepresentationWithCompressionFactor:(float)fp8;
- (BOOL)fixDPI;
@end

@interface NSRunLoop (IPHAdditions)
+ (id)mainRunLoop;
@end

@interface WSGeneratedObj : NSObject
{
    struct OpaqueWSMethodInvocationRef *fRef;
    NSDictionary *fResult;
    id fAsyncTarget;
    SEL fAsyncSelector;
}

- (id)init;
- (void)dealloc;
- (void)gotResults:(struct __CFDictionary *)fp8;
- (struct OpaqueWSMethodInvocationRef *)getRef;
- (id)getResultDictionary;
- (void)reset;
- (BOOL)isFault;
- (BOOL)isComplete;
- (id)getValue;
- (void)handleError:(id)fp8 errorString:(id)fp12 errorDomain:(int)fp16 errorNumber:(int)fp20;
- (void)setParameters:(int)fp8 values:(id *)fp12 names:(id *)fp16;
- (id)copyHeaderDictionary:(int)fp8 extraVals:(id *)fp12 extraKeys:(id *)fp16;
- (struct OpaqueWSMethodInvocationRef *)createInvocationRef:(id)fp8 methodName:(id)fp12 protocol:(id)fp16 style:(id)fp20 soapAction:(id)fp24 methodNamespace:(id)fp28;
- (struct OpaqueWSMethodInvocationRef *)genCreateInvocationRef;
- (void)setCallBack:(id)fp8 selector:(SEL)fp12;
- (void)scheduleOnRunLoop:(id)fp8 mode:(id)fp12;
- (void)unscheduleFromRunLoop:(id)fp8 mode:(id)fp12;

@end

@interface IPDrawingElement : IPPageElement
{
    float mBorderWidth;
    NSMutableArray *mPaths;
    BOOL mClosedShape;
    struct CGPath *mDrawingPath;
    struct _NSPoint mDrawingOffset;
    float mCurrentPathScale;
}

- (id)initWithElement:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (BOOL)isLocked;
- (struct _NSRect)drawingRect:(float)fp8;
- (BOOL)isDrawingElement;
- (float)borderWidth;
- (void)setBorderWidth:(float)fp8;
- (id)paths;
- (void)setPaths:(id)fp8;
- (BOOL)isClosedShape;
- (void)setIsClosedShape:(BOOL)fp8;
- (struct _NSPoint)drawingOffset;
- (void)setDrawingOffset:(struct _NSPoint)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)_updateDrawingPathForScale:(float)fp8;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16;

@end

@interface FullScreenScroller : NSScroller
{
    NSImage *_leftArrowN;
    NSImage *_leftArrowP;
    NSImage *_leftArrowTogetherN;
    NSImage *_leftArrowTogetherP;
    NSImage *_rightArrowN;
    NSImage *_rightArrowP;
    NSImage *_thumbLeftCap;
    NSImage *_thumbRightCap;
    NSImage *_thumbFill;
    NSImage *_trackFill;
    NSImage *_rightArrowTogetherN;
    NSImage *_rightArrowTogetherP;
    NSImage *_leftNoArrow;
    NSImage *_topArrowN;
    NSImage *_topArrowP;
    NSImage *_topArrowTogetherN;
    NSImage *_topArrowTogetherP;
    NSImage *_bottomArrowTogetherN;
    NSImage *_bottomArrowTogetherP;
    NSImage *_bottomArrowN;
    NSImage *_bottomArrowP;
    NSImage *_thumbTopCap;
    NSImage *_thumbBottomCap;
    NSImage *_thumbVerticalFill;
    NSImage *_trackVerticalFill;
    NSImage *_topNoArrow;
    float _alpha;
}

- (void)_loadImages;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)_isVertical;
- (void)drawArrow:(int)fp8 highlightPart:(int)fp12;
- (void)drawArrow:(int)fp8 highlight:(BOOL)fp12;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)_drawVertScaledWidgetInRect:(struct _NSRect)fp8 topImage:(id)fp24 centerImage:(id)fp28 bottomImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (float)alpha;
- (void)setAlpha:(float)fp8;

@end

@interface IWAnimation : NSObject <NSCopying, NSCoding>
{
    double _duration;
    float _currentProgress;
    float _framesPerSecond;
    id _delegate;
    NSTimer *_timer;
    double _startTime;
    NSMutableArray *_progressMarks;
    IWAnimation *_startAnimation;
    IWAnimation *_stopAnimation;
    int _nextProgressMark;
    struct {
        unsigned int delegateAnimationShouldStart:1;
        unsigned int delegateAnimationDidStop:1;
        unsigned int delegateAnimationDidEnd:1;
        unsigned int delegateAnimationValueForProgress:1;
        unsigned int delegateAnimationDidReachProgressMark:1;
        unsigned int animating:1;
        unsigned int blocking:1;
        unsigned int reserved:25;
    } _aFlags;
    struct {
        unsigned int animationCurve:8;
        unsigned int animationBlockingMode:2;
        unsigned int reserved:22;
    } _aSettings;
    long _reserved1;
    long _reserved2;
    long _reserved3;
    long _reserved4;
}

+ (void)initialize;
- (id)init;
- (id)initWithDuration:(double)fp8 animationCurve:(int)fp16;
- (void)dealloc;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)startAnimation;
- (void)stopAnimation;
- (BOOL)isAnimating;
- (float)currentProgress;
- (void)setCurrentProgress:(float)fp8;
- (void)setDuration:(double)fp8;
- (double)duration;
- (int)animationBlockingMode;
- (void)setAnimationBlockingMode:(int)fp8;
- (void)setFrameRate:(float)fp8;
- (float)frameRate;
- (void)setAnimationCurve:(int)fp8;
- (int)animationCurve;
- (float)currentValue;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (id)progressMarks;
- (void)setProgressMarks:(id)fp8;
- (void)addProgressMark:(float)fp8;
- (void)removeProgressMark:(float)fp8;
- (void)startWhenAnimation:(id)fp8 reachesProgress:(float)fp12;
- (void)stopWhenAnimation:(id)fp8 reachesProgress:(float)fp12;
- (void)clearStartAnimation;
- (void)clearStopAnimation;
- (id)runLoopModesForAnimating;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface IWTargetAnimationInfo : NSObject <NSCoding>
{
    IWAnimation *_animation;
    float _progress;
    BOOL _start;
}

- (id)initWithAnimation:(id)fp8 progress:(float)fp12 start:(BOOL)fp16;
- (float)floatValue;
- (void)startOrStopTargetAnimation;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)description;

@end

@interface IWAnimation (NSInternal)
- (void)_createTimer:(BOOL)fp8;
- (void)_runBlocking;
- (void)_startRunningNonBlocking;
- (void)_runInNewThread;
- (void)_advanceTime;
- (void)_animationThread;
- (void)_startAnimation;
- (void)_stopAnimation:(int)fp8;
- (void)_addTargetAnimation:(id)fp8 start:(BOOL)fp12 atProgress:(float)fp16;
- (void)_removeTargetAnimation:(id)fp8 start:(BOOL)fp12;
- (float)_progressForAnimation:(id)fp8 start:(BOOL)fp12;
- (void)_clearAllTargetAnimations;
@end

@interface IWMultiWindowAnimation : IWAnimation
{
    NSMutableArray *mInfoArray;
}

- (id)initWithDuration:(double)fp8 animationCurve:(int)fp16;
- (void)dealloc;
- (void)addWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48 scaleContent:(BOOL)fp52;
- (void)addWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48;
- (id)animationInfoForWindow:(id)fp8;
- (float)endAlphaForWindow:(id)fp8;
- (void)setCurrentProgress:(float)fp8;
- (struct _NSRect)blendStartRect:(struct _NSRect)fp8 endRect:(struct _NSRect)fp24 fraction:(float)fp40;
- (struct _NSRect)integralRect:(struct _NSRect)fp8;

@end

@interface IWWindowAnimationView : NSView
{
    NSBitmapImageRep *_content;
}

+ (id)viewForView:(id)fp8;
- (id)initWithView:(id)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IWWindowAnimationInfo : NSObject
{
    NSWindow *mWindow;
    struct _NSRect mStartFrame;
    struct _NSRect mEndFrame;
    float mStartAlpha;
    float mEndAlpha;
    BOOL mScaleContent;
    NSView *mContentViewHolder;
}

- (id)initWithWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48 scaleContent:(BOOL)fp52;
- (void)dealloc;
- (id)window;
- (struct _NSRect)startFrame;
- (struct _NSRect)endFrame;
- (float)startAlpha;
- (float)endAlpha;
- (BOOL)scaleContent;
- (void)setContentViewHolder:(id)fp8;
- (id)contentViewHolder;

@end

@interface EffectsView : NSView
{
    CIContext *mCoreContext;
    struct EffectsStruct mEffects[9];
    Edit *mEdit;
    EffectsController *mController;
    float mMaxTitleHeight;
    struct _NSRect mImageRect;
    NSLayoutManager *sLayoutManager;
    NSTextContainer *sTextContainer;
    BOOL mForEffects;
    int mRows;
    int mMouseInEffect;
}

- (id)initWithFrame:(struct _NSRect)fp8 forEffects:(BOOL)fp24;
- (void)dealloc;
- (void)initializeFilter;
- (id)imageWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (void)clearCaches;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)setController:(id)fp8;

@end

@interface NavigationController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NavigationView *mNavView;
    Edit *mEdit;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (void)mouseExited:(id)fp8;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)close:(id)fp8;
- (void)layoutMainView;
- (id)mainView;
- (void)setEdit:(id)fp8;
- (id)edit;
- (void)refresh;

@end

@interface NavigationView : NSView
{
    NavigationController *mController;
    CIContext *mCoreContext;
    struct _NSRect mCurrentRect;
    struct _NSPoint mOffset;
}

- (void)updateFrame;
- (id)filteredImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setController:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drag:(id)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface IPHProcessIndicator : IPHProgressIndicator
{
}

- (id)iconsForAnimationFilenames;
- (id)indeterminateIconsForAnimationFilenames;
- (id)alternateIconsForAnimationFilenames;
- (id)alternateIndeterminateIconsForAnimationFilenames;
- (void)draw;

@end

@interface IPHProgressIndicator : NSProgressIndicator
{
    NSMutableArray *_icons;
    NSMutableArray *_indeterminateIcons;
    NSMutableArray *_alternateIcons;
    NSMutableArray *_alternateIndeterminateIcons;
    BOOL _animationStarted;
    NSTimer *_animationTimer;
    BOOL _useAlternateIcons;
    BOOL _flipped;
    BOOL _cancelable;
    BOOL _highlighted;
    int _trackingRectTag;
    BOOL _mouseInside;
    BOOL _mouseIsDown;
    BOOL _wasAnimating;
}

+ (void)initialize;
- (void)commonInit;
- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setIcons:(id)fp8 forAnimationFilenames:(id)fp12;
- (void)setIconsForAnimationFilenames:(id)fp8;
- (void)setIndeterminateIconsForAnimationFilenames:(id)fp8;
- (void)setAlternateIconsForAnimationFilenames:(id)fp8;
- (void)setAlternateIndeterminateIconsForAnimationFilenames:(id)fp8;
- (id)iconsForAnimationFilenames;
- (id)indeterminateIconsForAnimationFilenames;
- (id)alternateIconsForAnimationFilenames;
- (id)alternateIndeterminateIconsForAnimationFilenames;
- (int)nbIconsForAnimation;
- (id)iconForAnimationAtIndex:(int)fp8;
- (id)alternateIconForAnimationAtIndex:(int)fp8;
- (id)imageToDrawAtIndex:(int)fp8;
- (void)setIsHighlighted:(BOOL)fp8;
- (struct _NSRect)_getGaugeFrame;
- (struct _NSRect)getSpinnerFrame;
- (BOOL)isHighlighted;
- (void)setHighlighted:(BOOL)fp8;
- (BOOL)isCancelable;
- (void)setIsCancelable:(BOOL)fp8;
- (void)draw;
- (void)setIndeterminate:(BOOL)fp8;
- (void)animationProgressed;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_cancelMouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)_resetTrackingRect;
- (void)resetCursorRects;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)removeFromSuperview;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)_immediatelyDraw;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface NSProgressIndicator (IPHProgressIndicatorExtension)
- (int)currentAnimationStep;
- (void)setCurrentAnimationStep:(int)fp8;
@end

@interface IPSmartResolver : NSObject
{
    NSString *mPath;
    struct IPFileInfo *mFileInfo;
    _Bool mWithUI;
    NSString *mResolvedPath;
}

+ (void)initialize;
+ (id)resolvePath:(id)fp8 forFileInfo:(struct IPFileInfo *)fp12 withUI:(_Bool)fp16;
+ (void)addResolution:(id)fp8 forPath:(id)fp12;
- (id)_initWithPath:(id)fp8 forFileInfo:(struct IPFileInfo *)fp12 withUI:(_Bool)fp16;
- (void)dealloc;
- (id)_resolvedPath;
- (void)_setResolvedPath:(id)fp8;
- (void)_resolvePathOnMainThread:(id)fp8;
- (id)_checkResolveHistory:(id)fp8;

@end

@interface IPFileValidator : NSObject
{
    NSString *mFilename;
}

+ (id)fileValidatorForFilename:(id)fp8;
- (id)initWithFilename:(id)fp8;
- (void)dealloc;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;

@end

@interface HUDTextView : NSTextView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawViewBackgroundInRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;

@end

@interface ColorBackgroundView : NSView
{
    NSColor *mTheColor;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setBackgroundColor:(id)fp8;

@end

@interface HUDBoxView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPToolTipContent : NSObject
{
    NSAttributedString *_title;
    NSAttributedString *_comment;
    NSAttributedString *_date;
    NSAttributedString *_time;
    NSAttributedString *_rating;
    NSAttributedString *_format;
    NSAttributedString *_dimensions;
    NSAttributedString *_size;
}

+ (id)defaultTitleStyle;
+ (id)defaultContentLabelStyle;
+ (id)defaultContentStyle;
+ (id)defaultStarStyle;
+ (id)contentWithTitle:(id)fp8 comment:(id)fp12 date:(id)fp16 time:(id)fp20 rating:(id)fp24 format:(id)fp28 dimensions:(id)fp32 size:(id)fp36;
+ (id)dateLabel;
+ (id)timeLabel;
+ (id)ratingLabel;
+ (id)formatLabel;
+ (id)dimensionsLabel;
+ (id)sizeLabel;
+ (struct _NSSize)maxLabelSize;
- (void)dealloc;
- (struct _NSSize)titleSize;
- (struct _NSSize)commentSize;
- (struct _NSSize)infoSize;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)comment;
- (void)setComment:(id)fp8;
- (id)date;
- (void)setDate:(id)fp8;
- (id)time;
- (void)setTime:(id)fp8;
- (id)rating;
- (void)setRating:(id)fp8;
- (id)format;
- (void)setFormat:(id)fp8;
- (id)dimensions;
- (void)setDimensions:(id)fp8;
- (id)size;
- (void)setSize:(id)fp8;

@end

@interface IPToolTipManager : NSObject
{
    NSView *_ownerView;
    NSString *_toolTip;
    NSAttributedString *_attrToolTip;
    int _nextTag;
    void *_toolTipMap;
    int _wholeViewToolTipTag;
    int _visibleToolTipTag;
    IPToolTipWindow *_toolTipWindow;
    NSTimer *_toolTipTimer;
}

- (id)initWithView:(id)fp8;
- (void)stopListening;
- (void)startListening;
- (void)dealloc;
- (int)addToolTipRect:(struct _NSRect)fp8 owner:(id)fp24 userData:(void *)fp28;
- (void)removeAllToolTips;
- (void)removeToolTip:(int)fp8;
- (void)setToolTip:(id)fp8;
- (id)toolTip;
- (void)setAttributedToolTip:(id)fp8;
- (id)attributedToolTip;
- (void)_addWholeViewToolTip;
- (void)_removeWholeViewToolTip;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEnteredToolTip:(int)fp8 inWindow:(id)fp12 withEvent:(id)fp16;
- (void)mouseExitedToolTip:(int)fp8 inWindow:(id)fp12 withEvent:(id)fp16;
- (void)stopTimer;
- (void)setShowTimerForTag:(int)fp8 atPoint:(struct _NSPoint)fp12 quick:(BOOL)fp20;
- (void)setHideTimerForTag:(int)fp8 hovering:(BOOL)fp12;
- (void)showToolTip:(int)fp8 atPoint:(struct _NSPoint)fp12;
- (void)hideToolTip;
- (void)showTimerFired:(id)fp8;
- (void)hideTimerFired:(id)fp8;

@end

@interface IPToolTipContext : NSObject
{
    int _tag;
    struct _NSPoint _point;
}

+ (id)contextWithTag:(int)fp8 point:(struct _NSPoint)fp12;
- (int)tag;
- (void)setTag:(int)fp8;
- (struct _NSPoint)point;
- (void)setPoint:(struct _NSPoint)fp8;

@end

@interface IPToolTipWindow : NSWindow
{
}

+ (struct _NSRect)safeRect:(struct _NSRect)fp8;
+ (id)showWithContent:(id)fp8 forPoint:(struct _NSPoint)fp12;
- (id)initWithContentRect:(struct _NSRect)fp8;
- (void)updateWithContent:(id)fp8 forPoint:(struct _NSPoint)fp12;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface IPToolTipView : NSView
{
    id _content;
}

+ (struct _NSSize)sizeForContent:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (void)drawRect:(struct _NSRect)fp8;
- (id)content;
- (void)setContent:(id)fp8;

@end

@interface IPThemeSelectionCell : NSActionCell
{
    CachedBundle *mTheme;
    struct IPPhotoInfo *mPhotoInfo;
    NSString *mCategory;
    NSAttributedString *_attributedTitle;
    NSString *_title;
    BOOL mShouldDrawPhoto;
}

- (id)init;
- (BOOL)acceptsFirstResponder;
- (int)imagePosition;
- (void)setTheme:(id)fp8;
- (id)theme;
- (void)setCategory:(id)fp8;
- (id)category;
- (void)setPreviewPhoto:(struct IPPhotoInfo *)fp8;
- (void)setShouldDrawPhoto:(BOOL)fp8;
- (BOOL)isOpaque;
- (struct _NSRect)aspectedRectInRect:(struct _NSRect)fp8 forSize:(struct CGSize)fp24;
- (struct _NSRect)aspectedRectFillingRect:(struct _NSRect)fp8 forSize:(struct CGSize)fp24;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)dealloc;
- (id)attributedTitle;
- (void)setAttributedTitle:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;

@end

@interface FirstMouseButton : NSButton
{
    BOOL mAcceptsFirstMouse;
    BOOL mWasEnabled;
    BOOL mWindowIsKey;
}

- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)isEnabled;

@end

@interface PublishAlbumSettings : NSObject
{
    NSPanel *mPublishPanel;
    NSTextField *mPublishTitle;
    NSTextField *mPublishMessage;
    NSTextField *mPublishPhotoSizePrompt;
    NSPopUpButton *mPublishPhotoSizeMenu;
    NSProgressIndicator *mPublishGroupsSpinner;
    NSTextField *mPublishGroupsTitle;
    NSPopUpButton *mPublishGroupsMenu;
    NSMenuItem *mPublishGroupsDynamicMenuItem;
    NSMenuItem *mPublishGroupsDynamicSeparator;
    NSButton *mPublishAutoUpdateCheckbox;
    NSButton *mPublishOKButton;
    NSButton *mPublishCancelButton;
    NSButton *mPublishShowSettingsButton;
    NSButton *mPublishShowCaptionsCheckbox;
    NSTextField *mPublishShowCaptionsTitle;
    NSPopUpButton *mPublishShowCaptionsMenu;
    NSTextField *mPublishAllowTitle;
    NSTextField *mPublishOptionsTitle;
    NSTextField *mPublishQualityTitle;
    NSButton *mPublishShowDownloadLinkCheckbox;
    NSButton *mPublishAllowContributionsCheckbox;
    NSButton *mPublishAllowCommentsCheckbox;
    NSTextField *mPublishMobileTitle;
    NSButton *mPublishAllowMobileCheckbox;
    NSButton *mPublishAllowWidgetCheckbox;
    NSButton *mPublishShowEmailCheckbox;
    NSView *mPublishSettingsView;
    NSPanel *mSubscribePanel;
    NSTextField *mSubscribeTitle;
    NSTextField *mSubscribeURL;
    NSButton *mSubscribeOKButton;
    NSButton *mSubscribeCancelButton;
    NSPanel *mPasswordPanel;
    NSTextField *mPasswordTitle;
    NSTextField *mPasswordUsernameText;
    NSTextField *mPasswordPasswordText;
    NSButton *mPasswordOKButton;
    NSButton *mPasswordCancelButton;
    NSButton *mPasswordRememberButton;
    NSPanel *mRetryPanel;
    NSTextField *mRetryTitle;
    NSTextField *mRetryUsernameText;
    NSTextField *mRetryPasswordText;
    NSButton *mRetryOKButton;
    NSButton *mRetryCancelButton;
    NSButton *mRetryRememberButton;
    NSPanel *mSubConfirmPanel;
    NSImageView *mSubConfirmPicture;
    NSTextField *mSubConfirmTitle;
    NSTextField *mSubConfirmMessage;
    NSButton *mSubConfirmDontAskCheckbox;
    NSButton *mSubConfirmSubscribeButton;
    NSButton *mSubConfirmCancelButton;
    NSPanel *mGroupsPanel;
    NSTableView *mGroupsTable;
    NSButton *mGroupsAddButton;
    NSButton *mGroupsRemoveButton;
    NSButton *mGroupsOKButton;
    NSButton *mGroupsCancelButton;
    NSProgressIndicator *mGroupsProgressSpinner;
    NSTextField *mGroupsProgressText;
    NSTextField *mGroupsRestrictionsText;
    NSPanel *mConflictPanel;
    NSTextField *mConflictTitle;
    NSTextField *mConflictPhotoLibraryTitle;
    NSImageView *mConflictPhotoLibraryImage;
    NSTextView *mConflictPhotoLibraryText;
    NSTextField *mConflictWebGalleryTitle;
    NSImageView *mConflictWebGalleryImage;
    NSTextView *mConflictWebGalleryText;
    NSButton *mConflictApplyAllButton;
    NSButton *mConflictCancelButton;
    NSButton *mConflictUsePhotoLibraryButton;
    NSButton *mConflictUseWebGalleryButton;
    NSMutableArray *mPublishAlbumNibObjects;
    NSString *mPublishSavedTitle;
    NSString *mPublishSavedMessage;
    NSMenu *mPublishSavedGroupsMenu;
    int mPublishSavedGroupsDynamicMenuItemTag;
    int mPublishSavedGroupsDynamicSeparatorTag;
    BOOL mPublishIsShowingSettings;
    NSString *mPublishUsername;
    NSString *mPasswordSavedTitle;
    NSString *mRetrySavedTitle;
    struct IPPhotoList *mSelection;
    Album *mAlbum;
    NSWindow *mWindow;
    NSString *mTitle;
    NSString *mSubConfirmURL;
    _Bool mShowedRetry;
    NSMutableArray *mSecondaryUsers;
    NSMutableArray *mSecondaryPasswords;
    NSString *mDotMacUserName;
    NSString *mDotMacPassword;
    int mEditingPasswordRow;
    BOOL mDontValidate;
    NSMutableArray *mPublishedAlbums;
    Ellipsizer *mAlbumListEllipsizer;
    id mModalDelegate;
    SEL mDidEndSelector;
    void *mContextInfo;
}

- (void)_ensureNib;
- (void)dealloc;
- (void)_showPubSubError:(id)fp8;
- (void)_usersRetrieved:(id)fp8 error:(id)fp12;
- (void)_usersRetrievedForGroupsWindow:(id)fp8 error:(id)fp12;
- (void)_setupGroupsMenuMainThread;
- (void)_usersRetrievedMainThread:(id)fp8;
- (void)_usersRetrievedForGroupsWindowMainThread:(id)fp8;
- (id)beginPublishSettingsForAlbum:(id)fp8 inWindow:(id)fp12 withSettings:(id)fp16 modalDelegate:(id)fp20 didEndSelector:(SEL)fp24 contextInfo:(void *)fp28 forAddAlbum:(BOOL)fp32;
- (void)_publishSettingsDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)beginSubscribeSettingsInWindow:(id)fp8 modalDelegate:(id)fp12 didEndSelector:(SEL)fp16 contextInfo:(void *)fp20;
- (id)beginPasswordPromptForAlbum:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (id)beginRetryPromptForAlbum:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (id)beginSubscribeConfirmForURL:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (id)beginGroupManagerInWindow:(id)fp8 modalDelegate:(id)fp12 didEndSelector:(SEL)fp16 contextInfo:(void *)fp20;
- (id)publishPanel;
- (void *)contextInfo;
- (id)publishSettingsView;
- (struct IPPhotoList *)selection;
- (void)setSelection:(struct IPPhotoList *)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)album;
- (_Bool)showedRetry;
- (id)settings;
- (int)publishResizeSetting;
- (BOOL)publishAutoPublish;
- (id)publishUsername;
- (id)publishPassword;
- (int)publishShowCaptions;
- (BOOL)publishShowDownloadLink;
- (BOOL)publishAllowContributions;
- (BOOL)publishAllowComments;
- (BOOL)publishAllowMobile;
- (BOOL)publishAllowAlbumWidget;
- (BOOL)publishShowEmailToVisitors;
- (void)hitPublishShowSettings:(id)fp8;
- (void)hitPublishOK:(id)fp8;
- (void)hitPublishCancel:(id)fp8;
- (void)hitPublishSizeMenu:(id)fp8;
- (void)_groupsManagerDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_updatePublishPrompt;
- (void)hitPublishGroupsMenu:(id)fp8;
- (void)hitPublishShowCaptions:(id)fp8;
- (void)hitPublishShowCaptionsMenu:(id)fp8;
- (void)hitPublishShowDownloadLink:(id)fp8;
- (void)hitPublishAllowContributions:(id)fp8;
- (void)hitPublishAllowComments:(id)fp8;
- (void)hitPublishAllowMobile:(id)fp8;
- (void)hitPublishAllowWidget:(id)fp8;
- (void)hitPublishShowEmail:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (id)subscribeURL;
- (void)hitSubscribeOK:(id)fp8;
- (void)hitSubscribeCancel:(id)fp8;
- (id)passwordUsername;
- (id)passwordPassword;
- (BOOL)passwordRememberInKeychain;
- (void)hitPasswordOK:(id)fp8;
- (void)hitPasswordCancel:(id)fp8;
- (id)retryUsername;
- (id)retryPassword;
- (BOOL)retryRememberInKeychain;
- (void)hitRetryOK:(id)fp8;
- (void)hitRetryCancel:(id)fp8;
- (void)hitSubConfirmOK:(id)fp8;
- (void)hitSubConfirmCancel:(id)fp8;
- (void)hitSubConfirmDontAsk:(id)fp8;
- (id)subscribeConfirmURL;
- (BOOL)subscribeConfirmDontAsk;
- (void)hitGroupsOK:(id)fp8;
- (void)hitGroupsCancel:(id)fp8;
- (id)_uniqueGroupNameIfNeeded:(id)fp8;
- (void)hitGroupsAdd:(id)fp8;
- (void)hitGroupsRemove:(id)fp8;
- (void)hitGroupsTable:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;
- (void)hitConflictApplyAll:(id)fp8;
- (void)hitConflictUsePhotoLibrary:(id)fp8;
- (void)hitConflictUseWebGallery:(id)fp8;
- (void)hitConflictCancel:(id)fp8;

@end

@interface TempImageManager : NSObject
{
    struct vector<TempImageEntry, std::allocator<TempImageEntry>> *_fileList;
    unsigned long _nbValidPhotos;
    _Bool _canceled;
}

- (id)init;
- (void)dealloc;
- (void)addPhoto:(struct IPPhotoInfo *)fp8;
- (void)addPhoto:(struct IPPhotoInfo *)fp8 resizeTo:(unsigned long)fp12;
- (void)addPhoto:(struct IPPhotoInfo *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16;
- (void)addPhotoList:(struct IPPhotoList *)fp8;
- (void)addPhotoList:(struct IPPhotoList *)fp8 resizeTo:(unsigned long)fp12;
- (void)addPhotoList:(struct IPPhotoList *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16;
- (void)_getPhotoPaths:(id)fp8;
- (_Bool)preparePhotosWithQuality:(int)fp8 progressTitle:(id)fp12 inWindow:(id)fp16;
- (unsigned long)nbValidPhotos;
- (id)pathForIndex:(unsigned long)fp8;
- (struct _NSSize)sizeForIndex:(unsigned long)fp8;
- (void)_cancel;
- (void)removeTempPhotos:(BOOL)fp8;
- (id)_tempPathForPhoto:(struct IPPhotoInfo *)fp8 convertToFormat:(unsigned long)fp12;

@end

@interface NSData (IPHDataExtensions)
- (id)iph_gzippedData;
- (id)iph_gunzippedData;
@end

@interface IPHKeywordManager : NSObject
{
    NSArray *_keywords;
}

+ (void)initialize;
+ (id)keywordManager;
+ (id)keywordsForPhotoObject:(id)fp8 inSet:(id)fp12;
- (void)save;
- (void)checkStatus;
- (void)setKeywords:(id)fp8;
- (id)keywords;
- (id)keywordsWithPrefix:(id)fp8;
- (void)updateKeywordsWithArray:(id)fp8;
- (void)clearKeywords;

@end

@interface IPHDotMacGetSecondaryPassword : IPHXMLRPCRequest
{
}

- (id)initWithSession:(id)fp8 secondaryUser:(id)fp12;
- (id)password;

@end

@interface IPHDotMacGetSecondaryUsers : IPHXMLRPCRequest
{
}

- (id)initWithSession:(id)fp8;
- (id)secondaryUsers;

@end

@interface IPHDotMacResetACL : IPHDAVRequest
{
}

+ (void)initialize;
- (id)initWithSession:(id)fp8 path:(id)fp12;

@end

@interface IPHDotMacSetACL : IPHDAVRequest
{
}

+ (void)initialize;
- (id)initWithSession:(id)fp8 secondaryUserName:(id)fp12 path:(id)fp16;

@end

@interface IPHXMLRPCRequest : IPHDAVPost
{
}

- (id)initXMLRPCRequestWithSession:(id)fp8 path:(id)fp12 methodeName:(id)fp16 parameterNames:(id *)fp20 parameterValues:(id *)fp24;
- (id)requestResult;

@end

@interface OptionAlert : NSObject
{
    NSWindow *mAlertWindow;
    NSTextField *mTitle;
    NSTextField *mMessage;
    NSImageView *mIcon;
    NSButton *mOptionCheckbox;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    NSButton *mOtherButton;
    NSMutableArray *mOptionAlertNibObjects;
    void *mContextInfo;
}

+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 okButton:(id)fp24 cancelButton:(id)fp28 modalDelegate:(id)fp32 didEndSelector:(SEL)fp36 contextInfo:(void *)fp40 nibName:(id)fp44;
+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 modalDelegate:(id)fp36 didEndSelector:(SEL)fp40 contextInfo:(void *)fp44 nibName:(id)fp48;
+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 otherButton:(id)fp36 defaultReturn:(int)fp40 modalDelegate:(id)fp44 didEndSelector:(SEL)fp48 contextInfo:(void *)fp52 nibName:(id)fp56;
- (void)_ensureNib:(id)fp8;
- (void)dealloc;
- (id)initInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 otherButton:(id)fp36 defaultReturn:(int)fp40 modalDelegate:(id)fp44 didEndSelector:(SEL)fp48 contextInfo:(void *)fp52 nibName:(id)fp56;
- (void)_optionAlertDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)close;
- (BOOL)option;
- (void *)contextInfo;
- (void)hitOK:(id)fp8;
- (void)hitCancel:(id)fp8;
- (void)hitOther:(id)fp8;
- (void)hitOption:(id)fp8;

@end

@interface IPHDotMacUtilsAlbumUnpublishAsyncHelper : IPHDotMacUtilsAsyncHelper
{
    NSString *_albumName;
    NSString *_location;
    IPHUnpublishOperation *_unpublishOperation;
}

- (void)forceUnpublishAlbumNamed:(id)fp8 location:(id)fp12;
- (void)_unpublishOperationEnded:(id)fp8;

@end

@interface IPHDotMacUtilsAlbumListingAsyncHelper : IPHDotMacUtilsAsyncHelper
{
}

- (id)prepareForOperation;
- (void)operationEnded:(id)fp8;

@end

@interface IPHDotMacUtilsSecondaryUsersAsyncHelper : IPHDotMacUtilsAsyncHelper
{
    NSMutableArray *_secondaryUsers;
}

- (id)prepareForOperation;
- (void)operationEnded:(id)fp8;
- (void)dealloc;

@end

@interface IPHDotMacUtilsAsyncHelper : NSObject
{
    id _target;
    SEL _selector;
    IPHAYOperation *_parentOperation;
}

- (id)prepareForOperation;
- (void)operationEnded:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (void)dispatchAsyncOperation;
- (void)syncFor:(id)fp8;
- (void)dealloc;

@end

@interface IPHNullOperation : IPHAYOperation
{
}

- (void)dispatch;
- (void)handleNotificationOfChildOperation:(id)fp8 notification:(id)fp12;

@end

@interface IPHDotMacUtils (AsyncListingAdditions)
+ (void)listSecondaryUsersAndSendResultsToTarget:(id)fp8 selector:(SEL)fp12 syncFor:(id)fp16;
+ (void)listPublishedAlbumDirectoriesAndSendResultsToTarget:(id)fp8 selector:(SEL)fp12 syncFor:(id)fp16;
+ (void)forceUnpublishAlbumNamed:(id)fp8 location:(id)fp12 didEndTarget:(id)fp16 selector:(SEL)fp20;
@end

@interface CalendarCaptionFormatter : NSFormatter
{
    int _captionLocation;
}

- (id)stringForObjectValue:(id)fp8;
- (id)attributedStringForObjectValue:(id)fp8 withDefaultAttributes:(id)fp12;
- (id)editingStringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (int)captionLocation;
- (void)setCaptionLocation:(int)fp8;

@end

@interface ISLengthFormatter : NSFormatter
{
    int maxLength;
}

- (id)initWithMaxLength:(int)fp8;
- (int)maxLength;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;

@end

@interface ISLengthFormatter (ISUsefulLengthFormatters)
+ (id)formatterWithLength:(int)fp8;
+ (id)addressTitleFormatter;
+ (id)addressStreetFormatter;
+ (id)addressCityFormatter;
+ (id)addressFirstNameFormatter;
+ (id)addressLastNameFormatter;
+ (id)addressPhoneticFirstNameFormatter;
+ (id)addressPhoneticLastNameFormatter;
+ (id)addressPhoneAreaCodeFormatter;
+ (id)addressPhoneNumberFormatter;
+ (id)addressLabelFormatter;
+ (id)addressStateFormatter;
+ (id)debitCardIssueNumberFormatter;
@end

@interface ISLengthEncodingFormatter : ISLengthFormatter
{
    unsigned int encoding;
}

- (id)initWithMaxLength:(int)fp8 encoding:(unsigned int)fp12;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;

@end

@interface ISLengthEncodingFormatter (ISUsefulLengthEncodingFormatters)
+ (id)macRomanAddressPhoneNumberFormatter;
+ (id)macRomanLoginAccountIdFormatter;
+ (id)macRomanLoginPasswordFormatter;
@end

@interface IPCutSheetView : IPBookView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPVectorElement : IPPageElement
{
    NSMutableArray *_paths;
    NSMutableDictionary *_subPaths;
    struct _NSRect _pathBounds;
    NSArray *_archiveArray;
    struct _NSPoint mDrawingOffset;
}

- (id)archiveArray;
- (id)initWithElement:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)_calculatePathBounds;
- (id)convertColorStringToColor:(id)fp8;
- (id)svgPathFromDictionary:(id)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (id)paths;
- (void)setPaths:(id)fp8;
- (id)subPaths;
- (struct _NSRect)pathBounds;
- (void)setSubPaths:(id)fp8;
- (struct _NSPoint)drawingOffset;
- (void)setDrawingOffset:(struct _NSPoint)fp8;
- (void)drawCGPath:(id)fp8 inContext:(struct CGContext *)fp12;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16;

@end

@interface SVGPath : NSObject
{
    NSString *_path;
    NSColor *_fillColor;
    NSColor *_strokeColor;
    BOOL _fillEvenOdd;
    float _strokeWidth;
    int _strokeLineCap;
    int _strokeLineJoin;
    struct CGPath *_cgPath;
    BOOL _lastCubicBezierCtrlSet;
    struct _NSPoint _lastCubicBezierCtrl;
    BOOL _lastQuadraticBezierCtrlSet;
    struct _NSPoint _lastQuadraticBezierCtrl;
}

+ (id)createWithSVGPath:(id)fp8 fillColor:(id)fp12 strokeColor:(id)fp16 strokeWidth:(float)fp20 strokeLineCap:(int)fp24 strokeLineJoin:(int)fp28 fillEvenOdd:(BOOL)fp32;
- (id)initWithSVGPath:(id)fp8 fillColor:(id)fp12 strokeColor:(id)fp16 strokeWidth:(float)fp20 strokeLineCap:(int)fp24 strokeLineJoin:(int)fp28 fillEvenOdd:(BOOL)fp32;
- (struct CGPath *)cgPath;
- (id)fillColor;
- (id)strokeColor;
- (float)strokeWidth;
- (BOOL)fillEvenOdd;
- (int)strokeLineCap;
- (int)strokeLineJoin;
- (void)dealloc;
- (void)processAbsoluteMoveToX:(float)fp8 y:(float)fp12;
- (void)processRelativeMoveToX:(float)fp8 y:(float)fp12;
- (void)processClosePath;
- (void)processAbsoluteLineToX:(float)fp8 y:(float)fp12;
- (void)processRelativeLineToX:(float)fp8 y:(float)fp12;
- (void)processAbsoluteHorizontalLineToX:(float)fp8;
- (void)processRelativeHorizontalLineToX:(float)fp8;
- (void)processAbsoluteVerticalLineToY:(float)fp8;
- (void)processRelativeVerticalLineToY:(float)fp8;
- (void)processAbsoluteCubicBezierWithX1:(float)fp8 y1:(float)fp12 x2:(float)fp16 y2:(float)fp20 x:(float)fp24 y:(float)fp28;
- (void)processRelativeCubicBezierWithX1:(float)fp8 y1:(float)fp12 x2:(float)fp16 y2:(float)fp20 x:(float)fp24 y:(float)fp28;
- (void)processAbsoluteSmoothCubicBezierWithX2:(float)fp8 y2:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processRelativeSmoothCubicBezierWithX2:(float)fp8 y2:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processAbsoluteQuadraticBezierWithX1:(float)fp8 y1:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processRelativeQuadraticBezierWithX1:(float)fp8 y1:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processAbsoluteSmoothQuadraticBezierWithX:(float)fp8 y:(float)fp12;
- (void)processRelativeSmoothQuadraticBezierWithX:(float)fp8 y:(float)fp12;
- (void)processAbsoluteElipticalArcWithRx:(float)fp8 ry:(float)fp12 xar:(float)fp16 laf:(float)fp20 sf:(float)fp24 x:(float)fp28 y:(float)fp32;
- (void)processRelativeElipticalArcWithRx:(float)fp8 ry:(float)fp12 xar:(float)fp16 laf:(float)fp20 sf:(float)fp24 x:(float)fp28 y:(float)fp32;
- (void)_convert;

@end

@interface SVGSubPath : NSObject
{
    NSString *_name;
    NSString *_matrix;
    NSArray *_paths;
    struct CGAffineTransform _transform;
}

+ (id)createWithName:(id)fp8 matrix:(id)fp12 paths:(id)fp16;
- (id)initWithName:(id)fp8 matrix:(id)fp12 paths:(id)fp16;
- (void)dealloc;
- (id)paths;
- (struct CGAffineTransform)transform;

@end

@interface IPVectorTextElement : IPTextElement
{
    struct CGPath *mTextPath;
}

- (BOOL)isTextElement;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)textStyleChanged;
- (void)_constructPath;
- (void)dealloc;

@end

@interface ActionIndicatorAnimator : NSObject
{
    ActionIndicatorWindow *mWind;
    NSTimer *mTimer;
    NSArray *mImages;
    int mImageIndex;
}

- (void)_animate:(id)fp8;
- (id)initWithWindow:(id)fp8 images:(id)fp12 interval:(double)fp16;
- (void)dealloc;

@end

@interface ActionIndicatorWindow : NSWindow
{
    NSTimer *mTimer;
    float mFadeIncrement;
    float mFade;
    BOOL mPoof;
    double mAnimationDelay;
}

- (void)dealloc;
- (id)initWithImage:(id)fp8;
- (void)setPoof:(BOOL)fp8;
- (void)scheduleHide:(double)fp8;
- (void)_hideUsingTimer:(id)fp8;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface IPBookSlideshowController : NSObject
{
    IPBook *mBook;
    IPSlideshowSettings *mSettings;
    int mLastTextureId;
    NSArray *mAnimatedElements;
    struct _NSSize mSceneSize;
    float mScreenScale;
}

- (id)initWithBook:(id)fp8;
- (void)setSlideshowSettings:(id)fp8;
- (void)play;
- (struct _NSSize)bookSlideshow:(id)fp8 sizeForScreenSize:(struct _NSSize)fp12;
- (int)bookSlideshowSceneCount:(id)fp8;
- (CDAnonymousStruct15)bookSlideshow:(id)fp8 sceneForIndex:(int)fp12;
- (void)bookSlideshow:(id)fp8 drawTexture:(int)fp12 forScene:(CDAnonymousStruct15 *)fp16 inContext:(struct CGContext *)fp20;
- (void)bookSlideshowEnded:(id)fp8;
- (void)dealloc;

@end

@interface IPBookAnimationEffect : NSObject
{
    CDAnonymousStruct4 mEffectData;
}

- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8;
- (CDAnonymousStruct14)effectDataAtScale:(float)fp8 withTextureDuration:(float)fp12 andOffset:(struct CGPoint)fp16;
- (void)dealloc;
- (void)computeInterpolation1From2DArray:(float **)fp8 ofSize:(int)fp12;
- (void)computeInterpolation2From2DArray:(float **)fp8 ofSize:(int)fp12;

@end

@interface IPBookSlideshowPlayer : NSObject <IAIPPluginControllerProtocol>
{
    id mDelegate;
    struct _NSRect mScreenFrame;
    NSScreen *mScreen;
    float mRefreshRate;
    struct _NSRect mSlideshowFrame;
    SlideShowWindow *mWindow;
    IPSlideshowPlayerView *mSlideView;
    BOOL mFullScreen;
    BOOL mSmallWindow;
    struct _CGDirectDisplayID *mDisplay;
    NSOpenGLContext *mCurrentContext;
    NSOpenGLPixelFormat *mPixelFormat;
    struct __CFDictionary *mSavedDisplayMode;
    BOOL mSwitchedDisplayMode;
    int mScreenFormat;
    BOOL mFaderInitialized;
    SessionContext *mSession;
    LCDOverlayServer *mLCDOverlay;
    BOOL mShowingLCDDisplay;
    float mLCDLingerTime;
    double mLCDStartTime;
    int mLCDState;
    NSTimer *mSlideshowTaskTimer;
    BOOL mEventLoop;
    NSLock *mScenePrepThreadLock;
    CDAnonymousStruct5 mScene;
    CDAnonymousStruct5 mNextScene;
    struct _textureArray *mTextures;
    struct _opaque_pthread_mutex_t mTexturesLock;
    TexturedRectangle *mFrontTransitionImage;
    TexturedRectangle *mBackTransitionImage;
    BOOL mIsRendering;
    int mTransitionFrameCount;
    BOOL mCursorHidden;
    BOOL mMousePaused;
    struct _NSPoint mLastMouseLocation;
    double mLastMouseTime;
    BOOL mWokeMouse;
    int mLastControlHit;
    double mLastControlTime;
    double mMousePausedTime;
    BOOL mApplescriptMode;
    BOOL mPlaying;
    BOOL mPaused;
    int mSlideshowPlayState;
    BOOL mForceTransitionStart;
    BOOL mDisplayFrameUpdateNeeded;
    BOOL mSkipTransitionAndLoadPrevious;
    double mDurationScale;
    double mShowStartTime;
    double mLastFrameTime;
    double mShowPauseTime;
    long mShowSlideIndex;
    int mSceneCount;
    double mShowCounter;
    double mNextSceneStartCounter;
    int mTransitionDirection;
    double mTransitionSpeed;
    double mCurrentTransitionSpeed;
    double mCurrentTransitionCounter;
    double mCurrentTransitionTotal;
    double mLastTransitionSpeed;
    int mSceneIndex;
    double mSceneStartTime;
    double mSceneDuration;
    double mSceneCounter;
    double mSceneTotal;
    int mNextSceneIndex;
    double mNextSceneStartTime;
    double mNextSceneDuration;
    double mNextSceneCounter;
    double mNextSceneTotal;
    BOOL mLoop;
    BOOL mPlayMusic;
    NSString *mSongPath;
    NSString *mPlaylistName;
    BOOL mFitToMusic;
    BOOL mShowingControls;
    NSMutableArray *mSongPaths;
    struct MovieType **mSongMovie;
    short mSongRefNum;
    long mSongError;
    struct OpaqueGrafPtr *mGworld;
    NSTimer *mSongTaskTimer;
    unsigned int mSongIndex;
    unsigned long mTotalSongDuration;
    double mSongTimeAccumulator;
    double mSlideTimeAccumulator;
    BOOL mValidMusic;
    BOOL mMusicOnlyOnce;
    double mForcedSlideDuration;
    double mForcedTransitionSpeed;
    NSMutableDictionary *mRenderPlugins;
    NSMutableDictionary *mRenderPluginInfos;
    id mRenderer;
    Class mCurrentPluginClass;
}

+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (struct _NSSize)slideshowSize;
- (struct _NSRect)slideshowFrame;
- (int)slideshowScreenFormat;
- (void)setSlideshowScreenFormat:(int)fp8;
- (BOOL)prepareToPlaySlideshowWithDelegate:(id)fp8 applescriptMode:(BOOL)fp12 displayIndex:(int)fp16;
- (void)playSlideshowPreviewInView:(id)fp8 fromSceneIndex:(int)fp12 toSceneIndex:(long)fp16 transitionOnly:(BOOL)fp20;
- (void)playSlideshow;
- (void)endSlideshow;
- (void)setLoopSlideshow:(BOOL)fp8;
- (BOOL)loopSlideshow;
- (void)setPlayMusic:(BOOL)fp8;
- (BOOL)playMusic;
- (void)setSongPath:(id)fp8;
- (id)songPath;
- (void)setPlaylistName:(id)fp8;
- (id)playlistName;
- (void)setFitToMusic:(BOOL)fp8;
- (BOOL)fitToMusic;
- (BOOL)applescriptMode;
- (BOOL)preflightMusic:(id)fp8 playlistName:(id)fp12;
- (void)setupMusic;
- (void)clearMusic;
- (void)startMusic;
- (void)stopMusic;
- (void)_playSong;
- (void)_stopCurrentSong;
- (void)nextSong;
- (void)pauseMusic;
- (void)resumeMusic;
- (void)_songTask:(id)fp8;
- (void)_songTaskNeededSooner:(long)fp8;
- (short)_loadSong:(id)fp8;
- (void)_showCursor;
- (void)_hideCursor;
- (BOOL)_initViewingAreaWithFormat:(int)fp8;
- (float)_determineMaxSlideshowWidth:(struct _NSSize)fp8;
- (BOOL)_setupSessionWithRect:(struct _NSRect)fp8 flipped:(BOOL)fp24 pixelFormat:(id)fp28;
- (struct _NSRect)_findDisplayMode:(long)fp8 screenRect:(struct _NSRect)fp12;
- (float)_determineRefreshRate:(BOOL)fp8 width:(float)fp12;
- (void)_fadeToBlack;
- (void)_fadeToWhite;
- (void)_initFader;
- (void)_setFaderValue:(float)fp8;
- (void)_closeFader;
- (void)_captureDisplay;
- (BOOL)_createNewOpenGLContext;
- (void)_setVBLSynch:(BOOL)fp8;
- (struct _NSPoint)_currentMouse;
- (void)_slideshowTimerWithFrameRate:(float)fp8;
- (void)_eventLoop;
- (void)_eventLoopDuring;
- (void)_slideshowTask:(id)fp8;
- (void)_releaseTransitionImages;
- (void)_captureSnapshots;
- (BOOL)_setupTransition;
- (void)_mouseTask:(id)fp8;
- (void)_nextSceneIndex;
- (void)_loadNextScene;
- (void)_loadNextSceneThreaded:(BOOL)fp8;
- (void)_loadScene;
- (void)_swapScenes;
- (void)_finishedRendering;
- (void)_loadTextureForIndex:(int)fp8 forScene:(CDAnonymousStruct15 *)fp12;
- (void)pauseSlideshow;
- (void)resumeSlideshow;
- (void)togglePause;
- (void)bumpSpeed:(float)fp8;
- (void)_stepFrame:(double)fp8;
- (void)nextSlide:(BOOL)fp8;
- (void)previousSlide:(BOOL)fp8;
- (BOOL)_handleMousedown:(struct _NSPoint)fp8 withModifiers:(unsigned int)fp16;
- (BOOL)_pointInLCD:(struct _NSPoint)fp8;
- (void)_handleMouseUp;
- (void)_fadeFromGamma:(float)fp8 to:(float)fp12 toMusicVolume:(short)fp16 time:(double)fp20;
- (void)_clearCommandQueue;
- (BOOL)_queueCommand:(int)fp8;
- (int)_pullNextCommand;
- (void)_releaseDisplay;
- (void)_removeGL;
- (void)_renderBackSceneFrame;
- (BOOL)_applyEffectsToTextures;
- (void)_calculateAvgSpeedScaleForEffect:(CDAnonymousStruct14 *)fp8;
- (float)_fractionOfDeltaForEffect:(CDAnonymousStruct14 *)fp8 atTextureTime:(double)fp12;
- (void)_renderCurrentSceneFrameWithFlush:(BOOL)fp8 drawLCD:(BOOL)fp12;
- (void)_displayCurrentSceneFrame:(BOOL)fp8 finish:(BOOL)fp12;
- (void)_beginScenePlay;
- (BOOL)_checkDelegate:(id)fp8;
- (double)_scaledDuration:(double)fp8;
- (Class)currentPluginClass;
- (void)setCurrentPluginClass:(Class)fp8;
- (id)resources:(id)fp8;
- (float)sineMap:(float)fp8;
- (BOOL)isRendering;
- (void)setIsRendering:(BOOL)fp8;
- (BOOL)isRenderingFirstFrame;
- (void)cancelRender:(id)fp8;
- (BOOL)glRendererAccelerationAvailable;
- (unsigned int)glRendererTotalVRAM;
- (unsigned int)glRendererTextureMemory;
- (void)updateSessionRenderer;
- (double)fnormal:(double)fp8 k:(double)fp16 m1:(double)fp24;
- (double)bellCurveDecel:(double)fp8 k:(double)fp16 v0:(double)fp24 v1:(double)fp32;
- (double)bellCurveAccel:(double)fp8 k:(double)fp16 v0:(double)fp24 v1:(double)fp32 vAvg:(float)fp40;
- (double)steadyAccelDecel:(double)fp8 v0:(double)fp16 v1:(double)fp24;
- (double)sineCurveAccelDecel:(double)fp8 v0:(double)fp16 v1:(double)fp24;
- (double)transitWithSlowdown:(double)fp8;
- (struct _NSPoint)pointOnBezier:(id)fp8 atTime:(float)fp12;

@end

@interface NSScreen (NSScreenAccess2)
- (void)setFrame:(struct _NSRect)fp8;
@end

@interface IPRemoteSlideshowPlayer : NSObject <IPRemoteSlideshowPlayerProtocol>
{
    ArchiveController *mController;
}

- (id)initWithController:(id)fp8;
- (void)beginSlideshowInRemoteWindow:(int)fp8 inFrame:(struct _NSRect)fp12;
- (void)playSlideshow;
- (void)pauseSlideshow;
- (void)endSlideshow;

@end

@interface IPBookPrintView : NSView
{
    IPBook *mBook;
    NSString *mCurrentPrintPath;
}

- (void)setBook:(id)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;

@end

@interface NSSplitView (iPhotoExtensions)
- (void)resizeSubviewsToPercentage:(float)fp8;
- (float)getSplitPercentage;
@end

@interface NSString (iPhotoExtensions)
+ (id)thousandSeparatorFormattedNumber:(int)fp8;
- (id)colorRepresentedByString;
- (id)colorRepresentedByFloatString;
@end

@interface NSColor (iPhotoExtensions)
- (id)stringRepresentingColor;
- (id)floatStringRepresentingColor;
@end

@interface BLAlertController : NSWindowController
{
    NSTextField *mTitleText;
    NSTextField *mMessageText;
    NSButton *mDefaultButton;
    NSButton *mAlternateButton;
    NSButton *mOtherButton;
    id mDelegate;
    NSString *mTitle;
    NSAttributedString *mMessage;
    NSString *mDefaultButtonTitle;
    NSString *mAlternateButtonTitle;
    NSString *mOtherButtonTitle;
}

+ (void)showSheetForWindow:(id)fp8 title:(id)fp12 message:(id)fp16 defaultButtonTitle:(id)fp20 alternateButtonTitle:(id)fp24 otherButtonTitle:(id)fp28 delegate:(id)fp32;
+ (id)attributedStringForURL:(id)fp8;
+ (id)attributedStringForMessage:(id)fp8;
- (id)initWithTitle:(id)fp8 message:(id)fp12 defaultButtonTitle:(id)fp16 alternateButtonTitle:(id)fp20 otherButtonTitle:(id)fp24 delegate:(id)fp28;
- (void)dealloc;
- (void)showSheetForWindow:(id)fp8;
- (void)defaultAction:(id)fp8;
- (void)alternateAction:(id)fp8;
- (void)otherAction:(id)fp8;
- (void)pSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)awakeFromNib;

@end

@interface ThemeUpgrade : NSObject
{
    id mConnection;
    BOOL mReportErrors;
    ProgressController *mProgress;
    int mOperation;
    BOOL mAppWillTerminate;
    NSMutableData *mData;
    NSDictionary *mConfigurationDict;
    NSDictionary *mThemeDict;
    NSMutableArray *mPreviewList;
    NSDictionary *mRequestedPreview;
    IPTemplate *mRequestedTheme;
    struct AuthorizationOpaqueRef *mRequestAuthorization;
    NSString *mTempDirectory;
    NSString *mThemeDirectory;
    id mCompletionTarget;
    SEL mCompletionAction;
    void *mCompletionContext;
    void *stubCFNetDiagnosticCreateWithURL;
    void *stubCFNetDiagnosticDiagnoseProblemInteractively;
}

+ (id)sharedThemeUpgrade;
+ (id)executeShellCommand:(id)fp8;
+ (void)checkForUpdates;
+ (void)forceCheckForUpdates;
- (struct __CFNetDiagnostic *)CFNetDiagnosticCreateWithURL:(struct __CFURL *)fp8;
- (int)CFNetDiagnosticDiagnoseProblemInteractively:(struct __CFNetDiagnostic *)fp8;
- (void)_completionCallback:(id)fp8;
- (BOOL)ensureThemeLoaded:(id)fp8 withUI:(BOOL)fp12 completionTarget:(id)fp16 completionAction:(SEL)fp20 contextInfo:(void *)fp24;
- (id)_appWillTerminate;
- (id)init;
- (int)currentOperation;
- (void)checkForUpdatesWithUI:(BOOL)fp8;
- (void)dealloc;
- (void)_cancel;
- (void)connection:(id)fp8 didReceiveResponse:(id)fp12;
- (void)connection:(id)fp8 didReceiveData:(id)fp12;
- (void)connection:(id)fp8 didFailWithError:(id)fp12;
- (void)connectionDidFinishLoading:(id)fp8;
- (void)_assemblePreview:(id)fp8;
- (void)_assembleTheme:(id)fp8 withArchive:(id)fp12;
- (void)_finishLoadingItem;
- (void)_discoverUpdatedThemes:(id)fp8;
- (void)_getThemePreviews:(id)fp8;
- (BOOL)_requestNextPreview;
- (void)_cancelGetFile;

@end

@interface NSView (iPhotoExtensions)
- (void)removeAllSubviews;
- (void)removeAllSubviewsWithoutNeedingDisplay;
- (void)removeSubviewsAfterIndex:(int)fp8;
- (void)addSubviews:(id)fp8;
- (void)addSubviews:(id)fp8 offset:(struct _NSPoint)fp12;
@end

@interface RollHolder : NSObject
{
    struct IPRoll *mRoll;
    BOOL mDeleteOnDealloc;
}

+ (id)hold:(struct IPRoll *)fp8;
+ (id)hold:(struct IPRoll *)fp8 deleteOnDealloc:(BOOL)fp12;
- (id)initWithRoll:(struct IPRoll *)fp8 deleteOnDealloc:(BOOL)fp12;
- (void)dealloc;
- (struct IPRoll *)roll;

@end

@interface RollDateNaming : NSObject
{
    struct __CFDateFormatter *mFormatter;
}

+ (id)localizedStringWithDate:(id)fp8;
- (void)_defaultsChanged:(id)fp8;

@end

@interface StackHolder : NSObject
{
    struct IPStack *mStack;
}

+ (id)hold:(struct IPStack *)fp8;
- (id)initWithStack:(struct IPStack *)fp8;
- (struct IPStack *)stack;

@end

@interface SHolder : NSObject
{
    struct IPSelectable *mSelectable;
}

+ (id)hold:(struct IPSelectable *)fp8;
- (id)initWithSelectable:(struct IPSelectable *)fp8;
- (struct IPSelectable *)selectable;

@end

@interface SLHolder : NSObject
{
    struct IPSelectionList *mSelectionList;
}

+ (id)hold:(struct IPSelectionList *)fp8;
+ (id)holdNoCopy:(struct IPSelectionList *)fp8;
- (id)initWithSelectionList:(struct IPSelectionList *)fp8;
- (id)initWithSelectionListNoCopy:(struct IPSelectionList *)fp8;
- (void)dealloc;
- (struct IPSelectionList *)selectionList;

@end

@interface NSMutableDictionary (KeywordCategory)
- (id)categoryName;
- (void)setCategoryName:(id)fp8;
- (unsigned long)categoryKey;
- (void)setCategoryKey:(unsigned long)fp8;
- (BOOL)addToCategory:(unsigned long)fp8;
- (BOOL)removeFromCategory:(unsigned long)fp8;
- (BOOL)removeSubcategory:(id)fp8;
- (id)subcategories;
- (id)categoryKeywordsNonRecursive;
- (void)_recursiveKeywords:(id)fp8;
- (id)categoryKeywordsRecursive;
- (id)categoryKeywordsRecursiveSet;
- (BOOL)isCategoryExpanded;
- (void)setCategoryIsExpanded:(BOOL)fp8;
- (id)parentOfItem:(id)fp8;
- (int)depthOfSubcategory:(id)fp8;
- (id)subcategoryWithKey:(unsigned long)fp8;
- (void)addSubcategoriesToArray:(id)fp8;
@end

@interface NSBezierPath (iPhotoExtensions)
+ (id)bezierPathWithRect:(struct _NSRect)fp8 roundedCornerRadius:(float)fp24;
- (void)addCurvedCorner:(struct _NSPoint)fp8 starting:(BOOL)fp16 corner:(int)fp20 radius:(float)fp24;
- (void)addRoundedCornerRect:(struct _NSRect)fp8 radius:(float)fp24;
@end

@interface PhotoViewer (Layout)
- (BOOL)_rollsVisible:(BOOL)fp8;
- (void)resetAlbum;
- (void)setMetaForVisible;
- (float)calcMaxTextHeight;
- (float)calculateTrackingRectangles:(unsigned long)fp8 frame:(struct _NSRect)fp12 rowBreaksOnly:(BOOL)fp28;
- (struct _NSRect)rebuildViewWithGridAlignLowIdx:(unsigned long)fp8 highIdx:(unsigned long)fp12 changeFrameNow:(BOOL)fp16;
- (struct _NSRect)smartNarrowRebuildViewWithGridAlign:(BOOL)fp8;
- (struct _NSRect)rebuildViewWithoutGridAlign:(BOOL)fp8;
- (struct _NSRect)rebuildViewChangingFrameNow:(BOOL)fp8;
- (void)rebuildView;
@end

@interface IPAnimator : NSAnimation
{
}

- (void)setCurrentProgress:(float)fp8;

@end

@interface PhotoViewerIPAnimationPhase : IPAnimationPhase
{
}

- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface PhotoViewer (Drawing)
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)cacheFrameImages:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)freeFrameImages;
- (void)hitStackToggler;
- (void)clearStackFramingCache;
- (void)cacheStackFrame:(id)fp8 imageTopLeft:(struct _NSPoint)fp12 frameTopLeft:(struct _NSPoint)fp20 stackKey:(unsigned long)fp28;
- (BOOL)didPointHitStackFraming:(struct _NSPoint)fp8 stackKey:(unsigned int *)fp16;
- (id)backgroundColorForCell:(struct ViewStruct *)fp8;
- (void)frameStackForImageAtIndex:(unsigned long)fp8;
- (void)_drawSplitPointIndicator:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)grabRectsInVector:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 first:(long)fp12 last:(long)fp16;
- (void)storeRectsFromVector:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 first:(long)fp12 last:(long)fp16 indexMap:(struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)fp20;
- (void)syncAnimationVectorsByKey:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 with:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp12 firstIdx:(long)fp16 lastIdx:(long)fp20 addedItems:(BOOL)fp24;
- (struct _NSRect)rect:(struct _NSRect)fp8 centeredOnRectCenter:(struct _NSRect)fp24;
- (struct _NSRect)fullRectFromDrawRect:(struct _NSRect)fp8 rowTop:(float)fp24 rowHeight:(float)fp28;
- (void)prepAnimateEventWithFadeOutKeys:(id)fp8 fadeInKeys:(id)fp12 preSlideKeys:(id)fp16 postSlideKeys:(id)fp20 changingEventKeys:(id)fp24;
- (void)startAnimateEvent;
- (void)stepEventAnimation:(float)fp8;
- (void)stopEventAnimation;
- (void)_eventAnimateAtCurrentValue:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (void)animationDidEnd:(id)fp8;
- (void)animateAtCurrentValue:(id)fp8;
@end

@interface InfoPanel : NSPanel
{
    BOOL mCanBecomeKeyWindow;
}

- (BOOL)canBecomeKeyWindow;
- (void)setCanBecomeKeyWindow:(BOOL)fp8;
- (BOOL)hasCloseButton;

@end

@interface ThumbScrollView : NSScrollView
{
    NSPopUpButton *_settingsPopUpButton;
    float mPopupWidth;
    ImageDB *_currentDB;
    id _currentAlbumMenuItem;
    id _currentLocationMenuItem;
    id _currentRowMenuItem;
    NSMenuItem *mRowsColumnsMenuItem;
}

- (void)dealloc;
- (id)makeAlbumMenu;
- (id)makeLocationMenu;
- (id)makeRowMenu;
- (void)makeSettingsPopUpButton;
- (void)setRowsColumnsMenuItemTitle:(id)fp8;
- (void)addSubview:(id)fp8;
- (void)settingsPopUpAction:(id)fp8;
- (void)albumPopUpAction:(id)fp8;
- (void)locationPopUpAction:(id)fp8;
- (void)rowsPopUpAction:(id)fp8;
- (id)settingsPopUpButton;
- (id)currentDB;
- (void)setCurrentDB:(id)fp8;

@end

@interface HUDPopUpButtonCell : NSPopUpButtonCell
{
    NSDictionary *_titleAttributes;
    NSColor *_frameColor;
}

- (void)dealloc;
- (void)drawBorderAndBackgroundWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)titleAttributes;
- (void)setTitleAttributes:(id)fp8;
- (id)frameColor;
- (void)setFrameColor:(id)fp8;

@end

@interface SetDateIncrementOptions : NSView
{
    NSPopUpButton *mAddSubtractSwitch;
    NSPopUpButton *mAddTimeQuanta;
    NSTextField *mAddTimeValue;
    NSButton *mEmbedSwitch;
}

- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setDateIncrement:(double)fp8 embed:(BOOL)fp16;
- (double)incrementedDateForDate:(double)fp8;
- (BOOL)embed;

@end

@interface NSUserDefaults (iPhotoExtensions)
- (BOOL)hasObjectForKey:(id)fp8;
- (void)setDouble:(double)fp8 forKey:(id)fp16;
- (double)doubleForKey:(id)fp8;
@end

@interface PrintAlbum : BookAlbum
{
    NSDictionary *mPrinterSettings;
    NSString *mPrinterName;
    IPTemplate *mTheme;
    struct _NSSize mPaperSize;
    struct _NSRect mPhotoRect;
    BOOL mMaximizePhotosPerPage;
    int mContactSheetColumns;
    NSString *mPaperID;
    NSString *mPresetID;
}

+ (int)defaultNumberOfContactSheetColumns;
- (id)init;
- (id)initWithAlbum:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setPhotoList:(struct IPPhotoList *)fp8;
- (id)printer;
- (void)setPrinter:(id)fp8;
- (id)theme;
- (void)setTheme:(id)fp8;
- (struct _NSSize)paperSize;
- (void)setPaperSize:(struct _NSSize)fp8;
- (id)paperID;
- (void)setPaperID:(id)fp8;
- (id)presetID;
- (void)setPresetID:(id)fp8;
- (struct _NSRect)photoRect;
- (void)setPhotoRect:(struct _NSRect)fp8;
- (BOOL)maximizePhotosPerPage;
- (void)setMaximizePhotosPerPage:(BOOL)fp8;
- (int)numberOfContactSheetColumns;
- (void)setNumberOfContactSheetColumns:(int)fp8;
- (void)_idleBookPurge:(id)fp8;
- (void)dealloc;

@end

@interface AVSections : NSObject
{
    NSMutableArray *_sections;
    NSMutableArray *_visibleSections;
    float _defaultRowHeight;
    AlbumMgr *_albumMgr;
    NSMutableArray *_docs;
    float _rowHeight;
    int _animateState;
}

- (id)init;
- (void)dealloc;
- (void)updateAutoHide:(BOOL)fp8;
- (int)childCount;
- (id)childAtIndex:(int)fp8;
- (id)sectionForGroup:(unsigned long long)fp8;
- (void)_addSectionWithName:(id)fp8 sectionNumber:(int)fp12 group:(unsigned long long)fp16 collapsible:(BOOL)fp24;
- (void)addDefaultSections;
- (void)updateSections;
- (void)addSection:(id)fp8;
- (void)addSection:(id)fp8 atIndex:(int)fp12;
- (void)removeSection:(id)fp8;
- (void)removeSectionAtIndex:(int)fp8;
- (float)defaultRowHeight;
- (void)setDefaultRowHeight:(float)fp8;
- (id)albumMgr;
- (void)setAlbumMgr:(id)fp8;
- (id)docs;
- (void)setDocs:(id)fp8;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;

@end

@interface AVSection : NSObject
{
    NSString *_name;
    unsigned long long _group;
    AlbumMgr *_albumMgr;
    NSMutableArray *_docs;
    float _rowHeight;
    int _animateState;
    int _lastChildCount;
    BOOL _needAutoExpand;
    BOOL _canCollapse;
    int _sectionNumber;
}

- (id)albumMgr;
- (void)setAlbumMgr:(id)fp8;
- (id)docs;
- (void)setDocs:(id)fp8;
- (void)_commonInit;
- (id)init;
- (id)initWithName:(id)fp8 group:(unsigned long long)fp12;
- (void)dealloc;
- (void)updateMembers:(id)fp8 docs:(id)fp12 baseHeight:(float)fp16 extraSectionGap:(BOOL)fp20;
- (BOOL)needAutoExpand;
- (void)setNeedAutoExpand:(BOOL)fp8;
- (int)childCount;
- (id)childAtIndex:(int)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (unsigned long long)group;
- (void)setGroup:(unsigned long long)fp8;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;
- (unsigned int)acceptsExternalDrop;
- (BOOL)canCollapse;
- (void)setCanCollapse:(BOOL)fp8;
- (int)sectionNumber;
- (void)setSectionNumber:(int)fp8;
- (id)preferenceKey;

@end

@interface LoopController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    LoopView *mLoopView;
    Edit *mEdit;
    struct _NSPoint mLoupePosition;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (void)mouseExited:(id)fp8;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)close:(id)fp8;
- (void)layoutMainView;
- (id)mainView;
- (void)setEdit:(id)fp8;
- (id)edit;
- (void)refresh;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updatePosition:(struct _NSPoint)fp8;
- (struct _NSPoint)position;

@end

@interface LoopView : NSView
{
    LoopController *mController;
    CIContext *mCoreContext;
    struct _NSRect mCurrentRect;
    struct _NSPoint mOffset;
    struct _NSPoint mFractionalLoc;
    float mSrcRectDimension;
    float mDestRectDimension;
    float mViewRectDimension;
    BOOL mMustClear;
}

- (void)updateFrame;
- (void)initialize;
- (float)srcRectDimension;
- (id)transformForImageRotation:(float)fp8 width:(float *)fp12 height:(float *)fp16;
- (id)filteredImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)updatePosition:(struct _NSPoint)fp8;
- (void)setController:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drag:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)backgroundColor;

@end

@interface PhotoViewer (PhotoViewerAccessibility)
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8 forParameter:(id)fp12;
- (BOOL)accessibilityIsAttributeSettable:(id)fp8;
- (void)accessibilitySetValue:(id)fp8 forAttribute:(id)fp12;
@end

@interface InfoTokenField : NSTokenField
{
    NSString *mSavedString;
    BOOL mMultiline;
    BOOL mAttributed;
    BOOL mEllipsisState;
    NSArray *mAllTokens;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setAllTokens:(id)fp8;
- (void)setTokens:(id)fp8;
- (void)setAttributedStringValue:(id)fp8;
- (void)setSavedString:(id)fp8;
- (id)savedString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setEllipsisState:(BOOL)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)becomeFirstResponder;
- (void)mouseDown:(id)fp8;
- (BOOL)isMultiline;
- (void)setMultiline:(BOOL)fp8;
- (id)tokenField:(id)fp8 completionsForSubstring:(id)fp12 indexOfToken:(int)fp16 indexOfSelectedItem:(int *)fp20;
- (id)tokenField:(id)fp8 shouldAddObjects:(id)fp12 atIndex:(unsigned int)fp16;
- (id)tokenField:(id)fp8 representedObjectForEditingString:(id)fp12;
- (id)tokenField:(id)fp8 readFromPasteboard:(id)fp12;
- (void)textDidEndEditing:(id)fp8;

@end

@interface EditOriginalView : NSView <ArchiveDisplayProtocol>
{
    Edit *mEdit;
    CIContext *mCoreContext;
    struct CGAffineTransform mScaleTransform;
    CIFilter *mTransformFilter;
    struct _NSSize mSizeToFitSize;
    struct _NSSize mSizeInViewBounds;
    float mScale;
    int mToolChoice;
    struct _NSRect mFullImageRect;
    struct _NSRect mVisibleImageRect;
    struct _NSSize mPaddingOffset;
    struct _NSSize mScrollBarSize;
    BOOL mInZoomChanged;
    struct _NSRect mDirtyRect;
    struct _NSRect mCloseRect;
    BOOL mMustUseFullRes;
    BOOL mSizeToFit;
    BOOL mDrawHistogram;
    BOOL mInLiveResize;
    BOOL mInScroll;
    BOOL mAnimatingMultiple;
    struct _NSPoint mCurrentOrigin;
    NSTimer *mScrollTimer;
    float mOneToOneScale;
    CIImage *tmpImage;
    NSCursor *mCrosshairCursor;
    BOOL mInDragMode;
    float mGray;
    BOOL mWasLoading;
    BOOL mlockedFullOnScreen;
    BOOL mLockedCurrentImage;
    BOOL mLockedFullImage;
    BOOL mIsZoomed;
    BOOL mWindowResized;
    char *mProxyRaster;
    struct CGImage *mProxyImageRef;
    struct CGContext *mBitmapContext;
    NSImage *mCursorImage[10];
    struct _NSPoint mZoomToPoint;
    BOOL mInLoopMode;
    BOOL mShouldMoveLoop;
}

- (void)initialize;
- (void)initializeButtons;
- (void)setEdit:(id)fp8;
- (id)editor;
- (void)setBackgroundGray:(float)fp8;
- (void)resetContext;
- (void)clearContext;
- (void)removeFromSuperview;
- (void)dealloc;
- (struct _NSRect)viewImageDrawRect;
- (struct _NSRect)viewVisibleRect;
- (void)initializeRetouchRasters;
- (void)releaseRetouchRasters;
- (void)deleteRetouchImageRef;
- (void)resetRetouchRasters;
- (char *)proxyRaster;
- (struct CGImage *)proxyImageRef;
- (void)setFrame:(struct _NSRect)fp8;
- (void)previousImage:(id)fp8;
- (void)nextImage:(id)fp8;
- (void)markWindowSizeDirty;
- (void)startAnimation;
- (void)endAnimation;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)displayTempImage:(id)fp8;
- (void)drawDirtyRect;
- (void)drawRect:(struct _NSRect)fp8;
- (struct IPImage *)_drawRectDuring:(struct _NSRect)fp8;
- (void)redrawForScroll;
- (void)redrawForControlKey;
- (void)_drawRectHandler:(struct IPImage *)fp8;
- (void)pan:(id)fp8;
- (void)setMustUseFullRes:(BOOL)fp8;
- (struct _NSRect)imageRect;
- (struct _NSRect)currentVisibleRect;
- (struct CGSize)rotatedFullSizeWithCrop:(BOOL)fp8;
- (void)recomputeSizeToFitSize;
- (void)recRotated;
- (void)mouseDragged:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)updateSlider;
- (void)resetUI;
- (void)scrollToPercentagePoint:(struct _NSPoint)fp8;
- (float)scale;
- (float)magnificationFactor;
- (struct _NSPoint)fractionalLocationInImage:(struct _NSPoint)fp8;
- (struct CGSize)rotatedFullSize;
- (void)zoomChanged:(float)fp8 inLiveResize:(BOOL)fp12 forceRecalc:(BOOL)fp16;
- (void)zoomTo:(float)fp8;
- (void)zoomCompleted;
- (void)setZoomFactor:(int)fp8;
- (struct _NSSize)sizeToFitSize;
- (void)postZoomChanged:(int)fp8;
- (BOOL)isBookView;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (void)updateStatus;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)hasSelection:(int)fp8;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)rotateImage:(id)fp8;
- (void)zoomPopUpChanged:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)revertImage:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)applyRankingToSelection:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)usingFullRes;
- (void)currentAlbumWillSwitch:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;

@end

@interface IPGrowBar : NSView
{
    float _min;
    float _max;
    NSColor *_fillColor;
    id _delegate;
    int _edge;
    BOOL _delegateHasWillResize;
    BOOL _delegateHasDidResize;
    BOOL _delegateHasBeginResize;
    BOOL _delegateHasEndResize;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)resetCursorRects;
- (void)setFrame:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse;
- (void)mouseDown:(id)fp8;
- (float)min;
- (void)setMin:(float)fp8;
- (float)max;
- (void)setMax:(float)fp8;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (int)edge;
- (void)setEdge:(int)fp8;
- (void)dealloc;

@end

@interface KeywordInspector : NSObject <DragDelegateProtocol>
{
    InfoPanel *mWindow;
    NSView *mKeywordEditingView;
    NSView *mKeywordUsingView;
    NSTextField *mKeywordShortcutHint;
    NSScrollView *mScrollView;
    NSButton *mEditKeywordsButton;
    NSView *mKeywordsView;
    KeywordInspectorGroupView *mKeywordsWithShortcuts;
    KeywordInspectorGroupView *mKeywordsWithoutShortcuts;
    NSTableView *mKeywordTable;
    NSButton *mAddButton;
    NSButton *mDeleteButton;
    NSButton *mRenameButton;
    NSButton *mShortcutButton;
    NSString *mOriginalWindowTitle;
    ArchiveController *mArchiveController;
    struct IPSelectionList *mPhotos;
    ImageDB *mCurrentDB;
    NSMutableArray *mNibObjects;
    struct MessageReceiver mMessageReceiver;
    BOOL mUserIntendsToDelete;
    BOOL mKeywordJustCreated;
    struct _NSSize mOriginalWindowSize;
    BOOL mIgnoreWindowResize;
    BOOL mIgnoreSelectionChanged;
    NSString *mAutosaveFrameHack;
}

+ (id)globalInspector;
+ (id)handleKeystroke:(id)fp8;
+ (BOOL)isGlobalInspectorVisible;
- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)show;
- (void)hide;
- (BOOL)visible;
- (BOOL)editingKeywords;
- (void)windowWillClose:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (struct _NSRect)windowWillUseStandardFrame:(id)fp8 defaultFrame:(struct _NSRect)fp12;
- (void)_listenForNotifications:(BOOL)fp8;
- (void)_setCountValues;
- (void)editKeywords:(id)fp8;
- (void)selectionChanged:(id)fp8;
- (void)_keywordChanged:(id)fp8;
- (void)groupDisclosurePressed:(id)fp8;
- (void)groupPressed:(id)fp8;
- (void)_undoRedoChangeKeyword:(id)fp8;
- (void)_add:(BOOL)fp8 keyword:(id)fp12;
- (void)keywordPressed:(id)fp8;
- (void)syncKeywordsFromInlineEditing:(id)fp8;
- (void)setKeywords:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (id)keystroke:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8 view:(id)fp12;
- (BOOL)performDragOperation:(id)fp8 view:(id)fp12;
- (void)_setWindowSizeToOriginal:(BOOL)fp8;
- (id)_keywordsWithShortcuts:(BOOL)fp8;
- (void)_categoriesChangedWithAutosize:(BOOL)fp8;
- (void)_layOutCategoriesWithAutosize:(BOOL)fp8;
- (id)_keywordButtonsWithCategoryButtons:(BOOL)fp8;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_setupKeywordEditor;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)doneEditKeywords:(id)fp8;
- (void)_syncKeywordButtonStates;
- (void)_undoRedoCreateKeyword:(id)fp8;
- (void)_undoRedoRenameKeyword:(id)fp8;
- (void)addKeyword:(id)fp8;
- (void)deleteKeyword:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)renameKeyword:(id)fp8;
- (void)changeShortcut:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface KeywordInspectorGroupView : NSView
{
    NSImage *mGradientImage;
    NSButton *mDisclosureButton;
    float mDisclosedHeight;
    BOOL mReceivingValidDrag;
    id mDragDelegate;
}

+ (int)keywordColumnsForWindowWidth:(float)fp8;
+ (float)goodWidthForNumberOfColumns:(int)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)setDisclosure:(BOOL)fp8;
- (BOOL)disclosure;
- (float)heightWithDisclosure;
- (void)addExtraHeight:(float)fp8;
- (id)initWithWidth:(float)fp8 keywords:(id)fp12 keywordMgr:(id)fp16 target:(id)fp20 disclosure:(BOOL)fp24 dragDelegate:(id)fp28 label:(id)fp32;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)draggingExited:(id)fp8;

@end

@interface RecentAlbum : FilterAlbum
{
    unsigned int _rollID;
}

- (unsigned long)rollID;
- (void)setRollID:(unsigned long)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)comments;
- (void)setComments:(id)fp8;
- (BOOL)photosAreComputed;

@end

@interface KeywordInspectorButton : NSButton
{
    int mCount;
    BOOL mHighlight;
}

- (BOOL)isFlipped;
- (id)font;
- (id)titleAttrs;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setCount:(int)fp8;
- (int)count;
- (void)highlight:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;

@end

@interface IPEdgeBox : NSView
{
    int _edges;
    NSColor *_color;
    NSColor *_backgroundColor;
    BOOL _useArt;
    NSImage *_leftImage;
    NSImage *_rightImage;
    NSImage *_centerImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)drawRect:(struct _NSRect)fp8;
- (int)edges;
- (void)setEdges:(int)fp8;
- (id)color;
- (void)setColor:(id)fp8;
- (void)setUseArt:(BOOL)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;

@end

@interface IPPageGuideElement : IPPageElement
{
    BOOL mIsVertical;
    float mGuideLocation;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (struct _NSRect)drawingRect:(float)fp8;
- (BOOL)isVertical;
- (void)setIsVertical:(BOOL)fp8;
- (float)guideLocation;
- (BOOL)isWithinSnapRangeOfElement:(id)fp8;
- (BOOL)isGuideElement;
- (id)description;

@end

@interface IPBookOverlayView : NSView
{
    struct IPPageElementEdges mCurrentAlignmentHints;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSRect)_leftAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_rightAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_topAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_bottomAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (id)hitTest:(struct _NSPoint)fp8;
- (BOOL)isOpaque;
- (void)drawAlignmentHints:(struct IPPageElementEdges)fp8;
- (void)clearAlignmentHints;
- (void)parentViewWillResize;
- (void)parentViewDidResize;

@end

@interface IPEventView : NSView <ArchiveDisplayProtocol>
{
    NSMenu *eventContextualMenu;
    CIContext *_coreContext;
    BOOL _inDragSelect;
    NSImage *_movieBadge;
    int _hoverMode;
    BOOL _clicklessMode;
    BOOL _aspectedScrubMode;
    struct IPPhotoList *_photos;
    IPSlidingSegmentControl *_segmentedControl;
    Album *_album;
    float _photoDimension;
    struct _NSSize _photoSize;
    struct _NSSize _cellSize;
    int _columns;
    float _horizontalOutset;
    float _leftGutter;
    int _rows;
    int _dragTargetIndex;
    int _dragMoveTargetIndex;
    int _dragMergeTargetIndex;
    struct _NSPoint _dragMergeTargetPoint;
    struct _NSRect _dragMoveTargetRect;
    struct _NSPoint _lastMovedPoint;
    int _lastHoverIndex;
    BOOL _lastHoverOverCountBar;
    struct RenderCache *_renderCache;
    BOOL _needsRepaint;
    BOOL _needsRelayout;
    struct vector<DayRange, std::allocator<DayRange>> *_dayRanges;
    struct vector<Key, std::allocator<Key>> *_selection;
    struct vector<Key, std::allocator<Key>> *_dragSelection;
    struct map<Key, int, std::less<long unsigned int>, std::allocator<std::pair<const Key, int>>> *_rollKeyIndexMap;
    struct IPPhotoList *_markerPhotos;
    int _ignoreRollChangeMessages;
    struct MessageReceiver _DBMessageReceiver;
    struct MessageReceiver _AlbumMessageReceiver;
    double _lastHoverSwitchTime;
    NSTextField *_inlineEditor;
    int _inlineDayIndex;
    NSLock *_inlineEditUpdateLock;
    Ellipsizer *_ellipsizer;
    IPMagnifierController *_ctrl;
    NSDictionary *_leftTextAttributes;
    NSDictionary *_rightTextAttributes;
    NSDictionary *_centerTextAttributes;
    NSDictionary *_untitledCenterTextAttributes;
    NSDictionary *_overCountTextAttributes;
    NSDictionary *_countTextAttributes;
    NSDictionary *_dateTextAttributes;
    float _centerTextAttributesHeight;
    float _untitledCenterTextAttributesHeight;
    float _dateTextAttributesHeight;
    struct CGImage *_unselectedEmptyFrameImage;
    struct CGImage *_unselectedFrameImage;
    struct CGImage *_unselectedHoverFrameImage;
    struct CGImage *_selectedFrameImage;
    struct _NSRect _lastToolTipConfigureRect;
    struct _NSRect _dragSelectionRect;
    BOOL _activeScrolling;
    BOOL _hiresOverride;
    NSTimer *_defaultBackfillTimer;
    NSTimer *_eventBackfillTimer;
    struct _NSRect _cellModeSlopRect;
    struct __CFDateFormatter *_dateFormatter;
    BOOL _returnEmptySelection;
    float _initialScroll;
    int _centerIndex;
    int _selectionAnchor;
    double _lastSingleClickTime;
    id _originalScrollerTarget;
    SEL _originalScrollerSelector;
    BOOL _inThumbScroll;
    BOOL _useScrollOverlay;
    OverlayWindow *_overlay;
    NSTimer *_overlayCloseTimer;
    struct __CFDateFormatter *_mediumDateFormatter;
    IPAnimator *_animator;
    IPAnimation *_animation;
    int _lastAnimatedDropHoldIndex;
    NSInvocation *_invokeAfterAnimation;
    struct map<int, AnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> *_animationDisplacement;
}

+ (BOOL)smartNameAlbum:(id)fp8 forRollKeys:(id)fp12;
- (int)ignoreRollChangeMessages;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_userHiddenStateChanged:(id)fp8;
- (void)userHiddenStateChanged:(id)fp8;
- (void)_cellIndex:(int)fp8 toRow:(int *)fp12 column:(int *)fp16;
- (void)_point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexOfRollWithKey:(unsigned long)fp8;
- (int)_indexForPoint:(struct _NSPoint)fp8;
- (int)_cellIndexForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)_cellRectForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)_photoRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)sliderHitRectForRect:(struct _NSRect)fp8 slider:(float)fp24;
- (struct _NSRect)sliderTrackRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)placardRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)dateRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)detailRectForPhotoRect:(struct _NSRect)fp8;
- (id)bezierPathForPhotoRect:(struct _NSRect)fp8 forString:(id)fp24;
- (BOOL)acceptsFirstResponder;
- (struct _NSRect)_calculateLayout:(struct _NSRect)fp8;
- (void)_configureSegmentedControl;
- (void)_purgeMarkerPhotos;
- (void)_getCurrentPhotos;
- (void)copyEventOrderToManual;
- (void)_showYearView:(BOOL)fp8;
- (id)_dateStringForPhotoAtIndex:(int)fp8;
- (id)dateRangeStringForDay:(struct DayRange *)fp8 shortFormat:(BOOL)fp12;
- (id)labelForDay:(struct DayRange *)fp8 isHover:(BOOL)fp12 selected:(BOOL)fp16 untitled:(char *)fp20;
- (void)_setCurrentPhoto:(struct IPPhotoInfo *)fp8 forRoll:(struct IPRoll *)fp12;
- (void)_persistCurrentPhoto:(struct DayRange *)fp8;
- (void)_persistKeyPhoto:(struct DayRange *)fp8;
- (void)_copyKeyToCurrent:(struct DayRange *)fp8;
- (void)_deltaHoverPhoto:(int)fp8;
- (struct DayRange *)_dayForSelectionAtIndex:(int)fp8;
- (struct IPPhotoList *)photoListForDay:(struct DayRange *)fp8;
- (long)bestVisiblePhotoForDay:(struct DayRange *)fp8;
- (struct IPPhotoList *)eventKeyPhotoList;
- (void)_setCurrentFromRoll:(struct DayRange *)fp8;
- (void)_purgeDeadSelections;
- (id)album;
- (void)_groupPhotos;
- (void)_scrollSelectionIntoView;
- (void)_moveSelection:(int)fp8 shiftDown:(BOOL)fp12;
- (void)selectedSegmentsChanged:(id)fp8;
- (void)_refreshCellAtIndex:(int)fp8;
- (id)makeFilterAlbumForSelectedRolls;
- (id)albumForSelection;
- (void)hoverEventToDetail;
- (void)updateDetailViewWithEvents:(id)fp8;
- (unsigned long)firstEventKey;
- (unsigned long)lastEventKey;
- (void)showDetailForNeighbor:(int)fp8 ofEventWithKey:(unsigned long)fp12;
- (void)hoverEventToDetail:(id)fp8;
- (void)cacheFrameImages:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)freeFrameImages;
- (void)killBackfillTimers;
- (void)setBackfillTimers;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)keyUp:(id)fp8;
- (void)scrollAnnounce:(id)fp8;
- (void)scrollAction:(id)fp8;
- (void)hijackVerticalScroller;
- (void)saveScrollPosition;
- (void)awakeFromNib;
- (void)defaultsChanged:(id)fp8;
- (BOOL)isFlipped;
- (int)nextPrevInlineTarget:(BOOL)fp8;
- (void)undoRedoInlineCaptionEdit:(id)fp8;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(int)fp8;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)_rebuildToolTips;
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 selected:(BOOL)fp24 hover:(BOOL)fp28 empty:(BOOL)fp32 backgroundColor:(id)fp36;
- (struct CGImage *)_drawThumbnail:(struct IPPhotoInfo *)fp8 thumbFrame:(struct _NSRect)fp12 rotation:(float)fp28 tnManager:(id)fp32 context:(struct CGContext *)fp36 fillSquareThumb:(BOOL)fp40 clipRect:(struct _NSRect)fp44 lowres:(BOOL)fp60 selected:(BOOL)fp64 hover:(BOOL)fp68 forOverview:(BOOL)fp72 forDrag:(BOOL)fp76;
- (void)_drawOverviewCell:(struct DayRange *)fp8 rect:(struct _NSRect)fp12 tnManager:(id)fp28 context:(struct CGContext *)fp32 lowres:(BOOL)fp36 selected:(BOOL)fp40 drawImage:(struct CGImage **)fp44;
- (void)_reflectCGImage:(struct CGImage *)fp8 fromRect:(struct _NSRect)fp12 toRect:(struct _NSRect)fp28;
- (void)_drawCountBubbleForDay:(struct DayRange *)fp8 rect:(struct _NSRect)fp12;
- (void)backfill:(id)fp8;
- (float)maxOverlayRollNamedWidth;
- (void)updateOverlay:(BOOL)fp8 visible:(struct _NSRect)fp12;
- (void)overlayCloser:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)animateDropHoleAtIndex:(int)fp8 finalForDrop:(BOOL)fp12;
- (void)stopDropHoleAnimation;
- (void)_eventAnimateAtCurrentValue:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (void)animationDidEnd:(id)fp8;
- (void)animateAtCurrentValue:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)_drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)_fillPasteboardWithSelection:(id)fp8;
- (void)_invalidateDragSelectionCells;
- (void)dragSelection:(id)fp8 imagePhoto:(struct IPPhotoInfo *)fp12 slideBack:(BOOL)fp16;
- (void)trackDragSelectForEvent:(id)fp8;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28;
- (void)updateUIToInfo:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)_showMagnifierForPhotoAtIndex:(int)fp8 inDayAtIndex:(int)fp12;
- (void)makeEmptyBeSelection;
- (void)updateLatestEvent:(unsigned long)fp8;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)isCellSelected:(struct DayRange *)fp8;
- (void)selectCell:(struct DayRange *)fp8 replaceExistingSelection:(BOOL)fp12 extend:(BOOL)fp16;
- (void)unselectCell:(struct DayRange *)fp8;
- (void)selectEvents:(struct vector<Key, std::allocator<Key>> *)fp8 selected:(BOOL)fp12;
- (void)selectEventsInRect:(struct _NSRect)fp8 selected:(BOOL)fp24;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setSegmentedControl:(id)fp8;
- (id)leftTextAttributes;
- (void)setLeftTextAttributes:(id)fp8;
- (id)rightTextAttributes;
- (void)setRightTextAttributes:(id)fp8;
- (id)centerTextAttributes;
- (void)setCenterTextAttributes:(id)fp8;
- (id)untitledCenterTextAttributes;
- (void)setUntitledCenterTextAttributes:(id)fp8;
- (BOOL)needsRepaint;
- (void)setNeedsRepaint:(BOOL)fp8;
- (BOOL)needsRelayout;
- (void)setNeedsRelayout:(BOOL)fp8;
- (struct RenderCache *)renderCache;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)splitEventAction:(id)fp8;
- (void)_redoAutoSplitEventsForPhotos:(id)fp8 originalRolls:(id)fp12 newRolls:(id)fp16 firstRollKey:(unsigned long)fp20 firstKeyPhotoKey:(unsigned long)fp24 undoManager:(id)fp28 selection:(id)fp32;
- (void)_undoAutoSplitEventsForPhotos:(id)fp8 originalRolls:(id)fp12 newRolls:(id)fp16 firstRollKey:(unsigned long)fp20 firstKeyPhotoKey:(unsigned long)fp24 undoManager:(id)fp28 selection:(id)fp32;
- (int)upgradeSplitModePicker:(struct IPPhotoList *)fp8;
- (void)coalescePhotos:(struct IPPhotoList *)fp8;
- (void)autoSplitPhotos:(struct IPPhotoList *)fp8 selectResult:(BOOL)fp12 showResultInDetail:(BOOL)fp16 allowAutoNaming:(BOOL)fp20 preflightOnly:(BOOL)fp24;
- (void)undoRedoAddFlaggedPhotosToSelectedEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)addFlaggedPhotosToSelectedEvent:(id)fp8;
- (void)autoSplitSelectedEvents:(id)fp8;
- (void)undoRedoSplitMergePhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 beginSelection:(id)fp20 endSelection:(id)fp24 baseFilterKeys:(id)fp28 addedFilterKeys:(id)fp32 removedFilterKeys:(id)fp36 undoManager:(id)fp40;
- (void)mergeEvents:(id)fp8 intoEvent:(unsigned long)fp12;
- (void)_doMergeEventsAction:(id)fp8;
- (void)_mergeSelectedConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)mergeEventsAction:(id)fp8;
- (void)splitBasedOnSelectionAction:(id)fp8;
- (void)mergeBasedOnSelectionAction:(id)fp8;
- (void)_dragMergeWithContext:(id)fp8;
- (void)_dragMergeConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_undoRedoMakeKeyPhotoDb:(id)fp8 rollKey:(unsigned long)fp12 oldPhotoKey:(unsigned long)fp16 newPhotoKey:(unsigned long)fp20 undoManager:(id)fp24;
- (void)makePhotoEventKey:(id)fp8;
- (void)_redoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_undoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_redoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_undoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)hideUserHiddenPhoto:(id)fp8;
- (void)showUserHiddenPhoto:(id)fp8;
- (BOOL)_canShowUserHiddenPhoto;
- (BOOL)_canHideUserHiddenPhoto;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (BOOL)_canShowUserHiddenPhotos;
- (BOOL)_canHideUserHiddenPhotos;
- (BOOL)_canPaste;
- (BOOL)validateMenuItem:(id)fp8;
- (void)moveEventsWithKeys:(id)fp8 toIndex:(int)fp12;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)_dragOperationForWindowLocation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)windowForSelectedEvent;
- (void)animateSetEvent;
- (BOOL)isBookView;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)undoRedoPasteCutPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)paste:(id)fp8;
- (void)printView:(id)fp8;
- (BOOL)printToPDF:(id)fp8 bookID:(int)fp12 forPress:(BOOL)fp16;
- (int)pageCount;
- (void)rebuildView:(id)fp8;
- (void)rebuildLayout:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)updateStatus;
- (BOOL)hasSelection:(int)fp8;
- (id)selectedIndices;
- (id)selectedEmptyEventKeys;
- (int)selectedEmptyEventKeyCount;
- (id)selectedEventKeys:(int *)fp8;
- (struct IPPhotoList *)selectedPhotos;
- (struct IPSelectionList *)retrieveSelection:(int)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (void)scrollSelectionIntoView:(unsigned int)fp8 forceToTop:(BOOL)fp12;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)returnEmptySelection;
- (void)setReturnEmptySelection:(BOOL)fp8;

@end

@interface EventViewAnimationPhase : IPAnimationPhase
{
    struct vector<EventViewAnimationObject, std::allocator<EventViewAnimationObject>> *_evaoObjects;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)copyEndsToBegins;
- (void)addObject:(void *)fp8;
- (int)objectCount;
- (void *)objects;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface IPEventViewController : ArchiveDisplay
{
    NSTabView *mEventDetailTabView;
    NSView *mEventMainView;
    NSView *mEventPlacardParentView;
    NSView *mDetailMainView;
    NSView *mDetailPlacardParentView;
    NSButtonCell *mModeAllButtonCell;
    NSButtonCell *mModeEventButtonCell;
    NSButtonCell *mModeDetailButtonCell;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mSplitItem;
    IPToolbarItem *mMergeItem;
    IPToolbarItem *mNewEventItem;
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mNetAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mShareItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    struct MessageReceiver mAlbumMessageReceiver;
}

- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (id)burnInfo;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)dealloc;
- (void)prepareForRelease;
- (void)activate;
- (void)deactivate;
- (void)becomeActive;
- (void)releaseActive;
- (void)addMagnifyTools;
- (void)removeMagnifyTools;
- (void)initToolbar;
- (void)freeToolbar;
- (BOOL)isEventViewActive;
- (BOOL)isDetailViewActive;
- (void)selectViewMode:(id)fp8;
- (void)selectModeAllView:(id)fp8;
- (void)selectModeEventView:(id)fp8;
- (void)selectModeDetailView:(id)fp8;
- (void)selectLastEventMode:(id)fp8;
- (id)albumForSelection;
- (void)setController:(id)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKey:(struct IPPhotoInfo *)fp8;
- (void)createOrSelectRoll;
- (void)updateStatus;
- (id)searchItem;
- (void)rebuildView:(id)fp8;
- (id)eventView;
- (id)detailView;
- (void)selectAll;
- (void)selectNone;
- (BOOL)supportsFindCommand;

@end

@interface IPFilterBarView : NSView
{
    IPFilterDateView *dateFilter;
    IPFilterKeywordsView *keywordsFilter;
    IPFilterRatingView *ratingFilter;
    NSSearchField *textFilter;
    NSScrollView *photoViewerScrollView;
    IPFilterEventView *eventFilter;
    BOOL _representingArchiveAlbum;
    BOOL _representingFilterAlbum;
    NSColor *_bgStartColor;
    NSColor *_bgEndColor;
    NSColor *_openStartColor;
    NSColor *_openEndColor;
    NSColor *_hiliteStartColor;
    NSColor *_hiliteEndColor;
    NSColor *_activeStartColor;
    NSColor *_activeEndColor;
    NSColor *_frameColor;
    NSImage *_dateIconN;
    NSImage *_dateIconP;
    NSImage *_keywordsIconN;
    NSImage *_keywordsIconP;
    NSImage *_ratingIconN;
    NSImage *_ratingIconP;
    NSImage *_eventIconN;
    NSImage *_eventIconP;
    NSAttributedString *_showAllLabel;
    NSAttributedString *_backLabel;
    struct _NSRect _showAllRect;
    struct _NSRect _backRect;
    struct _NSRect _dateRect;
    struct _NSRect _keywordsRect;
    struct _NSRect _ratingRect;
    struct _NSRect _eventRect;
    int _mouseTracking;
}

+ (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
+ (id)defaultStarStyle;
+ (id)defaultTextStyle;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)matchUIToFilterAlbum;
- (void)awakeFromNib;
- (void)_drawEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
- (void)_drawImage:(id)fp8 rect:(struct _NSRect)fp12;
- (void)_drawText:(id)fp8 rect:(struct _NSRect)fp12 selected:(BOOL)fp28;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)_trackRect:(struct _NSRect)fp8 event:(id)fp24 section:(int)fp28;
- (float)widthForString:(id)fp8 icon:(id)fp12 max:(float)fp16;
- (void)_tile;
- (void)_updateAndActivateFilterAlbum;
- (void)textFilterAction:(id)fp8;
- (void)currentAlbumChanged:(id)fp8;
- (void)ratingRulesChanged:(id)fp8;
- (void)eventRulesChanged:(id)fp8;
- (void)dateRulesChanged:(id)fp8;
- (void)keywordsRulesChanged:(id)fp8;
- (void)filterOnEvents:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)_updateFilterAlbum;
- (void)showAll;
- (void)switchToEventView;
- (BOOL)isDateFilterVisible;
- (BOOL)isKeywordsFilterVisible;
- (BOOL)isRatingFilterVisible;
- (BOOL)isEventFilterVisible;
- (void)_hideFilter:(id)fp8;
- (void)hideDateFilter;
- (void)hideKeywordsFilter;
- (void)hideRatingFilter;
- (void)hideEventFilter;
- (void)hideAllFilters;
- (void)_showFilter:(id)fp8;
- (void)showDateFilter;
- (void)showKeywordsFilter;
- (void)showRatingFilter;
- (void)showEventFilter;

@end

@interface IPFilterDateView : IPFilterBaseView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPFilterKeywordsView : IPFilterBaseView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPFilterRatingView : IPFilterBaseView
{
    StarRatingControl *rating;
    NSButton *cancelButton;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)matchUIToFilterAlbum;
- (void)awakeFromNib;
- (void)drawRect:(struct _NSRect)fp8;
- (id)label;
- (void)comparisonAction:(id)fp8;
- (void)ratingAction:(id)fp8;
- (void)cancelAction:(id)fp8;
- (int)ratingValue;
- (void)setRatingValue:(int)fp8;

@end

@interface IPFilterEventView : IPFilterBaseView
{
    KeyMgr *_selectedEventKeys;
    IPFilterThumbView *thumbView;
    NSButton *cancelButton;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)matchUIToFilterAlbum;
- (void)awakeFromNib;
- (void)drawRect:(struct _NSRect)fp8;
- (void)cancelAction:(id)fp8;
- (id)label;
- (void)refreshEventList;
- (void)setActive:(BOOL)fp8;
- (void)thumbViewSelectionChanged:(id)fp8 photoIndex:(long)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (void)selectEventsWithKeys:(id)fp8;
- (id)selectedEventKeys;
- (void)hideCancelButton:(BOOL)fp8;

@end

@interface IPFilterBaseView : NSView
{
    NSAttributedString *_defaultLabel;
    id _target;
    SEL _action;
    BOOL _active;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)sendAction;
- (void)sendTileRequest;
- (id)label;
- (id)defaultLabel;
- (void)setDefaultLabel:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (BOOL)active;
- (void)setActive:(BOOL)fp8;

@end

@interface NSMutableAttributedString (iPhotoExtensions)
- (void)replaceString:(id)fp8 withAttributedString:(id)fp12;
@end

@interface IPFilterThumbView : IPThumbView
{
    struct IPPhotoList *_eventKeyPhotos;
}

- (void)dealloc;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (void)setThumbSizeInfo;
- (BOOL)squareThumbs;
- (id)getImageDB;
- (void)mouseDown:(id)fp8;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (void)layoutThumbs:(BOOL)fp8;
- (struct IPPhotoList *)eventKeyPhotos;
- (void)setEventKeyPhotos:(struct IPPhotoList *)fp8;

@end

@interface IPInlineEditorTokenField : NSTokenField
{
}

- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface IPInlineEditorTextField : NSTextField
{
}

- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface PhotoViewer (Events)
- (void)updateFixedHeaderView;
- (unsigned long)keyOfAdjacentRoll:(long)fp8 below:(BOOL)fp12;
- (void)setSplitDifferenceRollDateForRoll:(unsigned long)fp8 startDate:(double)fp12 endDate:(double)fp20;
- (void)undoRedoSplitMergePhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 baseFilterKeys:(id)fp20 addedFilterKeys:(id)fp24 removedFilterKeys:(id)fp28 undoManager:(id)fp32;
- (void)splitBasedOnSelectionAction:(id)fp8;
- (void)mergeBasedOnSelectionAction:(id)fp8;
- (BOOL)canSplitBasedOnSelection:(int *)fp8;
- (BOOL)canMergeBasedOnSelection:(int *)fp8;
- (void)autoSplitSelectedEvents:(id)fp8;
- (BOOL)canAutoSplitSelectedEvents;
- (void)undoRedoAddFlaggedPhotosToSelectedEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)addFlaggedPhotosToSelectedEvent:(id)fp8;
- (void)undoRedoPasteCutPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)_moveCutPhotosToCurrentDetailEvent;
@end

@interface IPMagnifierPhotoView : IPOpenGLView <IPImageMgrDelegate>
{
    struct IPPhotoInfo *_photo;
    struct IPPhotoInfo *_nextPhoto;
    IPOnscreenImageMgr *_imageMgr;
    IPMagnifierController *_controller;
    float _alpha;
    struct _NSRect _targetFrame;
    struct _NSRect _startFrame;
    struct _NSRect _toolbarFrame;
    BOOL _isAnimatingZoom;
    BOOL _isAnimatingScroll;
    BOOL _isAnimatingToEdit;
    BOOL _waitingForEdit;
    BOOL _isAnimatingOff;
    float _percentage;
    BOOL _drawMenu;
    BOOL _inDragMode;
    CIImage *_hudBackground;
    struct _NSRect _bgRect;
    CIImage *_hudDetails;
    struct _NSRect _detailRect;
    CIImage *_hudEdit;
    struct _NSRect _editRect;
    CIImage *_hudNext;
    struct _NSRect _nextRect;
    CIImage *_hudPrev;
    struct _NSRect _prevRect;
    CIImage *_hudReview;
    struct _NSRect _reviewRect;
    CIImage *_hudScrubber;
    struct _NSRect _scrubberRect;
    struct _NSRect _trackRect;
    float _knobPercentage;
    float _startPercentage;
    float _targetPercentage;
    CIImage *_blankImage;
    float _fadeInPercentage;
    struct _NSPoint _mouseLoc;
    NSTimer *_mouseTimer;
    CIImage *_currentThumb;
    BOOL _showDetails;
    CIImage *_missingImage;
    CIImage *_flagImage;
    CIImage *_hiddenImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (id)onscreenImageMgr;
- (void)setController:(id)fp8;
- (void)setShowsDetails:(BOOL)fp8;
- (void)createBlank;
- (void)layoutButtons;
- (id)transitionFromImage:(id)fp8 toImage:(id)fp12 usingTransition:(id)fp16 atTime:(float)fp20;
- (void)setStartFrame:(struct _NSRect)fp8;
- (void)setToolbarFrame:(struct _NSRect)fp8;
- (void)setAnimatingZoom:(BOOL)fp8;
- (void)setAnimatingToEdit:(BOOL)fp8;
- (void)setAnimatingScroll:(BOOL)fp8;
- (void)setAnimatingOff:(BOOL)fp8;
- (float)currentPercentage;
- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)moveKnobToPoint:(struct _NSPoint)fp8;
- (void)mouseDragged:(id)fp8;
- (void)resetMouseTimer;
- (void)mouseMoved:(id)fp8;
- (void)fadeHUDOut;
- (struct _NSRect)targetRect;
- (id)transformForImageRotation:(float)fp8 withRect:(struct CGRect *)fp12;
- (id)ciImageForImageNamed:(id)fp8;
- (void)drawCurrentFrame;
- (struct IPPhotoInfo *)photo;
- (void)setPhoto:(struct IPPhotoInfo *)fp8 scrolling:(BOOL)fp12 newPercentage:(float)fp16;
- (void)reset;
- (void)keyDown:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)addSelectedPhotoToShelf:(id)fp8;
- (void)removeSelectedPhotoFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)preloadNextAndPrevious;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
- (void)setPercentage:(float)fp8;

@end

@interface IPMagnifierGuardView : IPGLGuardView
{
    NSView *_photoView;
}

- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)photoView;
- (void)setPhotoView:(id)fp8;

@end

@interface IPMagnifierController : NSObject
{
    IPMagnifierPhotoView *_photoView;
    IPMagnifierGuardView *_guardView;
    struct IPPhotoList *_list;
    int _index;
    ArchiveDisplay *_delegate;
    struct _NSRect _startFrame;
    NSAnimation *_animation;
    float _percentage;
    BOOL _animatingOn;
    BOOL _animatinToEdit;
    HUDWindow *_window;
    NSView *_toolbarView;
}

+ (id)magnifier;
- (id)init;
- (void)dealloc;
- (id)onscreenImageMgr;
- (void)addToolbarView:(id)fp8;
- (void)showForPhoto:(struct IPPhotoInfo *)fp8 withFrame:(struct _NSRect)fp12 parentWindow:(id)fp28 startFrame:(struct _NSRect)fp32 toolbarFrame:(struct _NSRect)fp48 animate:(BOOL)fp64 percentage:(float)fp68;
- (void)showPhotoAtIndex:(int)fp8 inList:(struct IPPhotoList *)fp12 withFrame:(struct _NSRect)fp16 parentWindow:(id)fp32 startFrame:(struct _NSRect)fp36 toolbarFrame:(struct _NSRect)fp52;
- (void)redraw;
- (void)animateOn;
- (void)animateToEdit;
- (void)setShowsDetails:(BOOL)fp8;
- (void)animateImageWithDuration:(float)fp8;
- (void)animateImageOff;
- (void)animation:(id)fp8 didReachProgressMark:(float)fp12;
- (void)animationDidEnd:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)dismiss;
- (void)cleanDismiss;
- (BOOL)isActive;
- (struct IPPhotoList *)list;
- (struct IPPhotoInfo *)currentPhoto;
- (struct IPPhotoInfo *)nextPhotoAndIncrement:(BOOL)fp8;
- (void)showNextPhoto;
- (struct IPPhotoInfo *)previousPhotoAndIncrement:(BOOL)fp8;
- (void)showPreviousPhoto;
- (void)showPhotoAtPercentage:(float)fp8;
- (BOOL)currentPhotoIsOnShelf;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)clearShelf:(id)fp8;
- (BOOL)currentPhotoIsHidden;
- (void)makePhotoEventKey:(id)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)deleteCurrentPhoto;

@end

@interface IPMatteElement : IPPageElement
{
    NSMutableArray *mWindowElements;
    BOOL mOvalWindow;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (id)windowElements;
- (BOOL)useOvalWindows;
- (float)bevelThickness;
- (id)leftBevelColor;
- (id)rightBevelColor;
- (id)topBevelColor;
- (id)bottomBevelColor;
- (int)leftBevelBlendMode;
- (int)rightBevelBlendMode;
- (int)bottomBevelBlendMode;
- (int)topBevelBlendMode;
- (void)_adjustPositionOfWindowElements;
- (void)resizeWindowsToSize:(struct _NSSize)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawMatteInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 alpha:(float)fp20 scale:(float)fp24;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)snapToGuide:(id)fp8 byResizing:(BOOL)fp12;
- (void)snapToEdgesByResizing:(BOOL)fp8;
- (struct _NSRect)cropRect:(float)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setParent:(id)fp8;
- (void)dealloc;

@end

@interface CropHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    HUDViewElement *mCropHUDView;
    NSPopUpButton *mConstrainPopUp;
    NSMenu *mConstrainMenu;
    HUDImageButton *mConstrainCheckbox;
    HUDTextField *mCustomDenominatorView;
    HUDTextField *mCustomNumeratorView;
    HUDViewElement *mCustomConstrainView;
    HUDViewElement *mButtonView;
    id mCancelButton;
    BOOL mConstrainCheckboxEnabled;
    int mLastConstrainTag;
    int mConstrainOrientation;
    BOOL mUsingCustomConstrain;
    Edit *mEdit;
    BOOL mCustomSetByNewline;
    NSTextField *mConstrainTextLabel;
    NSTextField *mXTextLabel;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (id)constrainMenu;
- (void)onClickConstrainCheckbox:(id)fp8;
- (void)onConstrain:(id)fp8;
- (void)performConstrain:(id)fp8 tag:(int)fp12;
- (void)setCustomConstrain:(id)fp8;
- (void)resetCrop:(id)fp8;
- (BOOL)usingCustomConstrain;
- (void)resetConstrainOrientation;
- (int)constrainOrientation;
- (int)lastConstrainTag;
- (void)setEdit:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)setConstrain:(int)fp8 withRatio:(int)fp12 withOrientation:(int)fp16;
- (void)closeHUD:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)applyCrop:(id)fp8;
- (void)cancelCrop:(id)fp8;
- (void)optionKeyDown:(BOOL)fp8;

@end

@interface HUDBeveledPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface HUDBeveledPopUpButtonCell : BeveledPopUpButtonCell
{
}

+ (void)initialize;
- (void)_initImages;

@end

@interface FileJournal : NSObject
{
    NSString *mRootPath;
    short mVolumeRefNum;
    NSString *mJournalPath;
    BOOL mIsDirty;
    NSMutableArray *mFilesToDelete;
    int mCommandRecordingLevel;
}

- (BOOL)_printToJournal:(const char *)fp8;
- (void)dealloc;
- (id)initWithRoot:(id)fp8 journal:(id)fp12;
- (BOOL)performRecoveryIfNeeded;
- (BOOL)commit;
- (BOOL)addFileAtPath:(id)fp8;
- (BOOL)removeFileAtPath:(id)fp8;
- (BOOL)movePath:(id)fp8 toPath:(id)fp12;
- (BOOL)copyPath:(id)fp8 toPath:(id)fp12;
- (BOOL)createDir:(id)fp8;
- (BOOL)deleteDirsRecursively:(id)fp8 toRoot:(id)fp12;

@end

@interface HUDTextField : NSTextField
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;

@end

@interface HUDTextFieldCell : NSTextFieldCell
{
}

- (id)setUpFieldEditorAttributes:(id)fp8;

@end

@interface KeyKeyMapHolder : NSObject
{
    struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *_map;
}

+ (id)hold:(struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)fp8;
+ (id)create;
- (id)init;
- (id)initWithMap:(struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)fp8;
- (void)dealloc;
- (struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)map;

@end

@interface IPOpenGLView : NSOpenGLView
{
    BOOL _needsReshape;
    CIContext *_ciContext;
}

+ (id)defaultPixelFormat;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)clearGLContext;
- (void)dealloc;
- (void)prepareOpenGL;
- (void)reshape;
- (id)backgroundColor;
- (void)reshapeOpenGL;
- (void)initializeContext;
- (id)ciContext;
- (void)drawCurrentFrame;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPGLGuardView : NSView
{
    NSView *_glView;
}

- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)glView;
- (void)setGLView:(id)fp8;

@end

@interface IPHDAVAdapter : NSObject
{
}

- (void)session:(id)fp8 createdRequest:(id)fp12;
- (void)session:(id)fp8 willDestroyRequest:(id)fp12;

@end

@interface IPHDotMacTruthGet : IPHDAVRequest
{
}

- (id)initWithSession:(id)fp8 andPath:(id)fp12 toDepth:(int)fp16;
- (id)result;
- (void)finalizeOperation;

@end

@interface IPHDMTruthFeed : NSObject
{
    NSXMLDocument *_xmlDoc;
    NSString *_feedNamespace;
}

- (id)initWithData:(id)fp8;
- (id)resources;
- (id)_resourceDictionaryFromXMLElement:(id)fp8;
- (void)dealloc;

@end

@interface PVScroller : NSScroller
{
    BOOL _disableSetFloat;
    id _mouseAnnounceTarget;
    SEL _mouseAnnounceAction;
    BOOL _mouseDownStarting;
}

- (void)setFloatValue:(float)fp8 knobProportion:(float)fp12;
- (void)setFloatValue:(float)fp8;
- (BOOL)disableSetFloat;
- (void)setDisableSetFloat:(BOOL)fp8;
- (id)mouseAnnounceTarget;
- (void)setMouseAnnounceTarget:(id)fp8;
- (SEL)mouseAnnounceAction;
- (void)setMouseAnnounceAction:(SEL)fp8;
- (BOOL)mouseDownStarting;
- (void)setMouseDownStarting:(BOOL)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface EventAlbum : FilterAlbum
{
    unsigned int _rollID;
}

- (id)init;
- (void)encodeWithDictionary:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (unsigned long)rollID;
- (void)setRollID:(unsigned long)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)comments;
- (void)setComments:(id)fp8;
- (BOOL)photosAreComputed;

@end

@interface TextFieldWithDisabledClickForwarding : NSTextField
{
}

- (void)mouseDown:(id)fp8;

@end

@interface PopupSearchField : NSControl
{
    NSButton *mPopupButton;
    NSTextField *mTextField;
    StarRatingControl *mRatingControl;
    NSButton *mCancelButton;
    NSImage *mLeftCapImage;
    NSImage *mRightCapImage;
    NSImage *mCenterImage;
    NSImage *mStopImage;
    BOOL mShowingCancel;
    int mSearchKind;
    id mSearchObject;
    NSTimer *mTextDelayTimer;
    SEL mAction;
    SEL mCancelAction;
    id mTarget;
    BOOL mEnabled;
}

- (int)_popupMenuItemIndexForSearchKind:(int)fp8;
- (id)_popupMenu;
- (id)_imageForSearchKind:(int)fp8;
- (void)_configureCancel;
- (void)makeActive;
- (void)_cancelPressed:(id)fp8;
- (void)_keywordPickerItemSelected:(id)fp8;
- (void)_datePickerItemSelected:(id)fp8;
- (void)_searchKindMenuItemSelected:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (void)_ratingChanged:(id)fp8;
- (void)_popupPressed:(id)fp8;
- (void)_initialize;
- (int)searchKind;
- (id)searchObject;
- (void)_cancelTextDelayTimer;
- (void)_scheduleTextDelayTimer;
- (void)_sendDelayedTextCallback;
- (void)_setSearchObject:(id)fp8;
- (void)_showKeywordPicker;
- (void)_showDatePicker;
- (id)_shortDayMonthFormat;
- (void)_setSearchKind:(int)fp8 object:(id)fp12;
- (void)cancelSearch;
- (void)dealloc;
- (void)setTarget:(id)fp8;
- (id)target;
- (void)setAction:(SEL)fp8;
- (SEL)action;
- (void)setCancelAction:(SEL)fp8;
- (SEL)cancelAction;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;

@end

@interface IPGroupElement : IPPageElement
{
    NSMutableArray *mElements;
    NSString *mBackgroundIdentifier;
}

+ (id)groupElementWithElementsOnPage:(id)fp8;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (BOOL)isGroupElement;
- (void)setParent:(id)fp8;
- (void)rotateSizeAndLocation;
- (id)embeddedTextElements;
- (BOOL)canRotateToFit;
- (id)elements;
- (void)setElements:(id)fp8;
- (void)applyFrameMasterToElements:(id)fp8;
- (void)copyBackgroundFromPageDesign:(id)fp8;
- (id)backgroundIdentifier;
- (void)setBackgroundIdentifier:(id)fp8;
- (id)holeElements;
- (int)emptyHoleCount;
- (BOOL)shouldSupressDrawing;
- (struct _NSRect)cropRect:(float)fp8;
- (void)dealloc;

@end

@interface KeywordPicker : NSObject
{
    FloatingPickerWindow *mWindow;
    SEL mAction;
    id mTarget;
}

+ (void)hideGlobalKeywordPicker;
+ (id)globalKeywordPickerPointingAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 selected:(id)fp32;
- (id)_addKeyword:(id)fp8 key:(unsigned long)fp12 columns:(int)fp16;
- (void)_showAtRect:(struct _NSRect)fp8 selected:(id)fp24;
- (id)init;

@end

@interface EditBackgroundRender : NSObject
{
    struct BackgroundRenderArray *mRenderArray;
    struct BackgroundRenderArray *mFinishedArray;
    struct MessageReceiver mMessageReceiver;
    BOOL mHasReceiver;
    struct _opaque_pthread_mutex_t mListLock;
    struct _opaque_pthread_mutex_t mRenderProcessLock;
    struct _opaque_pthread_mutex_t mRenderWaitLock;
    struct _opaque_pthread_cond_t mRenderCondition;
    struct _opaque_pthread_mutex_t mThreadQuitLock;
    int mRenderThreadState;
    struct {
        CIImage *sourceImage;
        struct CGSize sourceSize;
        char saving16Bit;
        char workingWithRAW;
        struct IPFileInfo *targetFileInfo;
        struct IPPhotoInfo *ipPhotoInfo;
        struct CGColorSpace *colorSpace;
        char **colorProfile;
        struct IPImage *newImage;
        ImageUserData *userData;
        char safeSave;
        char abandonSave;
        NSString *uniquePath;
    } mCurrentRenderItem;
}

- (id)initWithDB:(id)fp8;
- (void)dealloc;
- (void)finishPendingWork;
- (void)copyFirstImageInQueue:(struct BackgroundRenderArray *)fp8 into:(CDAnonymousStruct16 *)fp12;
- (void)startBackgroundRenderWith:(id)fp8 ofSize:(struct CGSize)fp12 saving16Bit:(BOOL)fp20 workingWithRAW:(BOOL)fp24 targetFileInfo:(struct IPFileInfo *)fp28 targetPhotoInfo:(struct IPPhotoInfo *)fp32 userData:(id)fp36 colorSpace:(struct CGColorSpace *)fp40 colorProfile:(char **)fp44;
- (void)render;
- (void)done;
- (void)handleDBChanges:(CDAnonymousStruct16 *)fp8 fields:(unsigned long long)fp12;
- (unsigned int)count;
- (void)createReceivers;
- (void)linkReceivers:(id)fp8 db:(id)fp12;
- (void)disableReceivers;
- (void)destroyReceivers;

@end

@interface DatePicker : NSObject
{
    FloatingPickerWindow *mWindow;
    CalendarView *mCalendarView;
    NSButton *mMonthDayToggle;
    SEL mAction;
    id mTarget;
}

+ (void)hideGlobalDatePicker;
+ (id)globalDatePickerPointingAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 clearSelection:(BOOL)fp32;
- (id)init;

@end

@interface FloatingPickerView : NSView
{
    struct _NSPoint mPointerTip;
    int mTrackingTag;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)_addTracking;
- (void)_frameChanged:(id)fp8;
- (void)viewDidMoveToWindow;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)setPointerTip:(struct _NSPoint)fp8;

@end

@interface FloatingPickerWindow : DisappearingWindow
{
    NSTimer *mFadeTimer;
    double mFadePhase;
    double mFadeStep;
}

- (id)initWithContentRect:(struct _NSRect)fp8;
- (BOOL)makeFirstResponder:(id)fp8;
- (void)stopFade;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (void)showAtRect:(struct _NSRect)fp8;
- (void)_fadeCallback;
- (void)fadeOutWithStep:(double)fp8;
- (void)fadeOut;
- (void)fadeOutQuickly;
- (void)resignKeyWindow;
- (void)makeKeyAndOrderFront:(id)fp8;
- (void)orderFront:(id)fp8;
- (void)orderBack:(id)fp8;
- (void)orderOut:(id)fp8;
- (void)orderWindow:(int)fp8 relativeTo:(int)fp12;
- (void)orderFrontRegardless;

@end

@interface IPHPropertyDictionary : NSObject
{
    NSMutableDictionary *_props;
    _Bool _didPatch;
}

+ (void)initialize;
+ (id)propertyDictionary;
- (id)init;
- (void)dealloc;
- (id)description;
- (_Bool)didPatch;
- (id)dictionaryForNamespace:(id)fp8;
- (id)propertyDictionary;
- (id)namespaceEnumerator;
- (id)patchAtPath:(id)fp8 usingSession:(id)fp12;
- (BOOL)hasProperties;
- (void)mergeProperties:(id)fp8;
- (void)synchronizePath:(id)fp8 usingSession:(id)fp12;

@end

@interface ApertureBrowser : NSWindowController
{
    NSView *view;
    ILMediaBrowserView *mMediaBrowser;
}

+ (id)showApertureBrowser;
- (id)init;
- (void)dealloc;
- (id)windowNibName;
- (void)windowDidLoad;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaGroup:(id)fp12;

@end

@interface ICUWrapper : NSObject
{
    void *stub_ubrk_close;
    void *stub_ubrk_following;
    void *stub_ubrk_open;
    void *stub_ubrk_setText;
    void *stub_uloc_getKeywordValue;
    void *stub_ures_close;
    void *stub_ures_getByKey;
    void *stub_ures_getByKeyWithFallback;
    void *stub_ures_getSize;
    void *stub_ures_getStringByIndex;
    void *stub_ures_open;
}

+ (id)sharedICUWrapper;
- (id)init;
- (void)ubrk_close:(void *)fp8;
- (int)ubrk_following:(void *)fp8 offset:(int)fp12;
- (void *)ubrk_open:(int)fp8 locale:(const char *)fp12 text:(const unsigned short *)fp16 textLength:(int)fp20 status:(int *)fp24;
- (void)ubrk_setText:(void *)fp8 text:(const unsigned short *)fp12 textLength:(int)fp16 status:(int *)fp20;
- (int)uloc_getKeywordValue:(const char *)fp8 keywordName:(const char *)fp12 buffer:(char *)fp16 bufferCapacity:(int)fp20 status:(int *)fp24;
- (void)ures_close:(struct UResourceBundle *)fp8;
- (struct UResourceBundle *)ures_getByKey:(struct UResourceBundle *)fp8 key:(const char *)fp12 fillIn:(struct UResourceBundle *)fp16 status:(int *)fp20;
- (struct UResourceBundle *)ures_getByKeyWithFallback:(struct UResourceBundle *)fp8 key:(const char *)fp12 fillIn:(struct UResourceBundle *)fp16 status:(int *)fp20;
- (int)ures_getSize:(struct UResourceBundle *)fp8;
- (const unsigned short *)ures_getStringByIndex:(struct UResourceBundle *)fp8 indexS:(int)fp12 len:(int *)fp16 status:(int *)fp20;
- (struct UResourceBundle *)ures_open:(const char *)fp8 locale:(const char *)fp12 status:(int *)fp16;

@end

@interface IPCutSheetPreviewController : IPBookController
{
    NSTextField *mPageCountLabel;
    PrintAlbum *mLocalPrintAlbum;
}

- (void)awakeFromNib;
- (void)loadCurrentBook;
- (id)selectedTheme;
- (void)selectPaperSize:(id)fp8;
- (void)selectPhotoSize:(id)fp8;
- (void)selectPaperType:(id)fp8;
- (void)themeSelectionChanged:(id)fp8;
- (void)recreateBook:(BOOL)fp8;
- (id)relayoutBook:(id)fp8 withTheme:(id)fp12;
- (void)selectPreviousPage:(id)fp8;
- (void)selectNextPage:(id)fp8;
- (BOOL)isThemePreviewController;
- (void)setDirectPrintingDisabled:(BOOL)fp8;
- (void)setArchiveController:(id)fp8;
- (id)book;
- (void)setBook:(id)fp8;
- (id)localPrintAlbum;
- (void)dealloc;

@end

@interface PathLocker : NSObject
{
    struct _opaque_pthread_mutex_t _lock;
    struct _opaque_pthread_cond_t _condition;
    BOOL _releaseAll;
    NSMutableArray *mPaths;
}

- (id)init;
- (void)dealloc;
- (int)_indexForPath:(id)fp8;
- (void)lockPath:(id)fp8;
- (void)unlockPath:(id)fp8;
- (void)releaseAll;

@end

@interface PublishedAlbum : Album <ILAlbumContentsDelegate, ILAlbumProtectionDelegate>
{
    ILPhotoAlbum *mPublishedAlbum;
    int mPublishedAlbumType;
    NSMutableDictionary *mPersistentAlbumData;
    NSMutableDictionary *mPersistentPhotoData;
    NSString *mPublishedURL;
    NSString *mPublishedName;
    BOOL mPublishRequested;
    BOOL mUnpublishRequested;
    BOOL mPublishIsUpdating;
    NSTimer *mPubSyncTimer;
    NSMutableArray *mPubSubOperationQueue;
    BOOL mHaltPubSubQueue;
    BOOL mIsImporting;
    int mPublishSize;
    BOOL mAutoPublish;
    NSString *mPublishUsername;
    NSString *mPublishPassword;
    NSMutableSet *mPendingPublish;
    NSMutableSet *mPendingUnpublish;
    NSError *mPublishError;
    unsigned int mRollKey;
    NSString *mKeyPhotoUID;
    NSString *mCurrentUpdatingUID;
    int mPublishShowCaptions;
    BOOL mPublishShowDownloadLink;
    BOOL mPublishAllowContributions;
    BOOL mPublishAllowComments;
    BOOL mPublishAllowMobile;
    BOOL mPublishAllowAlbumWidget;
    BOOL mPublishShowEmailToVisitors;
    _Bool mTrashPhotosOnRemove;
    BOOL mIsLive;
}

+ (void)initialize;
+ (void)_terminateSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
+ (id)_canTerminate;
+ (void)_registerSelectorInTerminateQueue:(id)fp8;
+ (void)_removeSelectorFromTerminateQueue:(id)fp8;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16;
- (void)dealloc;
- (void)prepareForRelease;
- (void)checkForUIDDuplicates;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)publishedName;
- (id)keyPhotoUID;
- (void)setKeyPhotoUID:(id)fp8;
- (_Bool)trashPhotosOnRemove;
- (void)setTrashPhotosOnRemove:(_Bool)fp8;
- (unsigned long)publishImageDimensions;
- (int)publishSize;
- (void)setPublishSize:(int)fp8;
- (BOOL)autoPublish;
- (void)setAutoPublish:(BOOL)fp8;
- (id)publishUsername;
- (void)setPublishUsername:(id)fp8;
- (id)publishPassword;
- (void)setPublishPassword:(id)fp8;
- (int)publishShowCaptions;
- (void)setPublishShowCaptions:(int)fp8;
- (BOOL)publishShowDownloadLink;
- (void)setPublishShowDownloadLink:(BOOL)fp8;
- (BOOL)publishAllowContributions;
- (void)setPublishAllowContributions:(BOOL)fp8;
- (BOOL)publishAllowComments;
- (void)setPublishAllowComments:(BOOL)fp8;
- (id)publishMobilePin;
- (id)publishMobileEmail;
- (BOOL)publishAllowMobile;
- (void)setPublishAllowMobile:(BOOL)fp8;
- (BOOL)publishAllowAlbumWidget;
- (void)setPublishAllowAlbumWidget:(BOOL)fp8;
- (BOOL)publishShowEmailToVisitors;
- (void)setPublishShowEmailToVisitors:(BOOL)fp8;
- (void)setEnableBackgroundMusic:(BOOL)fp8;
- (void)setSlideShowPlaylistName:(id)fp8;
- (void)setSlideShowSongPath:(id)fp8;
- (void)setSecondsPerSlide:(int)fp8;
- (void)setRepeatSlideShow:(BOOL)fp8;
- (void)setRandomSlideShow:(BOOL)fp8;
- (void)setSlideShowUseTitles:(BOOL)fp8;
- (void)setSlideShowUseRankings:(BOOL)fp8;
- (void)setSlideShowShowControls:(BOOL)fp8;
- (void)setSlideShowFillScreen:(BOOL)fp8;
- (void)setSlideShowTransitionName:(id)fp8;
- (void)setSlideshowTransitionIdentifier:(id)fp8;
- (void)setSlideShowTransitionDirection:(int)fp8;
- (void)setSlideShowTransitionSpeed:(float)fp8;
- (void)setSlideShowAutoPanAndZoom:(BOOL)fp8;
- (int)publishType;
- (BOOL)isPublished;
- (id)publishedURI;
- (id)publishedURL;
- (BOOL)photoIsPending:(struct IPPhotoInfo *)fp8;
- (BOOL)photoWithUIDIsPending:(id)fp8;
- (void)setDB:(id)fp8;
- (void)setName:(id)fp8;
- (void)setComments:(id)fp8;
- (id)albumType;
- (void)albumWillBeSelected;
- (BOOL)isEjectable;
- (void)eject;
- (BOOL)isAltEjectable;
- (void)altEject;
- (long)maxPhotos;
- (void)alertMaxPhotos;
- (void)addWithArray:(struct IPPhotoList *)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (void)removeWithArray:(struct IPPhotoList *)fp8;
- (void)removeAll;
- (void)_addChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removeChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)setWantsProgress:(BOOL)fp8;
- (void)willBeRemoved;
- (void)willUndoRemove;
- (void)_doCancelProgress;
- (void)_cancelProgressSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)albumProgressCanceled:(id)fp8;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;
- (id)altEjectIcon:(BOOL)fp8;
- (id)altEjectClickedIcon:(BOOL)fp8;
- (id)altEjectHighlightedIcon:(BOOL)fp8;
- (unsigned long long)_publishImageMask;
- (unsigned long long)_publishMetadataMask;
- (unsigned long long)_publishAlbumMask;
- (void)_resetAutoPublish;
- (void)_noteChangedPublishSize;
- (void)_noteChangedFields:(unsigned long long)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_noteModifiedUID:(id)fp8 propertiesOnly:(BOOL)fp12;
- (void)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (void)_importStarted:(id)fp8;
- (void)_importEnded:(id)fp8;
- (BOOL)canPublish;
- (id)publishSettings;
- (void)setPublishSettings:(id)fp8;
- (void)showPublishSettings;
- (void)publishSelection:(struct IPPhotoList *)fp8 withTitle:(id)fp12 forAddAlbum:(BOOL)fp16;
- (void)republishAtURL:(id)fp8 withName:(id)fp12;
- (void)_republishSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)publish;
- (void)createPublishedAlbum;
- (void)_markAsUnpublished;
- (void)unpublish;
- (void)goThereNow;
- (void)updateNow;
- (void)publishNow;
- (void)_addPhotoWithUIDToPublish:(id)fp8;
- (void)_removePhotoWithUIDFromPublish:(id)fp8;
- (void)_dotMacError:(id)fp8;
- (void)_checkDotMac;
- (void)_checkDotMacDone;
- (void)_threadedCheckDotMac;
- (void)_syncWithDotMac:(id)fp8;
- (void)_processPubSubOperation:(id)fp8;
- (void)_processPubSubQueue;
- (void)_processPubSubQueue:(id)fp8;
- (void)_clearPubSubQueue;
- (void)_queuePendingPubsOnMainThread;
- (void)_queuePubSubOnMainThread:(id)fp8;
- (void)queuePubSubOperation:(id)fp8;
- (void)forceQueuePubSubOperation:(id)fp8;
- (void)registerPublishError:(id)fp8 withTitle:(id)fp12;
- (void)_showPublishError;
- (void)_showSubscriptionError:(id)fp8;
- (id)publishError;
- (void)setPublishError:(id)fp8;
- (BOOL)hasPublishError;
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (void)prepareToSyncWithProperties:(id)fp8;
- (void)updateProperties:(id)fp8;
- (id)orderedPhotoUIDs;
- (id)orderedPhotoUIDs:(BOOL)fp8;
- (id)allPropertiesForPhoto:(struct IPPhotoInfo *)fp8;
- (id)allPropertiesForPhotoWithUID:(id)fp8;
- (void)updateProperties:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)updateProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (void)setProperties:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)setProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (void)newPhotoWithUID:(id)fp8;
- (void)deletePhotoWithUID:(id)fp8;
- (void)deleteOldPhotoWithUID:(id)fp8;
- (id)createNewPhotoWithInitialProperties:(id)fp8;
- (void)setPersistentDictionary:(id)fp8 forAlbum:(id)fp12;
- (id)persistentDictionaryForAlbum:(id)fp8;
- (id)persistentDictionaryForPhotoWithUID:(id)fp8 forAlbum:(id)fp12;
- (id)ensureOriginalForPhotoWithUID:(id)fp8;
- (void)_updatePropertiesMainThread:(id)fp8;
- (void)_orderedPhotoUIDsMainThread:(id)fp8;
- (void)_photoPropertiesMainThread:(id)fp8;
- (void)_markChangedMainThread:(id)fp8;
- (void)_threadedRebuildThumbnail:(id)fp8;
- (void)_notifyImageChanged:(struct IPPhotoInfo *)fp8;
- (void)_updatePhotoPropertiesMainThread:(id)fp8;
- (void)_setPhotoPropertiesMainThread:(id)fp8;
- (void)_ensureOriginalMainThread:(id)fp8;
- (void)_deletePublishedPhoto:(id)fp8;
- (void)_deleteSubscribedPhoto:(id)fp8;
- (void)_createNewPhotoOnMainThread:(id)fp8;
- (void)_setPersistentDictionary:(id)fp8;
- (void)_persistentDictionaryForPhotoMainThread:(id)fp8;
- (void)statusUpdated:(int)fp8 forAlbum:(id)fp12 withProperties:(id)fp16;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)_beginChangeSessionMainThread;
- (void)_endChangeSessionMainThread;
- (BOOL)publishCompletePrompt;
- (void)_doPublish:(id)fp8;
- (void)_threadedUnpublish:(id)fp8;
- (void)_doUnpublish:(id)fp8;
- (void)_notifyUIDChanged:(id)fp8;
- (void)_updateAlbumsOrder;
- (void)_updateComplete:(id)fp8;
- (void)_publishStarted:(id)fp8;
- (void)_publishIsLive;
- (id)protectionLoginForAlbum:(id)fp8;
- (id)protectionPasswordForAlbum:(id)fp8;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (void)createEmailWithPublishAnnouncement;

@end

@interface IPRollInfoCache : NSObject
{
    struct map<Key, RollInfoCacheRecord, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> *_infoMap;
    struct map<Key, RollCachePhotoEntry, std::less<long unsigned int>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> *_keyMap;
    DBKeyMgr *_emptyEventKeys;
}

+ (id)cacheForPhotoList:(struct IPPhotoList *)fp8;
+ (id)cacheForPhotoList:(struct IPPhotoList *)fp8 emptyEvents:(struct IPSelectionList *)fp12;
- (void)_clearCaches;
- (id)init;
- (void)dealloc;
- (void)_cacheForPhotoList:(struct IPPhotoList *)fp8 emptyEvents:(struct IPSelectionList *)fp12;
- (void)restoreForPhotoList:(struct IPPhotoList *)fp8 movePhotos:(BOOL)fp12;

@end

@interface IPTransitionController : NSObject
{
    IPTransitionView *_transitionView;
    IPGLGuardView *_guardView;
    ArchiveController *_delegate;
    NSAnimation *_animation;
    float _percentage;
    HUDWindow *_window;
}

+ (id)transitionController;
- (id)init;
- (void)dealloc;
- (void)initializeWithView:(id)fp8;

@end

@interface IPTransitionView : IPOpenGLView
{
    struct IPPhotoInfo *_photo;
    IPTransitionCotntroller *_controller;
    float _alpha;
    struct _NSRect _targetFrame;
    struct _NSRect _startFrame;
    float _percentage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setController:(id)fp8;
- (id)backgroundColor;
- (void)drawCurrentFrame;
- (struct IPPhotoInfo *)photo;
- (void)setPercentage:(float)fp8;

@end

@interface IPContactSheetElementCell : IPPageElement
{
    IPImageElement *mImageElement;
    IPTextElement *mTextElement;
    float mImagePercentage;
    int mImagePosition;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setParent:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (float)imageAspectRatio;
- (id)draggingImage:(struct _NSSize)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)isCellElement;
- (id)embeddedTextElements;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (id)imageElement;
- (id)textElement;
- (float)imagePercentage;
- (int)imagePosition;
- (void)_resizeElements;
- (void)preserveFontSizeForColumnCount:(int)fp8;
- (void)restoreFontToSizeForColumnCount:(int)fp8;

@end

@interface IPAnimation : NSObject
{
    NSMutableArray *_phases;
    float _totalDuration;
}

+ (id)animation;
- (id)init;
- (void)dealloc;
- (id)description;
- (void)addPhase:(id)fp8;
- (void)removePhase:(id)fp8;
- (id)addPhaseStartingAtEndOfLastPhase;
- (int)phaseCount;
- (float)totalDuration;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface IPAnimationPhase : NSObject <NSCopying>
{
    float _duration;
    struct vector<IPAnimationObject, std::allocator<IPAnimationObject>> *_objects;
}

+ (id)phase;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)copyEndsToBegins;
- (void)addObject:(void *)fp8;
- (int)objectCount;
- (void *)objects;
- (float)duration;
- (void)setDuration:(float)fp8;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface GroupManagerFormatter : NSFormatter
{
    int _fieldType;
    NSCharacterSet *_validCharacters;
}

+ (id)usernameFormatter;
+ (id)passwordFormatter;
- (id)initWithFieldType:(int)fp8;
- (void)dealloc;
- (unsigned int)minLength;
- (unsigned int)maxLength;
- (id)validCharacters;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;

@end

@interface NSWorkspace (BLAdditions)
- (BOOL)openURL:(id)fp8 withApplicationAtPath:(id)fp12;
- (BOOL)openURL:(id)fp8 withApplicationWithBundleIdentifier:(id)fp12;
- (id)pathForApplicationWithBundleIdentifier:(id)fp8;
- (id)pathForApplicationOfFileAtPath:(id)fp8;
- (id)pathForApplicationForMIMEType:(id)fp8;
- (BOOL)launchApplicationAtPath:(id)fp8 processSerialNumber:(struct ProcessSerialNumber *)fp12 makeFrontmost:(BOOL)fp16 alreadyOpen:(char *)fp20 event:(id)fp24;
- (id)infoForLaunchedApplicationAtPath:(id)fp8;
- (BOOL)isLaunchedApplicationAtPath:(id)fp8;
- (BOOL)processSerialNumber:(struct ProcessSerialNumber *)fp8 forApplicationAtPath:(id)fp12;
- (id)findFolderPathForDomainType:(unsigned long)fp8 folderType:(unsigned long)fp12;
- (BOOL)moveFileToTrash:(id)fp8;
- (id)_internetLocationFileExtensions;
- (id)_internetLocationFileExtensionsArray;
- (BOOL)isInternetLocationFileAtPath:(id)fp8;
- (id)internetLocationFileExtensionForURL:(id)fp8;
- (BOOL)URL:(id *)fp8 title:(id *)fp12 forInternetLocationFileAtPath:(id)fp16;
- (id)URLForInternetLocationFileAtPath:(id)fp8;
- (id)createInternetLocationFileInDirectory:(id)fp8 withURL:(id)fp12 title:(id)fp16;
- (void)noteDirectoryContentsChangedAtPath:(id)fp8;
- (void)notifyFinderFileChangedAtPath:(id)fp8;
@end

@interface NSAppleEventDescriptor (BLAdditions)
+ (id)descriptorWithPath:(id)fp8;
+ (id)descriptorWithProcessSerialNumber:(struct ProcessSerialNumber)fp8;
- (BOOL)send;
- (BOOL)sendWithTimeout:(long)fp8;
- (BOOL)sendWithoutWaitingForReply;
@end

@interface AddAlbum : NSObject
{
    NSWindow *mWindow;
    NSView *mAlbumView;
    NSTextField *mAlbumNameText;
    NSButton *mAlbumUseSelectedButton;
    NSButton *mAlbumOKButton;
    NSButton *mAlbumCancelButton;
    NSView *mSlideshowView;
    NSTextField *mSlideshowNameText;
    NSButton *mSlideshowUseSelectedButton;
    NSButton *mSlideshowOKButton;
    NSButton *mSlideshowCancelButton;
    NSView *mBookView;
    NSTextField *mBookNameText;
    NSView *mBookPickerView;
    NSView *mCardView;
    NSTextField *mCardNameText;
    NSView *mCardPickerView;
    NSView *mCalendarView;
    NSTextField *mCalendarNameText;
    NSView *mCalendarPickerView;
    NSView *mDotMacProblemView;
    NSView *mDotMacView;
    NSTextField *mDotMacNameText;
    NSView *mDotMacPickerView;
    NSMutableArray *_nibObjects;
    NSView *_heldBookSheet;
    NSView *_heldCardSheet;
    NSView *_heldCalendarSheet;
    NSView *_heldSmartAlbumSheet;
    NSView *_heldDotMacSheet;
    BOOL _dotMacSettingsVisible;
    PublishAlbumSettings *_heldPublishController;
    BOOL _useSelection;
    BOOL _allowProducts;
    int _activeTypeTag;
    NSWindow *_onWindow;
}

+ (void)showOnWindow:(id)fp8 forSelection:(BOOL)fp12;
- (void)_start;
- (void)dealloc;
- (void)_installView:(id)fp8;
- (void)_installView:(id)fp8 inView:(id)fp12 asChildOf:(id)fp16;
- (void)_putSheetsBack;
- (void)_enableOkButtons:(BOOL)fp8;
- (id)_getCurrentName:(int)fp8;
- (void)_setCurrentName:(id)fp8 type:(int)fp12;
- (id)_suggestedAlbumName:(int)fp8;
- (void)_setNameForType:(int)fp8 force:(BOOL)fp12;
- (void)_loadSmartAlbumPanel;
- (void)_loadBookPanel;
- (void)_loadCardPanel;
- (void)_loadCalendarPanel;
- (void)_updateForDotMacSettingsViewState;
- (void)_loadDotMacPanel;
- (void)_setupToolbar;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (BOOL)validateToolbarItem:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)other:(id)fp8;
- (void)nameFieldAction:(id)fp8;
- (void)chooseType:(id)fp8;
- (void)openDotMacPreferences:(id)fp8;
- (void)_addAlbumCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (BOOL)useSelection;
- (void)setUseSelection:(BOOL)fp8;
- (id)onWindow;
- (void)setOnWindow:(id)fp8;

@end

@interface AddAlbumPanel : NSPanel
{
    AddAlbum *_addAlbum;
}

- (id)addAlbum;
- (void)setAddAlbum:(id)fp8;

@end

@interface IPBookInsideCoverView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mFlapRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 leftLaying:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface FlippedView : NSView
{
}

- (BOOL)isFlipped;

@end

@interface IPInvoker : NSObject
{
    id _target;
    double _delay;
    int _mode;
    NSInvocation *_invocation;
}

+ (id)prepareWithInvocationTarget:(id)fp8;
+ (id)performOnMainThreadWithInvocationTarget:(id)fp8;
+ (id)performAfterDelay:(double)fp8 withTarget:(id)fp16;
- (void)dealloc;
- (id)preparedInvocation;
- (void)_invokeOnMain:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;

@end

@interface IPHTemporarySpaceManager : NSObject
{
    DMiDiskSession *_session;
    NSString *_destinationPath;
    NSString *_temporaryPath;
    NSMutableDictionary *_properties;
    NSMutableSet *_knownPaths;
    BOOL _createdTemporary;
}

+ (void)initialize;
- (id)initWithSession:(id)fp8 destinationPath:(id)fp12;
- (void)dealloc;
- (void)_reset;
- (id)_pathForTemporaryResource:(id)fp8;
- (id)_makeCollectionAtPath:(id)fp8;
- (id)putLocalFileAtPath:(id)fp8 toPath:(id)fp12;
- (void)setProperty:(id)fp8 forKey:(id)fp12 inNamespace:(id)fp16 atPath:(id)fp20;
- (void)setProperties:(id)fp8 atPath:(id)fp12;
- (id)setAccess:(id)fp8 atPath:(id)fp12;
- (BOOL)willOverlay;
- (id)overlayToDestination;
- (void)synchronize;
- (id)removeTemporaryFiles;

@end

@interface IPHAnnounceEmail : NSObject
{
    NSMutableString *mTempHTMLFileName;
    WebView *mWebView;
    NSString *mDefaultVisitURLString;
    NSDictionary *mImageDictionary;
    ILPublishedPhotoAlbum *mAlbum;
    NSMutableSet *mLoadingResources;
    BOOL mFrameIsLoaded;
}

+ (void)announceEmailForAlbum:(id)fp8;
+ (void)_fixupImageElement:(id)fp8 imageDictionary:(id)fp12;
+ (id)_populateHTMLTemplate:(id)fp8 fromAlbum:(id)fp12 imageDictionary:(id)fp16;
+ (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
+ (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8;
+ (id)_drawThumbnail:(struct IPPhotoInfo *)fp8 thumbFrame:(struct _NSRect)fp12 rotation:(float)fp28 tnManager:(id)fp32 context:(struct CGContext *)fp36 fillSquareThumb:(BOOL)fp40 clipRect:(struct _NSRect)fp44 lowres:(BOOL)fp60 forOverview:(BOOL)fp64;
- (id)initWithAlbum:(id)fp8;
- (void)dealloc;
- (void)announceSite:(id)fp8 withHTML:(id)fp12 imageDictionary:(id)fp16;
- (void)createPlainTextEmail;
- (void)_removeTemporaryFiles;
- (id)webView:(id)fp8 identifierForInitialRequest:(id)fp12 fromDataSource:(id)fp16;
- (void)webView:(id)fp8 resource:(id)fp12 didReceiveAuthenticationChallenge:(id)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didFailLoadingWithError:(id)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didFinishLoadingFromDataSource:(id)fp16;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)_sendEmail;

@end

@interface IPPrinter : NSObject
{
    struct OpaquePMPrinter *mPrinter;
    struct _NSSize mMaxPaperSize;
    struct _NSRect mMaxPaperImageRect;
    CDAnonymousStruct9 *mPpd;
}

+ (id)userDefaultPaper;
+ (id)genericPrinter;
+ (id)userDefaultPrinter;
+ (id)userPrinterList;
+ (id)serverPrinterList;
+ (id)printerWithPMPrinter:(struct OpaquePMPrinter *)fp8;
+ (id)printerWithName:(id)fp8;
+ (struct OpaquePMPaper *)paperWithName:(id)fp8 forPrinter:(struct OpaquePMPrinter *)fp12;
+ (struct OpaquePMPageFormat *)pageFormatWithPMPaper:(struct OpaquePMPaper *)fp8;
- (id)initWithPrinter:(struct OpaquePMPrinter *)fp8;
- (void)dealloc;
- (struct OpaquePMPrinter *)printer;
- (void)setPrinter:(struct OpaquePMPrinter *)fp8;
- (id)name;
- (BOOL)isFavorite;
- (BOOL)isDefault;
- (id)printerPresets;
- (id)presetForID:(id)fp8 fromArray:(id)fp12;
- (id)localizedStringForPaper:(struct OpaquePMPaper *)fp8;
- (CDAnonymousStruct9 *)ppd;
- (id)papers;
- (id)paperInfoListWithWidth:(double)fp8 andHeight:(double)fp16;
- (struct _NSSize)maxPaperSize;
- (id)icon;
- (struct _NSRect)imageableAreaForPaperOfSize:(struct _NSSize)fp8;
- (id)description;

@end

@interface NSPrintInfo (NSPrintInfoTigerCompatibleAdditions)
- (struct OpaquePMPrintSession *)getPMPrintSession;
- (struct OpaquePMPageFormat *)getPageFormatToChange;
- (void)updatePageFormat:(struct OpaquePMPageFormat *)fp8;
- (void)setNewPageFormat:(struct OpaquePMPageFormat *)fp8;
- (struct OpaquePMPrintSettings *)getPrintSettingsToChange;
- (void)updatePrintSettings:(struct OpaquePMPrintSettings *)fp8;
- (void)setNewPrintSettings:(struct OpaquePMPrintSettings *)fp8;
@end

@interface IPPrinterPreset : NSObject
{
    struct OpaquePMPreset *mPMPreset;
}

+ (id)presetWithPMPreset:(struct OpaquePMPreset *)fp8;
- (id)initWithPreset:(struct OpaquePMPreset *)fp8;
- (void)dealloc;
- (struct OpaquePMPreset *)pmPreset;
- (struct OpaquePMPrintSettings *)printSettingsForSession:(struct OpaquePMPrintSession *)fp8;
- (void)setPMPreset:(struct OpaquePMPreset *)fp8;
- (id)name;
- (id)description;

@end

@interface CGConnect : NSObject
{
}

+ (void)suspendDrawing;
+ (void)resumeDrawing;
+ (void)setWindow:(id)fp8 transform:(struct CGAffineTransform)fp12;

@end

@interface NSWindow (Genie)
- (void)genieWindow:(int)fp8 fromRect:(struct _NSRect)fp12 percent:(float)fp28;
@end

@interface ILPhotoShare : NSObject
{
    id _shareContentsDelegate;
    NSMutableDictionary *_properties;
}

- (id)init;
- (id)initWithContentsDelegate:(id)fp8;
- (void)dealloc;
- (void)_setupObservers;
- (void)_unsetupObservers;
- (void)operationEnded:(id)fp8;
- (void)setShareContentsDelegate:(id)fp8;
- (id)shareContentsDelegate;
- (id)persistenceDictionary;
- (void)savePersistenceDictionary;
- (id)propertyForKey:(id)fp8;
- (void)setProperty:(id)fp8 forKey:(id)fp12;
- (void)setPropertiesVersion:(id)fp8;
- (id)propertiesVersion;
- (void)bumpPropertiesVersion;

@end

@interface BlemishHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    HUDViewElement *mRedeyeHUDView;
    HUDViewElement *mRetouchHUDView;
    HUDViewElement *mBlemishSliderHUDView;
    int mMode;
    Edit *mEdit;
    NSPopUpButton *mRedeyePopUp;
    NSTextField *mRetouchSizeTextLabel;
    NSTextField *mRedeyeSizeTextLabel;
    BOOL mShowBlemishSlider;
    int mRedeyeRadiusMode;
    HUDSlider *mBlemishSlider;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setEdit:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)setHUDMode:(int)fp8;
- (void)onRedeyeMode:(id)fp8;
- (void)onBlemishRadiusChanged:(id)fp8;
- (void)onMouseDown:(id)fp8;
- (void)onMouseUp:(id)fp8;
- (void)updateBrushRadius:(float)fp8;
- (void)updateRedeyeRadiusMode:(int)fp8;
- (void)resetBrushSelection;

@end

@interface NSImage (iPhotoExtensions)
- (struct _NSRect)rect;
- (void)compositeToRect:(struct _NSRect)fp8 operation:(int)fp24;
- (void)compositeToRect:(struct _NSRect)fp8 operation:(int)fp24 fraction:(float)fp28;
@end

@interface IPDetailHeaderView : NSView
{
    Album *_album;
    BOOL _hiliteBack;
    NSImage *_bgArt;
    NSImage *_backLeftN;
    NSImage *_backMiddleN;
    NSImage *_backRightN;
    NSImage *_backLeftP;
    NSImage *_backMiddleP;
    NSImage *_backRightP;
    struct _NSPoint _backLeftPoint;
    struct _NSRect _backMiddleRect;
    struct _NSPoint _backRightPoint;
    struct _NSRect _backRect;
    BOOL _showNextPrev;
    BOOL _hiliteNext;
    BOOL _hilitePrev;
    NSImage *_nextN;
    NSImage *_prevN;
    NSImage *_nextD;
    NSImage *_prevD;
    NSImage *_nextP;
    NSImage *_prevP;
    struct _NSRect _nextRect;
    struct _NSRect _prevRect;
    NSImage *_keyframe;
    NSAttributedString *_backStr;
    struct _NSRect _backStrRect;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    NSDictionary *_pluralTitleAttrs;
    Ellipsizer *_pluralTitleEllipsizer;
    struct _NSRect _titleRect;
    struct _NSRect _pluralTitleRect;
    NSDictionary *_revealAttrs;
    NSDictionary *_hiliteRevealAttrs;
    struct _NSRect _revealRect;
    struct _NSRect _actualRevealRect;
    BOOL _hiliteReveal;
    BOOL _showReveal;
    NSDictionary *_dateAttrs;
    Ellipsizer *_dateEllipsizer;
    struct _NSRect _dateRect;
    unsigned int _singleEventKey;
    unsigned int _firstKey;
    unsigned int _lastKey;
    struct __CFDateFormatter *_dateFormatter;
    NSAttributedString *_pluralStr;
    NSAttributedString *_eventStr;
    NSAttributedString *_subStr;
    struct _NSRect _imageRect;
    struct _NSRect _frameRect;
    struct _NSRect _srcRect;
    NSColor *_titleColor;
    NSTextField *_inlineEditor;
    struct IPRoll *_inlineEditRoll;
    NSLock *_inlineEditUpdateLock;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)tile;
- (void)_goBack;
- (void)_goToNeighborEvent:(int)fp8;
- (void)_toggleRevealConceal;
- (void)_setKeyPhoto:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28 hiliteFlag:(char *)fp32;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)setHidden:(BOOL)fp8;
- (void)undoRedoInlineCaptionEditForDB:(id)fp8 rollKey:(unsigned long)fp12 oldCaption:(id)fp16 newCaption:(id)fp20 undoManager:(id)fp24;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(struct IPRoll *)fp8;
- (BOOL)_control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_undoRedoMakeKeyPhotoForRoll:(id)fp8 oldPhotoKey:(unsigned long)fp12 newPhotoKey:(unsigned long)fp16 undoManager:(id)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;

@end

@interface StraightenHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NSView *mStraightenHUDView;
    Edit *mEdit;
    HUDSlider *mStraightenSlider;
    TwoTargetButton *mLeftStraightenButton;
    TwoTargetButton *mRightStraightenButton;
    id mResetButton;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setEdit:(id)fp8;
- (void)initializeWithEditList:(struct EditListData)fp8;
- (void)closeHUD:(id)fp8;
- (void)reset:(id)fp8;
- (void)optionKeyDown:(BOOL)fp8;
- (id)straightenSlider;

@end

@interface NonAutoSelectingTableView : NSTableView
{
}

- (void)textDidEndEditing:(id)fp8;
- (void)keyDown:(id)fp8;

@end

@interface InfoGroupView : NSView
{
    NSImage *mGradientImage;
    NSButton *mDisclosureButton;
    float mDisclosedHeight;
    EtchedText *mTitleField;
    BOOL mHUDLook;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (BOOL)isDisclosed;
- (void)setDisclosed:(BOOL)fp8;
- (float)heightWithDisclosure;
- (void)addExtraHeight:(float)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 title:(id)fp24 target:(id)fp28;
- (void)setTitle:(id)fp8;
- (void)useHUDLook:(BOOL)fp8;

@end

@interface HUDHorizontalView : HUDView
{
    struct _NSRect mMessageDrawRect;
}

+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 delegate:(id)fp24 showClose:(BOOL)fp28;
- (void)drawRect:(struct _NSRect)fp8;
- (void)resizeToAccomodateSize:(struct _NSSize)fp8;
- (void)setMessage:(id)fp8;
- (void)setTitle:(id)fp8;
- (float)firstSubviewPosition;

@end

@interface KeywordPickerButton : NSButton
{
    BOOL mHighlight;
    unsigned int mModifiersFromLastClick;
    BOOL mMark;
}

- (BOOL)isFlipped;
- (id)font;
- (id)titleAttrs;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setMark:(BOOL)fp8;
- (void)highlight:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)modifiersFromLastClick;
- (void)setModifiersFromLastClick:(unsigned int)fp8;

@end

@interface NSString (BLPantherCompatability)
+ (id)stringWithCString:(const char *)fp8 encoding:(unsigned int)fp12;
@end

@interface NSString (BLURLAttributedString)
- (id)attributedStringForURL:(id)fp8;
@end

@interface NSMutableString (BLAdditions)
- (unsigned int)replaceOccurrencesOfCharactersInSet:(id)fp8 withString:(id)fp12;
@end

@interface NSString (BLAdditionsPrivate)
- (unsigned int)pTrailingIntegerSuffixLength;
@end

@interface NSString (BLAdditions)
+ (id)stringByBase64EncodingBytes:(const char *)fp8 length:(int)fp12;
+ (id)stringByBase64EncodingBytes:(const char *)fp8 length:(int)fp12 breakLines:(BOOL)fp16;
+ (id)stringFromCFUUID;
- (id)stringByPercentEscapesForMailtoURL;
- (id)stringByPercentEscapingForGetArgument;
- (id)possibleURLsForUserTypedString;
- (id)bestURLForUserTypedString;
- (id)bestURLStringForUserTypedString;
- (int)compareDomain:(id)fp8;
- (int)compareVersionString:(id)fp8;
- (void)drawDoubledInRect:(struct _NSRect)fp8 withTopColor:(id)fp24 bottomColor:(id)fp28 font:(id)fp32 centered:(BOOL)fp36 flipped:(BOOL)fp40;
- (id)stringByDeletingStartingSlash;
- (id)stringByDeletingTrailingSlash;
- (id)stringByDeletingTrailingInteger;
- (id)stringByStrippingLineEndings;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndAngleBrackets;
- (id)encodeStringBase64;
- (id)spaceSeparatedPrefix;
- (id)spaceSeparatedSuffix;
- (id)domainFromHost;
- (BOOL)isEndedWithNewline;
- (BOOL)isSyndicationScheme;
- (BOOL)isSyndicationURLString;
- (id)dispositionTypeFromContentDispositionHeader;
@end

@interface HUDViewElement : NSView
{
    short mDivideViewSides;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setDivideViewOnSides:(unsigned long long)fp8;
- (unsigned long long)divideViewOnSides;

@end

@interface ImageCache : NSObject
{
    NSString *m_name;
    NSImage *m_image;
    NSMutableDictionary *m_cachedParts;
    int m_leftSize;
    int m_middleSize;
    int m_rightSize;
    int m_spacing;
    int m_rowHeight;
    int m_blockWidth;
    int m_rowCount;
}

+ (id)imageCacheWithName:(id)fp8;
+ (void)registerImageCacheWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28;
+ (void)registerImageCacheWithName:(id)fp8 rows:(int)fp12;
+ (void)registerImageCacheWithName:(id)fp8 columns:(int)fp12 rows:(int)fp16;
- (id)imagePart:(int)fp8 state:(int)fp12 value:(int)fp16;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32 opacity:(float)fp36 leftEnd:(BOOL)fp40 rightEnd:(BOOL)fp44;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32 opacity:(float)fp36;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 column:(int)fp28 row:(int)fp32 opacity:(float)fp36;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 column:(int)fp28 row:(int)fp32;
- (int)height;
- (struct _NSSize)cellSize;
- (id)initWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28 columns:(int)fp32;
- (id)initWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28;
- (id)initWithName:(id)fp8 columns:(int)fp12 rows:(int)fp16;
- (void)dealloc;

@end

@interface NSObject (Additions)
+ (void)changeClass:(Class)fp8 superClassTo:(Class)fp12;
- (void)setValue:(id)fp8 forBinding:(id)fp12;
- (void)changeClassTo:(Class)fp8;
@end

@interface NSShadow (Additions)
+ (id)darkShadow;
+ (id)lightShadow;
+ (id)lightDarkShadow;
+ (id)mediumShadow;
@end

@interface PushButton : ThreePartButton
{
}

- (id)cacheName;
- (BOOL)addShadow;
- (int)interiorVOffset;

@end

@interface ThreePartButton : NSButton
{
}

- (id)cacheName;
- (int)interiorVOffset;
- (BOOL)disableSmoothing;
- (BOOL)addShadow;
- (void)drawBackgroundInFrame:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (id)initWithCoder:(id)fp8;

@end

@interface ThreePartButtonCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface WelcomeBottomView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface WelcomeTopView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)mouseDownCanMoveWindow;

@end

@interface WhatsNewController : NSObject
{
    NSPanel *m_panel;
    WebView *m_webView;
    BOOL _closing;
    BOOL _requestPending;
}

+ (void)displayImmediately:(BOOL)fp8;
- (void)showBlankPage;
- (BOOL)isClosing;
- (void)a_close:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)a_moreDetails:(id)fp8;
- (void)showOfflinePage;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (id)initAndDisplayImmediately:(BOOL)fp8;
- (void)dealloc;

@end

@interface WhatsNewPanel : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (BOOL)isKeyWindow;

@end

@interface IPDotMacHeaderView : NSView
{
    Album *_album;
    NSImage *_bgArt;
    NSImage *_keyframe;
    NSImage *_keyframeSelected;
    struct _NSRect _keyRect;
    BOOL _hiliteKey;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    struct _NSRect _titleRect;
    NSDictionary *_infoAttrs;
    Ellipsizer *_infoEllipsizer;
    struct _NSRect _infoRect;
    struct _NSRect _addressRect;
    NSAttributedString *_titleStr;
    NSAttributedString *_infoStr;
    NSAttributedString *_addressStr;
    NSImage *_linkN;
    NSImage *_linkP;
    struct _NSRect _linkRect;
    BOOL _hiliteLink;
    int _infoRectTracking;
    NSProgressIndicator *_progress;
    NSString *_progressText;
}

- (id)titleStr;
- (void)setTitleStr:(id)fp8;
- (id)infoStr;
- (void)setInfoStr:(id)fp8;
- (id)addressStr;
- (void)setAddressStr:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (float)_maximumDurationStringWidth:(id)fp8;
- (void)tile;
- (void)showAlbumProgress;
- (void)hideAlbumProgress;
- (void)updateAlbumProgress;
- (void)_link;
- (void)_setKeyPhoto:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28 hiliteFlag:(char *)fp32;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setHidden:(BOOL)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_undoRedoMakeKeyPhotoForAlbum:(id)fp8 oldUID:(id)fp12 newUID:(id)fp16 undoManager:(id)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;

@end

@interface TunesScroller : PVScroller
{
    float _alpha;
}

- (void)_loadImages;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)_isVertical;
- (void)drawArrow:(int)fp8 highlightPart:(int)fp12;
- (void)drawArrow:(int)fp8 highlight:(BOOL)fp12;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)_drawVertScaledWidgetInRect:(struct _NSRect)fp8 topImage:(id)fp24 centerImage:(id)fp28 bottomImage:(id)fp32 symbolImage:(id)fp36 operation:(int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (float)alpha;
- (void)setAlpha:(float)fp8;

@end

@interface LatestEventAlbum : FilterAlbum
{
    BOOL _updateEnabled;
}

+ (void)initialize;
- (id)init;
- (void)encodeWithDictionary:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (BOOL)updateEnabled;
- (void)setUpdateEnabled:(BOOL)fp8;
- (BOOL)isEjectable;
- (void)eject;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;

@end


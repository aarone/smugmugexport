/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

struct AnimationRects;

struct Array {
    unsigned int magic;
    unsigned int itemSize;
    unsigned int itemCount;
    int dataStored;
    int dataAllocated;
    int lockCount;
    struct MemHandleOpaque *itemsHandle;
    void *compareProc;
    unsigned char keepSorted;
    unsigned char isSorted;
};

struct AuthorizationOpaqueRef;

struct BGThread {
    struct _opaque_pthread_t *thread;
    struct _opaque_pthread_mutex_t processLock;
    struct _opaque_pthread_mutex_t waitLock;
    struct _opaque_pthread_cond_t condition;
    struct _opaque_pthread_mutex_t quitLock;
    struct IPPhotoInfo *info;
    int state;
    int priority;
};

struct BGThreadParams {
    struct BGThread *bgThread;
    struct _opaque_pthread_mutex_t *listLock;
    struct _opaque_pthread_mutex_t *finishedLock;
    struct BackgroundArray *highPriority;
    struct BackgroundArray *lowPriority;
    struct BackgroundArray *finishArray;
    struct _opaque_pthread_cond_t *communicationCondition;
    struct _opaque_pthread_mutex_t *communicationWaitLock;
};

struct BackgroundArray {
    struct _Vector_impl _field1;
};

struct BackgroundImage {
    struct IPPhotoInfo *_field1;
    struct IPFileImage *_field2;
    struct IPFileImage *_field3;
    char _field4;
    int _field5;
    struct CGSize _field6;
    struct CGSize _field7;
    int _field8;
    char _field9;
    id _field10;
};

struct BackgroundRenderArray {
    struct _Vector_impl _field1;
};

struct BlemishPoint;

struct BlemishPointArray {
    struct _Vector_impl _field1;
};

struct CATransform3D {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
};

struct CGAffineTransform {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
};

struct CGColor;

struct CGColorSpace;

struct CGContext;

struct CGDataConsumer;

struct CGDataProvider;

struct CGFunction;

struct CGImage;

struct CGImageDestination;

struct CGImageSource;

struct CGLayer;

struct CGPDFDocument;

struct CGPath;

struct CGPattern;

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGShading;

struct CGSize {
    float width;
    float height;
};

struct CReefAutoFixParms {
    struct Rect _field1;
    struct Point _field2;
    float _field3;
    int _field4;
    int _field5;
    int _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CReefImage {
    void *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
};

struct CVSMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct CellData {
    int _field1;
    int _field2;
    int _field3;
    struct _NSRect _field4;
    unsigned int _field5;
    long _field6;
    struct IPPhotoList *_field7;
    long _field8;
    long _field9;
    char _field10;
    void *_field11;
};

struct CompareJoinRecord;

struct ComponentInstanceRecord {
    long _field1[1];
};

struct CreateNewObjectData {
    unsigned int _field1;
    unsigned char _field2;
};

struct DayRange {
    int _field1;
    unsigned int _field2;
    struct IPPhotoList *_field3;
    long _field4;
    long _field5;
    long _field6;
    float _field7;
    float _field8;
    char _field9;
    char _field10;
};

struct EditBlemishEvent {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
};

struct EditEnhanceData {
    float _field1[3];
    float _field2[3];
    float _field3[3];
    float _field4[3];
};

struct EditListData {
    unsigned short _field1;
    unsigned short _field2;
    struct _NSRect _field3;
    int _field4;
    int _field5;
    unsigned short _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17[3];
    float _field18[3];
    float _field19[3];
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    unsigned short _field24;
    unsigned short _field25;
    unsigned short _field26;
    unsigned short _field27;
    unsigned short _field28;
    unsigned short _field29;
    unsigned short _field30;
    unsigned short _field31;
    struct EditEnhanceData _field32;
};

struct EffectsStruct {
    EditFilter *filter;
    NSAttributedString *title;
    struct _NSRect frame;
    SEL selector;
    int maxSetting;
    int trackingRect;
};

struct ElementPageThumbArray {
    struct _Vector_impl _field1;
};

struct EllipsizingDataStruct {
    id _field1;
    float _field2;
    struct _NSSize *_field3;
};

struct ExternallyEditedPhoto;

struct FSRef {
    unsigned char hidden[80];
};

struct FSSpec {
    short vRefNum;
    int parID;
    unsigned char name[64];
};

struct FaceNameInfo {
    id _field1;
    id _field2;
    id _field3;
};

struct FilterEvent;

struct FilterEventArray {
    struct _Vector_impl _field1;
};

struct FixedPoint {
    int _field1;
    int _field2;
};

struct HeaderDisplayData {
    struct IPPhotoInfo *_field1;
    id _field2;
    id _field3;
    char _field4;
};

struct HistogramRecord {
    unsigned long *histogram[4];
    unsigned long sampleCount;
};

struct ICAPropertyInfo {
    unsigned int propertyType;
    unsigned int dataType;
    unsigned int dataSize;
    unsigned int dataFlags;
};

struct ICAThumbnail {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned char _field4[1];
};

struct IPAlbumList {
    struct vector<Album*, std::allocator<Album*>> _field1;
    struct _opaque_pthread_mutex_t _field2;
};

struct IPAlbumState;

struct IPCachedObject;

struct IPFileImage {
    void **_field1;
    struct CGImage *_field2;
    char **_field3;
    CDAnonymousStruct4 _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    id _field10;
    double _field11;
    double _field12;
    float _field13;
    int _field14;
    int _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    id _field20;
    struct SqFileImage *_field21;
    struct IPFileInfo _field22;
    struct CGSize _field23;
    id _field24;
};

struct IPFileInfo {
    id mRoot;
    unsigned char mPathIsAbsolute;
    unsigned char mHaveTriedToResolve;
    struct SqFileInfo *mSqFileInfo;
};

struct IPImage {
    void **_field1;
    struct CGImage *_field2;
    char **_field3;
    struct {
        struct CGImage *_field1;
        void *_field2;
        long _field3;
        struct _NSSize _field4;
        float _field5;
        unsigned int _field6;
    } _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    id _field10;
    double _field11;
    double _field12;
    float _field13;
    int _field14;
    int _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    id _field20;
};

struct IPObjectCache {
    void **_field1;
    int _field2;
    int _field3;
    void *_field4;
    void *_field5;
    struct IPCachedObject *_field6;
    struct IPCachedObject *_field7;
    struct map<long unsigned int, IPCachedObject*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> _field8;
    struct _opaque_pthread_mutex_t _field9;
};

struct IPPageElementCorners {
    struct CGPoint _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    char _field13;
};

struct IPPageElementEdges {
    float left;
    float right;
    float top;
    float bottom;
};

struct IPPersonSelectable {
    void **_field1;
    id _field2;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field3;
    struct hash_set<IPPhotoInfo*, IPPhotoInfoPtrHash, std::equal_to<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field4;
    char _field5;
    double _field6;
    double _field7;
    void **_field8;
    id _field9;
    int _field10;
    int _field11;
    id _field12;
};

struct IPPhotoInfo {
    void **_field1;
    id _field2;
    int _field3;
    struct SqPhotoInfo *_field4;
    unsigned int _field5;
    unsigned int _field6;
    struct IPRoll *_field7;
    struct IPStack *_field8;
    id _field9;
    id _field10;
    id _field11;
    int _field12;
    _Bool _field13;
    id _field14;
    unsigned char _field15;
    struct IPImage *_field16[6];
    unsigned long long _field17;
    char _field18;
    char _field19;
    unsigned long _field20;
    id _field21;
    id _field22;
    int _field23;
    id _field24;
    id _field25;
    _Bool _field26;
    char _field27;
    unsigned long _field28;
    unsigned long _field29;
    unsigned char _field30;
    unsigned int _field31;
    struct CGSize _field32;
    struct MessageReceiver _field33;
};

struct IPPhotoList {
    void **_field1;
    id _field2;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field3;
    struct hash_set<IPPhotoInfo*, IPPhotoInfoPtrHash, std::equal_to<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field4;
    char _field5;
    double _field6;
    double _field7;
};

struct IPRoll {
    void **_field1;
    id _field2;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field3;
    struct hash_set<IPPhotoInfo*, IPPhotoInfoPtrHash, std::equal_to<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field4;
    char _field5;
    double _field6;
    double _field7;
    void **_field8;
    id _field9;
    int _field10;
    id _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned long long _field14;
    id _field15;
    struct SqEvent *_field16;
    char _field17;
    unsigned long _field18;
    unsigned long _field19;
    id _field20;
};

struct IPSelectable {
    void **_field1;
    id _field2;
    int _field3;
};

struct IPSelectionList {
    void **_field1;
    struct vector<IPSelectable*, std::allocator<IPSelectable*>> _field2;
    struct set<IPSelectable*, std::less<IPSelectable*>, std::allocator<IPSelectable*>> *_field3;
};

struct IPSharedServiceInfo {
    struct SharingContext *sharingContext;
    unsigned char active;
    unsigned int nameIteration;
    int sharingError;
    struct _dns_service_discovery_t *serviceRef;
    struct __CFRunLoopSource *serviceSource;
};

struct IPStack {
    void **_field1;
    id _field2;
    struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> _field3;
    struct hash_set<IPPhotoInfo*, IPPhotoInfoPtrHash, std::equal_to<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *_field4;
    char _field5;
    double _field6;
    double _field7;
    void **_field8;
    id _field9;
    int _field10;
    id _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned long long _field14;
};

struct IPToolTipInfo {
    struct _NSRect _rect;
    id _owner;
    void *_userData;
    int _trackingTag;
};

struct ImportPhoto {
    void **_field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    char _field5;
    struct CGSize _field6;
    id _field7;
    struct CGSize _field8;
    id _field9;
    struct CGSize _field10;
    char _field11;
    char _field12;
    char _field13;
    id _field14;
    long _field15;
    int _field16;
    id _field17;
    double _field18;
    unsigned long long _field19;
    double _field20;
    id _field21;
    id _field22;
    id _field23;
    struct IPPhotoInfo *_field24;
    id _field25;
    unsigned int _field26;
    char _field27;
    float _field28;
    id _field29;
    id _field30;
    id _field31;
    char _field32;
    int _field33;
    char _field34;
};

struct ImportTask {
    void **_field1;
    id _field2;
    id _field3;
    struct _opaque_pthread_t *_field4;
    struct _opaque_pthread_mutex_t _field5;
    struct _opaque_pthread_cond_t _field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    id _field12;
    int _field13;
    struct ImportPhoto *_field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    id _field19;
    _Bool _field20;
};

struct KeyRemap;

struct KeyRemapArray {
    struct _Vector_impl _field1;
};

struct KeySet {
    struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> _field1;
};

struct MPQHdr {
    struct QHdr *qHeadPtr;
    unsigned char data[13];
};

struct MapOfDays {
    struct _Rb_tree<PhotoDate, std::pair<const PhotoDate, int>, std::_Select1st<std::pair<const PhotoDate, int>>, std::less<PhotoDate>, std::allocator<std::pair<const PhotoDate, int>>> _field1;
};

struct MemBuffer {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct SLinkList _field4;
};

struct MemHandleOpaque;

struct MessageReceiver {
    unsigned int magic;
    unsigned int disableCount;
    unsigned int modificationCount;
    struct Array senders;
    void *handlerProc;
    void *handlerData;
};

struct MessageSender {
    unsigned int magic;
    unsigned int disableCount;
    unsigned int sendCount;
    unsigned int modificationCount;
    struct Array receivers;
};

struct MetaTrackingRecord;

struct MovieType;

struct NSObject {
    Class _field1;
};

struct Offline;

struct OnScreenImage {
    struct SLinkElement element;
    struct IPImage *ipImage;
    struct IPPhotoInfo *ipPhotoInfo;
    struct _opaque_pthread_mutex_t lock;
    struct _NSSize frameSize;
    struct IPPhotoInfo *toBeLoaded;
    struct _NSRect cropRect;
    float rotation;
    float sharpnessRatio;
};

struct OnscreenArray {
    struct _Vector_impl _field1;
};

struct OnscreenRecord {
    struct IPPhotoInfo *_field1;
    id _field2;
    id _field3;
    struct IPFileImage *_field4;
    struct _NSSize _field5;
    int _field6;
    char _field7;
};

struct OpaqueEventHandlerRef;

struct OpaqueGrafPtr;

struct OpaquePMPageFormat;

struct OpaquePMPaper;

struct OpaquePMPreset;

struct OpaquePMPrintSession;

struct OpaquePMPrintSettings;

struct OpaquePMPrinter;

struct PageThumb;

struct PhotosCountMap {
    struct _Rb_tree<IPPhotoInfo*, std::pair<IPPhotoInfo* const, int>, std::_Select1st<std::pair<IPPhotoInfo* const, int>>, std::less<IPPhotoInfo*>, std::allocator<std::pair<IPPhotoInfo* const, int>>> _field1;
};

struct Point {
    short _field1;
    short _field2;
};

struct ProcessSerialNumber {
    unsigned int _field1;
    unsigned int _field2;
};

struct QHdr;

struct ReadAheadTask {
    void **_field1;
    NSRecursiveLock *_field2;
    ImportSession2 *_field3;
    struct _opaque_pthread_t *_field4;
    struct _opaque_pthread_mutex_t _field5;
    struct _opaque_pthread_cond_t _field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    NSString *_field12;
    int _field13;
    NSArray *_field14;
    NSMutableDictionary *_field15;
    NSMutableDictionary *_field16;
    ReadAheadJob *_field17;
    _Bool _field18;
    struct _opaque_pthread_mutex_t _field19;
    struct _opaque_pthread_cond_t _field20;
};

struct Rect {
    short _field1;
    short _field2;
    short _field3;
    short _field4;
};

struct RegionResult {
    struct vector<objc_object*, std::allocator<objc_object*>> *continents;
    struct vector<objc_object*, std::allocator<objc_object*>> *countries;
    struct vector<objc_object*, std::allocator<objc_object*>> *states;
    struct vector<objc_object*, std::allocator<objc_object*>> *waters;
};

struct RenderCache {
    struct vector<RenderCacheKey, std::allocator<long long unsigned int>> _field1;
    struct map<RenderCacheKey, RenderCacheRec, std::less<UInt64>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> _field2;
    _Bool _field3;
    int _field4;
    NSRecursiveLock *_field5;
};

struct SLinkElement {
    struct SLinkElement *next;
};

struct SLinkList {
    struct SLinkElement *head;
};

struct SThreadedLinkList {
    struct SLinkList list;
    struct _opaque_pthread_mutex_t lock;
};

struct SegmentCacheFile {
    void **_field1;
    struct FSRef _field2;
    short _field3;
    _Bool _field4;
    char *_field5;
    NSString *_field6;
    int _field7;
    _Bool _field8;
    int _field9;
    _Bool _field10;
    struct _opaque_pthread_mutex_t _field11;
    struct _opaque_pthread_mutex_t _field12;
};

struct SetOfDays {
    struct _Rb_tree<PhotoDate, PhotoDate, std::_Identity<PhotoDate>, std::less<PhotoDate>, std::allocator<PhotoDate>> _field1;
};

struct ShAppAdapter {
    void **_field1;
};

struct ShContentBuffer {
    void **_field1;
    struct MemBuffer _field2;
    unsigned char _field3;
    unsigned int _field4;
    void *_field5;
    unsigned int _field6;
};

struct ShServer;

struct Share;

struct SharingContext {
    struct MPQHdr _field1;
    unsigned int _field2;
    struct ShAppAdapter *_field3;
    struct ShServer *_field4;
    struct OpaqueEventHandlerRef *_field5;
    struct MessageReceiver _field6;
    struct IPSharedServiceInfo _field7;
    int _field8;
    unsigned short _field9;
    unsigned char _field10;
    struct MessageSender _field11;
    struct UserPrefsInfo _field12;
    unsigned char _field13;
};

struct SlideThumb {
    struct IPPhotoInfo *_field1;
    struct _NSRect _field2;
    char _field3;
    float _field4;
    float _field5;
    double _field6;
};

struct SlideTransformations {
    float mZoom;
    float mEndZoom;
    float mPanX;
    float mPanY;
    float mEndPanX;
    float mEndPanY;
    float mNormalWidth;
    float mNormalHeight;
    float mTextureZoom;
    char mAnimate;
};

struct SqAlbum {
    unsigned long _field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    id _field5;
    int _field6;
    int _field7;
    int _field8;
    _Bool _field9;
    float _field10;
    int _field11;
    unsigned int _field12;
    id _field13;
    id _field14;
    id _field15;
    id _field16;
    int _field17;
    unsigned int _field18;
    unsigned int _field19;
    id _field20;
    id _field21;
    id _field22;
    _Bool _field23;
    struct Subclasses *_field24;
    struct SqDB *_field25;
    unsigned int _field26;
    unsigned int _field27;
    unsigned int _field28;
};

struct SqBookAlbum {
    unsigned long _field1;
    unsigned int _field2;
    struct Offline *_field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    unsigned int _field7;
    int _field8;
    struct SqDB *_field9;
    unsigned int _field10;
    unsigned int _field11;
};

struct SqDB {
    void **_field1;
    id _field2;
    struct sqlite3 *_field3;
    struct sqlite3 *_field4;
    id _field5;
    _Bool _field6;
    struct _opaque_pthread_t *_field7;
    void *_field8;
    struct map<DatabaseKey, SqGlobals*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> _field9;
    struct map<DatabaseKey, SqKeyword*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> _field10;
    struct map<DatabaseKey, SqFileImage*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> _field11;
    struct map<DatabaseKey, SqFileInfo*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> _field12;
    struct map<DatabaseKey, SqPhotoInfo*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> _field13;
    struct map<DatabaseKey, SqEvent*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> _field14;
    struct map<DatabaseKey, SqAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> _field15;
    struct map<DatabaseKey, SqFilterAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> _field16;
    struct map<DatabaseKey, SqBookAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> _field17;
    struct map<DatabaseKey, SqPrintAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> _field18;
    struct map<DatabaseKey, SqPublishedAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> _field19;
    struct map<DatabaseKey, SqSlideshowAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> _field20;
    struct map<DatabaseKey, SqSubscribedAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> _field21;
    struct map<DatabaseKey, SqPhotoAction*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> _field22;
    struct map<DatabaseKey, SqActionGroup*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> _field23;
    struct map<DatabaseKey, SqPlace*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> _field24;
    struct map<DatabaseKey, SqPlaceName*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> _field25;
    struct map<DatabaseKey, SqGpsTrack*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> _field26;
    struct map<DatabaseKey, SqUserPlace*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> _field27;
    struct set<SqGlobals*, std::less<SqGlobals*>, std::allocator<SqGlobals*>> _field28;
    struct set<SqKeyword*, std::less<SqKeyword*>, std::allocator<SqKeyword*>> _field29;
    struct set<SqFileImage*, std::less<SqFileImage*>, std::allocator<SqFileImage*>> _field30;
    struct set<SqFileInfo*, std::less<SqFileInfo*>, std::allocator<SqFileInfo*>> _field31;
    struct set<SqPhotoInfo*, std::less<SqPhotoInfo*>, std::allocator<SqPhotoInfo*>> _field32;
    struct set<SqEvent*, std::less<SqEvent*>, std::allocator<SqEvent*>> _field33;
    struct set<SqAlbum*, std::less<SqAlbum*>, std::allocator<SqAlbum*>> _field34;
    struct set<SqFilterAlbum*, std::less<SqFilterAlbum*>, std::allocator<SqFilterAlbum*>> _field35;
    struct set<SqBookAlbum*, std::less<SqBookAlbum*>, std::allocator<SqBookAlbum*>> _field36;
    struct set<SqPrintAlbum*, std::less<SqPrintAlbum*>, std::allocator<SqPrintAlbum*>> _field37;
    struct set<SqPublishedAlbum*, std::less<SqPublishedAlbum*>, std::allocator<SqPublishedAlbum*>> _field38;
    struct set<SqSlideshowAlbum*, std::less<SqSlideshowAlbum*>, std::allocator<SqSlideshowAlbum*>> _field39;
    struct set<SqSubscribedAlbum*, std::less<SqSubscribedAlbum*>, std::allocator<SqSubscribedAlbum*>> _field40;
    struct set<SqPhotoAction*, std::less<SqPhotoAction*>, std::allocator<SqPhotoAction*>> _field41;
    struct set<SqActionGroup*, std::less<SqActionGroup*>, std::allocator<SqActionGroup*>> _field42;
    struct set<SqPlace*, std::less<SqPlace*>, std::allocator<SqPlace*>> _field43;
    struct set<SqPlaceName*, std::less<SqPlaceName*>, std::allocator<SqPlaceName*>> _field44;
    struct set<SqGpsTrack*, std::less<SqGpsTrack*>, std::allocator<SqGpsTrack*>> _field45;
    struct set<SqUserPlace*, std::less<SqUserPlace*>, std::allocator<SqUserPlace*>> _field46;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field47;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field48;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field49;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field50;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field51;
    struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> _field52;
};

struct SqEvent;

struct SqFileImage;

struct SqFileInfo;

struct SqFilterAlbum {
    unsigned long _field1;
    unsigned int _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    id _field6;
    id _field7;
    struct SqDB *_field8;
    unsigned int _field9;
    unsigned int _field10;
};

struct SqGlobals {
    unsigned long _field1;
    unsigned int _field2;
    int _field3;
    NSString *_field4;
    NSDictionary *_field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    double _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    NSData *_field22;
    NSData *_field23;
    NSData *_field24;
    NSData *_field25;
    NSData *_field26;
    NSData *_field27;
    int _field28;
    int _field29;
    int _field30;
    int _field31;
    float _field32;
    int _field33;
    float _field34;
    int _field35;
    NSData *_field36;
    struct Share *_field37;
    int _field38;
    int _field39;
    struct SqDB *_field40;
    unsigned int _field41;
    unsigned int _field42;
};

struct SqKeyword {
    unsigned long _field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    struct SqDB *_field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct SqPhotoInfo;

struct SqPlace {
    unsigned long _field1;
    unsigned int _field2;
    unsigned int _field3;
    int _field4;
    int _field5;
    int _field6;
    double _field7;
    double _field8;
    float _field9;
    unsigned int _field10;
    _Bool _field11;
    struct Offline *_field12;
    struct SqPlaceName *_field13;
    struct SqPlace *_field14;
    struct SqDB *_field15;
    unsigned int _field16;
    unsigned int _field17;
};

struct SqPlaceName;

struct SqPrintAlbum {
    unsigned long _field1;
    unsigned int _field2;
    int _field3;
    int _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    NSString *_field11;
    NSString *_field12;
    NSString *_field13;
    struct SqDB *_field14;
    unsigned int _field15;
    unsigned int _field16;
};

struct SqPublishedAlbum {
    unsigned long _field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    id _field11;
    id _field12;
    id _field13;
    unsigned int _field14;
    id _field15;
    int _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    id _field26;
    id _field27;
    int _field28;
    id _field29;
    struct SqDB *_field30;
    unsigned int _field31;
    unsigned int _field32;
};

struct SqSlideshowAlbum {
    unsigned long _field1;
    unsigned int _field2;
    struct Offline *_field3;
    struct SqDB *_field4;
    unsigned int _field5;
    unsigned int _field6;
};

struct SqSubscribedAlbum {
    unsigned long _field1;
    unsigned int _field2;
    id _field3;
    _Bool _field4;
    struct SqDB *_field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct SqUserPlace {
    unsigned long _field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    double _field5;
    double _field6;
    double _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    struct SqPlace *_field16;
    struct SqPlace *_field17;
    struct SqPlace *_field18;
    struct SqPlace *_field19;
    struct SqPlace *_field20;
    struct SqPlace *_field21;
    struct SqPlace *_field22;
    struct SqPlace *_field23;
    struct SqDB *_field24;
    unsigned int _field25;
    unsigned int _field26;
};

struct Subclasses;

struct Task;

struct TempImageEntry;

struct Thumb {
    void *_field1;
    struct IPPhotoInfo *_field2;
    struct _NSRect _field3;
    struct _NSRect _field4;
    float _field5;
    float _field6;
    double _field7;
    unsigned long _field8;
    int _field9;
};

struct ThumbArray {
    struct _Vector_impl _field1;
};

struct ThumbData;

struct ThumbDataArray {
    struct _Vector_impl _field1;
};

struct UResourceBundle;

struct UnsignedLongSet {
    struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> _field1;
    struct _Rb_tree_const_iterator<Key> _field2;
};

struct UserDataRecord;

struct UserPrefsInfo {
    unsigned char sharePhotoLibrary;
    unsigned char findSharedPhotoLibraries;
    unsigned char shareSelectedAlbums;
    unsigned char sharingPasswordEnabled;
    unsigned short sharingPassword[256];
    unsigned short sharedLibraryName[256];
};

struct WriteTask {
    void **_field1;
    id _field2;
    id _field3;
    struct _opaque_pthread_t *_field4;
    struct _opaque_pthread_mutex_t _field5;
    struct _opaque_pthread_cond_t _field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    id _field12;
    int _field13;
    id _field14;
    id _field15;
    id _field16;
    id _field17;
    char _field18;
    int _field19;
    long _field20;
};

struct _CGLContextObject;

struct _CGLPixelFormatObject;

struct _List_impl {
    struct _List_node_base _M_node;
};

struct _List_node_base {
    struct _List_node_base *_M_next;
    struct _List_node_base *_M_prev;
};

struct _NSModalSession;

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _Rb_tree<Album*, Album*, std::_Identity<Album*>, std::less<Album*>, std::allocator<Album*>> {
    struct _Rb_tree_impl<std::less<Album*>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqActionGroup*>, std::_Select1st<std::pair<const DatabaseKey, SqActionGroup*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqActionGroup*>, std::_Select1st<std::pair<const DatabaseKey, SqActionGroup*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqBookAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqBookAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqBookAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqBookAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqEvent*>, std::_Select1st<std::pair<const DatabaseKey, SqEvent*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqEvent*>, std::_Select1st<std::pair<const DatabaseKey, SqEvent*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileImage*>, std::_Select1st<std::pair<const DatabaseKey, SqFileImage*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileImage*>, std::_Select1st<std::pair<const DatabaseKey, SqFileImage*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqFileInfo*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqFileInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFilterAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqFilterAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFilterAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqFilterAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGlobals*>, std::_Select1st<std::pair<const DatabaseKey, SqGlobals*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGlobals*>, std::_Select1st<std::pair<const DatabaseKey, SqGlobals*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGpsTrack*>, std::_Select1st<std::pair<const DatabaseKey, SqGpsTrack*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGpsTrack*>, std::_Select1st<std::pair<const DatabaseKey, SqGpsTrack*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqKeyword*>, std::_Select1st<std::pair<const DatabaseKey, SqKeyword*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqKeyword*>, std::_Select1st<std::pair<const DatabaseKey, SqKeyword*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoAction*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoAction*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoAction*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoAction*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoInfo*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqPlace*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqPlace*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlaceName*>, std::_Select1st<std::pair<const DatabaseKey, SqPlaceName*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlaceName*>, std::_Select1st<std::pair<const DatabaseKey, SqPlaceName*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPrintAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPrintAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPrintAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPrintAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPublishedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPublishedAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPublishedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPublishedAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSlideshowAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSlideshowAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSlideshowAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSlideshowAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSubscribedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSubscribedAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSubscribedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSubscribedAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqUserPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqUserPlace*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> {
    struct _Rb_tree_impl<std::less<DatabaseKey>, false> _M_impl;
};

struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqUserPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqUserPlace*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _field1;
};

struct _Rb_tree<IPPhotoInfo*, IPPhotoInfo*, std::_Identity<IPPhotoInfo*>, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> {
    struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> _M_impl;
};

struct _Rb_tree<IPPhotoInfo*, std::pair<IPPhotoInfo* const, int>, std::_Select1st<std::pair<IPPhotoInfo* const, int>>, std::less<IPPhotoInfo*>, std::allocator<std::pair<IPPhotoInfo* const, int>>> {
    struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> _M_impl;
};

struct _Rb_tree<ImportTask*, std::pair<ImportTask* const, ImportTask*>, std::_Select1st<std::pair<ImportTask* const, ImportTask*>>, std::less<ImportTask*>, std::allocator<std::pair<ImportTask* const, ImportTask*>>> {
    struct _Rb_tree_impl<std::less<ImportTask*>, false> _M_impl;
};

struct _Rb_tree<JoinRecord, JoinRecord, std::_Identity<JoinRecord>, CompareJoinRecord, std::allocator<JoinRecord>> {
    struct _Rb_tree_impl<CompareJoinRecord, false> _M_impl;
};

struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, Album*>, std::_Select1st<std::pair<const Key, Album*>>, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, IPStack*>, std::_Select1st<std::pair<const Key, IPStack*>>, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, Key>, std::_Select1st<std::pair<const Key, Key>>, std::less<Key>, std::allocator<std::pair<const Key, Key>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RollCachePhotoEntry>, std::_Select1st<std::pair<const Key, RollCachePhotoEntry>>, std::less<Key>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, RollInfoCacheRecord>, std::_Select1st<std::pair<const Key, RollInfoCacheRecord>>, std::less<Key>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, StackFramingEntry>, std::_Select1st<std::pair<const Key, StackFramingEntry>>, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<Key, std::pair<const Key, int>, std::_Select1st<std::pair<const Key, int>>, std::less<Key>, std::allocator<std::pair<const Key, int>>> {
    struct _Rb_tree_impl<std::less<Key>, false> _M_impl;
};

struct _Rb_tree<NSUInteger, std::pair<const NSUInteger, FaceRecognitionInfo*>, std::_Select1st<std::pair<const NSUInteger, FaceRecognitionInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, FaceRecognitionInfo*>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _M_impl;
};

struct _Rb_tree<NSUInteger, std::pair<const NSUInteger, NSUInteger>, std::_Select1st<std::pair<const NSUInteger, NSUInteger>>, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, NSUInteger>>> {
    struct _Rb_tree_impl<std::less<NSUInteger>, false> _M_impl;
};

struct _Rb_tree<PhotoDate, PhotoDate, std::_Identity<PhotoDate>, std::less<PhotoDate>, std::allocator<PhotoDate>> {
    struct _Rb_tree_impl<std::less<PhotoDate>, false> _M_impl;
};

struct _Rb_tree<PhotoDate, std::pair<const PhotoDate, int>, std::_Select1st<std::pair<const PhotoDate, int>>, std::less<PhotoDate>, std::allocator<std::pair<const PhotoDate, int>>> {
    struct _Rb_tree_impl<std::less<PhotoDate>, false> _M_impl;
};

struct _Rb_tree<RenderCacheKey, std::pair<const RenderCacheKey, RenderCacheRec>, std::_Select1st<std::pair<const RenderCacheKey, RenderCacheRec>>, std::less<RenderCacheKey>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> {
    struct _Rb_tree_impl<std::less<RenderCacheKey>, false> _M_impl;
};

struct _Rb_tree<RenderCacheKey, std::pair<const RenderCacheKey, RenderCacheRec>, std::_Select1st<std::pair<const RenderCacheKey, RenderCacheRec>>, std::less<UInt64>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> {
    struct _Rb_tree_impl<std::less<UInt64>, false> _M_impl;
};

struct _Rb_tree<SqActionGroup*, SqActionGroup*, std::_Identity<SqActionGroup*>, std::less<SqActionGroup*>, std::allocator<SqActionGroup*>> {
    struct _Rb_tree_impl<std::less<SqActionGroup*>, false> _M_impl;
};

struct _Rb_tree<SqAlbum*, SqAlbum*, std::_Identity<SqAlbum*>, std::less<SqAlbum*>, std::allocator<SqAlbum*>> {
    struct _Rb_tree_impl<std::less<SqAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqBookAlbum*, SqBookAlbum*, std::_Identity<SqBookAlbum*>, std::less<SqBookAlbum*>, std::allocator<SqBookAlbum*>> {
    struct _Rb_tree_impl<std::less<SqBookAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqEvent*, SqEvent*, std::_Identity<SqEvent*>, std::less<SqEvent*>, std::allocator<SqEvent*>> {
    struct _Rb_tree_impl<std::less<SqEvent*>, false> _M_impl;
};

struct _Rb_tree<SqFileImage*, SqFileImage*, std::_Identity<SqFileImage*>, std::less<SqFileImage*>, std::allocator<SqFileImage*>> {
    struct _Rb_tree_impl<std::less<SqFileImage*>, false> _M_impl;
};

struct _Rb_tree<SqFileInfo*, SqFileInfo*, std::_Identity<SqFileInfo*>, std::less<SqFileInfo*>, std::allocator<SqFileInfo*>> {
    struct _Rb_tree_impl<std::less<SqFileInfo*>, false> _M_impl;
};

struct _Rb_tree<SqFilterAlbum*, SqFilterAlbum*, std::_Identity<SqFilterAlbum*>, std::less<SqFilterAlbum*>, std::allocator<SqFilterAlbum*>> {
    struct _Rb_tree_impl<std::less<SqFilterAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqGlobals*, SqGlobals*, std::_Identity<SqGlobals*>, std::less<SqGlobals*>, std::allocator<SqGlobals*>> {
    struct _Rb_tree_impl<std::less<SqGlobals*>, false> _M_impl;
};

struct _Rb_tree<SqGpsTrack*, SqGpsTrack*, std::_Identity<SqGpsTrack*>, std::less<SqGpsTrack*>, std::allocator<SqGpsTrack*>> {
    struct _Rb_tree_impl<std::less<SqGpsTrack*>, false> _M_impl;
};

struct _Rb_tree<SqKeyword*, SqKeyword*, std::_Identity<SqKeyword*>, std::less<SqKeyword*>, std::allocator<SqKeyword*>> {
    struct _Rb_tree_impl<std::less<SqKeyword*>, false> _M_impl;
};

struct _Rb_tree<SqPhotoAction*, SqPhotoAction*, std::_Identity<SqPhotoAction*>, std::less<SqPhotoAction*>, std::allocator<SqPhotoAction*>> {
    struct _Rb_tree_impl<std::less<SqPhotoAction*>, false> _M_impl;
};

struct _Rb_tree<SqPhotoInfo*, SqPhotoInfo*, std::_Identity<SqPhotoInfo*>, std::less<SqPhotoInfo*>, std::allocator<SqPhotoInfo*>> {
    struct _Rb_tree_impl<std::less<SqPhotoInfo*>, false> _M_impl;
};

struct _Rb_tree<SqPlace*, SqPlace*, std::_Identity<SqPlace*>, std::less<SqPlace*>, std::allocator<SqPlace*>> {
    struct _Rb_tree_impl<std::less<SqPlace*>, false> _M_impl;
};

struct _Rb_tree<SqPlaceName*, SqPlaceName*, std::_Identity<SqPlaceName*>, std::less<SqPlaceName*>, std::allocator<SqPlaceName*>> {
    struct _Rb_tree_impl<std::less<SqPlaceName*>, false> _M_impl;
};

struct _Rb_tree<SqPrintAlbum*, SqPrintAlbum*, std::_Identity<SqPrintAlbum*>, std::less<SqPrintAlbum*>, std::allocator<SqPrintAlbum*>> {
    struct _Rb_tree_impl<std::less<SqPrintAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqPublishedAlbum*, SqPublishedAlbum*, std::_Identity<SqPublishedAlbum*>, std::less<SqPublishedAlbum*>, std::allocator<SqPublishedAlbum*>> {
    struct _Rb_tree_impl<std::less<SqPublishedAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqSlideshowAlbum*, SqSlideshowAlbum*, std::_Identity<SqSlideshowAlbum*>, std::less<SqSlideshowAlbum*>, std::allocator<SqSlideshowAlbum*>> {
    struct _Rb_tree_impl<std::less<SqSlideshowAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqSubscribedAlbum*, SqSubscribedAlbum*, std::_Identity<SqSubscribedAlbum*>, std::less<SqSubscribedAlbum*>, std::allocator<SqSubscribedAlbum*>> {
    struct _Rb_tree_impl<std::less<SqSubscribedAlbum*>, false> _M_impl;
};

struct _Rb_tree<SqUserPlace*, SqUserPlace*, std::_Identity<SqUserPlace*>, std::less<SqUserPlace*>, std::allocator<SqUserPlace*>> {
    struct _Rb_tree_impl<std::less<SqUserPlace*>, false> _M_impl;
};

struct _Rb_tree<UInt64, std::pair<const UInt64, objc_object*>, std::_Select1st<std::pair<const UInt64, objc_object*>>, std::less<UInt64>, std::allocator<std::pair<const UInt64, objc_object*>>> {
    struct _Rb_tree_impl<std::less<UInt64>, false> _M_impl;
};

struct _Rb_tree<float, std::pair<const float, UInt32>, std::_Select1st<std::pair<const float, UInt32>>, std::less<float>, std::allocator<std::pair<const float, UInt32>>> {
    struct _Rb_tree_impl<std::less<float>, false> _M_impl;
};

struct _Rb_tree<float, std::pair<const float, int>, std::_Select1st<std::pair<const float, int>>, std::less<float>, std::allocator<std::pair<const float, int>>> {
    struct _Rb_tree_impl<std::less<float>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, AnimationAdjustments>, std::_Select1st<std::pair<const int, AnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, CGVAnimationAdjustments>, std::_Select1st<std::pair<const int, CGVAnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, CGVAnimationAdjustments>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, objc_object*>, std::_Select1st<std::pair<const int, objc_object*>>, std::less<int>, std::allocator<std::pair<const int, objc_object*>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, sqlite3_stmt*>, std::_Select1st<std::pair<const int, sqlite3_stmt*>>, std::less<int>, std::allocator<std::pair<const int, sqlite3_stmt*>>> {
    struct _Rb_tree_impl<std::less<int>, false> _M_impl;
};

struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPCachedObject*>, std::_Select1st<std::pair<const long unsigned int, IPCachedObject*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> {
    struct _Rb_tree_impl<std::less<long unsigned int>, false> _M_impl;
};

struct _Rb_tree_const_iterator<Key> {
    struct _Rb_tree_node_base *_M_node;
};

struct _Rb_tree_impl<CompareJoinRecord, false> {
    struct CompareJoinRecord _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<Album*>, false> {
    struct less<Album*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<DatabaseKey>, false> {
    struct less<DatabaseKey> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<IPPhotoInfo*>, false> {
    struct less<IPPhotoInfo*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<ImportTask*>, false> {
    struct less<ImportTask*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<Key>, false> {
    struct less<Key> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<NSUInteger>, false> {
    struct less<NSUInteger> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<PhotoDate>, false> {
    struct less<PhotoDate> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<RenderCacheKey>, false> {
    struct less<RenderCacheKey> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqActionGroup*>, false> {
    struct less<SqActionGroup*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqAlbum*>, false> {
    struct less<SqAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqBookAlbum*>, false> {
    struct less<SqBookAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqEvent*>, false> {
    struct less<SqEvent*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqFileImage*>, false> {
    struct less<SqFileImage*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqFileInfo*>, false> {
    struct less<SqFileInfo*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqFilterAlbum*>, false> {
    struct less<SqFilterAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqGlobals*>, false> {
    struct less<SqGlobals*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqGpsTrack*>, false> {
    struct less<SqGpsTrack*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqKeyword*>, false> {
    struct less<SqKeyword*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPhotoAction*>, false> {
    struct less<SqPhotoAction*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPhotoInfo*>, false> {
    struct less<SqPhotoInfo*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPlace*>, false> {
    struct less<SqPlace*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPlaceName*>, false> {
    struct less<SqPlaceName*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPrintAlbum*>, false> {
    struct less<SqPrintAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqPublishedAlbum*>, false> {
    struct less<SqPublishedAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqSlideshowAlbum*>, false> {
    struct less<SqSlideshowAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqSubscribedAlbum*>, false> {
    struct less<SqSubscribedAlbum*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<SqUserPlace*>, false> {
    struct less<SqUserPlace*> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<UInt64>, false> {
    struct less<UInt64> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<float>, false> {
    struct less<float> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<int>, false> {
    struct less<int> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<long unsigned int>, false> {
    struct less<long unsigned int> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_node_base {
    int _M_color;
    struct _Rb_tree_node_base *_M_parent;
    struct _Rb_tree_node_base *_M_left;
    struct _Rb_tree_node_base *_M_right;
};

struct _Vector_impl {
    struct IPPhotoInfo **_M_start;
    struct IPPhotoInfo **_M_finish;
    struct IPPhotoInfo **_M_end_of_storage;
};

struct __CFArray;

struct __CFData;

struct __CFDateFormatter;

struct __CFDictionary;

struct __CFNetDiagnostic;

struct __CFRunLoop;

struct __CFRunLoopSource;

struct __CFSocket;

struct __CFString;

struct __CFURL;

struct __CVBuffer;

struct __SCNetworkReachability;

struct __darwin_pthread_handler_rec;

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    void *_field9;
    void *_field10;
    void *_field11;
    void *_field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sFILEX;

struct __sbuf {
    char *_base;
    int _size;
};

struct _cups_array_s;

struct _dns_service_discovery_t;

struct _opaque_pthread_cond_t {
    long __sig;
    char __opaque[24];
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

struct _opaque_pthread_t {
    long _field1;
    struct __darwin_pthread_handler_rec *_field2;
    char _field3[596];
};

struct hash_set<IPPhotoInfo*, IPPhotoInfoPtrHash, std::equal_to<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>>;

struct in_addr {
    unsigned int s_addr;
};

struct less<Album*>;

struct less<DatabaseKey>;

struct less<IPPhotoInfo*>;

struct less<ImportTask*>;

struct less<Key>;

struct less<NSUInteger>;

struct less<PhotoDate>;

struct less<RenderCacheKey>;

struct less<SqActionGroup*>;

struct less<SqAlbum*>;

struct less<SqBookAlbum*>;

struct less<SqEvent*>;

struct less<SqFileImage*>;

struct less<SqFileInfo*>;

struct less<SqFilterAlbum*>;

struct less<SqGlobals*>;

struct less<SqGpsTrack*>;

struct less<SqKeyword*>;

struct less<SqPhotoAction*>;

struct less<SqPhotoInfo*>;

struct less<SqPlace*>;

struct less<SqPlaceName*>;

struct less<SqPrintAlbum*>;

struct less<SqPublishedAlbum*>;

struct less<SqSlideshowAlbum*>;

struct less<SqSubscribedAlbum*>;

struct less<SqUserPlace*>;

struct less<UInt64>;

struct less<float>;

struct less<int>;

struct less<long unsigned int>;

struct list<JobQueueEntry*, std::allocator<JobQueueEntry*>> {
    struct _List_impl _field1;
};

struct list<NSDate*, std::allocator<NSDate*>> {
    struct _List_impl _field1;
};

struct list<float, std::allocator<float>> {
    struct _List_impl _field1;
};

struct list<long long unsigned int, std::allocator<long long unsigned int>> {
    struct _List_impl _field1;
};

struct map<DatabaseKey, SqActionGroup*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqActionGroup*>, std::_Select1st<std::pair<const DatabaseKey, SqActionGroup*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> _M_t;
};

struct map<DatabaseKey, SqActionGroup*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqActionGroup*>, std::_Select1st<std::pair<const DatabaseKey, SqActionGroup*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqActionGroup*>>> _field1;
};

struct map<DatabaseKey, SqAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqAlbum*>>> _field1;
};

struct map<DatabaseKey, SqBookAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqBookAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqBookAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqBookAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqBookAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqBookAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqBookAlbum*>>> _field1;
};

struct map<DatabaseKey, SqEvent*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqEvent*>, std::_Select1st<std::pair<const DatabaseKey, SqEvent*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> _M_t;
};

struct map<DatabaseKey, SqEvent*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqEvent*>, std::_Select1st<std::pair<const DatabaseKey, SqEvent*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqEvent*>>> _field1;
};

struct map<DatabaseKey, SqFileImage*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileImage*>, std::_Select1st<std::pair<const DatabaseKey, SqFileImage*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> _M_t;
};

struct map<DatabaseKey, SqFileImage*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileImage*>, std::_Select1st<std::pair<const DatabaseKey, SqFileImage*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileImage*>>> _field1;
};

struct map<DatabaseKey, SqFileInfo*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqFileInfo*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> _M_t;
};

struct map<DatabaseKey, SqFileInfo*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFileInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqFileInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFileInfo*>>> _field1;
};

struct map<DatabaseKey, SqFilterAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFilterAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqFilterAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqFilterAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqFilterAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqFilterAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqFilterAlbum*>>> _field1;
};

struct map<DatabaseKey, SqGlobals*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGlobals*>, std::_Select1st<std::pair<const DatabaseKey, SqGlobals*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> _M_t;
};

struct map<DatabaseKey, SqGlobals*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGlobals*>, std::_Select1st<std::pair<const DatabaseKey, SqGlobals*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGlobals*>>> _field1;
};

struct map<DatabaseKey, SqGpsTrack*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGpsTrack*>, std::_Select1st<std::pair<const DatabaseKey, SqGpsTrack*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> _M_t;
};

struct map<DatabaseKey, SqGpsTrack*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqGpsTrack*>, std::_Select1st<std::pair<const DatabaseKey, SqGpsTrack*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqGpsTrack*>>> _field1;
};

struct map<DatabaseKey, SqKeyword*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqKeyword*>, std::_Select1st<std::pair<const DatabaseKey, SqKeyword*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> _M_t;
};

struct map<DatabaseKey, SqKeyword*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqKeyword*>, std::_Select1st<std::pair<const DatabaseKey, SqKeyword*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqKeyword*>>> _field1;
};

struct map<DatabaseKey, SqPhotoAction*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoAction*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoAction*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> _M_t;
};

struct map<DatabaseKey, SqPhotoAction*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoAction*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoAction*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoAction*>>> _field1;
};

struct map<DatabaseKey, SqPhotoInfo*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoInfo*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> _M_t;
};

struct map<DatabaseKey, SqPhotoInfo*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPhotoInfo*>, std::_Select1st<std::pair<const DatabaseKey, SqPhotoInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPhotoInfo*>>> _field1;
};

struct map<DatabaseKey, SqPlace*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqPlace*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> _M_t;
};

struct map<DatabaseKey, SqPlace*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqPlace*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlace*>>> _field1;
};

struct map<DatabaseKey, SqPlaceName*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlaceName*>, std::_Select1st<std::pair<const DatabaseKey, SqPlaceName*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> _M_t;
};

struct map<DatabaseKey, SqPlaceName*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPlaceName*>, std::_Select1st<std::pair<const DatabaseKey, SqPlaceName*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPlaceName*>>> _field1;
};

struct map<DatabaseKey, SqPrintAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPrintAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPrintAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqPrintAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPrintAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPrintAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPrintAlbum*>>> _field1;
};

struct map<DatabaseKey, SqPublishedAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPublishedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPublishedAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqPublishedAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqPublishedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqPublishedAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqPublishedAlbum*>>> _field1;
};

struct map<DatabaseKey, SqSlideshowAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSlideshowAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSlideshowAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqSlideshowAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSlideshowAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSlideshowAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSlideshowAlbum*>>> _field1;
};

struct map<DatabaseKey, SqSubscribedAlbum*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSubscribedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSubscribedAlbum*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> _M_t;
};

struct map<DatabaseKey, SqSubscribedAlbum*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqSubscribedAlbum*>, std::_Select1st<std::pair<const DatabaseKey, SqSubscribedAlbum*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqSubscribedAlbum*>>> _field1;
};

struct map<DatabaseKey, SqUserPlace*, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqUserPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqUserPlace*>>, std::less<DatabaseKey>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> _M_t;
};

struct map<DatabaseKey, SqUserPlace*, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> {
    struct _Rb_tree<DatabaseKey, std::pair<const DatabaseKey, SqUserPlace*>, std::_Select1st<std::pair<const DatabaseKey, SqUserPlace*>>, std::less<NSUInteger>, std::allocator<std::pair<const DatabaseKey, SqUserPlace*>>> _field1;
};

struct map<ImportTask*, ImportTask*, std::less<ImportTask*>, std::allocator<std::pair<ImportTask* const, ImportTask*>>> {
    struct _Rb_tree<ImportTask*, std::pair<ImportTask* const, ImportTask*>, std::_Select1st<std::pair<ImportTask* const, ImportTask*>>, std::less<ImportTask*>, std::allocator<std::pair<ImportTask* const, ImportTask*>>> _field1;
};

struct map<Key, Album*, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> {
    struct _Rb_tree<Key, std::pair<const Key, Album*>, std::_Select1st<std::pair<const Key, Album*>>, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> _field1;
};

struct map<Key, EventDataCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, EventDataCacheRecord>>>;

struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> {
    struct _Rb_tree<Key, std::pair<const Key, IPRoll*>, std::_Select1st<std::pair<const Key, IPRoll*>>, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> _field1;
};

struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> {
    struct _Rb_tree<Key, std::pair<const Key, IPStack*>, std::_Select1st<std::pair<const Key, IPStack*>>, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> _field1;
};

struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> {
    struct _Rb_tree<Key, std::pair<const Key, Key>, std::_Select1st<std::pair<const Key, Key>>, std::less<Key>, std::allocator<std::pair<const Key, Key>>> _field1;
};

struct map<Key, RollCachePhotoEntry, std::less<Key>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> {
    struct _Rb_tree<Key, std::pair<const Key, RollCachePhotoEntry>, std::_Select1st<std::pair<const Key, RollCachePhotoEntry>>, std::less<Key>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> _field1;
};

struct map<Key, RollInfoCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> {
    struct _Rb_tree<Key, std::pair<const Key, RollInfoCacheRecord>, std::_Select1st<std::pair<const Key, RollInfoCacheRecord>>, std::less<Key>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> _field1;
};

struct map<Key, StackFramingEntry, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> {
    struct _Rb_tree<Key, std::pair<const Key, StackFramingEntry>, std::_Select1st<std::pair<const Key, StackFramingEntry>>, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> _field1;
};

struct map<Key, ViewStruct, std::less<Key>, std::allocator<std::pair<const Key, ViewStruct>>>;

struct map<Key, int, std::less<Key>, std::allocator<std::pair<const Key, int>>> {
    struct _Rb_tree<Key, std::pair<const Key, int>, std::_Select1st<std::pair<const Key, int>>, std::less<Key>, std::allocator<std::pair<const Key, int>>> _field1;
};

struct map<RenderCacheKey, RenderCacheRec, std::less<RenderCacheKey>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> {
    struct _Rb_tree<RenderCacheKey, std::pair<const RenderCacheKey, RenderCacheRec>, std::_Select1st<std::pair<const RenderCacheKey, RenderCacheRec>>, std::less<RenderCacheKey>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> _M_t;
};

struct map<RenderCacheKey, RenderCacheRec, std::less<UInt64>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> {
    struct _Rb_tree<RenderCacheKey, std::pair<const RenderCacheKey, RenderCacheRec>, std::_Select1st<std::pair<const RenderCacheKey, RenderCacheRec>>, std::less<UInt64>, std::allocator<std::pair<const RenderCacheKey, RenderCacheRec>>> _M_t;
};

struct map<UInt64, objc_object*, std::less<UInt64>, std::allocator<std::pair<const UInt64, objc_object*>>> {
    struct _Rb_tree<UInt64, std::pair<const UInt64, objc_object*>, std::_Select1st<std::pair<const UInt64, objc_object*>>, std::less<UInt64>, std::allocator<std::pair<const UInt64, objc_object*>>> _field1;
};

struct map<float, UInt32, std::less<float>, std::allocator<std::pair<const float, UInt32>>> {
    struct _Rb_tree<float, std::pair<const float, UInt32>, std::_Select1st<std::pair<const float, UInt32>>, std::less<float>, std::allocator<std::pair<const float, UInt32>>> _field1;
};

struct map<float, int, std::less<float>, std::allocator<std::pair<const float, int>>> {
    struct _Rb_tree<float, std::pair<const float, int>, std::_Select1st<std::pair<const float, int>>, std::less<float>, std::allocator<std::pair<const float, int>>> _field1;
};

struct map<int, AnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> {
    struct _Rb_tree<int, std::pair<const int, AnimationAdjustments>, std::_Select1st<std::pair<const int, AnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> _field1;
};

struct map<int, CGVAnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, CGVAnimationAdjustments>>> {
    struct _Rb_tree<int, std::pair<const int, CGVAnimationAdjustments>, std::_Select1st<std::pair<const int, CGVAnimationAdjustments>>, std::less<int>, std::allocator<std::pair<const int, CGVAnimationAdjustments>>> _field1;
};

struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>>> _field1;
};

struct map<int, objc_object*, std::less<int>, std::allocator<std::pair<const int, objc_object*>>> {
    struct _Rb_tree<int, std::pair<const int, objc_object*>, std::_Select1st<std::pair<const int, objc_object*>>, std::less<int>, std::allocator<std::pair<const int, objc_object*>>> _field1;
};

struct map<int, sqlite3_stmt*, std::less<int>, std::allocator<std::pair<const int, sqlite3_stmt*>>> {
    struct _Rb_tree<int, std::pair<const int, sqlite3_stmt*>, std::_Select1st<std::pair<const int, sqlite3_stmt*>>, std::less<int>, std::allocator<std::pair<const int, sqlite3_stmt*>>> _field1;
};

struct map<long unsigned int, IPCachedObject*, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> {
    struct _Rb_tree<long unsigned int, std::pair<const long unsigned int, IPCachedObject*>, std::_Select1st<std::pair<const long unsigned int, IPCachedObject*>>, std::less<long unsigned int>, std::allocator<std::pair<const long unsigned int, IPCachedObject*>>> _M_t;
};

struct multimap<NSUInteger, FaceRecognitionInfo*, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, FaceRecognitionInfo*>>> {
    struct _Rb_tree<NSUInteger, std::pair<const NSUInteger, FaceRecognitionInfo*>, std::_Select1st<std::pair<const NSUInteger, FaceRecognitionInfo*>>, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, FaceRecognitionInfo*>>> _field1;
};

struct multimap<NSUInteger, NSUInteger, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, NSUInteger>>> {
    struct _Rb_tree<NSUInteger, std::pair<const NSUInteger, NSUInteger>, std::_Select1st<std::pair<const NSUInteger, NSUInteger>>, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, NSUInteger>>> _field1;
};

struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>>> _field1;
};

struct ppd_attr_s;

struct ppd_emul_s;

struct ppd_file_s {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    char *_field11;
    int _field12;
    struct ppd_emul_s *_field13;
    char *_field14;
    char *_field15;
    char *_field16;
    char *_field17;
    char *_field18;
    char *_field19;
    char *_field20;
    char *_field21;
    char *_field22;
    char *_field23;
    char *_field24;
    int _field25;
    struct ppd_group_s *_field26;
    int _field27;
    struct ppd_size_s *_field28;
    float _field29[2];
    float _field30[2];
    float _field31[4];
    int _field32;
    CDAnonymousStruct19 *_field33;
    int _field34;
    char **_field35;
    int _field36;
    struct ppd_profile_s *_field37;
    int _field38;
    char **_field39;
    int _field40;
    char *_field41;
    char *_field42;
    int _field43;
    int _field44;
    struct ppd_attr_s **_field45;
    struct _cups_array_s *_field46;
    struct _cups_array_s *_field47;
    struct _cups_array_s *_field48;
    struct _cups_array_s *_field49;
};

struct ppd_group_s;

struct ppd_profile_s;

struct ppd_size_s;

struct set<Album*, std::less<Album*>, std::allocator<Album*>> {
    struct _Rb_tree<Album*, Album*, std::_Identity<Album*>, std::less<Album*>, std::allocator<Album*>> _field1;
};

struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> {
    struct _Rb_tree<IPPhotoInfo*, IPPhotoInfo*, std::_Identity<IPPhotoInfo*>, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> _field1;
};

struct set<IPSelectable*, std::less<IPSelectable*>, std::allocator<IPSelectable*>>;

struct set<JoinRecord, CompareJoinRecord, std::allocator<JoinRecord>> {
    struct _Rb_tree<JoinRecord, JoinRecord, std::_Identity<JoinRecord>, CompareJoinRecord, std::allocator<JoinRecord>> _M_t;
};

struct set<Key, std::less<Key>, std::allocator<Key>> {
    struct _Rb_tree<Key, Key, std::_Identity<Key>, std::less<Key>, std::allocator<Key>> _field1;
};

struct set<SqActionGroup*, std::less<SqActionGroup*>, std::allocator<SqActionGroup*>> {
    struct _Rb_tree<SqActionGroup*, SqActionGroup*, std::_Identity<SqActionGroup*>, std::less<SqActionGroup*>, std::allocator<SqActionGroup*>> _M_t;
};

struct set<SqAlbum*, std::less<SqAlbum*>, std::allocator<SqAlbum*>> {
    struct _Rb_tree<SqAlbum*, SqAlbum*, std::_Identity<SqAlbum*>, std::less<SqAlbum*>, std::allocator<SqAlbum*>> _M_t;
};

struct set<SqBookAlbum*, std::less<SqBookAlbum*>, std::allocator<SqBookAlbum*>> {
    struct _Rb_tree<SqBookAlbum*, SqBookAlbum*, std::_Identity<SqBookAlbum*>, std::less<SqBookAlbum*>, std::allocator<SqBookAlbum*>> _M_t;
};

struct set<SqEvent*, std::less<SqEvent*>, std::allocator<SqEvent*>> {
    struct _Rb_tree<SqEvent*, SqEvent*, std::_Identity<SqEvent*>, std::less<SqEvent*>, std::allocator<SqEvent*>> _M_t;
};

struct set<SqFileImage*, std::less<SqFileImage*>, std::allocator<SqFileImage*>> {
    struct _Rb_tree<SqFileImage*, SqFileImage*, std::_Identity<SqFileImage*>, std::less<SqFileImage*>, std::allocator<SqFileImage*>> _M_t;
};

struct set<SqFileInfo*, std::less<SqFileInfo*>, std::allocator<SqFileInfo*>> {
    struct _Rb_tree<SqFileInfo*, SqFileInfo*, std::_Identity<SqFileInfo*>, std::less<SqFileInfo*>, std::allocator<SqFileInfo*>> _M_t;
};

struct set<SqFilterAlbum*, std::less<SqFilterAlbum*>, std::allocator<SqFilterAlbum*>> {
    struct _Rb_tree<SqFilterAlbum*, SqFilterAlbum*, std::_Identity<SqFilterAlbum*>, std::less<SqFilterAlbum*>, std::allocator<SqFilterAlbum*>> _M_t;
};

struct set<SqGlobals*, std::less<SqGlobals*>, std::allocator<SqGlobals*>> {
    struct _Rb_tree<SqGlobals*, SqGlobals*, std::_Identity<SqGlobals*>, std::less<SqGlobals*>, std::allocator<SqGlobals*>> _M_t;
};

struct set<SqGpsTrack*, std::less<SqGpsTrack*>, std::allocator<SqGpsTrack*>> {
    struct _Rb_tree<SqGpsTrack*, SqGpsTrack*, std::_Identity<SqGpsTrack*>, std::less<SqGpsTrack*>, std::allocator<SqGpsTrack*>> _M_t;
};

struct set<SqKeyword*, std::less<SqKeyword*>, std::allocator<SqKeyword*>> {
    struct _Rb_tree<SqKeyword*, SqKeyword*, std::_Identity<SqKeyword*>, std::less<SqKeyword*>, std::allocator<SqKeyword*>> _M_t;
};

struct set<SqPhotoAction*, std::less<SqPhotoAction*>, std::allocator<SqPhotoAction*>> {
    struct _Rb_tree<SqPhotoAction*, SqPhotoAction*, std::_Identity<SqPhotoAction*>, std::less<SqPhotoAction*>, std::allocator<SqPhotoAction*>> _M_t;
};

struct set<SqPhotoInfo*, std::less<SqPhotoInfo*>, std::allocator<SqPhotoInfo*>> {
    struct _Rb_tree<SqPhotoInfo*, SqPhotoInfo*, std::_Identity<SqPhotoInfo*>, std::less<SqPhotoInfo*>, std::allocator<SqPhotoInfo*>> _M_t;
};

struct set<SqPlace*, std::less<SqPlace*>, std::allocator<SqPlace*>> {
    struct _Rb_tree<SqPlace*, SqPlace*, std::_Identity<SqPlace*>, std::less<SqPlace*>, std::allocator<SqPlace*>> _M_t;
};

struct set<SqPlaceName*, std::less<SqPlaceName*>, std::allocator<SqPlaceName*>> {
    struct _Rb_tree<SqPlaceName*, SqPlaceName*, std::_Identity<SqPlaceName*>, std::less<SqPlaceName*>, std::allocator<SqPlaceName*>> _M_t;
};

struct set<SqPrintAlbum*, std::less<SqPrintAlbum*>, std::allocator<SqPrintAlbum*>> {
    struct _Rb_tree<SqPrintAlbum*, SqPrintAlbum*, std::_Identity<SqPrintAlbum*>, std::less<SqPrintAlbum*>, std::allocator<SqPrintAlbum*>> _M_t;
};

struct set<SqPublishedAlbum*, std::less<SqPublishedAlbum*>, std::allocator<SqPublishedAlbum*>> {
    struct _Rb_tree<SqPublishedAlbum*, SqPublishedAlbum*, std::_Identity<SqPublishedAlbum*>, std::less<SqPublishedAlbum*>, std::allocator<SqPublishedAlbum*>> _M_t;
};

struct set<SqSlideshowAlbum*, std::less<SqSlideshowAlbum*>, std::allocator<SqSlideshowAlbum*>> {
    struct _Rb_tree<SqSlideshowAlbum*, SqSlideshowAlbum*, std::_Identity<SqSlideshowAlbum*>, std::less<SqSlideshowAlbum*>, std::allocator<SqSlideshowAlbum*>> _M_t;
};

struct set<SqSubscribedAlbum*, std::less<SqSubscribedAlbum*>, std::allocator<SqSubscribedAlbum*>> {
    struct _Rb_tree<SqSubscribedAlbum*, SqSubscribedAlbum*, std::_Identity<SqSubscribedAlbum*>, std::less<SqSubscribedAlbum*>, std::allocator<SqSubscribedAlbum*>> _M_t;
};

struct set<SqUserPlace*, std::less<SqUserPlace*>, std::allocator<SqUserPlace*>> {
    struct _Rb_tree<SqUserPlace*, SqUserPlace*, std::_Identity<SqUserPlace*>, std::less<SqUserPlace*>, std::allocator<SqUserPlace*>> _M_t;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct spline1;

struct sqlite3;

struct sqlite3_stmt;

struct texture_array {
    int width;
    int height;
    struct texture_rect **textures;
};

struct texture_rect {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    void *_field5;
    unsigned int _field6;
};

struct vector<Album*, std::allocator<Album*>> {
    struct _Vector_impl _M_impl;
};

struct vector<AnimationRects, std::allocator<AnimationRects>> {
    struct _Vector_impl _field1;
};

struct vector<CellData, std::allocator<CellData>> {
    struct _Vector_impl _field1;
};

struct vector<DatabaseKey, std::allocator<DatabaseKey>> {
    struct _Vector_impl _field1;
};

struct vector<DayRange, std::allocator<DayRange>> {
    struct _Vector_impl _field1;
};

struct vector<DetectedFaceState, std::allocator<DetectedFaceState>> {
    struct _Vector_impl _field1;
};

struct vector<EventViewAnimationObject, std::allocator<EventViewAnimationObject>> {
    struct _Vector_impl _field1;
};

struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> {
    struct _Vector_impl _field1;
};

struct vector<FaceCorrelationState, std::allocator<FaceCorrelationState>> {
    struct _Vector_impl _field1;
};

struct vector<FaceExternalState, std::allocator<FaceExternalState>> {
    struct _Vector_impl _field1;
};

struct vector<FaceFeatureState, std::allocator<FaceFeatureState>> {
    struct _Vector_impl _field1;
};

struct vector<Filter*, std::allocator<Filter*>> {
    struct _Vector_impl _field1;
};

struct vector<IPAlbumState*, std::allocator<IPAlbumState*>> {
    struct _Vector_impl _field1;
};

struct vector<IPAnimationObject, std::allocator<IPAnimationObject>> {
    struct _Vector_impl _field1;
};

struct vector<IPFaceIdentifier, std::allocator<IPFaceIdentifier>>;

struct vector<IPPersonInfo, std::allocator<IPPersonInfo>> {
    struct _Vector_impl _field1;
};

struct vector<IPPhotoInfo*, std::allocator<IPPhotoInfo*>> {
    struct _Vector_impl _M_impl;
};

struct vector<IPRoll*, std::allocator<IPRoll*>>;

struct vector<IPSelectable*, std::allocator<IPSelectable*>> {
    struct _Vector_impl _M_impl;
};

struct vector<IQEntry, std::allocator<IQEntry>> {
    struct _Vector_impl _field1;
};

struct vector<ImportPhoto*, std::allocator<ImportPhoto*>> {
    struct _Vector_impl _field1;
};

struct vector<ImportRoll*, std::allocator<ImportRoll*>> {
    struct _Vector_impl _field1;
};

struct vector<Key, std::allocator<Key>> {
    struct _Vector_impl _field1;
};

struct vector<MetaTrackingRecord, std::allocator<MetaTrackingRecord>> {
    struct _Vector_impl _field1;
};

struct vector<PlaceStateData, std::allocator<PlaceStateData>> {
    struct _Vector_impl _field1;
};

struct vector<RenderCacheKey, std::allocator<RenderCacheKey>> {
    struct _Vector_impl _M_impl;
};

struct vector<RenderCacheKey, std::allocator<long long unsigned int>> {
    struct _Vector_impl _M_impl;
};

struct vector<ReportRecord, std::allocator<ReportRecord>> {
    struct _Vector_impl _field1;
};

struct vector<SlideThumb, std::allocator<SlideThumb>> {
    struct _Vector_impl _field1;
};

struct vector<Task*, std::allocator<Task*>> {
    struct _Vector_impl _field1;
};

struct vector<TempImageEntry, std::allocator<TempImageEntry>> {
    struct _Vector_impl _field1;
};

struct vector<ViewStruct, std::allocator<ViewStruct>> {
    struct _Vector_impl _field1;
};

struct vector<int, std::allocator<int>> {
    struct _Vector_impl _field1;
};

struct vector<long unsigned int, std::allocator<long unsigned int>> {
    struct _Vector_impl _field1;
};

struct vector<objc_object*, std::allocator<objc_object*>>;

typedef struct {
    id _field1;
    SEL _field2;
} CDAnonymousStruct1;

typedef struct {
    unsigned int _field1;
    int _field2;
    long long _field3;
    unsigned long long _field4;
    double _field5;
    long long _field6;
    struct CVSMPTETime _field7;
    unsigned long long _field8;
    unsigned long long _field9;
} CDAnonymousStruct2;

typedef struct {
    id _field1;
    struct CGSize _field2;
    char _field3;
    char _field4;
    struct IPFileInfo *_field5;
    struct IPPhotoInfo *_field6;
    struct CGColorSpace *_field7;
    char **_field8;
    struct IPImage *_field9;
    id _field10;
    char _field11;
    char _field12;
    id _field13;
} CDAnonymousStruct12;

typedef struct {
    int _field1;
    int _field2;
    id _field3;
} CDAnonymousStruct13;

typedef struct {
    unsigned short _field1;
    unsigned short _field2;
    struct IPPhotoInfo *_field3;
    float _field4;
    float _field5;
    unsigned long _field6;
    int _field7;
    struct _NSRect _field8;
    struct _NSRect _field9;
    struct _NSRect _field10;
    struct _NSRect _field11;
    short _field12;
    short _field13;
    struct _NSRect _field14;
    struct _NSRect _field15;
    struct _NSRect _field16;
    struct _NSRect _field17;
    struct CGImage *_field18;
    unsigned long _field19;
    unsigned long _field20;
    unsigned long _field21;
    unsigned long _field22;
    unsigned long _field23;
    char _field24;
    char _field25;
} CDAnonymousStruct3;

typedef struct {
    void *_field1;
    int _field2;
    int _field3;
} CDAnonymousStruct14;

typedef struct {
    float x;
    float y;
    float z;
} CDAnonymousStruct15;

typedef struct {
    char *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    float _field12;
    float _field13;
    float _field14;
    struct CGImage *_field15;
    struct CGImage *_field16;
    struct CGImage *_field17;
    struct CGImage *_field18;
    struct CGImage *_field19;
    struct CGImage *_field20;
    struct CGImage *_field21;
    struct CGImage *_field22;
    struct CGPattern *_field23;
    struct CGPattern *_field24;
    struct CGPattern *_field25;
    struct CGPattern *_field26;
} CDAnonymousStruct16;

typedef struct {
    struct CGImage *mImageRef;
    void *mRaster;
    long mRowBytes;
    struct _NSSize mSize;
    float mRotation;
    unsigned int mPixelFormat;
} CDAnonymousStruct4;

typedef struct {
    struct _NSRect pageRect;
    char showCaptions;
    char showComments;
    char showPageNumber;
    id album;
    int start;
    int pagePosition;
} CDAnonymousStruct5;

typedef struct {
    double _currentDate;
    double _birthDate;
    double _lastDate;
} CDAnonymousStruct6;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
} CDAnonymousStruct7;

typedef struct {
    unsigned int _field1;
    int _field2;
} CDAnonymousStruct8;

typedef struct {
    unsigned long long _field1;
    struct _NSRect _field2;
    struct CGImage *_field3;
    char _field4;
} CDAnonymousStruct17;

typedef struct {
    char **_field1;
    void *_field2;
    long _field3;
} CDAnonymousStruct18;

typedef struct {
} CDAnonymousStruct19;

typedef struct {
    id _field1;
    double _field2;
    double _field3;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field4;
    struct CGPoint _field5;
    struct CGSize _field6;
    struct CGSize _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    int _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field19;
    struct {
        float _field1;
        float _field2;
        float _field3;
    } _field20;
    struct CGSize _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    double _field27;
    char _field28;
    id _field29;
    struct spline1 *_field30;
    float **_field31;
    int _field32;
    float _field33;
    float _field34;
    id _field35;
} CDAnonymousStruct20;

typedef struct {
    unsigned int host;
    unsigned short port;
} CDAnonymousStruct9;

typedef struct {
    int _field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    id _field5;
    struct vector<IPFaceIdentifier, std::allocator<IPFaceIdentifier>> *_field6;
    int _field7;
} CDAnonymousStruct21;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
} CDAnonymousStruct10;

typedef struct {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    int _field14;
    id _field15;
    double _field16;
    double _field17;
    double _field18;
    int _field19;
    id _field20;
    int _field21;
    int _field22;
    double _field23;
    double _field24;
    double _field25;
    double _field26;
    int _field27;
    int _field28;
    double _field29;
    int _field30;
    double _field31;
    double _field32;
    int _field33;
    int _field34;
    int _field35;
} CDAnonymousStruct11;

typedef struct {
    unsigned long _field1;
    unsigned long _field2;
    id _field3;
    char _field4;
    char _field5;
    char _field6;
} CDAnonymousStruct22;

typedef struct {
    float _field1;
    id _field2;
    char _field3;
    char _field4;
} CDAnonymousStruct23;

typedef struct {
    unsigned int _field1;
    int _field2;
    float _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
} CDAnonymousStruct24;

/*
 * File: /Applications/iPhoto.app/Contents/MacOS/iPhoto
 * Arch: PowerPC 7400 (ppc7400)
 */

@protocol CellSwapAnimatorDelegate
- (void)cellSwapAnimatorStarted:(id)fp8;
- (void)cellSwapAnimatorFinished:(id)fp8;
- (int)cellSwapAnimatorCellCount:(id)fp8 startState:(BOOL)fp12;
- (void)cellSwapAnimatorCellData:(id)fp8 startState:(BOOL)fp12 info:(CDAnonymousStruct17 *)fp16;
@end

@protocol DMAPContainer <DMAPItem>
- (id)dmapDatabase;
- (id)dmapItems;
- (id)dmapItemCount;
@end

@protocol DMAPDatabase <DMAPItem>
- (id)dmapContainerCount;
- (id)dmapContainers;
- (id)dmapItems;
- (id)dmapItemCount;
@end

@protocol DMAPItem
- (id)dmapMetaclass;
- (id)dmapId;
- (id)dmapName;
@end

@protocol DMAPMetaclass
- (id)fields;
- (id)dmapValuesForMetaFields:(id)fp8 object:(id)fp12;
- (id)dmapValuesForMetaFields:(id)fp8 objects:(id)fp12;
@end

@protocol DPAPLocking
- (id)readLock;
- (id)readLock:(id)fp8;
- (id)dpapLock;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;
@end

@protocol DPAPServiceDOProtocol
- (oneway void)didInitProxy;
- (oneway void)xmlDidChange;
- (void)defaultsDidChange;
- (int)sessionCount;
- (oneway void)shutdown;
@end

@protocol DRFileDataProduction
- (unsigned long long)calculateSizeOfFile:(id)fp8 fork:(unsigned long)fp12 estimating:(BOOL)fp16;
- (BOOL)prepareFileForBurn:(id)fp8;
- (unsigned int)produceFile:(id)fp8 fork:(unsigned long)fp12 intoBuffer:(char *)fp16 length:(unsigned int)fp20 atAddress:(unsigned long long)fp24 blockSize:(unsigned int)fp32;
- (BOOL)prepareFileForVerification:(id)fp8;
- (void)cleanupFileAfterBurn:(id)fp8;
@end

@protocol DragDelegateProtocol
- (unsigned int)draggingEntered:(id)fp8 view:(id)fp12;
- (BOOL)performDragOperation:(id)fp8 view:(id)fp12;
@end

@protocol EditMgrDelegateProtocol
- (void)editMgr:(id)fp8 loadedImage:(struct IPImage *)fp12 forInfo:(struct IPPhotoInfo *)fp16;
- (void)editMgr:(id)fp8 committedEditsForPhotoInfo:(struct IPPhotoInfo *)fp12;
@end

@protocol ExportImageProtocol
- (unsigned int)imageCount;
- (struct _NSSize)imageSizeAtIndex:(unsigned int)fp8;
- (unsigned long)imageFormatAtIndex:(unsigned int)fp8;
- (unsigned long)originalImageFormatAtIndex:(unsigned int)fp8;
- (BOOL)originalIsRawAtIndex:(unsigned int)fp8;
- (BOOL)originalIsMovieAtIndex:(unsigned int)fp8;
- (id)imageTitleAtIndex:(unsigned int)fp8;
- (id)imageCommentsAtIndex:(unsigned int)fp8;
- (float)imageRotationAtIndex:(unsigned int)fp8;
- (id)imagePathAtIndex:(unsigned int)fp8;
- (id)sourcePathAtIndex:(unsigned int)fp8;
- (id)thumbnailPathAtIndex:(unsigned int)fp8;
- (id)imageFileNameAtIndex:(unsigned int)fp8;
- (BOOL)imageIsEditedAtIndex:(unsigned int)fp8;
- (BOOL)imageIsPortraitAtIndex:(unsigned int)fp8;
- (float)imageAspectRatioAtIndex:(unsigned int)fp8;
- (unsigned long long)imageFileSizeAtIndex:(unsigned int)fp8;
- (id)imageDateAtIndex:(unsigned int)fp8;
- (int)imageRatingAtIndex:(unsigned int)fp8;
- (id)imageTiffPropertiesAtIndex:(unsigned int)fp8;
- (id)imageExifPropertiesAtIndex:(unsigned int)fp8;
- (id)imageKeywordsAtIndex:(unsigned int)fp8;
- (id)albumsOfImageAtIndex:(unsigned int)fp8;
- (id)getExtensionForImageFormat:(unsigned long)fp8;
- (unsigned long)getImageFormatForExtension:(id)fp8;
- (unsigned int)albumCount;
- (unsigned int)imageCountAtAlbumIndex:(unsigned int)fp8;
- (id)albumNameAtIndex:(unsigned int)fp8;
- (id)albumMusicPathAtIndex:(unsigned int)fp8;
- (id)albumCommentsAtIndex:(unsigned int)fp8;
- (unsigned int)positionOfImageAtIndex:(unsigned int)fp8 inAlbum:(unsigned int)fp12;
- (id)window;
- (void)enableControls;
- (void)disableControls;
- (void)clickExport;
- (void)startExport;
- (void)cancelExportBeforeBeginning;
- (id)directoryPath;
- (unsigned int)sessionID;
- (BOOL)exportImageAtIndex:(unsigned int)fp8 dest:(id)fp12 options:(CDAnonymousStruct24 *)fp16;
- (struct _NSSize)lastExportedImageSize;
@end

@protocol ExportPluginBoxProtocol
- (BOOL)performKeyEquivalent:(id)fp8;
@end

@protocol ExportPluginProtocol
- (id)initWithExportImageObj:(id)fp8;
- (id)settingsView;
- (id)firstView;
- (void)viewWillBeActivated;
- (void)viewWillBeDeactivated;
- (id)requiredFileType;
- (BOOL)wantsDestinationPrompt;
- (id)getDestinationPath;
- (id)defaultFileName;
- (id)defaultDirectory;
- (BOOL)treatSingleSelectionDifferently;
- (BOOL)handlesMovieFiles;
- (BOOL)validateUserCreatedPath:(id)fp8;
- (void)clickExport;
- (void)startExport:(id)fp8;
- (void)performExport:(id)fp8;
- (CDAnonymousStruct22 *)progress;
- (void)lockProgress;
- (void)unlockProgress;
- (void)cancelExport;
- (id)name;
@end

@protocol FaceRecognitionManagerDelegate
- (void)faceRecognitionDidStart:(id)fp8 phase:(int)fp12 context:(void *)fp16;
- (void)faceRecognitionProcessedItemAtIndex:(unsigned int)fp8 count:(unsigned int)fp12 phase:(int)fp16 abort:(char *)fp20 sender:(id)fp24 context:(void *)fp28;
- (void)faceRecognitionDidEnd:(id)fp8 phase:(int)fp12 context:(void *)fp16;
- (unsigned int)numberOfPhotos:(void *)fp8 sender:(id)fp12 phase:(int)fp16 context:(void *)fp20;
- (void *)photoAtIndex:(unsigned int)fp8 inPhotos:(void *)fp12 userInfo:(void **)fp16 sender:(id)fp20 phase:(int)fp24 context:(void *)fp28;
- (void)releasePhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 phase:(int)fp20 context:(void *)fp24;
- (struct CGImage *)getCGImageOfPhoto:(void *)fp8 userInfo:(void **)fp12 maxDimension:(float)fp16 sender:(id)fp20 context:(void *)fp24;
- (void)releaseCGImage:(struct CGImage *)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24;
- (id)getDateOriginalOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 shutterSpeedValue:(float *)fp16 apertureValue:(float *)fp20 ISOSpeedRating:(float *)fp24 sender:(id)fp28 context:(void *)fp32;
- (struct CGAffineTransform)transformForProvidedImageSpaceToOriginalImageOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 context:(void *)fp20;
- (struct CGAffineTransform)transformForOriginalImageSpaceToPovidedImageSpaceOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 context:(void *)fp20;
- (BOOL)validateFace:(id)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24 debugString:(id)fp28;
- (BOOL)writeDetectionAndThumbnailInfoOfFaces:(id)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24;
- (void)logDetectFace:(id)fp8 ofPhoto:(void *)fp12 debugString:(id)fp16 sender:(id)fp20 context:(void *)fp24;
- (id)facesOfPhoto:(void *)fp8 assignFaceKeys:(BOOL)fp12 sender:(id)fp16 context:(void *)fp20;
- (unsigned int)makeFace:(id)fp8 samePersonAsKnownFace:(id)fp12 sender:(id)fp16 context:(void *)fp20;
- (unsigned int)desolidarizeFace:(id)fp8 sender:(id)fp12 context:(void *)fp16;
- (void)completedCorrelationOfFace:(id)fp8 sender:(id)fp12 context:(void *)fp16;
- (void)logCorrelateTestFace:(id)fp8 toSeedFace:(id)fp12 withScore:(float)fp16 debugString:(id)fp20 sender:(id)fp24 context:(void *)fp28;
- (id)recentFacesWithFaceKey:(unsigned int)fp8 maxCount:(unsigned int)fp12 sender:(id)fp16 context:(void *)fp20;
- (void)testedSimilarFace:(id)fp8 toSeedFace:(id)fp12 withScore:(float)fp16 debugString:(id)fp20 sender:(id)fp24 context:(void *)fp28;
@end

@protocol HeartBeatClient
- (void)heartBeat:(CDAnonymousStruct6 *)fp8;
@end

@protocol IADrawableProtocol <NSObject>
+ (id)protocolVersion;
- (struct texture_array)textureArray;
- (unsigned int *)textureNameArrayLoRes;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 highDetail:(BOOL)fp24;
- (void)drawSubrect:(struct _NSRect)fp8 opacity:(float)fp24 scale:(float)fp28 offset:(struct _NSPoint)fp32 highDetail:(BOOL)fp40;
- (float)opacity;
- (void)setOpacity:(float)fp8;
- (struct _NSPoint)offset;
- (void)setOffset:(struct _NSPoint)fp8;
- (float)scale;
- (void)setScale:(float)fp8;
- (struct _NSSize)rectSize;
- (struct _NSPoint)centerPoint;
- (void)setCenterPoint:(struct _NSPoint)fp8;
- (unsigned int)textureTarget;
- (BOOL)inverted;
- (void)updateARGB;
@end

@protocol IAIPPluginControllerProtocol <NSObject, IAPluginControllerProtocol, IAMathUtilitiesProtocol, IAImageProcessingProtocol>
- (BOOL)isRendering;
- (BOOL)isRenderingFirstFrame;
- (void)cancelRender:(id)fp8;
@end

@protocol IAIPPluginProtocol <NSObject, IAPluginProtocol>
- (void)renderFrame:(float)fp8 of:(float)fp12;
- (void)processImage:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)cleanupAfterRender;
@end

@protocol IAImageProcessingProtocol <NSObject>
- (BOOL)glRendererAccelerationAvailable;
- (unsigned int)glRendererTotalVRAM;
- (unsigned int)glRendererTextureMemory;
- (void)updateSessionRenderer;
@end

@protocol IAMathUtilitiesProtocol <NSObject>
- (float)sineMap:(float)fp8;
@end

@protocol IAPluginControllerProtocol <NSObject>
+ (id)sharedInstance;
+ (id)protocolVersion;
- (Class)currentPluginClass;
- (void)setCurrentPluginClass:(Class)fp8;
- (id)resources:(id)fp8;
@end

@protocol IAPluginManagerProtocol <NSObject>
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)localizedString:(id)fp8;
- (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
- (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
- (id)plugins;
- (id)pluginsOfType:(int)fp8;
- (id)pluginNamesOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8;
- (Class)pluginWithName:(id)fp8 ofType:(int)fp12;
- (id)bundleNameForPlugin:(Class)fp8;
- (id)bundleVersionForPlugin:(Class)fp8;
- (id)pluginName:(Class)fp8;
- (id)pluginSearchPaths;
- (void)scanForPlugins;
- (void)scanForPluginsInDirectory:(id)fp8;
- (void)openBundle:(id)fp8;
- (void)addPlugin:(Class)fp8;
@end

@protocol IAPluginProtocol <NSObject>
+ (BOOL)canRunWithControllerClass:(Class)fp8;
+ (id)protocolVersion;
+ (id)pluginID;
+ (int)pluginType;
+ (id)pluginInfo;
- (id)initWithController:(id)fp8;
- (id)controller;
@end

@protocol IASessionProtocol <NSObject>
+ (id)protocolVersion;
+ (struct _NSRect)bestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16;
+ (void)ratioForBestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16 numerator:(long *)fp24 denominator:(long *)fp28;
+ (int)VRAM;
+ (BOOL)usingRage128;
+ (BOOL)slowMachine;
+ (BOOL)textureRectangleExtAvailable;
- (id)initWithSlideRect:(struct _NSRect)fp8 displaySize:(struct _NSSize)fp24 displayDepth:(int)fp32 pixelFormat:(struct _CGLPixelFormatObject *)fp36;
- (struct _CGLContextObject *)context;
- (struct _NSSize)displaySize;
- (int)displayDepth;
- (struct _NSRect)slideRect;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (void)updateRenderer;
- (void)enableClipping:(struct _NSRect)fp8;
- (void)disableClipping;
- (void)flushFrame;
- (void)makeCurrentContext;
- (float)perspectiveProjectionFOV;
- (void)applyOrthoProjection;
- (void)applyDefaultProjection;
- (BOOL)doubleBuffered;
- (BOOL)coerceIntoView;
@end

@protocol ILAlbumContentsDelegate
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (id)orderedPhotoUIDs;
- (id)orderedVisiblePhotoUIDs;
- (void)prepareToSyncWithProperties:(id)fp8;
- (void)updateProperties:(id)fp8;
- (id)allPropertiesForPhotoWithUID:(id)fp8;
- (void)updateProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (id)createNewPhotoWithInitialProperties:(id)fp8;
- (void)deleteOldPhotoWithUID:(id)fp8;
- (void)setPersistentDictionary:(id)fp8 forAlbum:(id)fp12;
- (id)persistentDictionaryForAlbum:(id)fp8;
- (id)ensureOriginalForPhotoWithUID:(id)fp8;
- (id)refForPhotoWithUID:(id)fp8 format:(unsigned long)fp12 quality:(int)fp16 maxDimensions:(unsigned long)fp20;
- (id)prepareSpriteForUIDs:(id)fp8 qualityValue:(float)fp12 maxDimensions:(unsigned long)fp16;
- (struct _NSSize)sizeOfPhotoWithUID:(id)fp8;
@end

@protocol ILAlbumUpdateDelegate
- (void)statusUpdated:(int)fp8 forAlbum:(id)fp12 withProperties:(id)fp16;
- (void)beginChangeSession;
- (void)endChangeSession;
@end

@protocol ILPhotoRefProtocol
- (id)uid;
- (void)setUID:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (BOOL)isTemporary;
- (void)setIsTemporary:(BOOL)fp8;
- (struct _NSSize)imageSize;
- (void)setImageSize:(struct _NSSize)fp8;
@end

@protocol ILShareContentsDelegate
- (id)galleryName;
- (void)setPersistentDictionary:(id)fp8 forShare:(id)fp12;
- (id)persistentDictionaryForShare:(id)fp8;
@end

@protocol IPAttributeProtocol
- (id)attributeForKey:(id)fp8;
- (void)setAttribute:(id)fp8 forKey:(id)fp12;
- (id)db;
@end

@protocol IPCompletionMenuDelegate
- (void)completionMenuStoreValue:(id)fp8;
- (id)completionMenu:(id)fp8 completionsForString:(id)fp12;
- (void)completionMenu:(id)fp8 willDisplayCell:(id)fp12 forItem:(id)fp16 atIndex:(int)fp20;
- (id)completionMenu:(id)fp8 cellForItem:(id)fp12 atIndex:(int)fp16;
- (float)completionMenu:(id)fp8 heightForItem:(id)fp12 atIndex:(int)fp16;
@end

@protocol IPDefinePeopleToolbarDelegate
- (void)definePeopleToolbar:(id)fp8 addPerson:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 done:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 next:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 previous:(id)fp12;
@end

@protocol IPGLLayerImageProvider
- (id)imageProviderImage;
- (id)imageProviderFullSizeImage;
- (struct CGSize)imageProviderImageSize;
- (struct CGSize)imageProviderFullSizeImageSize;
- (void)imageProviderDrawAlternateImageInRect:(struct CGRect)fp8 usingContext:(id)fp24;
- (void)imageProviderReleaseAlternateImage;
- (BOOL)imageProviderHasImage;
- (BOOL)imageProviderHasFullSizeImage;
- (id)imageProviderImageName;
@end

@protocol IPHDiffUpdateOperationProtocol
- (id)error;
- (int)operationMode;
- (void)sendProgressNotification;
@end

@protocol IPHDiffUpdateProxyProtocol
- (void)setService:(id)fp8;
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)allPublicationUIDs;
- (id)objectForPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)albumSourceUID;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)objectForUID:(id)fp8;
- (id)allUIDs;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay:(BOOL)fp8;
- (void)abortOperation;
- (id)preparePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)loadPreviewForObjectWithPublicationUID:(id)fp8;
- (id)loadFullForObjectWithPublicationUID:(id)fp8;
- (id)loadOriginalForObjectWithPublicationUID:(id)fp8;
- (void)savePreviewForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)saveFullForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)saveOriginalForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)reorderedTasksFromArray:(id)fp8;
@end

@protocol IPHEmbeddedSettingsProtocol
- (id)window;
- (void)updateSettingsViewState;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)other:(id)fp8;
- (void)restart:(id)fp8;
@end

@protocol IPHPhotoDBDiffBagSupportProtocol
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (void)resetDiffBag;
- (void)markDiffBagChangedToState:(int)fp8 forPhotoObject:(struct NSObject *)fp12;
- (void)markDiffBagChangedToState:(int)fp8 forDistantPhotoObject:(struct NSObject *)fp12;
@end

@protocol IPHPhotoDBProtocol <NSObject, IPHPhotoDBDiffBagSupportProtocol>
- (BOOL)loadPhotos:(id)fp8 service:(id)fp12 downloadedAtURL:(id)fp16;
- (BOOL)readRSSFeedData:(id)fp8 downloadedAtURL:(id)fp12;
- (BOOL)allowReorder;
- (BOOL)allowDeletion;
- (BOOL)allowAddition;
- (id)UID;
- (id)readableName;
- (void)setReadableName:(id)fp8;
- (void)setPublishServerSetUID:(id)fp8;
- (id)photoDBExportedProperties;
- (id)photoDBLocalProperties;
- (id)photoShare;
- (unsigned int)photoCount;
- (id)allPhotos;
- (id)allPhotosByUID;
- (id)orderedPhotoUIDs;
- (struct NSObject *)photoWithUID:(id)fp8;
- (struct NSObject *)photoWithPublicationUID:(id)fp8;
- (int)indexOfPhoto:(struct NSObject *)fp8;
- (struct NSObject *)photoAtIndex:(unsigned int)fp8;
- (struct NSObject *)photoWithFilepath:(id)fp8;
- (struct NSObject *)nextPhoto:(struct NSObject *)fp8 loop:(BOOL)fp12;
- (struct NSObject *)previousPhoto:(struct NSObject *)fp8 loop:(BOOL)fp12;
- (id)ensureOriginalForPhoto:(struct NSObject *)fp8;
- (struct NSObject *)refForPhoto:(struct NSObject *)fp8 format:(unsigned long)fp12 quality:(int)fp16 maxDimensions:(unsigned long)fp20;
- (id)prepareSpriteForPhotos:(id)fp8 qualityValue:(float)fp12 maxDimensions:(unsigned long)fp16;
- (struct _NSSize)sizeOfPhoto:(struct NSObject *)fp8;
- (void)addPhoto:(struct NSObject *)fp8;
- (void)insertPhoto:(struct NSObject *)fp8 atIndex:(unsigned int)fp12;
- (void)removePhotoWithPublicationUID:(id)fp8;
- (void)removePhoto:(struct NSObject *)fp8;
- (void)removePhotoAtIndex:(unsigned int)fp8;
- (void)replacePhototAtIndex:(unsigned int)fp8 withPhoto:(struct NSObject *)fp12;
- (void)removeAllPhotos;
- (void)updatePhotosOrder:(BOOL)fp8;
- (void)movePhotoAtIndex:(unsigned int)fp8 toIndex:(unsigned int)fp12;
- (void)movePhotosAtIndexes:(id)fp8 toIndex:(unsigned int)fp12;
- (void)setVersion:(id)fp8;
- (id)version;
- (void)bumpVersion;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)fp8;
- (void)markDirty;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)prepareToSync;
- (void)save;
- (BOOL)isLive;
- (void)setIsLive:(BOOL)fp8;
- (struct NSObject *)currentPhotoBeingUpdated;
- (void)setCurrentPhotoBeingUpdated:(struct NSObject *)fp8;
@end

@protocol IPHPhotoObjectProtocol
- (id)dictionaryToSave;
- (id)UID;
- (void)setUID:(id)fp8;
- (id)publicationUID;
- (void)setPublicationUID:(id)fp8;
- (id)sourceUID;
- (id)informationForKey:(id)fp8;
- (void)setInformation:(id)fp8 forKey:(id)fp12;
- (id)informationDictionary;
- (void)updateInformation:(id)fp8;
- (void)setOriginalIsAvailable:(BOOL)fp8;
- (void)setFileIsAvailable:(BOOL)fp8;
- (void)setPreviewIsAvailable:(BOOL)fp8;
- (BOOL)originalIsNeeded;
- (BOOL)imageIsNeeded;
- (BOOL)thumbnailIsNeeded;
- (void)bumpContentVersion;
- (void)bumpPropertiesVersion;
- (id)contentVersion;
- (void)setContentVersion:(id)fp8;
- (id)propertiesVersion;
- (void)setPropertiesVersion:(id)fp8;
- (struct NSObject *)photoRef;
- (BOOL)isMovie;
- (float)movieDuration;
- (id)imageFilePath;
- (id)originalFilePath;
- (id)thumbnailFilePath;
- (id)keywords;
- (void)remapILPubSubKeysToIPHKeys;
- (id)photoAlbum;
- (void)setPhotoAlbum:(id)fp8;
@end

@protocol IPHPluginEllipsizerProtocol
+ (id)ellipsizerWithAttributes:(id)fp8;
- (id)ellipsizedString:(id)fp8 toWidth:(float)fp12 actualWidth:(float *)fp16;
@end

@protocol IPHPluginManagerProtocol
- (id)applicationID;
- (id)supportedPhotoSizes;
- (BOOL)uidsAreCaseInsensitive;
- (void)saveKeychainInformationForURL:(id)fp8 andPassword:(id)fp12;
- (id)loadKeychainInformationForURL:(id)fp8;
- (void)removeKeychainInformationForURL:(id)fp8;
- (id)albumNamesForProtectionUsername:(id)fp8 serviceKey:(id)fp12 serviceUsername:(id)fp16;
- (void)updateProtectionUsername:(id)fp8 fromOldUsername:(id)fp12 serviceKey:(id)fp16 serviceUsername:(id)fp20;
- (id)generateUUID;
- (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12;
- (void)tickleInsertionPoint:(id)fp8;
- (id)incrementTrailingCount:(id)fp8 delim:(id)fp12 first:(BOOL)fp16;
- (id)ellipsizerWithAttributes:(id)fp8;
- (BOOL)canDoNetDiagnostics;
- (BOOL)isNetworkDisconnected;
- (void)showNetDiagnostics;
- (id)extensionForImageFormat:(unsigned long)fp8;
- (unsigned long)imageFormatForExtension:(id)fp8;
- (id)mimeTypeForExtension:(id)fp8;
- (id)errorFromDMKitTransaction:(id)fp8;
- (id)errorDisplayStringForError:(id)fp8 url:(id)fp12;
- (id)unpublishOperationForDB:(id)fp8 URL:(id)fp12 service:(id)fp16;
- (void)addUpdateOperation:(id)fp8;
@end

@protocol IPHPublishServiceProtocol
+ (id)serviceKey;
+ (int)servicePriority;
+ (id)containerLabel;
+ (id)sectionLabel;
+ (id)toolbarLabel:(BOOL)fp8;
+ (id)toolbarTooltip:(BOOL)fp8;
+ (id)menuItemLabel:(BOOL)fp8;
+ (id)menuItemTooltip:(BOOL)fp8;
+ (id)sizedIcon:(int)fp8;
+ (id)protectionUsername:(id)fp8;
+ (void)setProtectionUsername:(id)fp8 withSettings:(id)fp12;
+ (int)showCaptionsSetting:(id)fp8;
+ (int)photoSizeSetting:(id)fp8;
+ (id)contributionEmailAddress:(id)fp8;
+ (BOOL)allowsContributions:(id)fp8;
+ (BOOL)supportsDistantPhotoUpdates;
+ (BOOL)supportsDistantMetadataUpdates;
+ (BOOL)supportsSourceGUID;
+ (BOOL)supportsAuthenticatedGETs;
+ (BOOL)supportsVideoClips;
+ (BOOL)supportsUserOrderNatively;
+ (unsigned int)maximumPhotoCount;
+ (id)iLMBServiceName;
+ (id)propertiesForLocation:(id)fp8 withUsername:(id)fp12;
+ (id)oldServiceKey;
+ (id)serviceUsername:(id)fp8;
- (id)serviceKey;
- (id)initWithManager:(id)fp8;
- (id)manager;
- (void)setParentOperation:(id)fp8;
- (id)parentOperation;
- (id)settingsController;
- (void)beginSettingsInWindow:(id)fp8 withSettings:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24 embedded:(id)fp28 forceLogin:(BOOL)fp32;
- (id)settings;
- (id)initializeGlobalSettings;
- (id)globalSettings;
- (void)setGlobalSettings:(id)fp8;
- (id)globalSettingForKey:(id)fp8;
- (void)setGlobalSetting:(id)fp8 forKey:(id)fp12;
- (BOOL)validateCredentials;
- (void)setUsername:(id)fp8 setPassword:(id)fp12;
- (id)username;
- (id)password;
- (id)serviceUsername;
- (void)setServiceUsername:(id)fp8;
- (id)defaultUsername;
- (void)setDefaultUsername:(id)fp8;
- (id)displayName;
- (void)setDisplayName:(id)fp8;
- (id)error;
- (void)setError:(id)fp8;
- (id)baseURL;
- (void)setBaseURL:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (id)directoryName;
- (void)setDirectoryName:(id)fp8;
- (id)dataFileName;
- (void)setDataFileName:(id)fp8;
- (id)subscribeURL;
- (void)setSubscribeURL:(id)fp8;
- (id)authenticationDomain;
- (void)setAuthenticationDomain:(id)fp8;
- (id)rootNameForPhoto:(id)fp8;
- (id)rootPathForPhoto:(id)fp8;
- (id)imageNameForPhoto:(id)fp8;
- (id)imagePathForPhoto:(id)fp8;
- (id)thumbnailNameForPhoto:(id)fp8;
- (id)thumbnailPathForPhoto:(id)fp8;
- (id)originalNameForPhoto:(id)fp8;
- (id)originalPathForPhoto:(id)fp8;
- (BOOL)initSession;
- (BOOL)readDistantAlbumIntoDB:(id)fp8 forLocalAlbum:(id)fp12;
- (void)createDistantAlbumWithUUID:(id)fp8;
- (BOOL)deleteDistantAlbum:(id)fp8;
- (void)matchLocalPhoto:(id)fp8 toDistantPhoto:(id)fp12;
- (id)photoPropertiesFromXML:(id)fp8 downloadedAtURL:(id)fp12;
- (void)createDistantPhotoFromLocalPhoto:(id)fp8;
- (BOOL)deleteDistantPhoto:(id)fp8 size:(int)fp12;
- (void)updatePropertiesForLocalPhoto:(id)fp8;
- (void)updatePropertiesForDistantPhoto:(id)fp8;
- (id)prepareImageForLocalPhoto:(id)fp8 size:(int)fp12;
- (BOOL)updateImageForLocalPhoto:(id)fp8 size:(int)fp12 contextInfo:(id)fp16;
- (void)updateExistingSizes:(int)fp8 forPhoto:(id)fp12;
- (id)getDistantPhoto:(id)fp8 size:(int)fp12;
- (void)updateDistantAlbumProperties;
- (void)updateLocalAlbumProperties;
- (BOOL)setUpContributionAddress:(int)fp8;
- (void)updatePublishPermissions;
- (BOOL)hasPendingOperations:(BOOL)fp8;
- (id)processPendingOperations:(BOOL)fp8;
- (void)concludeOperation;
- (void)abortOperation;
- (void)cleanupOperation;
- (void)listPublishedAlbumsToTarget:(id)fp8 selector:(SEL)fp12 contextInfo:(void *)fp16;
- (void)listContentsOfPublishedAlbum:(id)fp8 toTarget:(id)fp12 selector:(SEL)fp16 contextInfo:(void *)fp20;
@end

@protocol IPImageMgrDelegate
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
@end

@protocol IPMagnifierControllerDelegate
- (id)controller;
- (struct _NSRect)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (BOOL)shelfContainsPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearShelf:(id)fp8;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)passEventToSourceList:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)deleteCurrentPhoto:(struct IPPhotoInfo *)fp8;
@end

@protocol IPMarimbaExporterProtocol
- (void)exporterDidFinish;
@end

@protocol IPMarimbaOptionsDelegate
- (id)mainWindow;
- (id)screen;
- (void)optionsCancelled;
- (void)optionsPlayed;
- (void)styleDidChange:(id)fp8;
- (void)aspectRatioDidChange;
- (void)slideOrderDidChange;
- (void)timingDidChange;
- (void)slidesNeedUpdate;
- (void)kenBurnsStateDidChange;
- (void)needsRerender;
- (BOOL)isPlaying;
- (void)pause;
- (id)visibleSlides;
- (BOOL)allowThemeSelection;
- (void)jumpToTitleSlide;
@end

@protocol IPMarimbaSlideshowDelegate
- (BOOL)renderSlideInContext:(struct CGContext *)fp8 slideIndex:(int)fp12;
- (struct _NSSize)slideshowSizeForScreenSize:(struct _NSSize)fp8;
- (id)titleForSlideIndex:(long)fp8;
- (id)title;
- (void)slideshowEnded;
@end

@protocol IPMarimbaTransportDelegate
- (void)close:(id)fp8;
- (void)togglePlayback:(id)fp8;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (void)pause;
- (void)play;
- (void)gotoBeginning;
- (void)mouseMoved:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)setMouseOverTransport:(BOOL)fp8;
- (void)resetScrubberLevel;
- (BOOL)usingIntegratedGraphics;
@end

@protocol IPViewControllerMainViewProtocol
@end

@protocol ISNetServicesLoadableBundle
- (id)requirementsDictionary:(id)fp8;
- (void)invokeService:(id)fp8 withDictionary:(id)fp12;
- (id)displayName;
- (id)toolTipString;
- (int)tag;
- (BOOL)shouldShow:(id)fp8;
- (id)icon;
@end

@protocol ImageFilterPluginProtocol
- (id)initWithImageFilterSupportObj:(id)fp8;
- (id)title;
- (BOOL)performFilter:(id)fp8 target:(id)fp12 selector:(SEL)fp16;
- (CDAnonymousStruct23 *)progress;
- (id)errorMessage;
@end

@protocol ImageFilterSupportProtocol
@end

@protocol KeyProtocol
- (unsigned int)count;
- (unsigned long)keyAtIndex:(unsigned int)fp8;
- (BOOL)hasKey:(unsigned long)fp8;
- (unsigned int)findIndexForKey:(unsigned long)fp8;
- (id)uniqueKeys:(id)fp8;
- (void)add:(unsigned long)fp8;
- (void)addWithKeyMgr:(id)fp8;
- (void)addUniqueWithKeyMgr:(id)fp8;
- (BOOL)addUnique:(unsigned long)fp8;
- (void)remove:(unsigned long)fp8;
- (void)removeWithKeyMgr:(id)fp8;
- (void)removeAll;
@end

@protocol MPAssetKeyDelegate
- (id)absolutePathForAssetKey:(id)fp8;
- (id)absolutePathForAssetKey:(id)fp8 andSize:(struct _NSSize)fp12;
- (struct CGImage *)cgImageForAssetKey:(id)fp8 andSize:(struct _NSSize)fp12;
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSLocking
- (void)lock;
- (void)unlock;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol PrintFormatterImageProtocol
- (void)calcViewPages;
- (void)calcViewMargins;
- (struct _NSSize)imageableSize;
- (struct _NSRect)centerRect:(struct _NSRect)fp8 overRect:(struct _NSRect)fp24;
- (struct _NSRect)scaleRect:(struct _NSRect)fp8 toFillRect:(struct _NSRect)fp24;
- (BOOL)rectIsPortrait:(struct _NSRect)fp8;
- (BOOL)rectIsSquare:(struct _NSRect)fp8;
- (float)warningImageDPI;
- (float)defaultMaximumDPI;
- (void)redisplaySample;
- (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
- (id)localizedString:(id)fp8;
- (long)photoCount;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (struct CGSize)photoSizeAtIndex:(int)fp8;
- (float)photoRotationAtIndex:(int)fp8;
- (BOOL)photoIsPortraitAtIndex:(int)fp8;
- (void)rotatePhotoAtIndex:(int)fp8 byAmount:(float)fp12;
- (float)dpiForPhotoAtIndex:(int)fp8 targetRect:(struct _NSRect)fp12 convertToPrintCoords:(BOOL)fp28;
- (struct _NSRect)scaledRectForPhotoAtIndex:(int)fp8 destRect:(struct _NSRect)fp12;
- (void)drawPhotoAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28 zoomAndTrim:(BOOL)fp32;
- (void)beginWriteTransactionForPhotoAtIndex:(int)fp8;
- (void)endTransactionForPhotoAtIndex:(int)fp8;
- (void)setTextAttributes:(id)fp8 forDisplay:(BOOL)fp12;
- (float)maxTextHeightForDisplay:(BOOL)fp8;
- (void)drawCaptionAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (void)clearRequiredPaperSize;
- (BOOL)hasRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)setRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
@end

@protocol PrintFormatterPluginProtocol
- (id)initWithPrintControllerObj:(id)fp8;
- (id)controller;
- (id)settingsView;
- (id)firstView;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (float)marginSize;
- (void)setMarginSize:(float)fp8;
- (float)maximumDPI;
- (void)viewWillBeActivated;
- (void)viewWasActivated;
- (void)viewWillBeDeactivated;
- (id)defaultPrintFormat;
- (unsigned int)numberOfPagesForFrame:(struct _NSRect)fp8 forDisplay:(BOOL)fp24;
- (void)formatForPrintingPage:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (BOOL)badgeIncompatibleSize;
- (BOOL)badgeLowResolution;
- (id)description;
- (void)printerChanged;
@end

@protocol ThreadManagerTask
- (void)performTask;
@end

@interface Base64 : NSObject
{
}

+ (id)stringForBase64:(id)fp8;
+ (id)base64ForString:(id)fp8;

@end

@interface DMAP : NSObject
{
}

+ (unsigned long)readContentCode:(struct ShContentBuffer *)fp8;
+ (unsigned long)readU32:(struct ShContentBuffer *)fp8 contentCode:(unsigned long)fp12;
+ (unsigned long)readU32:(struct ShContentBuffer *)fp8;

@end

@interface NSString (NSStringDMAPAdditions)
- (unsigned long)u32Value;
@end

@interface NSNumber (NSNumberDMAPAdditions)
+ (id)numberWithU32:(unsigned long)fp8;
- (unsigned long)u32Value;
@end

@interface NSMutableString (NSMutableStringDMAPAdditions)
- (void)appendU32:(unsigned long)fp8;
@end

@interface DMAPServiceInfo : NSObject
{
    unsigned int mTimeoutInterval;
    unsigned int mProtocolVersion;
    NSString *mName;
    NSString *mBase64Password;
    int mAuthenticationMethod;
    BOOL mIsAutoLogoutSupported;
    BOOL mIsExtensionsSupported;
    BOOL mIsIndexSupported;
    BOOL mIsQuerySupported;
    BOOL mIsResolveSupported;
    BOOL mIsUpdateSupported;
    BOOL mIsBrowseSupported;
    BOOL mIsLoginRequired;
    BOOL mIsPersistentIdsSupported;
    int mDatabaseCount;
}

- (int)authenticationMethod;
- (int)databaseCount;
- (void)dealloc;
- (BOOL)isAutoLogoutSupported;
- (BOOL)isExtensionsSupported;
- (BOOL)isIndexSupported;
- (BOOL)isQuerySupported;
- (BOOL)isBrowseSupported;
- (BOOL)isResolveSupported;
- (BOOL)isUpdateSupported;
- (BOOL)isLoginRequired;
- (id)name;
- (unsigned int)protocolVersion;
- (void)setAuthenticationMethod:(int)fp8;
- (void)setDatabaseCount:(int)fp8;
- (void)setAutoLogoutSupported:(BOOL)fp8;
- (void)setExtensionsSupported:(BOOL)fp8;
- (void)setIndexSupported:(BOOL)fp8;
- (void)setLoginRequired:(BOOL)fp8;
- (void)setName:(id)fp8;
- (void)setProtocolVersion:(unsigned int)fp8;
- (void)setQuerySupported:(BOOL)fp8;
- (void)setBrowseSupported:(BOOL)fp8;
- (void)setResolveSupported:(BOOL)fp8;
- (void)setPersistentIdsSupported:(BOOL)fp8;
- (void)setTimeoutInterval:(unsigned long)fp8;
- (void)setUpdateSupported:(BOOL)fp8;
- (BOOL)isPersistentIdsSupported;
- (unsigned long)timeoutInterval;

@end

@interface DPAP : NSObject
{
}

+ (int)defaultPortNumber;
+ (BOOL)isLocalHostOnly;
+ (BOOL)_isNetServiceDevelopmentVersionEnabled;
+ (BOOL)_isDynamicPortNumberEnabled;
+ (BOOL)isUpdateEnabled;
+ (id)netServiceType;
+ (int)portNumber;
+ (int)serviceAppHeartbeatTimerInterval;

@end

@interface DMAPClientContainerItemsRequest : DMAPClientRequest
{
    id <DMAPContainer> mDMAPContainer;
    NSArray *mItems;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8 dmapContainer:(id)fp12;
- (id)_relativePath;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (id)_responseResult;
- (id)_dictionaryForSingleItem:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientContainersRequest : DMAPClientRequest
{
    id <DMAPDatabase> mDMAPDatabase;
    NSNumber *mBaseContainerId;
    NSArray *mContainers;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (id)baseContainerId;
- (id)containers;
- (void)dealloc;
- (id)initWithService:(id)fp8 dmapDatabase:(id)fp12;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForSingleContainer:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientDatabasesRequest : DMAPClientRequest
{
    NSArray *mDatabases;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForSingleDatabase:(struct ShContentBuffer *)fp8 totalReadAmount:(unsigned int *)fp12;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientInfoRequest : DMAPClientRequest
{
    DMAPServiceInfo *mInfo;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;
- (void)_willParseResponse:(id)fp8;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientLoginRequest : DMAPClientRequest
{
    NSString *mSessionId;
}

- (BOOL)_applyResponseDictionary:(id)fp8;
- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface DMAPClientRequest : NSObject
{
    DMAPClientService *mDMAPService;
    int mResponseTimeout;
    int mSocket;
    int mCondition;
    BOOL mShouldSendRevision;
    BOOL mGetServerVersion;
    BOOL mRequiresConnectionClose;
    BOOL mIsIP4Server;
    NSString *mAuthorizationFromDialog;
}

+ (int)_responseTimeout;
+ (BOOL)_shouldLogURLs;
+ (id)stringForCondition:(int)fp8;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (BOOL)_applyResponseDictionary:(id)fp8;
- (id)_OLD_STYLE_authenticationBearingBaseURLString;
- (id)_authenticationBearingBaseURLString;
- (int)condition;
- (void)dealloc;
- (id)_dictionaryForResponse:(id)fp8;
- (id)dmapService;
- (BOOL)_isPostLogin;
- (id)initWithService:(id)fp8;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (BOOL)_readResponseContent;
- (id)_relativePath;
- (id)_requestURLString;
- (BOOL)_requiresAuthentication;
- (BOOL)_requiresConnectionClose;
- (BOOL)isResponseFromiPhoto4;
- (BOOL)_requiresLogin;
- (id)response;
- (id)_responseDataEchoPath;
- (id)responseOnSocket:(int)fp8;
- (id)_responseResult;
- (BOOL)sendOnSocket:(int)fp8;
- (BOOL)_sendOnSocket:(int)fp8 httpRequestPointer:(id *)fp12;
- (void)setCondition:(int)fp8;
- (void)setCondition:(int)fp8 ifNone:(BOOL)fp12;
- (void)setShouldSendRevision:(BOOL)fp8;
- (void)setGetServerVersion:(BOOL)fp8;
- (void)setShouldSendConnectionClose:(BOOL)fp8;
- (void)setSocket:(int)fp8;
- (id)_terseIdentifier;
- (void)_willWriteRequest:(id)fp8;
- (void)_willParseResponse:(id)fp8;

@end

@interface DMAPClientService : NSObject
{
    NSNetService *mNetService;
    struct sockaddr_in *mSocketAddress;
    NSString *mScheme;
    struct __CFSocket *mSessionCFSocketRef;
    struct __CFRunLoopSource *mSessionCFRunLoopSourceRef;
    DMAPServiceInfo *mInfo;
    unsigned int mSessionId;
    NSArray *mDPAPDatabases;
    DPAPClientItemDataRequestHandler *mThumbRequestHandler;
    DPAPClientItemDataRequestHandler *mHiResRequestHandler;
    NSRecursiveLock *mLock;
    int mSessionSocketRetainCount;
    NSString *mAuthenticationString;
    int mAuthenticationAttempts;
    int mIsAuthenticating;
    DMAPClientRequest *mErrorRequest;
    HTTPMessage *mErrorMessage;
    DPAPClient *mDPAPClient;
    unsigned int mRevision;
    struct {
        char isPasswordRequired;
        unsigned short protocolMajorVersion;
        unsigned short protocolMinorVersion;
        unsigned short iPShMajorVersion;
        unsigned short iPShMinorVersion;
        unsigned short serverName[256];
        unsigned short rendezvousName[256];
        unsigned long long databaseID;
        unsigned long long machineID;
        unsigned char passwordProtected;
        unsigned int rendezvousServiceID;
    } mNetServiceInfo;
    BOOL mDidRunDiskSpaceErrorAlert;
    BOOL mIsIP4Server;
    BOOL mHasNotSentLogout;
    int mIsCompatible;
}

- (id)_authenticatedLoginTrap:(id)fp8;
- (id)OLD_STYLE_authenticationString;
- (id)authenticationString;
- (void)_closeSessionSocket;
- (void)cancelPendingItemDataRequests;
- (id)conditionResponseForClientRequest:(id)fp8 httpMessage:(id)fp12;
- (id)_conditionStringForClientRequest:(id)fp8 httpMessage:(id)fp12;
- (void)_dmapServiceErrorWithRequest:(id)fp8 httpMessage:(id)fp12;
- (void)dpapClientItemDataRequestHandlerDiskSpaceError:(id)fp8;
- (id)dpapDatabase;
- (id)dpapDatabases;
- (void)dealloc;
- (void)stop;
- (void)_deleteTempFiles;
- (id)dpapClient;
- (id)errorMessage;
- (id)errorRequest;
- (BOOL)faultDatabase;
- (id)_hiResItemDataRequestHandler;
- (id)info;
- (id)initWithNetService:(id)fp8 scheme:(id)fp12 dpapClient:(id)fp16;
- (BOOL)isiPhoto4Service;
- (BOOL)attemptToAuthenticate;
- (BOOL)isAuthenticated;
- (BOOL)isCompatible;
- (BOOL)isConnected;
- (BOOL)isPasswordRequired;
- (id)itemDataRequestHandlerForType:(id)fp8;
- (void)_lock;
- (id)name;
- (id)netService;
- (void)netServiceDidResolveAddress:(id)fp8;
- (void)netService:(id)fp8 didNotResolve:(id)fp12;
- (int)newSocket:(BOOL)fp8;
- (int)_newSocket;
- (int)portNumber;
- (void)releaseSessionSocket;
- (int)retainSessionSocket;
- (int)retainSessionSocket:(BOOL)fp8;
- (unsigned long)revision;
- (id)retain;
- (oneway void)release;
- (unsigned long)sessionId;
- (int)_sessionSocket;
- (void)_sessionSocketReadCallback;
- (void)_setDatabase:(id)fp8 xmlDictionary:(id)fp12;
- (void)setRevision:(unsigned long)fp8;
- (struct sockaddr_in)socketAddress;
- (id)tempPath;
- (id)_thumbItemDataRequestHandler;
- (void)_sendQuickLogout;
- (void)unload;
- (void)_unlock;
- (id)urlString;
- (unsigned long long)getMachineID;

@end

@interface DMAPClientUpdateRequest : DMAPClientRequest
{
    NSNumber *mRevisionNumber;
}

- (void)dealloc;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (id)_relativePath;
- (id)_responseResult;

@end

@interface DPAPClient : NSObject
{
    NSNetServiceBrowser *mNetServiceBrowser;
    NSMutableDictionary *mDPAPServicesByKey;
    NSMutableSet *mResolvingDPAPServicesByKey;
    DPAPLock *mDPAPLock;
    id mDelegate;
}

- (void)dealloc;
- (void)stop;
- (void)dmapServiceDidResolve:(id)fp8;
- (void)dmapServiceDidNotResolve:(id)fp8;
- (void)dmapServiceError:(id)fp8;
- (id)dmapServicePassword:(id)fp8 attempt:(int)fp12;
- (id)dpapLock;
- (id)dpapServices;
- (id)initWithDelegate:(id)fp8;
- (id)_keyForNetService:(id)fp8;
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)unloadService:(id)fp8;
- (void)_unloadService:(id)fp8;
- (void)_removeServiceWithKey:(id)fp8;

@end

@interface DPAPClientPhoto : DPAPPhoto
{
    DPAPClientDatabase *mDPAPDatabase;
}

- (void)dealloc;
- (id)dpapDatabase;
- (id)initWithId:(id)fp8 dpapDatabase:(id)fp12;
- (struct CGSize)thumbSize;

@end

@interface DPAPClientDatabase : DPAPDatabase
{
    DMAPClientService *mDPAPService;
    NSNumber *mContainerCount;
    NSNumber *mItemCount;
    BOOL mDidRequestContainers;
    NSString *mThumbPath;
    NSString *mTempPath;
}

+ (void)initialize;
+ (unsigned long)_initialRevision;
+ (void)postItemDataUpdateNotificationWithName:(id)fp8 photos:(struct IPPhotoList *)fp12 waitUntilDone:(BOOL)fp16;
+ (void)_postNotification:(id)fp8;
- (id)_baseContainer;
- (id)baseContainer;
- (id)_containersForXMLDictionaries:(id)fp8;
- (void)dealloc;
- (id)_containersById;
- (id)dmapContainerCount;
- (id)_dmapId;
- (id)dmapId;
- (id)dmapItemCount;
- (id)dpapService;
- (id)hiResPath;
- (id)initWithService:(id)fp8;
- (id)_localItemWithId:(id)fp8;
- (BOOL)_requestContainers;
- (void)setContainerCount:(id)fp8;
- (void)setId:(id)fp8;
- (void)setItemCount:(id)fp8;
- (id)tempPath;
- (id)thumbPath;
- (void)unload;

@end

@interface DPAPClientContainer : DPAPContainer
{
    NSNumber *mItemCount;
    BOOL mDidRequestItems;
}

- (void)dealloc;
- (BOOL)_didRequestItems;
- (id)dmapItemCount;
- (id)_initItemsById;
- (id)initWithId:(id)fp8 dmapDatabase:(id)fp12 itemCount:(id)fp16;
- (void)_faultInItems;
- (id)_localItemWithId:(id)fp8;
- (BOOL)_requestItems;
- (void)setItemId:(id)fp8;
- (void)setItemCount:(id)fp8;
- (void)_setValuesInPhoto:(id)fp8 xmlDictionary:(id)fp12;

@end

@interface DPAPClientItemDataRequest : DMAPClientRequest
{
    DPAPClientContainer *mDPAPDatabase;
    NSString *mDataType;
    NSArray *mDMAPIdStrings;
    id mDelegate;
    BOOL mResult;
}

+ (int)_spoolBufferSize;
- (BOOL)_appendArgumentsToURLString:(id)fp8;
- (void)dealloc;
- (BOOL)_parseHTTPResponse:(id)fp8;
- (BOOL)_readTrailerForDataLength:(int)fp8 httpResponse:(id)fp12;
- (id)_relativePath;
- (BOOL)_readResponseContent;
- (id)_responseResult;
- (void)setDatabase:(id)fp8;
- (void)setMetaField:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setIdStrings:(id)fp8;
- (id)_terseIdentifier;

@end

@interface DPAPClientItemDataRequestHandler : NSObject <NSLocking>
{
    DPAPClientDatabase *mDPAPDatabase;
    NSString *mMetaField;
    NSRecursiveLock *mLock;
    NSMutableArray *mGroupStack;
    struct IPPhotoList *mOpenMetaGroup;
    NSMapTable *mPhotoToGroupMap;
    _DPAPClientItemDataRequestGroupProcessor *mBlockingProcessor;
    NSMutableSet *mProcessors;
    int mItemsPerGroup;
    int mMaxProcessors;
}

+ (id)_dmapIdStringsForPhotos:(struct IPPhotoList *)fp8;
+ (int)_itemsPerGroup;
+ (int)_maxProcessorsPerService;
- (void)addRequestForDPAPPhoto:(struct IPPhotoInfo *)fp8 blocking:(BOOL)fp12;
- (void)_addRequestForDPAPPhotos:(struct IPPhotoList *)fp8 blocking:(BOOL)fp12 moreComing:(BOOL)fp16;
- (id)_blockingProcessor;
- (void)cancel;
- (void)closeGroup;
- (void)_coalescePendingRequestsIntoGroup:(id)fp8;
- (void)dealloc;
- (void)_didProcess:(id)fp8;
- (id)_dpapDatabase;
- (id)_dpapService;
- (id)initWithDatabase:(id)fp8 metaField:(id)fp12;
- (void)resetDatabase:(id)fp8;
- (void)lock;
- (void)openGroupWithCapacity:(int)fp8;
- (void)_processorIsIdle:(id)fp8;
- (void)unlock;
- (id)database;

@end

@interface _DPAPClientItemDataRequestGroupProcessor : NSObject
{
    DPAPClientItemDataRequestHandler *mHandler;
    _DPAPClientItemDataRequestGroup *mGroup;
    DPAPClientItemDataRequest *mRequest;
    NSMapTable *mDMAPIdStringToPhotoMap;
    int mSocket;
    struct __sFILE *mFile;
}

- (void)dealloc;
- (void)dpapClientItemDataRequest:(id)fp8 didRead:(const char *)fp12 length:(int)fp16 dmapIdString:(id)fp20;
- (void)dpapClientItemDataRequest:(id)fp8 didReadDataForDMAPIdString:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 notFound:(id)fp12;
- (void)_requestSuccessForDMAPIdString:(id)fp8 metaField:(id)fp12;
- (void)_requestFailureForDMAPIdString:(id)fp8 metaField:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 readErrorForDMAPIdString:(id)fp12;
- (void)dpapClientItemDataRequest:(id)fp8 retry:(id)fp12;
- (BOOL)dpapClientItemDataRequest:(id)fp8 willReadDataForDMAPIdString:(id)fp12 length:(unsigned long)fp16;
- (struct IPPhotoInfo *)_dpapPhotoForDMAPIdString:(id)fp8;
- (id)group;
- (id)handler;
- (id)initWithHandler:(id)fp8;
- (BOOL)_isBlocking;
- (id)_dmapIdStringForPhoto:(struct IPPhotoInfo *)fp8;
- (void)_loadDMAPIdStringToPhotoMap;
- (void)processGroup:(id)fp8;
- (void)_requestFailure;

@end

@interface _DPAPClientItemDataRequestGroup : NSObject
{
    DPAPClientItemDataRequestHandler *mHandler;
    struct IPPhotoList *mPhotos;
    NSString *mMetaField;
    BOOL mIsBeingProcessed;
    int mCount;
}

- (void)addPhoto:(struct IPPhotoInfo *)fp8;
- (id)metaField;
- (void)dealloc;
- (void)requestCancelledForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)requestSuccessForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)requestFailureForPhoto:(struct IPPhotoInfo *)fp8 metaField:(id)fp12;
- (void)cancel;
- (int)count;
- (struct IPPhotoList *)photos;
- (id)initWithHandler:(id)fp8 photos:(struct IPPhotoList *)fp12 metaField:(id)fp16;
- (BOOL)isBeingProcessed;
- (void)removePhoto:(struct IPPhotoInfo *)fp8;
- (void)setBeingProcessed:(BOOL)fp8;

@end

@interface DPAPPasswordPanelController : NSObject
{
    NSButtonCell *mOKButtonCell;
    NSButtonCell *mCancelButtonCell;
    NSSecureTextField *mPasswordText;
    NSTextField *mMessageText;
    NSPanel *mPanel;
}

- (void)cancelAction:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (id)init;
- (void)awakeFromNib;
- (void)okAction:(id)fp8;
- (id)passwordForServiceNamed:(id)fp8 wasRejected:(BOOL)fp12;

@end

@interface DPAPPhoto : DPAPItem
{
    NSNumber *mImageRevision;
    NSNumber *mAspectRatio;
    NSNumber *mFileSize;
    NSNumber *mPixelWidth;
    NSNumber *mPixelHeight;
    NSNumber *mRating;
    NSString *mImageFilename;
    NSString *mThumbPath;
    NSString *mComments;
    NSDate *mDate;
    NSString *mImageFormat;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (id)initWithId:(id)fp8;
- (void)dealloc;
- (id)dpapFileSize;
- (id)dpapAspectRatio;
- (id)pixelHeight;
- (id)pixelWidth;
- (id)rating;
- (id)date;
- (id)imageFilename;
- (id)imageFormat;
- (id)comments;
- (id)imageRevision;
- (BOOL)isModified:(id)fp8;
- (void)setFileSize:(id)fp8;
- (void)setAspectRatio:(id)fp8;
- (void)setPixelWidth:(id)fp8;
- (void)setPixelHeight:(id)fp8;
- (void)setRating:(id)fp8;
- (void)setDate:(id)fp8;
- (void)setImageRevision:(id)fp8;
- (void)setImageFilename:(id)fp8;
- (void)setImageFormat:(id)fp8;
- (void)setComments:(id)fp8;
- (void)setThumbPath:(id)fp8;
- (id)thumbPath;

@end

@interface _DPAPMetaclass : NSObject <DMAPMetaclass>
{
    NSMutableDictionary *mSelectorsByField;
    Class mDPAPClass;
}

- (void)addField:(id)fp8 selector:(SEL)fp12;
- (void)dealloc;
- (CDAnonymousStruct1 *)_bindings:(CDAnonymousStruct1 *)fp8 metaFields:(id)fp12;
- (id)fields;
- (id)dmapValuesForMetaFields:(id)fp8 object:(id)fp12;
- (id)_dmapValuesForBindings:(CDAnonymousStruct1 *)fp8 object:(id)fp12;
- (id)dmapValuesForMetaFields:(id)fp8 objects:(id)fp12;
- (id)_selectorsByField;
- (void)_loadSelectorsByField;
- (id)initWithClass:(Class)fp8;

@end

@interface DPAPDatabase : DPAPItem <DMAPDatabase>
{
    NSMutableDictionary *mContainersById;
    DPAPContainer *mBaseContainer;
    unsigned int mRevision;
    DPAPLock *mLock;
}

+ (id)dmapMetaclass;
+ (unsigned long)_initialRevision;
- (void)addContainer:(id)fp8;
- (id)baseContainer;
- (id)_containersById;
- (id)containerWithId:(id)fp8;
- (void)dealloc;
- (id)dmapContainers;
- (id)dmapContainerCount;
- (id)dmapItemCount;
- (id)dmapItems;
- (id)dpapLock;
- (id)_initContainersById;
- (id)initWithId:(id)fp8;
- (id)itemWithId:(id)fp8;
- (unsigned long)revision;
- (void)setBaseContainer:(id)fp8;
- (void)setRevision:(unsigned long)fp8;

@end

@interface DPAPContainer : DPAPItem <DMAPContainer>
{
    NSObject<DMAPDatabase> *mDMAPDatabase;
    NSMutableDictionary *mItemsById;
    NSArray *mOrderedItems;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (void)addItem:(id)fp8;
- (void)dealloc;
- (id)dmapDatabase;
- (id)dmapItems;
- (id)dmapItemCount;
- (void)_faultInItems;
- (id)initWithId:(id)fp8 dmapDatabase:(id)fp12;
- (BOOL)isBaseContainer;
- (id)itemWithId:(id)fp8;
- (id)itemWithIdString:(id)fp8;
- (id)orderedItems;
- (void)setOrderedItems:(id)fp8;

@end

@interface DPAPItem : NSObject <DMAPItem>
{
    NSNumber *mId;
    NSString *mName;
}

+ (void)_addFieldsToMetaclass:(id)fp8;
+ (id)dmapMetaclass;
- (void)dealloc;
- (id)dmapMetaclass;
- (id)dmapId;
- (id)dmapIdString;
- (unsigned long)dmapIdU32;
- (id)dmapName;
- (id)initWithId:(id)fp8;
- (BOOL)isModified:(id)fp8;
- (void)setName:(id)fp8;

@end

@interface DPAPLocker : NSObject
{
    DPAPLock *mObjectLock;
    id mObject;
}

- (id)dpapLock;
- (id)_dpapLockResult;
- (id)initWithObject:(id)fp8;
- (id)object;

@end

@interface DPAPLock : NSObject
{
    NSMapTable *mReadThreadToLockCountMap;
    NSThread *mWriteThread;
    NSLock *mAccessLock;
    unsigned int mWriteThreadLockCount;
    BOOL mIsDebugMode;
}

- (void)dealloc;
- (id)init;
- (void)setDebugMode:(BOOL)fp8;
- (id)readLock;
- (id)readLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;

@end

@interface NSObject (DPAPLocking) <DPAPLocking>
- (id)dpapLock;
- (id)_dpapLockResult;
- (id)readLock;
- (id)readLock:(id)fp8;
- (void)readUnlock;
- (void)readUnlock:(id)fp8;
- (id)writeLock;
- (id)writeLock:(id)fp8;
- (void)writeUnlock;
- (void)writeUnlock:(id)fp8;
@end

@interface DPAPServiceController : NSObject
{
    NSTask *mServiceTask;
    id <DPAPServiceDOProtocol> mServiceProxy;
    BOOL mInShutdown;
    BOOL mIsPseudoTask;
    BOOL mDidRetryServiceInitialization;
}

+ (id)_defaultsBasedServiceName;
- (void)_appWaitTimerDidFire:(id)fp8;
- (void)_clearServiceIvars;
- (void)dealloc;
- (void)defaultsDidChange;
- (void)_handleServiceFailure;
- (id)init;
- (BOOL)_initServiceProxy;
- (void)_initServiceTaskInMainThread;
- (BOOL)_isAlbumSpecific;
- (BOOL)isService;
- (id)serviceName;
- (id)_serviceLaunchArguments;
- (id)_serviceLaunchPath;
- (void)_serviceTaskDidTerminate:(id)fp8;
- (int)sessionCount;
- (BOOL)_performProxySelector:(SEL)fp8;
- (void)shutdownService;
- (void)startService;
- (void)_xmlDidWrite:(id)fp8;

@end

@interface HTTP : NSObject
{
}

+ (BOOL)_cfConnect:(int)fp8 socketAddress:(struct sockaddr_in *)fp12;
+ (void)closeSocket:(int)fp8 object:(id)fp12 selector:(SEL)fp16;
+ (BOOL)configureSIGPIPEHandler;
+ (BOOL)configureSIGINTHandler;
+ (id)hostNameForSocketAddress:(struct sockaddr_in)fp8;
+ (void)initialize;
+ (BOOL)isSharingFirewallBlockingPort:(int)fp8;
+ (int)newSocketToURL:(id)fp8;
+ (int)_socketToHostWithName:(id)fp8 port:(int)fp12;

@end

@interface HTTPMessage : NSObject
{
    NSMutableData *mReadHeaderData;
    NSMutableDictionary *mHeaderValuesByField;
    NSMutableData *mContentData;
    NSString *mProtocol;
    NSString *mResultString;
    NSURL *mURL;
    int mChunkSize;
    int mWriteTimeout;
    struct __sFILE *mEchoFile;
    int mError;
}

+ (int)_chunkSize;
+ (id)httpMessageOnSocket:(int)fp8 timeout:(int)fp12;
+ (id)httpMessageOnSocket:(int)fp8 timeout:(int)fp12 readContent:(BOOL)fp16;
+ (id)stringForError:(int)fp8;
- (id)contentData;
- (void)dealloc;
- (const char *)_endOfHeadersInBytes:(const char *)fp8 length:(int)fp12;
- (int)error;
- (id)headerData;
- (id)_headerValuesByField;
- (id)headerValueForField:(id)fp8;
- (id)init;
- (id)_lineZero;
- (BOOL)_parseReadLineZero:(id)fp8;
- (BOOL)_parseReadHeaderData;
- (id)protocol;
- (int)readFromSocket:(int)fp8 buffer:(char *)fp12 maxLength:(int)fp16 timeout:(int)fp20;
- (int)readFromSocket:(int)fp8 buffer:(char *)fp12 reqLength:(int)fp16 timeout:(int)fp20;
- (BOOL)readFromSocket:(int)fp8 timeout:(int)fp12;
- (BOOL)readFromSocket:(int)fp8 timeout:(int)fp12 readContent:(BOOL)fp16;
- (id)resultString;
- (void)setContentData:(id)fp8;
- (void)setEchoFile:(struct __sFILE *)fp8;
- (void)setError:(int)fp8;
- (void)setHeaderValue:(id)fp8 forField:(id)fp12;
- (void)setProtocol:(id)fp8;
- (void)setURL:(id)fp8;
- (id)stringForHeaders;
- (id)url;
- (BOOL)_willWriteToSocket:(int)fp8;
- (BOOL)writeToSocket:(int)fp8;
- (BOOL)write:(const char *)fp8 length:(int)fp12 socket:(int)fp16;
- (BOOL)_writeBodyToSocket:(int)fp8;
- (BOOL)writeDMAPHeader:(unsigned long)fp8 valueLength:(unsigned long)fp12 socket:(int)fp16;
- (BOOL)writeDMAPInt8:(unsigned long)fp8 value:(unsigned char)fp12 socket:(int)fp16;
- (BOOL)writeDMAPInt32:(unsigned long)fp8 value:(unsigned long)fp12 socket:(int)fp16;
- (BOOL)_writeData:(id)fp8 socket:(int)fp12;
- (BOOL)writeHeaderToSocket:(int)fp8;
- (BOOL)_writeString:(id)fp8 socket:(int)fp12;
- (id)description;

@end

@interface HTTPRequest : HTTPMessage
{
    NSString *mMethod;
    NSDictionary *mParsedArguments;
}

+ (id)httpRequestOnSocket:(int)fp8 timeout:(int)fp12 baseURL:(id)fp16;
+ (id)responseFromURLWithString:(id)fp8 timeout:(int)fp12;
+ (id)responseFromURL:(id)fp8 socket:(int)fp12 timeout:(int)fp16;
- (void)dealloc;
- (id)initWithURL:(id)fp8;
- (id)_lineZero;
- (id)parsedArguments;
- (id)parsedArgumentWithName:(id)fp8;
- (BOOL)_parseReadLineZero:(id)fp8;
- (void)setMethod:(id)fp8;
- (BOOL)_willWriteToSocket:(int)fp8;

@end

@interface HTTPResponse : HTTPMessage
{
    int mStatus;
}

- (id)_lineZero;
- (BOOL)_parseReadLineZero:(id)fp8;
- (void)setError:(int)fp8;
- (void)setStatus:(int)fp8;
- (int)status;

@end

@interface NetServicesBundleLoader : NSObject
{
}

+ (id)services;
+ (id)servicesEnumerator;
+ (id)servicesByTag;
+ (id)serviceWithTag:(int)fp8;
+ (id)imageForServiceWithTag:(int)fp8;
+ (id)tags;
+ (id)tagsAsStrings;

@end

@interface Album : NSObject <NSCoding, IPAttributeProtocol>
{
    struct SqAlbum *mSqAlbum;
    ImageDB *mDB;
    unsigned int mKey;
    KeyMgr *mKeysX;
    struct IPAlbumList *mChildren;
    BOOL mWasShowingChildrenWhenArchived;
    BOOL mPersistent;
    int mOriginalSortOrder;
    BOOL mVisibleIfNoChildren;
    Book *mOldBook;
    NSString *mCachedNameWithCount;
    unsigned int mCachedNameWithCountCount;
    float mRowHeight;
    int mAnimateState;
    BOOL mIsModified;
    unsigned long long mChangedFields;
    struct IPPhotoList *mChangedPhotos;
    struct IPPhotoList *mSortedPhotos;
    int mIsSorted;
    NSMutableDictionary *mVisiblePhotos;
    int mPreviousVisibleCount;
    Album *mRepresentedAlbum;
    BOOL mIsMaskable;
    BOOL mIsMasked;
    BOOL mShowInContext;
    BOOL mHasBeenSanityChecked;
    BOOL mIsRemovable;
    BOOL mAllowsModification;
    BOOL mAllowsReorder;
    BOOL mIgnoresRolls;
    int mEjectAction;
    NSString *mEjectPath;
    int mAltEjectAction;
    NSString *mAltEjectPath;
    unsigned int mAcceptsInternalDrop;
    unsigned int mAcceptsExternalDrop;
    unsigned int mAcceptsAlbumDrop;
    BOOL mDroppedAlbumsBecomeChildren;
    Album *mParentX;
    struct IPAlbumList *mVisibleChildrenCache;
    BOOL mShowsChildren;
    BOOL mShowRolls;
    BOOL mShowDates;
    NSString *mFileName;
    BOOL mIsShared;
    BOOL mIsPendingRemoval;
    unsigned long mMarkValue;
    unsigned long mFirstVisibleKey;
    BOOL mDeepsDeleteHACKFlag;
    BOOL mWantsProgress;
    BOOL mProgressIsCancelable;
    IPHProgressIndicator *mProgressIndicator;
    float mProgressValue;
    BOOL mProgressStatistics;
    NSDate *mUpgradeStartTime;
    NSDate *mLastUpdateTime;
    double mLastTimeRemaining;
    struct list<float, std::allocator<float>> *mLastNUpgradedPercent;
    struct list<NSDate*, std::allocator<NSDate*>> *mLastNUpgradedTime;
    NSString *mTimeRemainingText;
    struct MessageReceiver mChildMessageReceiver;
    struct MessageReceiver mMessageReceiver;
    struct MessageSender mMessageSender;
    BOOL mContentsChanged;
    BOOL mNameSort;
    BOOL mObscured;
    BOOL _multiSelectAlbum;
    struct IPPhotoList *mPhotosX;
    NSString *mDetailViewTitle;
}

+ (unsigned int)messageCategory;
+ (void)initialize;
+ (struct IPAlbumList *)flattenAlbumList:(struct IPAlbumList *)fp8;
+ (struct IPPhotoList *)uniquePhotosFromAlbums:(struct IPAlbumList *)fp8 includeTrashedPhotos:(BOOL)fp12;
- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqAlbum *)sqAlbum;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16;
- (id)initWithAlbum:(id)fp8;
- (void)_recursivelyAssignKeysForUseInDB:(id)fp8;
- (id)makeCopyWithDB:(BOOL)fp8 staticCopy:(BOOL)fp12;
- (void)dealloc;
- (void)prepareForRelease;
- (id)pasteboardRepresentation;
- (void)_redoEnsureAlbumHasAllStackMembers:(id)fp8;
- (void)_undoEnsureAlbumHasAllStackMembers:(id)fp8;
- (void)eventHiddenOverrideChanged:(id)fp8;
- (void)ensureAlbumHasAllStackMembers:(struct IPStack *)fp8;
- (void)_updateProgressMsg:(id)fp8;
- (void)setupDefaultNotifications;
- (BOOL)isYearOpen:(int)fp8 month:(int)fp12 day:(int)fp16;
- (void)setYear:(int)fp8 month:(int)fp12 day:(int)fp16 open:(BOOL)fp20;
- (BOOL)isRollOpenForKey:(unsigned long)fp8;
- (void)setRollOpen:(BOOL)fp8 key:(unsigned long)fp12;
- (BOOL)isRollOpenForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setRollOpen:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (void)forgetOpenStateForRollWithKey:(unsigned long)fp8;
- (BOOL)isStackOpenForKey:(unsigned long)fp8;
- (void)setStackOpen:(BOOL)fp8 key:(unsigned long)fp12;
- (BOOL)isStackOpenForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setStackOpen:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (void)copyStackOpenStateFromAlbum:(id)fp8;
- (void)copyStackOpenStateFromAlbum:(id)fp8 forPhotos:(struct IPPhotoList *)fp12;
- (void)forgetOpenStateForStackWithKey:(unsigned long)fp8;
- (BOOL)wantsProgress;
- (void)albumProgressCanceled:(id)fp8;
- (Class)progressIndicatorClass;
- (id)progressIndicator;
- (void)setProgressIndicator:(id)fp8;
- (double)progressValue;
- (BOOL)setProgressValue:(double)fp8;
- (void)startProgressStatistics;
- (void)stopProgressStatistics;
- (void)markProgressStatistics:(double)fp8;
- (id)progressTimeRemaining;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;
- (id)altEjectIcon:(BOOL)fp8;
- (id)altEjectClickedIcon:(BOOL)fp8;
- (id)altEjectHighlightedIcon:(BOOL)fp8;
- (struct MessageSender *)messageSender;
- (void)contentsChanged:(BOOL)fp8;
- (void)_noteChangedFields:(unsigned long long)fp8;
- (void)doneWithChanges;
- (BOOL)doneWithChanges:(BOOL)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_requireWriteTransaction;
- (void)_requireTransaction;
- (void)releaseChildren;
- (BOOL)hasBeenSanityChecked;
- (void)setHasBeenSanityChecked:(BOOL)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)uid;
- (void)setUID:(id)fp8;
- (BOOL)isObscured;
- (void)setObscured:(BOOL)fp8;
- (unsigned long)representedAlbumKeyForLoading;
- (void)setRepresentedAlbumKeyForLoading:(unsigned long)fp8;
- (id)representedAlbum;
- (void)setRepresentedAlbum:(id)fp8;
- (id)parent;
- (id)parentOrSelf;
- (void)_setParentDuringSqInit:(id)fp8;
- (void)_setParent:(id)fp8;
- (void)setParent:(id)fp8;
- (struct IPAlbumList *)children;
- (void)_setChildren:(struct IPAlbumList *)fp8;
- (void)_setNeedsToRecomputeVisChildren;
- (void)_recomputeVisChildren;
- (struct IPAlbumList *)namedChildren;
- (int)numberOfVisibleChildren;
- (struct IPAlbumList *)visibleChildren;
- (id)visibleChildAtIndex:(int)fp8;
- (struct IPAlbumList *)visibleChildrenInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)persistentChildren;
- (void)addChild:(id)fp8;
- (void)removeChild:(id)fp8;
- (BOOL)hasChild:(id)fp8;
- (BOOL)showsChildren;
- (void)setShowsChildren:(BOOL)fp8;
- (BOOL)showRolls;
- (void)setShowRolls:(BOOL)fp8;
- (BOOL)showDates;
- (void)setShowDates:(BOOL)fp8;
- (BOOL)wasShowingChildrenWhenArchived;
- (void)setWasShowingChildrenWhenArchived:(BOOL)fp8;
- (BOOL)showingChildren2;
- (void)setShowingChildren:(BOOL)fp8;
- (BOOL)hasName;
- (id)_nameNoRecursion;
- (id)name;
- (void)_setNameRaw:(id)fp8;
- (void)_setName:(id)fp8;
- (BOOL)isPhotocasted;
- (void)_albumForcedUnpub:(id)fp8 error:(id)fp12;
- (void)unpublishPhotocast;
- (id)albumType;
- (id)detailViewTitle;
- (void)setDetailViewTitle:(id)fp8;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (void)setName:(id)fp8;
- (int)previousVisibleCount;
- (id)cachedNameWithCount;
- (id)nameWithCount;
- (id)nameWithCountAlways;
- (id)iconUsingLargeAppearance:(BOOL)fp8;
- (void)setLargeIconImageName:(id)fp8;
- (void)setIconImageName:(id)fp8;
- (id)db;
- (void)remapKeys:(struct KeyRemapArray *)fp8;
- (void)rebuildKeys;
- (void)setDB:(id)fp8;
- (void)checkForUIDDuplicates;
- (unsigned long long)group;
- (BOOL)isInGroup:(unsigned long long)fp8;
- (void)setGroup:(unsigned long long)fp8;
- (unsigned long long)defaultGroup;
- (BOOL)isInSubscriptionGroup;
- (BOOL)isInDPAPGroup;
- (BOOL)isInImportGroup;
- (BOOL)isDescendentInGroup:(unsigned long long)fp8;
- (BOOL)isYearAlbum;
- (id)subgroup;
- (BOOL)isInGroup:(unsigned long long)fp8 andSubgroup:(id)fp16;
- (void)setSubgroup:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)mark;
- (void)unMark;
- (unsigned long)markValue;
- (BOOL)isShared;
- (void)setShared:(BOOL)fp8;
- (BOOL)isMaskable;
- (void)setIsMaskable:(BOOL)fp8;
- (BOOL)isMasked;
- (void)setIsMasked:(BOOL)fp8;
- (BOOL)isVisible;
- (void)setVisible:(BOOL)fp8;
- (BOOL)isVisibleIfNoChildren;
- (void)setVisibleIfNoChildren:(BOOL)fp8;
- (BOOL)isPersistent;
- (void)setPersistent:(BOOL)fp8;
- (id)fileName;
- (void)setFileName:(id)fp8;
- (void)_updateFileName;
- (int)order;
- (void)_setOrder:(int)fp8;
- (void)setOrder:(int)fp8;
- (int)compareOrder:(id)fp8;
- (int)compareOrderName:(id)fp8;
- (BOOL)nameSort;
- (void)setNameSort:(BOOL)fp8;
- (void)setOldBook:(id)fp8;
- (id)oldBook;
- (id)oldBookDesignName;
- (BOOL)hasOldBook;
- (BOOL)inDragMusicEvent;
- (void)validateMusicChange:(id)fp8;
- (id)slideshowSettingsXML;
- (void)setSlideshowSettings:(id)fp8;
- (void)setSlideshowSettingsXML:(id)fp8;
- (void)setEnableBackgroundMusic:(BOOL)fp8;
- (BOOL)backgroundMusicEnabled;
- (void)setSlideShowSongPath:(id)fp8;
- (id)slideshowSongPath;
- (void)setSlideShowPlaylistName:(id)fp8;
- (id)slideshowPlaylistName;
- (id)slideShowSongTitle;
- (void)setSecondsPerSlide:(int)fp8;
- (int)secondsPerSlide;
- (void)setRepeatSlideShow:(BOOL)fp8;
- (BOOL)repeatSlideShow;
- (void)setRandomSlideShow:(BOOL)fp8;
- (BOOL)randomSlideShow;
- (void)setSlideShowUseTitles:(BOOL)fp8;
- (BOOL)slideShowUseTitles;
- (void)setSlideShowUseRankings:(BOOL)fp8;
- (BOOL)slideShowUseRankings;
- (void)setSlideShowAutoPanAndZoom:(BOOL)fp8;
- (BOOL)slideShowAutoPanAndZoom;
- (void)setSlideShowShowControls:(BOOL)fp8;
- (BOOL)slideShowShowControls;
- (void)setSlideShowFillScreen:(BOOL)fp8;
- (BOOL)slideShowFillScreen;
- (BOOL)reducedSlideshowOptions;
- (id)slideshowPreviewDelegate;
- (void)setSlideShowTransitionName:(id)fp8;
- (id)slideShowTransitionName;
- (void)setSlideshowTransitionIdentifier:(id)fp8;
- (id)slideshowTransitionIdentifier;
- (void)setSlideShowTransitionDirection:(int)fp8;
- (int)slideShowTransitionDirection;
- (id)slideShowTransitionForExportToIDVD;
- (id)slideShowTransitionDirectionForExportToIDVD;
- (void)setSlideShowTransitionSpeed:(float)fp8;
- (float)slideShowTransitionSpeed;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (BOOL)hasAttribute:(id)fp8;
- (id)attributeForKey:(id)fp8;
- (void)setAttribute:(id)fp8 forKey:(id)fp12;
- (id)attribute:(id)fp8;
- (void)setAttribute:(id)fp8 object:(id)fp12;
- (void)removeAttribute:(id)fp8;
- (id)comments;
- (void)setComments:(id)fp8;
- (id)listDescription;
- (id)description;
- (unsigned long long)albumSize:(unsigned long long)fp8;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8 userHidden:(int)fp12;
- (struct IPPhotoInfo *)photoAtIndex:(long)fp8;
- (long)visibleIndexOfPhotoNoMovies:(struct IPPhotoInfo *)fp8;
- (long)visibleIndexOfPhotoNoMovies:(struct IPPhotoInfo *)fp8 userHidden:(int)fp12;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8 userHidden:(int)fp12;
- (long)indexOfPhoto:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (struct IPPhotoList *)unsortedArray;
- (void)_installPhotos:(struct IPPhotoList *)fp8;
- (struct IPPhotoList *)_sortedArrayNoCopy;
- (struct IPPhotoList *)array;
- (BOOL)showInContext;
- (void)setShowInContext:(BOOL)fp8;
- (BOOL)ignoresPhotoVisibility;
- (BOOL)isEnabled;
- (BOOL)isSelectable;
- (BOOL)isModified;
- (void)setAllowsModification:(BOOL)fp8;
- (BOOL)allowsModificationFlag;
- (BOOL)allowsModification;
- (BOOL)allowsMovies;
- (BOOL)needsHiddenPhotosVisible;
- (void)setAllowsReorder:(BOOL)fp8;
- (BOOL)allowsReorderFlag;
- (BOOL)allowsReorder;
- (BOOL)isReadOnlyRootArchive;
- (BOOL)isEventAlbum:(BOOL)fp8;
- (BOOL)isPeopleAlbum:(BOOL)fp8;
- (BOOL)isPlacesAlbum:(BOOL)fp8;
- (BOOL)isDetailAlbum:(BOOL)fp8;
- (BOOL)isEventDetailAlbum:(BOOL)fp8;
- (BOOL)isPeopleDetailAlbum:(BOOL)fp8;
- (id)extractFaceKeysFromAlbum;
- (BOOL)isPlacesDetailAlbum:(BOOL)fp8;
- (BOOL)ignoresRolls;
- (void)setIgnoresRolls:(BOOL)fp8;
- (BOOL)isRemovable;
- (void)setIsRemovable:(BOOL)fp8;
- (void)willBeRemoved;
- (void)willUndoRemove;
- (BOOL)isPendingRemoval;
- (BOOL)isEjectable;
- (void)eject;
- (int)ejectAction;
- (void)setEjectAction:(int)fp8;
- (id)ejectPath;
- (void)setEjectPath:(id)fp8;
- (BOOL)isAltEjectable;
- (void)altEject;
- (int)altEjectAction;
- (void)setAltEjectAction:(int)fp8;
- (id)altEjectPath;
- (void)setAltEjectPath:(id)fp8;
- (unsigned int)acceptsInternalDrop;
- (void)setAcceptsInternalDrop:(unsigned int)fp8;
- (unsigned int)acceptsExternalDrop;
- (void)setAcceptsExternalDrop:(unsigned int)fp8;
- (unsigned int)acceptsAlbumDrop;
- (void)setAcceptsAlbumDrop:(unsigned int)fp8;
- (BOOL)droppedAlbumsBecomeChildren;
- (void)setDroppedAlbumsBecomeChildren:(BOOL)fp8;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;
- (int)sortOrder;
- (void)setSortOrder:(int)fp8;
- (int)originalSortOrder;
- (void)setOriginalSortOrder:(int)fp8;
- (int)sortDirection;
- (void)setSortDirection:(int)fp8;
- (int)sortHonorRolls;
- (void)setSortHonorRolls:(int)fp8;
- (BOOL)isSorted;
- (void)_clearSortedCache;
- (void)clearSort;
- (unsigned long long)sortingChangeMask;
- (void)_keepStacksOrdered;
- (void)shuffleOrder;
- (void)sortBy:(int)fp8 direction:(int)fp12 honorRolls:(int)fp16 applyCurrentSort:(BOOL)fp20;
- (float)lastScrollFloat;
- (void)setLastScrollFloat:(float)fp8;
- (long)lastScrollLong;
- (void)setLastScrollLong:(long)fp8;
- (void)rebuild;
- (void)resortIfNeeded;
- (void)resort;
- (void)needsToResort:(BOOL)fp8;
- (id)keys;
- (long)maxPhotos;
- (void)alertMaxPhotos;
- (struct IPPhotoList *)uniquePhotos:(struct IPPhotoList *)fp8;
- (void)addSelfAndChildrenToAlbumList:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)flattenAlbum;
- (unsigned int)count;
- (unsigned int)visiblePersonCount;
- (unsigned int)visiblePersonCount:(int)fp8 withUnnamed:(BOOL)fp12;
- (unsigned int)visiblePlaceCount;
- (unsigned int)visiblePlaceCount:(int)fp8;
- (unsigned int)visibleEventCount;
- (unsigned int)visibleEventCount:(int)fp8;
- (unsigned int)visibleCount;
- (unsigned int)visibleCount:(int)fp8;
- (unsigned int)visibleStillPhotoCount;
- (unsigned int)visibleStillPhotoCount:(int)fp8;
- (unsigned int)visibleMovieCount;
- (unsigned int)visibleMovieCount:(int)fp8;
- (struct IPPhotoList *)_visiblePhotosNoCopy;
- (struct IPPhotoList *)_visiblePhotosNoCopy:(int)fp8;
- (struct IPPhotoList *)hiddenOrDeletedPhotosNoCopy;
- (struct vector<IPRoll*, std::allocator<IPRoll*>> *)representedEvents;
- (struct IPPhotoList *)visiblePhotos;
- (struct IPPhotoList *)visiblePhotos:(int)fp8;
- (struct IPPhotoList *)visibleStillPhotos;
- (struct IPPhotoList *)visibleStillPhotos:(int)fp8;
- (struct IPPhotoList *)visibleMovies;
- (struct IPPhotoList *)visibleMovies:(int)fp8;
- (struct IPPhotoList *)unsortedVisiblePhotos;
- (struct IPPhotoList *)unsortedVisiblePhotos:(int)fp8;
- (BOOL)hasPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)hasAnyPhotos:(struct IPPhotoList *)fp8;
- (BOOL)hasAllPhotos:(struct IPPhotoList *)fp8;
- (BOOL)hasVisibleChildren;
- (struct IPPhotoInfo *)photoWithTitle:(id)fp8;
- (struct IPPhotoInfo *)photoWithUID:(id)fp8;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8;
- (void)add:(struct IPPhotoInfo *)fp8;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (unsigned long)keyOfFirstVisibleImage;
- (void)setKeyOfFirstVisibleImage:(unsigned long)fp8;
- (void)addWithArray:(struct IPPhotoList *)fp8;
- (void)addWithPLHolderArray:(id)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (void)movePhotos:(struct IPPhotoList *)fp8 beforePhoto:(struct IPPhotoInfo *)fp12;
- (void)movePhotoFromIndex:(int)fp8 toIndex:(int)fp12;
- (BOOL)remove:(struct IPPhotoInfo *)fp8;
- (BOOL)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeWithArray:(struct IPPhotoList *)fp8;
- (void)removeAll;
- (void)markAsModified;
- (void)clearModified;
- (void)_notifyChangedFields:(unsigned long long)fp8 affectedPhoto:(struct IPPhotoInfo *)fp16;
- (struct IPPhotoList *)findPhotosWithFilename:(id)fp8;
- (struct IPPhotoList *)findPhotosWithFilenameAndExtension:(id)fp8;
- (struct IPPhotoList *)findPhotosWithHash:(id)fp8;
- (struct IPPhotoList *)findPhotosNeedingLocationLookup:(int)fp8;
- (void)_addChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removeChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_changedPhotos:(struct PhotosCountMap *)fp8;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (struct PhotosCountMap *)photosCountMap;
- (void)_reloadPhotos;
- (void)_setKeys:(id)fp8;
- (id)publishSettings;
- (void)setPublishSettings:(id)fp8;
- (id)publishSelection:(struct IPPhotoList *)fp8 toService:(id)fp12 withTitle:(id)fp16 embedded:(id)fp20 forceLogin:(BOOL)fp24;
- (void)_publishServiceSettingsDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)showPublishError:(id)fp8;
- (BOOL)canPublish;
- (BOOL)isPublished;
- (id)publishPluginForServiceKey:(id)fp8;
- (id)publishServiceKey;
- (id)publishServiceXMLName;
- (id)aeKeywords;
- (id)aeVisibleImageRecs;
- (id)aeChildren;
- (id)aeVisiblePhotos;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (id)aeParent;
- (id)handleSelectScriptCommand:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (id)handleImportScriptCommand:(id)fp8;
- (void)photoViewerLoadHook;
- (id)uniqueID;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;
- (BOOL)multiSelectAlbum;
- (void)setMultiSelectAlbum:(BOOL)fp8;

@end

@interface Album (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface KeywordAlbum : DynamicAlbum
{
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)setIndex:(struct IPPhotoList *)fp8;

@end

@interface AlbumMgr : NSObject <ThreadManagerTask>
{
    DBDocument *mDocument;
    ImageDB *mDB;
    struct IPAlbumList *mAlbumList;
    struct MessageSender mMessageSender;
    struct MessageReceiver mMessageReceiver;
    struct MessageReceiver mDBMessageReceiver;
    BOOL mHasSpecialAlbums;
    BOOL mReadOnly;
    BOOL mIsWritingXMLFile;
    BOOL mNeedsToWriteXMLFile;
    BOOL mNeedsToWriteNewXMLFile;
    BOOL mIncludeCountWithName;
    BOOL mShowLastNMonthsAlbum;
    NSTimer *mXMLTimer;
    int mXMLErrorCode;
    RotationAlbum *mRotationAlbum;
    struct IPAlbumList *mCameraAlbums;
    Album *mLastImportAlbum;
    LatestEventAlbum *mEmptyEventAlbum;
    FilterAlbum *mLastNMonthsAlbum;
    FilterAlbum *mEventsAlbum;
    FilterAlbum *mPeopleAlbum;
    FilterAlbum *mPlacesAlbum;
    Album *mShelfAlbum;
    BOOL mArchiveAlbumInitialized;
    BOOL mLastImportInitialized;
    BOOL mRotationInitialized;
    BOOL mTrashInitialized;
    struct IPAlbumList *mYearAlbums;
    struct IPAlbumList *mRecentRolls;
    struct KeyRemapArray *mKeyRemapArray;
    BOOL mRebuildKeys;
    BOOL mRebuildArchiveAlbum;
    BOOL mNeedsRecentUpdate;
    BOOL mNeedsEmptyEventUpdate;
    BOOL mWasUpgraded;
}

+ (void)initialize;
+ (void)writeLibraryLocationToGlobalPrefs:(id)fp8;
+ (double)_xmlWaitInterval;
- (id)init;
- (void)dealloc;
- (void)prepareForRelease;
- (id)initWithDocument:(id)fp8 useSpecialAlbums:(BOOL)fp12 rebuildKeys:(BOOL)fp16 rebuildArchiveAlbum:(BOOL)fp20;
- (void)_scrubTrash;
- (id)initWithNetworkDocument:(id)fp8;
- (void)delayedInitialization;
- (void)setNeedsRecentUpdate:(BOOL)fp8;
- (BOOL)needsRecentUpdate;
- (void)setNeedsEmptyEventUpdate:(BOOL)fp8;
- (BOOL)needsEmptyEventUpdate;
- (struct MessageSender *)messageSender;
- (id)db;
- (void)setDB:(id)fp8;
- (void)convertRollAlbums;
- (void)reallyEnsureRollAlbums;
- (void)ensureRollAlbums;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)firstNRollAlbums:(long)fp8;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)lastNRollAlbums:(long)fp8;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollNMinus:(long)fp8;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollWithKey:(unsigned long)fp8;
- (struct IPRoll *)rollObjectNMinus:(long)fp8;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollAlbumsContainingText:(id)fp8 useSpaceSeparators:(BOOL)fp12 matchAll:(BOOL)fp16;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollAlbumsWithLocationInRegion:(struct _NSRect)fp8;
- (void)setSingletonAlbum:(id)fp8 group:(unsigned long long)fp12;
- (void)_setRotationAlbum:(id)fp8;
- (id)archiveAlbum;
- (id)launchAlbum;
- (id)rotationAlbum;
- (id)trashAlbum;
- (id)shelfAlbum;
- (void)resetOrganizeAlbums;
- (id)lastNMonthsAlbum;
- (void)_initializeLastNMonthsAlbum;
- (void)_updateLastNMonthsAlbum;
- (id)lastImportAlbum;
- (void)_initializeLastImportAlbum;
- (void)_fixUpLastImportAlbum;
- (BOOL)emptyEventAlbumVisible;
- (id)emptyEventAlbum;
- (void)_initializeEmptyEventAlbum;
- (void)_updateEmptyEventAlbum;
- (id)eventsAlbum;
- (id)detailAlbum;
- (id)peopleDetailAlbum;
- (id)placesDetailAlbum;
- (void)_initializeEventsAlbum;
- (id)peopleAlbum;
- (void)_initializePeopleAlbum;
- (id)placesAlbum;
- (id)placesAlbumIfExists;
- (void)_initializePlacesAlbum;
- (struct IPAlbumList *)recentRolls;
- (void)_initializeRecentRollsAlbums;
- (void)_updateRecentRollsAlbums;
- (void)initializeLazyAlbums;
- (void)initializeYearAlbumsForArchive:(id)fp8;
- (struct IPAlbumList *)yearAlbums;
- (BOOL)readOnly;
- (void)setReadOnly:(BOOL)fp8;
- (unsigned int)countAlbumsInGroup:(unsigned long long)fp8 visibleOnly:(BOOL)fp16;
- (unsigned int)countAlbumsInGroup:(unsigned long long)fp8 inSubgroup:(id)fp16 visibleOnly:(BOOL)fp20;
- (id)albumAtIndex:(unsigned int)fp8 inGroup:(unsigned long long)fp12 visibleOnly:(BOOL)fp20;
- (id)albumAtIndex:(unsigned int)fp8 inGroup:(unsigned long long)fp12 inSubgroup:(id)fp20 visibleOnly:(BOOL)fp24;
- (int)indexOfAlbum:(id)fp8 inGroup:(unsigned long long)fp12 visibleOnly:(BOOL)fp20;
- (int)indexOfAlbum:(id)fp8 inGroup:(unsigned long long)fp12 inSubgroup:(id)fp20 visibleOnly:(BOOL)fp24;
- (void)addAlbum:(id)fp8 withName:(id)fp12 afterAlbum:(id)fp16;
- (void)addAlbum:(id)fp8 afterAlbum:(id)fp12;
- (void)moveAlbum:(id)fp8 afterAlbum:(id)fp12;
- (void)_addAlbum:(id)fp8 atIndex:(int)fp12;
- (void)addAlbums:(struct IPAlbumList *)fp8;
- (id)albumAtIndex:(unsigned int)fp8;
- (BOOL)hasAlbum:(id)fp8;
- (int)indexOfAlbum:(id)fp8;
- (id)albumWithKey:(unsigned long)fp8;
- (id)find:(id)fp8;
- (BOOL)_findDupes:(id)fp8;
- (struct IPAlbumList *)findAlbums:(id)fp8 withOperation:(int)fp12 inGroup:(unsigned long long)fp16;
- (id)findWithSameCapitalization:(id)fp8;
- (void)removeAlbum:(id)fp8 fromDB:(BOOL)fp12 notify:(BOOL)fp16;
- (void)_removeAlbumRec:(id)fp8;
- (void)_removeAlbumRecs:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)albumRecs;
- (void)setAlbumRecs:(struct IPAlbumList *)fp8;
- (struct IPAlbumList *)albumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)albumsInGroup:(unsigned long long)fp8 inSubgroup:(id)fp16;
- (struct IPAlbumList *)allLocalAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allAlbumsInGroup:(unsigned long long)fp8;
- (void)dumpAlbumsToConsole;
- (void)postLaunchCleanup;
- (void)_dumpAlbum:(id)fp8 depth:(int)fp12;
- (struct IPAlbumList *)allVisibleAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)visibleAlbumsInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)visibleAlbumsInGroup:(unsigned long long)fp8 inSubgroup:(id)fp16;
- (struct IPAlbumList *)allVisibleLocalAlbumsInGroup:(unsigned long long)fp8;
- (id)singletonInGroup:(unsigned long long)fp8;
- (int)startIndexOfGroup:(unsigned long long)fp8;
- (int)endIndexOfGroup:(unsigned long long)fp8;
- (id)firstAlbumInGroup:(unsigned long long)fp8;
- (id)lastAlbumInGroup:(unsigned long long)fp8;
- (struct IPAlbumList *)allAlbums;
- (void)setStackOpenEverywhere:(BOOL)fp8 key:(unsigned long)fp12;
- (void)setStackOpenEverywhere:(BOOL)fp8 photo:(struct IPPhotoInfo *)fp12;
- (id)firstAlbumContainingPhoto:(struct IPPhotoInfo *)fp8;
- (id)firstSubscriptionAlbumContainingPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)isModified;
- (id)uniqueNameFromString:(id)fp8;
- (id)uniqueNameFromStringIfNeeded:(id)fp8;
- (BOOL)albumExistsWithName:(id)fp8;
- (BOOL)albumExistsWithNameWithSameCapitalization:(id)fp8;
- (id)printerAlbum;
- (id)readAlbum:(id)fp8;
- (void)addImageIfNeeded:(struct IPPhotoInfo *)fp8 toXMLDict:(id)fp12 minCount:(int)fp16;
- (void)addAlbumData:(id)fp8 toXMLDict:(id)fp12 baseDict:(id)fp16;
- (id)rootRelativeAlbumFolder;
- (id)albumFolder;
- (id)archiveAlbumPath;
- (id)rotationAlbumPath;
- (id)trashAlbumPath;
- (id)relativeArchiveAlbumPath;
- (id)relativeRotationAlbumPath;
- (id)relativeTrashAlbumPath;
- (id)validateName:(id)fp8 forAlbum:(id)fp12;
- (BOOL)includeCountWithName;
- (void)setIncludeCountWithName:(BOOL)fp8;
- (id)albumData;
- (void)setKeyRemapArray:(struct KeyRemapArray *)fp8;
- (void)setRebuildKeys:(BOOL)fp8;
- (void)_recursivelyInitAlbumsWithParent:(id)fp8;
- (void)reverseGeocodeAlbums;
- (void)readAlbums:(BOOL)fp8;
- (id)_canTerminate;
- (void)sortAlbums:(BOOL)fp8;
- (void)nameSortAlbums;
- (void)resortAllAlbumContents;
- (void)_updateAlbumRecursive:(id)fp8;
- (void)_updateAlbum:(id)fp8;
- (void)_mountCamera:(id)fp8;
- (void)_addCameraAlbumOnMainThread:(id)fp8;
- (void)_newCamera:(id)fp8;
- (void)_removedCamera:(id)fp8;
- (id)lastCamera;
- (void)_newRecorder:(id)fp8;
- (void)_removedRecorder:(id)fp8;
- (void)_docMounted:(id)fp8;
- (void)_networkDocMounted:(id)fp8;
- (void)_docEjected:(id)fp8;
- (void)ejectAlbum:(id)fp8;
- (id)description;
- (int)placeCountInDetailAlbum:(id)fp8;
- (id)personKeysInDetailAlbum:(id)fp8;
- (id)eventKeysInDetailAlbum:(id)fp8;
- (void)_addKeyToDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12 album:(id)fp16 updateName:(BOOL)fp20 updateHeaderVisibility:(BOOL)fp24;
- (void)addKeyToDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12;
- (void)_removeKeyFromDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12 album:(id)fp16 updateName:(BOOL)fp20 updateHeaderVisibility:(BOOL)fp24;
- (void)removeKeyFromDetailFilter:(unsigned long)fp8 withBaseKeys:(id)fp12;
- (void)timerWriteXML:(id)fp8;
- (BOOL)shouldWriteXMLFile;
- (void)setShouldWriteXMLFile;
- (void)_queueXMLWithDelay:(unsigned long)fp8;
- (void)queueXMLFileAsynch:(BOOL)fp8 withDelay:(BOOL)fp12;
- (BOOL)isWritingXMLFile;
- (void)addAlbum:(id)fp8 toFile:(struct __sFILE *)fp12 newStyle:(BOOL)fp16;
- (void)_hierAddAlbum:(id)fp8 toFile:(struct __sFILE *)fp12 newStyle:(BOOL)fp16;
- (void)addRoll:(struct IPRoll *)fp8 toFile:(struct __sFILE *)fp12 sortedPhotos:(struct IPPhotoList *)fp16 newStyle:(BOOL)fp20;
- (void)addStack:(struct IPStack *)fp8 toFile:(struct __sFILE *)fp12;
- (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
- (void)_writeToXMLNewStyle:(BOOL)fp8;
- (void)performTask;

@end

@interface AlbumView : NSOutlineView
{
    ArchiveDocument *mDocument;
    AlbumViewController *mController;
    NSMenu *mNoSelectionContext;
    NSMenu *mAlbumContext;
    NSMenu *mDiscContext;
    NSMenu *mLibraryContext;
    NSMenu *mTrashContext;
    SlimSplitView *mSlimSplitter;
    BOOL mRebuilding;
    BOOL mSelecting;
    BOOL mNeedsReload;
    BOOL mInitialized;
    BOOL mIsAnimating;
    struct IPAlbumList *mPreviouslySelectedAlbums;
    unsigned long long mRemovedAlbumGroup;
    int mRemovedAlbumRow;
    struct MessageReceiver mAlbumMessageReceiver;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    BOOL mShouldReturnZeroFromNumberOfRowsToAbortSuperMouseDownAfterAssignmentOfTrackingRow;
    DPAPDatabaseAlbum *mAuthenticatingDPAPDatabaseAlbum;
    NSMutableArray *mEjectIconTrackingRectTags;
    int mClearFlaggedRectTag;
    int mHoldRectTag;
    int mActiveEjectIconRow;
    int mLastRowCount;
    BOOL mUseLargeAppearance;
    BOOL mIsTiling;
    BOOL _duringDrag;
    int _overrideClickedRow;
    BOOL _pauseTootipRebuild;
    NSMutableArray *_albumsWithProgressFrames;
    id _bis1;
    id _bis2;
    id _obis1;
    id _obis2;
    id _hbis1;
    id _hbis2;
    id _hobis1;
    id _hobis2;
    id _hbisin1;
    id _hbisin2;
    id _hobisin1;
    id _hobisin2;
    BOOL _doingEdit;
    NSDictionary *_countAttributes;
    NSDictionary *_countAttributesDark;
    NSDictionary *_bubbleAttributes;
    NSDictionary *_clearAttributes;
    int _drawCountClear;
    int _holdHover;
    int _maxLevel;
    NSColor *_headerTextColor;
    BOOL _useLeopardStyle;
    BOOL _active;
}

- (void)_albumProgressMsg:(id)fp8;
- (struct _NSRect)frameOfCellAtColumn:(int)fp8 row:(int)fp12;
- (struct _NSRect)_frameOfOutlineCellAtRow:(int)fp8;
- (void)_autohideScroller;
- (void)awakeFromNib;
- (void)windowActive:(id)fp8;
- (void)windowInactive:(id)fp8;
- (id)headerTextColor;
- (void)setHeaderTextColor:(id)fp8;
- (void)swapImageSource:(BOOL)fp8 header:(BOOL)fp12 active:(BOOL)fp16;
- (void)prepareForRelease;
- (void)initialize;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)albumCheckToggled:(id)fp8;
- (BOOL)needsReload;
- (void)setNeedsReload:(BOOL)fp8;
- (id)controller;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;
- (struct _NSRect)adjustScroll:(struct _NSRect)fp8;
- (void)setLargeAppearance:(BOOL)fp8;
- (BOOL)largeAppearance;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)setPauseTooltipRebuild:(BOOL)fp8;
- (void)rebuildToolTips;
- (struct _NSRect)recentEventRect;
- (struct _NSRect)facesAlbumRect;
- (void)_checkProgressFrames:(id)fp8;
- (void)updateMaxLevel;
- (void)expandItem:(id)fp8 expandChildren:(BOOL)fp12;
- (void)collapseItem:(id)fp8 collapseChildren:(BOOL)fp12;
- (void)reloadData;
- (void)reloadItemWithoutReloadChildren:(id)fp8;
- (void)reloadItem:(id)fp8 reloadChildren:(BOOL)fp12;
- (void)setReadyToLoadData:(BOOL)fp8;
- (void)rebuild:(id)fp8;
- (void)_redrawToUpdateName:(id)fp8;
- (void)_appWillQuit:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)isDuringDrag;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)isDoingEdit;
- (void)setDoingEdit:(BOOL)fp8;
- (void)textDidBeginEditing:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)repairFirstResponder;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (BOOL)isSelecting;
- (struct IPAlbumList *)selectedAlbums;
- (void)setSelectedAlbums:(struct IPAlbumList *)fp8 withNotify:(BOOL)fp12;
- (void)selectRow:(int)fp8 byExtendingSelection:(BOOL)fp12;
- (void)selectRowIndexes:(id)fp8 byExtendingSelection:(BOOL)fp12;
- (void)deselectRow:(int)fp8;
- (void)deselectAll:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (int)numberOfRows;
- (void)mouseMoved:(id)fp8;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (int)clickedRow;
- (id)authenticatingDPAPDatabaseAlbum;
- (id)menuForEvent:(id)fp8;
- (void)addAlbum:(id)fp8;
- (void)addSmartAlbum:(id)fp8;
- (void)editSmartAlbum:(id)fp8;
- (void)sortAlbums:(id)fp8;
- (void)showInspector:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (void)duplicateAlbums:(id)fp8;
- (void)ejectAction:(id)fp8;
- (void)altEjectAction:(id)fp8;
- (void)deleteAlbums:(struct IPAlbumList *)fp8 unpublishIfNeeded:(BOOL)fp12;
- (void)trashAction:(id)fp8;
- (void)promptAndDeleteAlbums:(struct IPAlbumList *)fp8;
- (void)_removeSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_removeSubscriptionSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_deleteAlbums:(struct IPAlbumList *)fp8 trashOnRemove:(BOOL)fp12;
- (BOOL)performKeyEquivalent:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)_albumAdded:(id)fp8 makeCurrent:(BOOL)fp12;
- (struct IPAlbumList *)_removableSelectedAlbums;
- (void)_willRemoveAlbum:(id)fp8;
- (void)_checkForRemovedRow:(id)fp8;
- (void)_didRemoveAlbum;
- (int)_removedAlbumRow;
- (struct _NSRect)cell:(id)fp8 adjustedTitleRect:(struct _NSRect)fp12;
- (void)setIsAnimating:(BOOL)fp8;
- (BOOL)active;
- (void)setActive:(BOOL)fp8;

@end

@interface AlbumView (_AlbumViewEjectButtons)
- (struct _NSRect)holdRectForRow:(int)fp8;
- (struct _NSRect)countClearRectForRow:(int)fp8;
- (void)_addEjectIconTrackingRects;
- (void)_drawEjectIcons;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)_progressRectForRow:(int)fp8 indicator:(id)fp12;
- (struct _NSRect)_ejectIconRectForRow:(int)fp8;
- (struct _NSRect)_altEjectIconRectForRow:(int)fp8;
- (void)_ejectMouseDown:(id)fp8 alt:(BOOL)fp12;
- (void)_clearMouseDown:(id)fp8 forRow:(int)fp12;
- (void)_clearShelfConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_holdMouseDown:(id)fp8 forRow:(int)fp12 album:(id)fp16;
- (void)_immediatelyDrawEjectIcon:(id)fp8 row:(int)fp12 alt:(BOOL)fp16;
- (float)_minFrameWidthForEjectIcons;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_removeEjectIconTrackingRects;
- (void)resetCursorRects;
- (void)_resetEjectIconTrackingRects;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
@end

@interface NSOutlineView (internal_add)
- (id)outlineCell;
- (id)trackingOutlineCell;
@end

@interface AlbumViewCell : NSTextFieldCell
{
    Album *mAlbum;
    NSImage *_image;
    NSButtonCell *_showCheckbox;
    BOOL _checked;
    BOOL _checkable;
    NSButtonCell *_cancelButton;
    BOOL _canCancel;
    BOOL _cancelled;
    BOOL _isSectionCell;
    NSFont *_sectionFont;
    NSFont *_albumFont;
    NSFont *_selectedAlbumFont;
    AlbumViewCell *_lastCopy;
}

+ (void)cleanUpStatics;
- (id)description;
- (void)resetShowCheckbox;
- (void)_showCheckboxToggle:(id)fp8;
- (void)resetCancelButton;
- (void)_cancelHit:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)backgroundColor;
- (void)setAlbum:(id)fp8;
- (id)album;
- (void)setImage:(id)fp8;
- (id)image;
- (id)_alternateTextColor;
- (id)attributedStringValue;
- (BOOL)isHighlighted;
- (void)_drawHighlightWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (struct _NSRect)checkboxRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)cancelRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)titleRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)imageRectForBounds:(struct _NSRect)fp8;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (struct _NSRect)usedTitleRect:(struct _NSRect)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)_trackButton:(id)fp8 forEvent:(id)fp12 inRect:(struct _NSRect)fp16 ofView:(id)fp32;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;
- (BOOL)pointInEnabledControl:(struct _NSPoint)fp8 inRect:(struct _NSRect)fp16;
- (void)setSectionCell:(BOOL)fp8;
- (BOOL)isSectionCell;
- (id)sectionFont;
- (void)setSectionFont:(id)fp8;
- (id)albumFont;
- (void)setAlbumFont:(id)fp8;
- (id)selectedAlbumFont;
- (void)setSelectedAlbumFont:(id)fp8;
- (id)showCheckbox;
- (void)setShowCheckbox:(id)fp8;
- (BOOL)checked;
- (void)setChecked:(BOOL)fp8;
- (BOOL)checkable;
- (void)setCheckable:(BOOL)fp8;
- (id)cancelButton;
- (void)setCancelButton:(id)fp8;
- (BOOL)canCancel;
- (void)setCanCancel:(BOOL)fp8;
- (BOOL)cancelled;
- (void)setCancelled:(BOOL)fp8;

@end

@interface AlbumViewCell (Protected)
+ (void)drawVerticalGradientInRect:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
@end

@interface AlbumViewCellFormatter : NSFormatter
{
    NSString *mEditString;
}

- (void)dealloc;
- (id)editString;
- (void)setEditString:(id)fp8;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (id)attributedStringForObjectValue:(id)fp8 withDefaultAttributes:(id)fp12;
- (id)editingStringForObjectValue:(id)fp8;

@end

@interface AlbumViewController : NSObject
{
    AlbumView *mAlbumView;
    NSScrollView *mScrollView;
    ArchiveDocument *mDocument;
    BOOL mCreatedDroppedAlbum;
    BOOL _suspendNotify;
    AVSections *mSections;
    NSTimer *_animationTimer;
    NSMutableArray *_itemBeingCollapsed;
    BOOL mNeedInitialSectionSetup;
    float mAnimationStepSize;
    id mDelayedEditModeForAlbumClickedRow;
    id mDelayedSelectForAlbumClickedRow;
    BOOL _fauxAllEvents;
    BOOL _fauxPeople;
    BOOL _fauxPlaces;
    BOOL _oneShotSkipAlbumChange;
    NSMutableArray *mSelectedAlbums;
    BOOL mInitialized;
    BOOL mNameWasEdited;
    NSMutableArray *mDocs;
    LocationData *mLocationData;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)addDocument:(id)fp8;
- (void)removeDocument:(id)fp8;
- (id)mainDB;
- (id)sections;
- (id)albumMasksForSections;
- (id)albumMgr;
- (id)mainAlbumMgr;
- (id)albumView;
- (id)scrollView;
- (id)document;
- (id)documents;
- (BOOL)fauxAllEvents;
- (void)setFauxAllEvents:(BOOL)fp8;
- (BOOL)fauxPeople;
- (void)setFauxPeople:(BOOL)fp8;
- (BOOL)fauxPlaces;
- (void)setFauxPlaces:(BOOL)fp8;
- (BOOL)oneShotSkipAlbumChange;
- (void)setOneShotSkipAlbumChange:(BOOL)fp8;
- (void)_currentAlbumDidSwitch:(id)fp8;
- (void)_undoRemoveAlbum:(id)fp8 parent:(id)fp12 position:(int)fp16;
- (void)removeAlbum:(id)fp8 withUndo:(BOOL)fp12;
- (void)_undoRemoveAlbums:(id)fp8 parent:(id)fp12 positions:(id)fp16;
- (void)removeAlbums:(struct IPAlbumList *)fp8 withUndo:(BOOL)fp12;
- (void)_undoCreateNewAlbum:(id)fp8;
- (void)_redoCreateNewAlbum:(id)fp8;
- (id)createNewAlbumInDB:(id)fp8 withName:(id)fp12 beforeIndex:(int)fp16 select:(BOOL)fp20 startEdit:(BOOL)fp24 albumClass:(Class)fp28;
- (void)delayedSelectForAlbum:(id)fp8;
- (void)delayedEditModeForAlbum:(id)fp8;
- (void)_undoCreateNewFolder:(id)fp8;
- (void)_redoCreateNewFolder:(id)fp8;
- (id)createNewFolderInDB:(id)fp8 withName:(id)fp12 beforeIndex:(int)fp16 select:(BOOL)fp20 startEdit:(BOOL)fp24;
- (void)_undoCreateNewAlbum:(id)fp8 fromSelection:(id)fp12;
- (void)_redoCreateNewAlbum:(id)fp8 fromSelection:(id)fp12;
- (id)createNewAlbumInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20 albumClass:(Class)fp24;
- (id)createNewBookInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20;
- (id)createNewSlideshowInDB:(id)fp8 withName:(id)fp12 fromSelection:(struct IPPhotoList *)fp16 beforeIndex:(int)fp20;
- (void)installAlbum:(id)fp8 beforeIndex:(int)fp12 startEdit:(BOOL)fp16;
- (id)createDuplicateOfAlbum:(id)fp8 withName:(id)fp12 select:(BOOL)fp16;
- (id)selectedAlbum;
- (void)selectAlbum:(id)fp8;
- (void)_recursiveExpandAlbum:(id)fp8 group:(unsigned long long)fp12;
- (void)makeAlbumVisible:(id)fp8;
- (id)albumWithName:(id)fp8;
- (void)selectMultipleRows;
- (void)startAnimator;
- (void)stopAnimator;
- (BOOL)animateOneRow:(id)fp8;
- (void)animate:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldCollapseItem:(id)fp12;
- (void)outlineViewItemWillCollapse:(id)fp8;
- (void)outlineViewItemWillExpand:(id)fp8;
- (void)reloadWillHappen:(id)fp8;
- (void)reloadHappened:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldSelectItem:(id)fp12;
- (BOOL)outlineView:(id)fp8 shouldShowCellExpansionForTableColumn:(id)fp12 item:(id)fp16;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (void)outlineView:(id)fp8 willDisplayOutlineCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (BOOL)outlineView:(id)fp8 shouldExpandItem:(id)fp12;
- (BOOL)outlineView:(id)fp8 shouldEditTableColumn:(id)fp12 item:(id)fp16;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)_undoRedoChangeAlbumName:(id)fp8 forAlbum:(id)fp12;
- (void)_undoReorderAlbums:(id)fp8 originalState:(id)fp12 selectedAlbum:(id)fp16;
- (void)_redoReorderAlbums:(id)fp8 originalState:(id)fp12 selectedAlbum:(id)fp16;
- (void)_doCommandAddImages:(id)fp8 inDB:(id)fp12 toAlbum:(id)fp16 fromAlbum:(id)fp20;
- (void)_undoCommandAddImages:(id)fp8 toAlbum:(id)fp12 fromAlbum:(id)fp16;
- (void)_importCancel:(id)fp8;
- (void)_subscribeCancel:(id)fp8;
- (void)_importDone:(id)fp8;
- (id)_selectedAlbums;
- (void)_setSelectedAlbums:(id)fp8;
- (id)dpapSelectionPath;
- (void)restoreDPAPSelectionPath:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (int)startIndexOfGroup:(unsigned long long)fp8;
- (int)endIndexOfGroup:(unsigned long long)fp8;
- (int)startRowOfGroup:(unsigned long long)fp8;
- (int)endRowOfGroup:(unsigned long long)fp8;
- (void)moveAlbum:(id)fp8 beforeIndex:(int)fp12 newParent:(id)fp16;
- (void)moveAlbums:(struct IPAlbumList *)fp8 beforeIndex:(int)fp12 useBeforeAlbum:(id)fp16 newParent:(id)fp20;
- (BOOL)_item:(id)fp8 isNotChildOfAlbums:(struct IPAlbumList *)fp12;
- (unsigned int)_validateAlbumDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptAlbumDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (unsigned int)_validateKeyMgrDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (void)_undoRedoMovePhotosToNewEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)_undoRedoImportFromPubSub:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (BOOL)_acceptKeyMgrDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (void)_setComboAlbumName:(id)fp8;
- (unsigned int)_validateFilenameDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptSelectiveImportDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (BOOL)_acceptFilenameDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;
- (unsigned int)_validateITunesDrag:(id)fp8 proposedItem:(id)fp12 proposedChildIndex:(int)fp16;
- (BOOL)_acceptITunesDrop:(id)fp8 item:(id)fp12 childIndex:(int)fp16;

@end

@interface AlbumViewRulerView : NSRulerView
{
    SlimSplitView *_splitView;
    AlbumViewHeaderCell *_cell;
    id _controller;
    id _outlineView;
}

- (id)initWithScrollView:(id)fp8 orientation:(unsigned int)fp12 tableView:(id)fp16 dataSource:(id)fp20;
- (void)dealloc;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)resetCursorRects;
- (void)setAttributedStringValue:(id)fp8;
- (id)splitView;
- (void)setSplitView:(id)fp8;

@end

@interface AlbumViewHeaderCell : NSTableHeaderCell
{
    NSImage *_handleImage;
}

- (id)init;
- (void)dealloc;
- (id)handleImage;
- (void)setHandleImage:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)highlight:(BOOL)fp8 withFrame:(struct _NSRect)fp12 inView:(id)fp28;

@end

@interface ArchiveAlbum : Album
{
}

- (id)init;
- (void)dealloc;
- (unsigned int)aeAlbumType;
- (unsigned long long)defaultGroup;
- (BOOL)isEjectable;
- (void)eject;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)maskedYears;
- (id)adjustForMaskedYears;
- (void)recreateFromDB:(id)fp8;

@end

@interface BookAlbum : Album
{
    struct SqBookAlbum *mSqBookAlbum;
    IPBook *mBook;
    NSDictionary *mLegacyBookInfo;
    NSCountedSet *mPlacedPhotos;
    BOOL mIsBeingUpgraded;
}

- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqBookAlbum *)sqBookAlbum;
- (void)saveBookToDatabase;
- (id)init;
- (id)initWithAlbum:(id)fp8;
- (void)clearModified;
- (void)initWithDictionary:(id)fp8;
- (unsigned int)aeAlbumType;
- (id)makeCachePath;
- (id)extractThumbnails:(id)fp8;
- (void)injectThumbnails:(id)fp8;
- (void)deinjectThumbnails:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setKey:(unsigned long)fp8;
- (id)cacheFileName;
- (void)setCacheFileName:(id)fp8;
- (id)bookData;
- (void)setBookData:(id)fp8;
- (BOOL)hasValidTheme;
- (void)willBeRemoved;
- (id)book;
- (id)bookIfLoaded;
- (void)setBook:(id)fp8;
- (void)setProductType:(int)fp8;
- (int)productType;
- (BOOL)isBookProduct;
- (BOOL)isCardProduct;
- (BOOL)isCalendarProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (void)setVersion:(int)fp8;
- (int)version;
- (BOOL)hasUpgradeMessage:(int)fp8;
- (void)addUpgradeMessage:(int)fp8;
- (void)removeUpgradeMessage:(int)fp8;
- (void)setIsBeingUpgraded:(BOOL)fp8;
- (void)setDB:(id)fp8;
- (void)upgradePre7Book;
- (void)clearPlacedPhotoCache;
- (id)placedPhotos;
- (void)addPhotoToPlacedList:(struct IPPhotoInfo *)fp8;
- (void)removePhotosFromPlacedList:(struct IPPhotoList *)fp8;
- (void)removePhotoFromPlacedList:(struct IPPhotoInfo *)fp8;
- (BOOL)onePhotoPerPage;
- (void)setOnePhotoPerPage:(BOOL)fp8;
- (BOOL)photosAdded;
- (void)setPhotosAdded:(BOOL)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 fillingScrapPage:(BOOL)fp12 returnResults:(BOOL)fp16;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8 fillingScrapPage:(BOOL)fp12;
- (void)add:(struct IPPhotoInfo *)fp8;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (BOOL)allowsMovies;
- (void)setLegacyBookInfo:(id)fp8;
- (id)legacyBookInfo;
- (void)dealloc;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (void)_rescheduleBookPurge;
- (void)_idleBookPurge:(id)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)reducedSlideshowOptions;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;

@end

@interface CameraAlbum : ImportAlbum
{
    ICObject *mICObject;
    ThreadsafeMutableArray *mImageQueue;
    NSLock *mImageQueueLock;
    BOOL mDocIsClosing;
    BOOL mThreadActive;
    BOOL mCameraSupportsDelete;
    BOOL mCameraSupportsEject;
    BOOL mAddingPhotos;
    NSConditionLock *mThreadActivationLock;
    BOOL mIsLoading;
}

- (id)initWithICObject:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (BOOL)allowsModification;
- (void)setDB:(id)fp8;
- (void)setMediaType:(int)fp8;
- (id)icObject;
- (BOOL)isLoading;
- (void)setICObject:(id)fp8;
- (BOOL)isEjectable;
- (BOOL)isUnmountable;
- (void)eject;
- (void)setThreadActive:(BOOL)fp8;
- (BOOL)threadActive;
- (void)_notifyChangedFields:(unsigned long long)fp8 affectedPhoto:(struct IPPhotoInfo *)fp16;
- (void)addWithPLHolderArray:(id)fp8;
- (void)_docIsClosing:(id)fp8;
- (void)_aggregateDateForSelection:(struct IPPhotoList *)fp8;
- (id)_collectImageProc:(id)fp8;
- (void)_icCountedImages:(id)fp8;
- (void)setAdvancedImport:(BOOL)fp8;
- (void)_reloadPhotos;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_loadThumbTossedSetImage:(id)fp8;
- (void)_threadedLoadThumbnails:(id)fp8;
- (BOOL)advancedImport;
- (id)cachedNameWithCount;

@end

@interface DiscAlbum : Album
{
    DRDevice *mDevice;
}

- (id)initWithDevice:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (id)device;
- (void)setDevice:(id)fp8;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;

@end

@interface DPAPAlbum : Album
{
    BOOL mIsInitialSelection;
    unsigned int mApplescriptUpperKey;
}

+ (void)configureDPAPAlbum:(id)fp8;
- (void)albumWillBeSelected;
- (void)albumDeselected;
- (id)dpapService;
- (id)_dpapContainer;
- (id)init;
- (void)_initialSelection;
- (BOOL)isPersistent;
- (void)_loadKeys;
- (unsigned int)visibleCount;
- (struct IPPhotoList *)visiblePhotos;
- (unsigned int)aeAlbumType;
- (id)uniqueID;

@end

@interface DPAPBrowserAlbum : Album
{
}

- (BOOL)allowsModification;
- (id)init;
- (BOOL)isSelectable;
- (unsigned int)aeAlbumType;

@end

@interface DPAPContainerAlbum : DPAPAlbum
{
    NSNumber *mDMAPId;
}

- (void)albumWillBeSelected;
- (void)dealloc;
- (id)databaseAlbum;
- (id)dpapService;
- (id)_dpapContainer;
- (id)initWithDMAPId:(id)fp8;
- (void)setAlbumKeys;
- (unsigned int)aeAlbumType;

@end

@interface DPAPDatabaseAlbum : DPAPAlbum
{
    DBDocument *mDocument;
    DMAPClientService *mDPAPService;
    BOOL mDidAddContainerAlbums;
    BOOL mFaultDidFail;
    BOOL mDidLoad;
}

+ (BOOL)_shouldPreloadThumbs;
+ (unsigned int)_thumbPreloadLimit;
- (void)_addContainerAlbums;
- (void)albumWillBeSelected;
- (void)_configureArchiveAlbum;
- (BOOL)isAuthenticated;
- (BOOL)isPasswordRequired;
- (void)containerAlbumWillBeSelected:(id)fp8;
- (id)dbDocument;
- (void)dealloc;
- (id)_dpapContainer;
- (id)dpapDatabase;
- (id)dpapService;
- (void)eject;
- (id)initWithDPAPService:(id)fp8;
- (BOOL)isEnabled;
- (BOOL)isEjectable;
- (BOOL)isSelectable;
- (void)_initialSelection;
- (BOOL)_load;
- (void)_loadDatabase;
- (void)_preloadThumbs;
- (int)numberOfVisibleChildren;
- (void)photoViewerLoadHook;
- (void)setDB:(id)fp8;
- (void)_recomputeVisChildren;
- (struct IPAlbumList *)visibleChildren;
- (void)_unload;
- (id)nameWithCount;
- (id)nameWithCountAlways;
- (unsigned int)visibleCount;
- (unsigned int)aeAlbumType;

@end

@interface DynamicAlbum : Album
{
}

- (id)init;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (void)imageDBChanged:(id)fp8;
- (BOOL)shouldRebuild;

@end

@interface FilterAlbum : Album
{
    struct SqFilterAlbum *mSqFilterAlbum;
    struct vector<Filter*, std::allocator<Filter*>> *mFilters;
    struct vector<Filter*, std::allocator<Filter*>> *mLocationFilters;
    struct vector<Filter*, std::allocator<Filter*>> *mPeopleFilters;
    struct vector<Filter*, std::allocator<Filter*>> *mOtherFilters;
    BOOL mLiveFilteringEnabled;
    BOOL mNeedsToFilter;
    NSTimer *mRefilterTimer;
    unsigned long long mPhotoInfoChangeMask;
    unsigned long long mAlbumChangeMask;
    unsigned long long mAlbumMgrChangeMask;
    struct MessageReceiver mAlbumMessageReceiver;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    BOOL mAlbumMgrReceiverLinked;
    BOOL mListenToRolls;
    BOOL mObserveLastImport;
    struct IPPhotoList *mBasePhotos;
    BOOL mUseRepresentedAlbumYearHeaderState;
    BOOL mFilteringCanceled;
}

- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqFilterAlbum *)sqFilterAlbum;
- (void)_writeFilterArrayToSqDB;
- (BOOL)useRepresentedAlbumYearHeaderState;
- (void)setUseRepresentedAlbumYearHeaderState:(BOOL)fp8;
- (BOOL)isYearOpen:(int)fp8 month:(int)fp12 day:(int)fp16;
- (void)setYear:(int)fp8 month:(int)fp12 day:(int)fp16 open:(BOOL)fp20;
- (id)initWithAlbum:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)_faceDataChanged:(id)fp8;
- (unsigned int)aeAlbumType;
- (void)prepareForRelease;
- (void)releaseFilters:(BOOL)fp8;
- (void)initWithDictionary:(id)fp8;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (void)_appFinishedLaunching:(id)fp8;
- (void)scheduleRefiltering:(id)fp8;
- (void)_forceFilterScheduling;
- (void)_doFilterScheduling;
- (void)cancelFiltering;
- (void)_didEndFiltering;
- (BOOL)needsHiddenPhotosVisible;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)matchAllFilters;
- (void)setMatchAllFilters:(BOOL)fp8;
- (BOOL)activeFilterBar;
- (void)setActiveFilterBar:(BOOL)fp8;
- (BOOL)keepRollsTogether;
- (void)setKeepRollsTogether:(BOOL)fp8;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (void)reobserveAllNotifications;
- (void)observeAlbums:(struct IPAlbumList *)fp8 observeRolls:(BOOL)fp12;
- (void)observeNotifications:(id)fp8;
- (void)_enableLiveFiltering:(id)fp8;
- (void)addFilter:(id)fp8;
- (unsigned long)filterCount;
- (id)filterAtIndex:(unsigned long)fp8;
- (id)filterOfType:(int)fp8 atIndex:(unsigned long)fp12;
- (void)replaceFilterAtIndex:(int)fp8 withFilter:(id)fp12;
- (id)coreName;
- (void)setCoreName:(id)fp8;
- (void)setName:(id)fp8;
- (struct vector<Filter*, std::allocator<Filter*>> *)filters;
- (void)setFilters:(struct vector<Filter*, std::allocator<Filter*>> *)fp8;
- (void)_gatherRollMembers:(struct IPPhotoList *)fp8;
- (void)_filterPhotos;
- (void)_clearFilterSubsets;
- (void)_ensureFilterSubsets;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_handleAlbumMgrMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_handleAlbumMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (struct IPPhotoList *)basePhotos;
- (void)setBasePhotos:(struct IPPhotoList *)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (BOOL)allowsModificationFlag;
- (BOOL)allowsReorderFlag;
- (BOOL)acceptsAdditionalPersonFilter;
- (BOOL)acceptsAdditionalPlaceFilter;

@end

@interface PhotoCDAlbum : ImportAlbum
{
    PhotoCD *mPhotoCD;
    ThreadsafeMutableArray *mImageQueue;
    BOOL mDocIsClosing;
    BOOL mThreadActive;
    NSConditionLock *mThreadActivationLock;
}

- (id)initWithPhotoCD:(id)fp8;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (BOOL)allowsModification;
- (BOOL)isEjectable;
- (void)eject;
- (void)setDB:(id)fp8;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (void)_reloadPhotos;
- (void)setAdvancedImport:(BOOL)fp8;
- (void)setThreadActive:(BOOL)fp8;
- (BOOL)threadActive;
- (void)_docIsClosing:(id)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_threadedLoadThumbnails:(id)fp8;

@end

@interface RollAlbum : Album
{
    unsigned int mRollID;
    unsigned int mKeyPhotoID;
}

+ (void)initialize;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16 rollID:(unsigned long)fp20;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (id)initWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setDB:(id)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setCollapsed:(BOOL)fp8;
- (BOOL)isCollapsed;
- (void)setRollID:(unsigned long)fp8;
- (unsigned long)rollID;
- (void)setKeyPhotoID:(unsigned long)fp8;
- (unsigned long)keyPhotoID;
- (struct IPPhotoInfo *)keyPhotoInfo;
- (id)name;
- (void)setName:(id)fp8;
- (id)rollName;
- (int)rollIDCompare:(id)fp8;
- (BOOL)isVisible;

@end

@interface RotationAlbum : Album <ThreadManagerTask>
{
    DBDocument *mDocument;
    struct IPPhotoInfo *mCurrentPhoto;
    struct IPPhotoList *mWasSelected;
    NSMutableArray *mImportQueue;
    ThreadsafeMutableArray *mPublishQueue;
    BOOL mCheckSelectedQueue;
    BOOL mRotatedDuringLastCycle;
    struct MessageReceiver *mRotateStatusReceiver;
    BOOL mCurrentPhotoWasReadded;
    BOOL mSourceFileExists;
    BOOL mThumbFileExists;
    struct IPPhotoInfo *mExistsCheckPhoto;
    BOOL mAutoStackRAWPlusJPG;
}

- (void)_loadPreferences:(id)fp8;
- (id)init;
- (void)dealloc;
- (unsigned long long)defaultGroup;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)_publishOperationStarted:(id)fp8;
- (void)_publishOperationEnded:(id)fp8;
- (void)setDocument:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (void)start;
- (void)_rotateComplete:(id)fp8;
- (void)_checkFilesExistOnMainThread;
- (void)ensureAlbumHasAllStackMembers:(struct IPStack *)fp8;
- (void)_keepStacksOrdered;
- (void)_stackPhotosOnMainThread:(id)fp8;
- (void)_tryToAutoStack:(struct IPPhotoInfo *)fp8;
- (BOOL)_isPhotoInSelectionMainThread:(struct IPPhotoInfo *)fp8;
- (void)performTask;
- (void)_failedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_releaseAndRequeue;
- (id)_canTerminate;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (void)addAlreadyRotatedImageBack:(struct IPPhotoInfo *)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeRecForProcessing:(struct IPPhotoInfo *)fp8;
- (void)_removeNoWait:(struct IPPhotoInfo *)fp8;
- (void)_doRegisterTask:(id)fp8;
- (void)_reregisterTask:(id)fp8;
- (void)_selectionChanged:(id)fp8;
- (void)_detectProgress:(id)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;

@end

@interface TrashAlbum : Album
{
    int mTrashState;
    BOOL mIsEmptying;
}

- (id)init;
- (unsigned int)aeAlbumType;
- (unsigned long long)defaultGroup;
- (unsigned int)visibleCount;
- (struct IPPhotoInfo *)visiblePhotoAtIndex:(long)fp8;
- (long)visibleIndexOfPhoto:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoList *)unsortedVisibleRecs;
- (struct IPPhotoList *)invisibleImageRecs;
- (BOOL)_addPhoto:(struct IPPhotoInfo *)fp8 unique:(BOOL)fp12;
- (BOOL)isEmptyingTrash;
- (void)setEmptyingTrash:(BOOL)fp8;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)doneWithChanges;
- (int)trashState;
- (void)setTrashState:(int)fp8;
- (id)aeVisiblePhotos;
- (BOOL)ignoresPhotoVisibility;
- (BOOL)allowsModification;
- (void)acceptAlbumDrop:(struct IPAlbumList *)fp8;

@end

@interface AppController : NSObject <ThreadManagerTask>
{
    id mPreferenceController;
    id mFontMenu;
    BOOL mHaveOpenedDocument;
    BOOL mHaveFinishedLaunching;
    BOOL mDelayWindowVisibility;
    NSMenuItem *mCWRotateItem;
    NSMenuItem *mCCWRotateItem;
    NSMenuItem *mEmptyTrashItem;
    NSMenuItem *mMoveToTrashItem;
    NSMenuItem *mCheckForUpdatesItem;
    NSMenuItem *mDotMacAlbumItem;
    NSMenuItem *mDotMacAlbumShareItem;
    NSMenuItem *mFacebookAlbumItem;
    NSMenuItem *mFacebookAlbumShareItem;
    NSMenuItem *mFlickrAlbumItem;
    NSMenuItem *mFlickrAlbumShareItem;
    NSMenuItem *mSmugMugAlbumItem;
    NSMenuItem *mSmugMugAlbumShareItem;
    NSMenuItem *mSubscribeToAlbumItem;
    NSMenuItem *mBrowseBackupsItem;
    NSMenuItem *mBrowseBackupsSeparatorItem;
    NSMenuItem *mWelcomeItem;
    id mNotDefault;
    id mFirstDefault;
    id mFirstNotDefault;
    id mDefaultPanel;
    NSPanel *mPhotocastSplashPanel;
    NSImageView *mPhotocastSplashIcon;
    NSTextField *mPhotocastSplashTitle;
    NSTextField *mPhotocastSplashMessage;
    NSButton *mPhotocastSplashDontTellMe;
    NSButton *mPhotocastSplashOK;
    PreferenceKeys *mPK;
    NSMutableArray *mDBList;
    unsigned int mNextDBKey;
    int mStartupLockFile;
    BOOL mLastStartupWasSuccessful;
    NSMutableArray *mTerminateQueue;
    NSLock *mTerminateQueueLock;
    NSMutableArray *mDelayedLaunchFiles;
    NSString *mDelayedLaunchURL;
    struct _NSSize mScreenSize;
    NSString *mCCWKeyEquivalent;
    unsigned long mCCWKeyEquivalentModifierMask;
    NSString *mCWKeyEquivalent;
    unsigned long mCWKeyEquivalentModifierMask;
    DPAPClient *mDPAPClient;
    struct SharingContext *mSharingContext;
    DPAPPasswordPanelController *mDPAPPasswordPanelController;
    BOOL mShouldSelectDPAPAlbumDidGenerateMouseEvents;
    BOOL mShouldRunFirewallAlert;
    BOOL mDidBecomeActive;
    BOOL mIsPeabodyBrowsing;
    NSMutableArray *mTerminateValidators;
    LocationController *mLocationController;
    int _ignoreOneLastWindowClosed;
}

+ (void)initialize;
+ (id)controller;
+ (id)sharedOperationQueue;
+ (id)vmiCache;
- (id)init;
- (void)dealloc;
- (id)fontMenu;
- (id)_deepestExtantPath:(id)fp8;
- (unsigned long long)freeSpaceAtPath:(id)fp8;
- (id)preferenceController;
- (void)showKeyboardShortcuts:(id)fp8;
- (id)dbWithKey:(unsigned long)fp8;
- (unsigned long)addDB:(id)fp8;
- (void)removeDB:(id)fp8;
- (void)removeDBWithKey:(unsigned long)fp8;
- (id)allDBs;
- (BOOL)validateMenuItem:(id)fp8;
- (void)_requestReverseLookupApproval;
- (void)_handleReverseLookupApproval:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (BOOL)_checkAlreadyRunning:(id)fp8;
- (BOOL)lastLaunchWasSuccessful;
- (void)setLaunchSucceeded;
- (void)mediaBrowserForAperture:(id)fp8;
- (void)addMediaBrowserIfWeHaveAperture;
- (void)handleGetURLEvent:(id)fp8 withReplyEvent:(id)fp12;
- (void)applicationWillFinishLaunching:(id)fp8;
- (void)performTask;
- (void)startTasksAfterLaunch;
- (void)applicationDidFinishLaunching:(id)fp8;
- (BOOL)delayWindowVisibility;
- (void)setDelayWindowVisibility:(BOOL)fp8;
- (void)_checkUpdateToNewBackgroundColorDefault;
- (void)showSplashDialogIfNeeded;
- (void)doSetHotPlugAction:(id)fp8;
- (void)dontSetHotPlugAction:(id)fp8;
- (void)askLater:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (id)archiveDocument;
- (BOOL)alreadyRunning;
- (void)applicationDidHide:(id)fp8;
- (void)applicationDidBecomeActive:(id)fp8;
- (void)applicationDidResignActive:(id)fp8;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(id)fp8;
- (void)ignoreOneLastWindowClosed:(int)fp8;
- (BOOL)finishedLaunching;
- (void)addToTerminateQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromTerminateQueue:(id)fp8;
- (void)removeFromTerminateQueue:(id)fp8 selector:(SEL)fp12;
- (void)replyToApplicationShouldTerminate:(BOOL)fp8 fromTarget:(id)fp12 selector:(SEL)fp16;
- (BOOL)validateTerminate;
- (void)addTerminateValidator:(id)fp8;
- (void)removeTerminateValidator:(id)fp8;
- (unsigned int)applicationShouldTerminate:(id)fp8;
- (unsigned int)applicationCanTerminate:(id)fp8;
- (void)applicationWillTerminate:(id)fp8;
- (void)switchLibraries:(id)fp8;
- (void)relaunch;
- (void)relaunch:(id)fp8;
- (void)alertSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)confirmSwitchFromRoot:(id)fp8 toRoot:(id)fp12;
- (BOOL)applicationShouldOpenUntitledFile:(id)fp8;
- (void)_sendOpenAppleEvent;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (void)application:(id)fp8 openFiles:(id)fp12;
- (BOOL)application:(id)fp8 printFile:(id)fp12;
- (void)showSplashImmediately:(BOOL)fp8;
- (void)showSplashPanel:(id)fp8;
- (void)showPhotocastSplashPanel;
- (void)photocastSplashOK:(id)fp8;
- (void)photocastSplashDontTellMe:(id)fp8;
- (void)_photocastSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)goToWebSite:(id)fp8;
- (void)goToBuySite:(id)fp8;
- (void)goToVideoTutorials:(id)fp8;
- (void)goToFeedbackSite:(id)fp8;
- (void)registerApplication:(id)fp8;
- (void)checkForUpgrades:(id)fp8;
- (void)goToURLWithAppName:(id)fp8;
- (void)goToCustomerServiceSite:(id)fp8;
- (void)showPreferencePanel:(id)fp8;
- (id)normalizedSharedLibraryName;
- (void)applicationDidChangeScreenParameters:(id)fp8;
- (void)composeEmailWithSubject:(id)fp8 body:(id)fp12;
- (void)runAlertSheetWithTitle:(id)fp8 message:(id)fp12 defaultButton:(id)fp16;
- (void)runAlertSheetOnWindow:(id)fp8 title:(id)fp12 message:(id)fp16 defaultButton:(id)fp20;
- (void)albumViewHasRowCount;
- (id)mainPhotoViewer;
- (void)setLoadingString:(id)fp8;
- (void)_registerForSleepNotifications;
- (void)restartSharingServerIfRunning;
- (void)toggleSharingServer;

@end

@interface AppTerminateRequestor : NSObject
{
    id mTarget;
    SEL mSelector;
    BOOL mFlaggedLater;
}

- (id)initWithTarget:(id)fp8 selector:(SEL)fp12;
- (void)dealloc;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (BOOL)flaggedLater;
- (void)setFlaggedLater:(BOOL)fp8;
- (BOOL)isEqual:(id)fp8;

@end

@interface AppController (Peabody)
- (void)setIsPeabodyBrowsing:(BOOL)fp8;
- (BOOL)isPeabodyBrowsing;
@end

@interface AppController (DPAPClientItemDataHinting)
- (void)willRequireDataForDPAPPhotos:(struct IPPhotoList *)fp8 metaField:(id)fp12;
- (void)willRequireDataForDPAPPhotos:(struct IPPhotoList *)fp8 metaField:(id)fp12 blocking:(BOOL)fp16;
@end

@interface AppController (AppControllerDPAPServiceController)
- (void)didResolveLibraryLocation:(BOOL)fp8;
- (id)dpapServiceController;
- (BOOL)isDPAPBlockedBySharingFirewall;
- (void)runFirewallAlertOnWindow:(id)fp8;
@end

@interface AppController (AppControllerDPAPClient)
- (void)_addAlbumsForDPAPService:(id)fp8;
- (void)_addDPAPAlbum:(id)fp8 parentAlbum:(id)fp12;
- (void)_addDPAPClientObservers;
- (id)_albumManager;
- (id)_albumViewController;
- (id)_assuredDPAPBrowserAlbum;
- (void)_autoExpandDPAPBrowser;
- (void)_deselectDPAPService:(id)fp8;
- (void)disableDPAPClient;
- (id)dpapClient:(id)fp8 passwordForService:(id)fp12 attempt:(int)fp16;
- (BOOL)dpapClient:(id)fp8 dpapServiceError:(id)fp12;
- (BOOL)dpapClient:(id)fp8 shouldIncludeService:(id)fp12;
- (void)_dpapClientDidAddService:(id)fp8;
- (void)_dpapClientDidUnloadService:(id)fp8;
- (void)_dpapClientWillUnloadService:(id)fp8;
- (void)_dpapClientWillRemoveService:(id)fp8;
- (void)enableDPAPClient;
- (void)_initDPAPClient;
- (BOOL)isDPAPClient;
- (BOOL)_isOwnSocketAddress:(struct sockaddr_in)fp8;
- (void)_removeDPAPAlbum:(id)fp8;
- (void)_removeAlbumsForDPAPService:(id)fp8;
- (void)_removeDPAPAlbums;
- (void)_removeDPAPClientObservers;
- (BOOL)_shouldIncludeOwnDPAPService;
- (BOOL)shouldSelectDPAPAlbum:(id)fp8;
- (BOOL)shouldSelectDPAPAlbumDidGenerateMouseEvents;
- (void)unloadDPAPDatabaseAlbum:(id)fp8;
- (void)_updateDPAPBrowserAutoExpansionDefault:(id)fp8;
- (id)_canSharingTerminate;
@end

@interface ArchiveController : NSObject
{
    IPSlideshowController *_slideshowController;
    IPBookController *_bookController;
    PhotoDisplay *_photoDisplay;
    EditMgr *_editMgr;
    ImportDisplay *_importDisplay;
    IPEventViewController *_eventViewController;
    IPPeopleViewController *_peopleViewController;
    IPPlacesViewController *_placesViewController;
    IPPlacesMapViewController *_placesMapViewController;
    IPSelectiveImportController *_selectiveImportController;
    IPMarimbaController *_marimbaController;
    AlbumView *mAlbumView;
    EtchedText *mImageCount;
    id mDocument;
    NSButton *mShowEventsButton;
    NSButton *mShowDetailButton;
    NSButton *mShowAllPhotosButton;
    id mActionButtonMatrix;
    NSButton *mNewAlbumButton;
    NSButton *mInfoButton;
    id mNewSmartAlbumButton;
    NSButtonCell *mRotateImageButton;
    NSButton *mFullScreenButton;
    PopupSearchField *mSearchField;
    NSProgressIndicator *mSearchSpinner;
    ThumbnailSizer *mThumbnailSizer;
    SmartAlbumInfo *mSmartAlbumInfo;
    KeywordController *mKeywordController;
    struct _NSSize mBaseWindowSize;
    id mSplitView;
    float mSplitViewMinimum;
    LocationInspector *mLocationInspector;
    LocationController *mLocationController;
    InfoInspector *mInfoInspector;
    InfoController *mInfoController;
    id mInfoSplitView;
    float mInfoSplitViewMinimum;
    NSView *mInfoView;
    struct _NSRect mInfoRectLast;
    id mSlideshowPlayer;
    NSView *mDisplayView;
    IPViewController *mCurrentDisplay;
    IPReviewController *mReviewController;
    BatchChange *mBatchChangePanel;
    id mBurnController;
    id mNewAlbumPanel;
    id mNewAlbumName;
    id mNewAlbumOKButton;
    id mNewObjectPopup;
    float mInfoSplitViewCachedSize;
    float mSplitViewCachedSize;
    BOOL mOptionKeyWasDown;
    BOOL mShowKeywords;
    BOOL mShowCaptions;
    BOOL mShowHiddenPhotos;
    BOOL mShowFileNames;
    BOOL mGridLayout;
    BOOL mInitialized;
    BOOL mActive;
    BOOL mRebuildMatrix;
    BOOL mEnableEditMode;
    BOOL mEnableBookMode;
    BOOL mShowKeywordsWhenAllowed;
    BOOL mShowInfoInspectorWhenAllowed;
    BOOL mHideHiddenPhotosWhenAllowed;
    ExportMgr *mExportMgr;
    PrintController *mPrintController;
    Thumbnailer *mThumbnailer;
    IPArchiveSearcher *mIPSearch;
    struct MessageReceiver mAlbumMessageReceiver;
    id mMinThumbSize;
    id mMaxThumbSize;
    struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> *mExternallyEditedImages;
    int mEditButtonState;
    float mPreviousContrastValue;
    NSString *mExternalEditor;
    BOOL mExternalEditorIsRunning;
    id mRepublishDialog;
    id mRepublishMatrix;
    NSMutableArray *mBookDisplayObjects;
    AuxVideoController *mSlideshowAuxVideoController;
    BOOL mCurrentAlbumHasImage;
    BOOL mCurrentAlbumHasMovie;
    BOOL mCurrentAlbumImageSelected;
    BOOL mCurrentAlbumVisibleImageSelected;
    BOOL mCurrentAlbumMovieSelected;
    BOOL mCurrentAlbumVisibleMovieSelected;
    BOOL mCurrentAlbumHasUserSelection;
    BOOL mCurrentAlbumIsMountedAlbum;
    BOOL mCurrentSelectionHasReadOnlyItems;
    BOOL mLastArchiveWasInEvent;
    NSSpeechRecognizer *mSpeechRecognizer;
    Album *mProgressChangedAlbum;
}

+ (void)initialize;
+ (void)cleanUpStatics;
+ (id)getSuggestedBookName:(id)fp8;
+ (id)getSuggestedCalendarName:(id)fp8;
+ (id)getSuggestedCardName:(id)fp8;
+ (id)getSuggestedCutSheetName:(id)fp8;
- (id)isMainWindowDetailWindow;
- (id)photoViewerForDetailWindowIfMain;
- (id)photoViewerForDetailWindow;
- (id)init;
- (BOOL)drawRemoteSlideshowInPixelBuffer:(struct __CVBuffer *)fp8;
- (void)setupSongForRemote:(struct MovieType **)fp8;
- (struct MovieType **)currentSlideshowSong;
- (void)playSlideshowSong;
- (struct _NSRect)window:(id)fp8 willPositionSheet:(id)fp12 usingRect:(struct _NSRect)fp16;
- (void)_dpapItemDataUpdateDidEnd:(id)fp8;
- (void)_dpapItemDataUpdateWillBegin:(id)fp8;
- (void)awakeFromNib;
- (void)prepareForRelease;
- (void)dealloc;
- (id)currentDisplay;
- (void)_preheat:(id)fp8;
- (void)preheat;
- (void)activate;
- (void)deactivate;
- (BOOL)isActive;
- (int)_infoSplitViewPosition;
- (float)splitView:(id)fp8 constrainSplitPosition:(float)fp12 ofSubviewAt:(int)fp16;
- (void)loadSplitViewPositions;
- (void)_saveSplitViewPositions;
- (void)_loadPreferences:(id)fp8;
- (void)_configureNewAlbumButton;
- (void)_configureFullScreenButton;
- (void)_modifiersChanged:(id)fp8;
- (void)_hideElement:(id)fp8;
- (void)_showElement:(id)fp8;
- (id)document;
- (id)db;
- (id)currentAlbum;
- (id)currentAlbumHonoringViewAndWindow;
- (id)realCurrentAlbum;
- (struct IPAlbumList *)selectedAlbums;
- (id)albumView;
- (id)albumViewController;
- (id)albumMgr;
- (id)infoController;
- (id)ipArchiveSearcher;
- (id)searchField;
- (id)searchFieldSpinner;
- (id)keywordController;
- (id)burnController;
- (id)thumbnailer;
- (struct vector<ExternallyEditedPhoto, std::allocator<ExternallyEditedPhoto>> *)externallyEditedImages;
- (void)recordExternallyEditedImage:(struct IPPhotoInfo *)fp8 time:(double)fp12;
- (BOOL)isExternallyEditedImage:(struct IPPhotoInfo *)fp8;
- (void)updateExternallyEditedImages;
- (void)markExternallyEditedImagesModifiedTime;
- (double)lastModifiedTimeForImageFile:(struct IPPhotoInfo *)fp8;
- (struct IPSelectionList *)selection;
- (struct IPPhotoList *)volatileImages;
- (void)setSelection:(struct IPSelectionList *)fp8;
- (void)selectionChanged;
- (void)makeCurrentDisplayFirstResponder;
- (void)_calculateValidImageOperations;
- (BOOL)photoListHasMovies:(struct IPPhotoList *)fp8;
- (void)updateStatus;
- (void)configureCutover;
- (void)updateSliderForCurrentDisplay;
- (BOOL)keywordsInspectorAllowed;
- (void)_showOrHideHUDsAsNecessary;
- (void)_showOrHideHiddenPhotosAsNecessary;
- (id)displayView;
- (id)eventViewController;
- (id)peopleViewController;
- (id)placesViewController;
- (id)placesMapViewController;
- (id)organizeView;
- (id)importDisplay;
- (id)selectiveImportController;
- (id)editController;
- (id)bookController;
- (id)photoViewer;
- (id)eventView;
- (id)peopleView;
- (id)placesView;
- (id)placesMapView;
- (void)switchToSlideshowView;
- (void)switchImportToAdvancedView:(id)fp8;
- (void)switchImportToImportView:(id)fp8;
- (void)switchToBookView;
- (void)_showMissingAllThemesDialog;
- (void)_showCurrentAlbumIsSpecialDialog;
- (void)_showMissingThemeDialog;
- (void)_selectThemeCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_ensureLoadedComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)switchToEditView;
- (void)switchToEditViewInFullScreen:(BOOL)fp8;
- (void)switchToOrganizeView;
- (void)switchToEventView;
- (void)switchToPeopleView;
- (void)switchToPlacesView;
- (BOOL)isInPlacesMode;
- (void)setMapViewCoordinates:(struct _NSRect)fp8;
- (void)showPlacesMapViewForCoordinates:(struct _NSRect)fp8;
- (void)switchToPlacesMapViewWithPhotos:(struct IPPhotoList *)fp8;
- (void)switchToEventViewForCurrentDetail;
- (void)switchToPeopleViewForCurrentDetail;
- (void)switchToPlacesViewForCurrentDetail;
- (void)switchToPlacesMapViewForCurrentDetail;
- (void)returnToEvents;
- (void)returnToPeople;
- (void)returnToPlaces;
- (void)focusOnEventView:(BOOL)fp8;
- (void)focusOnPeopleView:(BOOL)fp8;
- (void)focusOnPlacesView:(BOOL)fp8;
- (void)focusOnPlacesMapView:(BOOL)fp8;
- (void)switchToDetailView;
- (void)switchToPeopleDetailView;
- (void)switchToPlacesDetailView;
- (BOOL)inEventView;
- (void)setDisplayView:(id)fp8;
- (BOOL)isInEditMode;
- (BOOL)isSearchingAllowed;
- (BOOL)isKeywordChangingAllowed;
- (BOOL)isSearching;
- (void)clearSearch;
- (id)thumbnailSizer;
- (id)minThumbSizeButton;
- (id)maxThumbSizeButton;
- (void)controlTextDidEndEditing:(id)fp8;
- (id)marimbaController;
- (id)exportManager;
- (void)_slideshowStarting:(id)fp8;
- (void)_slideshowEnded:(id)fp8;
- (id)peopleString:(struct IPSelectionList *)fp8;
- (id)descriptiveTitleStringForPhotos:(struct IPPhotoList *)fp8 andSelection:(struct IPSelectionList *)fp12;
- (id)slideshowForCurrentAlbum;
- (void)playMarimbaAction:(id)fp8;
- (void)find:(id)fp8;
- (id)addUniqueArray:(id)fp8 toArray:(id)fp12;
- (void)CreateNewAlbum:(id)fp8 fromSelection:(unsigned char)fp12;
- (id)eventBasedProductNameUsingFormat:(id)fp8;
- (id)getSuggestedSlideshowName:(id)fp8;
- (id)CreateBookFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 bookName:(id)fp16;
- (id)CreateBookFromCurrentSelection:(id)fp8 bookName:(id)fp12;
- (id)CreateCardFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 cardName:(id)fp16;
- (id)CreateCutSheetFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 name:(id)fp16;
- (id)CreateThemedSlideshowFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 name:(id)fp16;
- (id)CreateCalendarFromSelection:(struct IPPhotoList *)fp8 forAlbum:(id)fp12 calendarName:(id)fp16;
- (void)makeNewBook:(id)fp8;
- (void)makeNewCalendar:(id)fp8;
- (void)makeNewCard:(id)fp8;
- (void)makeNewCutSheet:(id)fp8;
- (void)makeNewThemedSlideshow:(id)fp8;
- (void)makeNewPrintProject:(id)fp8;
- (id)smartAlbumInfo;
- (void)_makeNewBook:(id)fp8;
- (void)_makeNewCalendar:(id)fp8;
- (void)_getNewCalendarSettings:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCard:(id)fp8;
- (void)_makeNewCutSheet:(id)fp8;
- (void)_makeNewThemedSlideshow:(id)fp8;
- (void)_makeNewBookComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCutSheetComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_themeUpgradeCompletion:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_makeNewBookWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_makeNewCalendarWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCardWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewCutSheetWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_makeNewThemedSlideshowWithFlow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)CreateSlideshowFromCurrentSelection:(id)fp8 slideshowName:(id)fp12;
- (void)CreateSlideshow:(id)fp8 useSelection:(BOOL)fp12 slideshowName:(id)fp16;
- (void)makeNewSlideShow:(id)fp8;
- (id)GetSuggestedAlbumName:(id)fp8;
- (id)GetSuggestedObjectName:(unsigned long)fp8;
- (void)UpdateNewObjectPanelName:(struct CreateNewObjectData *)fp8 forceUpdate:(unsigned char)fp12;
- (void)NewObjectPanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)ChangeNewObjectPopup:(id)fp8;
- (void)HitNewObjectPanelOK:(id)fp8;
- (void)HitNewObjectPanelCancel:(id)fp8;
- (void)AskUserForNewObject:(unsigned char)fp8;
- (void)addSmartAlbum:(id)fp8;
- (void)addAlbum:(id)fp8;
- (void)subscribeToAlbum:(id)fp8;
- (void)subscribeWithConfirmationToAlbumWithURL:(id)fp8;
- (void)subscribePanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)subscribeConfirmPanelCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)subscribeToAlbumWithURL:(id)fp8;
- (void)duplicateImages:(id)fp8;
- (void)duplicateAlbums:(id)fp8;
- (id)doDuplicateAlbum:(id)fp8 select:(BOOL)fp12;
- (void)removeAlbum:(id)fp8;
- (void)addFolder:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (void)toggleToolbar:(id)fp8;
- (id)makeNewAlbumForAppleScript:(id)fp8;
- (void)emptyTrashForAppleScript;
- (id)keywordsForAppleScript;
- (void)assignKeywordForAppleScript:(id)fp8;
- (void)enhanceForAppleScript;
- (void)selectAllForAppleScript:(id)fp8 in:(id)fp12;
- (unsigned int)aeView;
- (void)setAeView:(unsigned int)fp8;
- (void)selectAlbum:(id)fp8;
- (id)_sendToIDVDDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (BOOL)_sendToIDVDHandler:(id)fp8;
- (BOOL)_sendSlideshowAlbumToiDVD:(id)fp8 progress:(id)fp12;
- (BOOL)_sendBookAlbumToiDVD:(id)fp8 progress:(id)fp12;
- (id)_sendSlideshowToiDVDDuring:(id)fp8 path:(id)fp12 script:(id)fp16;
- (void)sendToiDVD:(id)fp8;
- (id)_sendToBladeDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (void)sendToBlade:(id)fp8;
- (id)_sendToBladeBlogDuring:(id)fp8 dictionary:(id)fp12 script:(id)fp16 progress:(id)fp20;
- (void)sendToBladeBlog:(id)fp8;
- (id)_showMailDuring:(id)fp8 arguments:(id)fp12;
- (BOOL)_showMailHandler:(id)fp8;
- (void)showMail:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (void)showImageCapture:(id)fp8;
- (void)showInToolbar:(id)fp8;
- (void)playCurrentSlideshowFromApplescript:(BOOL)fp8 displayIndex:(int)fp12 iChat:(BOOL)fp16;
- (BOOL)slideshowIsPlaying;
- (void)pauseCurrentSlideshow;
- (void)playCurrentSlideshow;
- (void)nextSlideCurrentSlideshow;
- (void)previousSlideCurrentSlideshow;
- (void)endCurrentSlideshow;
- (void)showSlides:(id)fp8 applescriptMode:(int)fp12 displayIndex:(int)fp16;
- (void)_currentAlbumWillSwitch:(id)fp8;
- (void)_currentAlbumDidSwitch:(id)fp8;
- (void)_albumProgressMsg:(id)fp8;
- (void)_handleContentsChanged:(id)fp8;
- (void)_albumChangingProgress:(id)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadImportNib:(id)fp8;
- (void)beginImport:(id)fp8;
- (void)endImport:(id)fp8;
- (void)notifyNewDevice:(id)fp8;
- (BOOL)archiveAlbumIsCurrent;
- (BOOL)currentAlbumIsSpecial;
- (BOOL)validateTrashMenuItem:(id)fp8;
- (void)selectedAlbumsHasSlideshows:(char *)fp8 hasBooks:(char *)fp12;
- (void)libraryAsAllPhotos:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)toggleGridLayout:(id)fp8;
- (BOOL)gridLayout;
- (void)setGridLayout:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowKeywords:(id)fp8;
- (BOOL)showKeywords;
- (void)setShowKeywords:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowCaptions:(id)fp8;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowFileNames:(id)fp8;
- (BOOL)showFileNames;
- (void)setShowFileNames:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowFilmRolls:(id)fp8;
- (BOOL)showFilmRolls;
- (void)setShowFilmRolls:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowDateRolls:(id)fp8;
- (void)toggleShowHiddenPhotos:(id)fp8;
- (BOOL)showHiddenPhotos;
- (void)sourceListBounceForHiddenVisibility:(id)fp8;
- (void)setShowHiddenPhotos:(BOOL)fp8 rebuild:(BOOL)fp12;
- (BOOL)showDateRolls;
- (void)setShowDateRolls:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowRankings:(id)fp8;
- (BOOL)showRankings;
- (void)setShowRanking:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)toggleShowInContext:(id)fp8;
- (BOOL)showInContext;
- (void)setShowInContext:(BOOL)fp8;
- (void)batchChange:(id)fp8;
- (void)batchEffectOnCurrentSelection:(int)fp8;
- (int)sortDirection;
- (void)setSortDirection:(int)fp8;
- (void)sortDirectionAction:(id)fp8;
- (void)sortEvents:(id)fp8;
- (void)sortBy:(id)fp8;
- (void)sortArchiveBy:(int)fp8;
- (BOOL)isDPAPAlbumSelection;
- (void)configureControlsToActive:(BOOL)fp8;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)addSelectedPhotoToShelf:(id)fp8;
- (void)removeSelectedPhotoFromShelf:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)_undoRedoShowHideFlaggedPhotos:(id)fp8 undoMgr:(id)fp12;
- (void)hideFlaggedPhotos:(id)fp8;
- (void)showFlaggedPhotos:(id)fp8;
- (void)_undoRedoMoveFlaggedPhotosToTrash:(id)fp8 undoMgr:(id)fp12;
- (void)_moveFlaggedPhotosToTrash:(id)fp8;
- (void)_moveFlaggedPhotosToTrashConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)moveFlaggedPhotosToTrash:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)importFiles:(id)fp8;
- (void)importFromCurrentSource:(id)fp8;
- (void)ejectAction:(id)fp8;
- (void)altEjectAction:(id)fp8;
- (void)showBurnPanel:(id)fp8;
- (void)showExporter:(id)fp8;
- (void)sortAlbums:(id)fp8;
- (void)editSmartAlbum:(id)fp8;
- (void)showBackups:(id)fp8;
- (void)restoreFullBackupFromSnapshotURL:(id)fp8;
- (void)_timeMachineRestoreSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)showInspector:(id)fp8;
- (void)showOtherInspector:(id)fp8;
- (void)showUserPlaces:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (id)_pathForRevealInFinder;
- (id)_pathForRevealOriginalInFinder;
- (id)_pathForRevealInFinder:(struct IPPhotoInfo *)fp8;
- (id)_pathForRevealOriginalInFinder:(struct IPPhotoInfo *)fp8;
- (void)_selectInFinder:(id)fp8;
- (void)revealInFinder:(id)fp8;
- (void)revealOriginalInFinder:(id)fp8;
- (void)showKeywords:(id)fp8;
- (void)searchForText:(id)fp8;
- (void)rebuildDisplay;
- (void)resetEdit;
- (void)commitImageEdits;
- (void)finishBackgroundRenderingWork;
- (void)tabToCurrentView;
- (id)stateDictionary;
- (id)resetState:(id)fp8;
- (void)clearUndoStack;
- (void)_startLiveResize:(id)fp8;
- (void)_endLiveResize:(id)fp8;
- (void)resizeThumbnails:(id)fp8;
- (void)setMaxThumbSize:(id)fp8;
- (void)setMinThumbSize:(id)fp8;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)isTrackingResize;
- (void)_undoRedoCreateEmptyRollWithKey:(unsigned long)fp8 undoManager:(id)fp12;
- (void)_undoRedoCreateRollFromPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 addedKeys:(id)fp20 removedKeys:(id)fp24 undoManager:(id)fp28;
- (void)_createEventWarningSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_createEventFlaggedWarningSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)createRollFromFlaggedPhotos:(id)fp8;
- (void)createRollFromSelection:(id)fp8;
- (void)createEmptyRoll:(id)fp8;
- (void)createAlbumFromSelection:(id)fp8;
- (void)rotateImage:(id)fp8;
- (void)selectPageType:(id)fp8;
- (void)selectPageDesign:(id)fp8;
- (void)_establishEditPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)_establishEditPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 fullscreen:(BOOL)fp16;
- (void)firstImage:(id)fp8;
- (void)lastImage:(id)fp8;
- (void)nextImage:(id)fp8;
- (void)previousImage:(id)fp8;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (void)_performReprocessRAW;
- (void)_performRevert;
- (void)performRevert;
- (void)reprocessRAW:(id)fp8;
- (void)revertImage:(id)fp8;
- (void)_revertImageSheetCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)editImageUsingPreference:(id)fp8;
- (void)showPhotos:(id)fp8;
- (void)editImage:(id)fp8;
- (void)showMovie:(struct IPPhotoInfo *)fp8;
- (void)exitingReview:(id)fp8;
- (void)editImageFullScreen:(id)fp8;
- (BOOL)inFullScreen;
- (void)exitingFullScreen;
- (id)getExternalEditorPath;
- (void)editImageInExternalEditor:(id)fp8;
- (void)_invokeExternalEditor:(struct IPPhotoInfo *)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)_undoMoveSelectionToTrash:(id)fp8;
- (void)_doMoveSelectionToTrash:(id)fp8;
- (BOOL)deleteSelectedImages:(id)fp8;
- (void)moveToTrash:(id)fp8;
- (void)removeFromTrash:(id)fp8;
- (void)emptyTrash:(id)fp8;
- (void)_emptyTrashSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)DeletePhotosFromTrash:(struct IPPhotoList *)fp8;
- (void)_reallyEmptyTrash;
- (void)_redoSetRankingForSelection:(id)fp8 originalRankings:(id)fp12 newRanking:(short)fp16;
- (void)_undoSetRankingForSelection:(id)fp8 originalRankings:(id)fp12 newRanking:(short)fp16;
- (void)applyRankingToSelection:(id)fp8;
- (void)setRankForSelection:(int)fp8;
- (void)printDocument:(id)fp8;
- (id)_netServicesDictionaryForBook:(id)fp8 path:(id)fp12 generatorTarget:(id)fp16;
- (id)_netServicesDictionaryForSelectionWithRequirements:(id)fp8;
- (id)_netServicesPhotoRecord:(struct IPPhotoInfo *)fp8 withRequirements:(id)fp12;
- (void)setAlbumViewHidden:(BOOL)fp8;
- (BOOL)isAlbumViewHidden;
- (unsigned long long)_preflightPublishSpaceEstimated;
- (unsigned long long)_preflightPublishSpaceAvailable;
- (id)publishNetAlbums:(id)fp8 toService:(id)fp12 embedded:(id)fp16;
- (void)publishNetAlbums:(id)fp8;
- (void)publishFBNetAlbums:(id)fp8;
- (void)publishFlickrNetAlbums:(id)fp8;
- (void)publishSmugMugNetAlbums:(id)fp8;
- (void)publishSettings:(id)fp8;
- (void)publishAnnounce:(id)fp8;
- (void)orderPrints:(id)fp8;
- (void)publishNetSlides:(id)fp8;
- (void)invokeNetService:(id)fp8;
- (void)assureDPAPHiResImages:(struct IPPhotoList *)fp8;
- (void)invokeNetServiceWithTag:(int)fp8;
- (void)purchaseBook:(id)fp8 path:(id)fp12 generatorTarget:(id)fp16;
- (void)_doCommandRemoveImages:(id)fp8;
- (void)_undoCommandRemoveImages:(id)fp8;
- (void)_doCommandRotateImagesByDegrees:(float)fp8 withState:(id)fp12 withImages:(id)fp16;
- (void)setInfoViewHeight:(float)fp8 withAnimation:(BOOL)fp12 snapIncrement:(float)fp16;
- (void)_splitViewDragged:(id)fp8;
- (void)toggleReviewMode:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)windowDidBecomeMain:(id)fp8;
- (void)windowDidResignMain:(id)fp8;
- (id)windowWillReturnUndoManager:(id)fp8;
- (struct _NSSize)windowWillResize:(id)fp8 toSize:(struct _NSSize)fp12;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)warnSteveUndo;
- (void)warnSteve;
- (void)tellSteveWarmupIsComplete;
- (struct _NSPoint)locationForBadgeWithSize:(struct _NSSize)fp8 andPadding:(struct _NSSize)fp16;
- (struct _NSRect)keywordActionIndicatorLocation;
- (void)speechRecognizer:(id)fp8 didRecognizeCommand:(id)fp12;

@end

@interface OurBoxView : NSBox
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface ArchiveController (NSSplitViewDelegate)
- (void)_splitView:(id)fp8 resizeSubviewsStretchingFirstWithOldSize:(struct _NSSize)fp12;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingLastWithOldSize:(struct _NSSize)fp12;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (BOOL)splitViewDoubleClicked:(id)fp8;
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (float)splitView:(id)fp8 constrainMaxCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
@end

@interface ArchiveController (DesktopScreenEffects)
- (void)_setDesktopPath:(id)fp8 isFolder:(BOOL)fp12;
- (void)_setScreenSaverPreferencesForPath:(id)fp8;
- (void)_createLinksFromSelectionInDirectory:(id)fp8 lastName:(id)fp12;
- (void)showDesktop:(id)fp8;
@end

@interface IPViewController : NSObject <IPMagnifierControllerDelegate>
{
    BOOL _preheatDone;
    BOOL _setupDone;
    BOOL _loadNibDone;
    ArchiveController *mArchiveController;
    NSView<IPViewControllerMainViewProtocol> *mMainView;
    NSView *mParentView;
    NSView *mPlacardParentView;
    IPToolbarView *mToolbarView;
    NSView *mPlacardView;
    NSView *mParentSuperview;
    OurSplitView *mPlacardSplitView;
    unsigned int mPlacardAutoresizingMask;
    int mPlacardPosition;
    BOOL mPlacardIsPinning;
    float mPlacardMinSize;
    float mPlacardMaxSize;
    BOOL mInLiveResize;
    BOOL mInstallingPlacard;
    BOOL mMainViewInstalled;
    struct _NSRect mPlacardStartRect;
    struct _NSRect mPlacardTargetRect;
    struct _NSRect mParentStartRect;
    struct _NSRect mParentTargetRect;
    NSDate *mPlacardAnimationStartDate;
    double mPlacardAnimationTotalTime;
    NSTimer *mPlacardAnimationTimer;
    IPMagnifierController *mMagnifyController;
    IPToolbarItem *mPeopleInMagnify;
}

- (void)awakeFromNib;
- (id)init;
- (void)dealloc;
- (void)setController:(id)fp8;
- (id)controller;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (id)mainView;
- (id)window;
- (id)parentView;
- (id)placardParentView;
- (id)placardView;
- (float)placardMinSize;
- (void)setPlacardMinSize:(float)fp8;
- (float)placardMaxSize;
- (void)setPlacardMaxSize:(float)fp8;
- (BOOL)_placardIsHorizontal;
- (id)document;
- (void)_preheat;
- (void)preheat;
- (void)_loadNib;
- (void)loadNib;
- (void)_setup;
- (void)setup;
- (void)currentAlbumWillSwitchFromOldAlbum:(id)fp8 toNewAlbum:(id)fp12;
- (void)currentAlbumDidSwitchFromOldAlbum:(id)fp8 toNewAlbum:(id)fp12;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)preheatDone;
- (BOOL)setupDone;
- (BOOL)loadNibDone;
- (BOOL)validateMenuItem:(id)fp8;
- (id)updateStatus;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (float)_placardTargetSize;
- (double)_placardAnimationResizeTimeFrom:(float)fp8 to:(float)fp12;
- (void)_stopPlacardAnimation;
- (void)_placardAnimationTimerCB:(id)fp8;
- (id)_makeSplitViewForParent:(id)fp8;
- (void)_installPlacardWithAnimation:(BOOL)fp8;
- (void)_removePlacardWithAnimation:(BOOL)fp8;
- (void)installPlacardView:(id)fp8 position:(int)fp12 animate:(BOOL)fp16;
- (void)removePlacardView;
- (void)removePlacardViewWithAnimation:(BOOL)fp8;
- (BOOL)showingPlacardView;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8 fromFrames:(id)fp12 backgroundImage:(id)fp16 backgroundColor:(id)fp20;
- (struct IPPhotoInfo *)currentPhoto;
- (void)updateForSelection:(struct IPPhotoList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)selectAll;
- (void)selectNone;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeCutover;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)initToolbar;
- (void)freeToolbar;
- (id)toolbar;
- (id)transitionControllerSlideThumbDelegate;
- (id)magnifyController;
- (void)setMagnifyController:(id)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (BOOL)shelfContainsPhoto:(struct IPPhotoInfo *)fp8;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearShelf:(id)fp8;
- (struct _NSRect)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)passEventToSourceList:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)installMagnifyToolbarItems;
- (void)uninstallMagnifyToolbarItems;
- (void)showMagnifierForPhotoAtIndex:(int)fp8 inList:(struct IPPhotoList *)fp12 startingFrom:(struct _NSRect)fp16;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)dismissMagnifier;
- (void)deleteCurrentPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (BOOL)supportsFindCommand;
- (struct _NSRect)keywordActionIndicatorLocation;
- (void)layoutViews;
- (id)undoManager;

@end

@interface IPViewController (NSSplitViewDelegate)
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (float)splitView:(id)fp8 constrainMaxCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingFirstWithOldSize:(struct _NSSize)fp12;
- (void)_splitView:(id)fp8 resizeSubviewsStretchingLastWithOldSize:(struct _NSSize)fp12;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (void)splitViewDidResizeSubviews:(id)fp8;
- (BOOL)splitViewDoubleClicked:(id)fp8;
@end

@interface ArchiveDocController : NSDocumentController
{
    NSMutableDictionary *mDiskIDs;
    NSMutableDictionary *mMountedDocuments;
    BOOL mAttemptedOpenUntiledDoc;
    BOOL _ignoreMissingOnce;
}

- (id)init;
- (void)dealloc;
- (BOOL)attemptedOpenUntitledDoc;
- (BOOL)presentError:(id)fp8;
- (id)openUntitledDocumentOfType:(id)fp8 display:(BOOL)fp12;
- (void)newDocument:(id)fp8;
- (id)openDocumentWithContentsOfFile:(id)fp8 display:(BOOL)fp12;
- (void)openDocument:(id)fp8;
- (void)mountDocumentAtPath:(id)fp8;
- (void)mountDocument:(id)fp8;
- (id)_doNewLibraryPanel;
- (id)_doOpenLibraryPanel;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (void)_cdMounted:(id)fp8;
- (void)_cdEjected:(id)fp8;
- (void)_prepareForOpeningOfOpenRecentMenu:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)ignoreMissingOnce;
- (void)setIgnoreMissingOnce:(BOOL)fp8;

@end

@interface ArchiveDocument : DBDocument
{
    ArchiveController *mController;
    NSPanel *mMailPanel;
    id mMailPopup;
    id mMailLocationPreference;
    NSTextField *mMailSizeAndCount;
    id mMailIncludeTitles;
    id mMailIncludeComments;
    BOOL mInitialized;
    BOOL mNotifiedWillTerminate;
    TempImageManager *mMailFileManager;
    ArchiveWinController *mWindowController;
}

+ (id)defaultRootPath;
+ (void)setDefaultRootPath:(id)fp8;
- (void)dealloc;
- (void)close;
- (void)addRootToHistory:(id)fp8;
- (void)setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (void)start;
- (void)startThreadManager;
- (void)_verifyRoot:(id)fp8;
- (void)mailCancel:(id)fp8;
- (void)mailOK:(id)fp8;
- (void)mailPopupChange:(id)fp8;
- (BOOL)dialogForEmail;
- (BOOL)prepareImagesForEmail;
- (int)numValidMailFiles;
- (id)pathForEmail:(int)fp8;
- (id)captionForEmail:(struct IPPhotoInfo *)fp8;
- (id)commentsForEmail:(struct IPPhotoInfo *)fp8;
- (id)recipientForEmail;
- (id)addressForEmail;
- (id)controller;
- (void)awakeFromNib;
- (void)showWindows;
- (void)fitWindowToScreen;
- (void)makeWindowControllers;
- (id)displayName;
- (id)fileName;
- (id)_doCopyLibraryPanel;
- (BOOL)validateMenuItem:(id)fp8;
- (id)windowController;
- (void)windowControllerDidLoadNib:(id)fp8;
- (void)initialize;
- (void)startLoadingProgress;
- (void)endLoadingProgress;
- (void)setPrintInfo:(id)fp8;
- (void)ourRunPageLayout:(id)fp8;
- (void)_pageLayoutDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)selectArchiveAlbum;

@end

@interface ArchiveWinController : NSWindowController
{
}

- (struct _NSRect)_centeredRect:(struct _NSRect)fp8 inRect:(struct _NSRect)fp24;
- (void)showCenteredWindow:(id)fp8;
- (id)windowTitleForDocumentDisplayName:(id)fp8;
- (void)showWindow:(id)fp8;

@end

@interface IPArchiveSearcher : NSObject
{
    ArchiveController *_archiveController;
    FilterAlbum *_filterAlbum;
    int _searchState;
    float _searchLimit;
    BOOL _locationInRange;
    LocationController *mLocationController;
}

- (id)initWithArchiveController:(id)fp8;
- (void)clearSearch;
- (int)searchState;
- (void)searchChanged:(id)fp8;
- (void)searchCanceled:(id)fp8;
- (void)cancelFiltering:(id)fp8;
- (void)searchForObject:(id)fp8 inField:(int)fp12;
- (id)filterAlbum;
- (void)_handleProximitySearch:(id)fp8;
- (void)_createProximityFilterAlbumForResults:(id)fp8;
- (void)dealloc;

@end

@interface OurSplitView : NSSplitView
{
    BOOL mDelegateRespondsToSplitViewDoubleClicked;
    BOOL mDelegateRespondsToSplitViewWillTrackOrResize;
    BOOL mDelegateRespondsToSplitViewDidTrackOrResize;
    float mDividerThickness;
    struct _NSRect mDividerRect;
    NSColor *mFillColor;
    int _ourSplitStyle;
    NSImage *_vDimple;
    NSImage *_vBackground;
    NSImage *_hDimple;
    NSImage *_hBackground;
    float _initialLength;
    float _targetLength;
    float _deltaLength;
    NSDate *_startAnimationDate;
    double _totalTime;
    NSTimer *_animationTimer;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)_loadImages;
- (void)_unloadImages;
- (void)_ensureImages;
- (int)ourSplitStyle;
- (void)setOurSplitViewStyle:(int)fp8;
- (float)dividerThickness;
- (float)dividerThicknessForLength:(float)fp8;
- (void)setDividerThickness:(float)fp8;
- (float)normalDividerThickness;
- (void)setNormalDividerThickness;
- (void)setFillColor:(id)fp8;
- (void)drawDividerInRect:(struct _NSRect)fp8;

@end

@interface OurSplitView (Animation)
- (double)animationResizeTime_oldWay:(float)fp8;
- (double)animationResizeTime:(float)fp8;
- (void)_stopAnimation;
- (void)_animationTimerCallback:(id)fp8;
- (void)animateToLength:(float)fp8;
- (void)setDelegate:(id)fp8;
- (void)mouseDown:(id)fp8;
- (float)firstSubviewLength;
- (void)setFirstSubviewLength:(float)fp8;
- (void)dealloc;
@end

@interface OurTextField : NSTextField
{
    id mArchiveController;
}

- (id)initWithCoder:(id)fp8;
- (BOOL)_shouldDrawEtched;
- (void)setEnabled:(BOOL)fp8;
- (void)setEditable:(BOOL)fp8;
- (void)setEtched:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;

@end

@interface ServiceEntry : NSObject
{
    NSDictionary *serviceDictionary;
}

- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (id)executablePath;
- (id)bundlePath;
- (id)portName;
- (id)sendTypes;
- (id)userData;
- (id)message;
- (id)menuItem;
- (id)defaultMenuItem;

@end

@interface ServicesInfo : NSObject
{
}

- (id)serviceEntriesForPboardType:(id)fp8;

@end

@interface AttributeMgr : NSObject <NSCoding, NSCopying>
{
    NSMutableDictionary *mAttributes;
    BOOL mIsModified;
    NSDate *mModificationDate;
    NSLock *mAttrLock;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (BOOL)hasAttribute:(id)fp8;
- (id)attribute:(id)fp8;
- (id)allAttributes;
- (void)setAttribute:(id)fp8 object:(id)fp12;
- (void)removeAttribute:(id)fp8;
- (void)removeAllAttributes;
- (unsigned int)count;
- (BOOL)isModified;
- (void)setIsModified:(BOOL)fp8;
- (id)modificationDate;
- (void)setAttributes:(id)fp8;
- (void)setModificationDate:(id)fp8;

@end

@interface BatchChange : NSObject
{
    id mBatchChangePanel;
    NSPopUpButton *mFieldPopup;
    NSPopUpButton *mValuePopup;
    id mToText;
    NSControl *mOKButton;
    NSPanel *mChangeDatePanel;
    NSTextField *mInstructionText;
    NSDatePicker *mOriginalDate;
    NSDatePicker *mAdjustedDate;
    NSButton *mAdjustButton;
    NSBox *mBoxEnclosingImageView;
    NSImageView *mImageView;
    NSButton *mEmbedInEXIF;
    NSTextField *mExplanationText;
    int mPhotoCount;
    struct _NSSize mOriginalEnclosingSize;
    BOOL mValuePopupHidden;
    NSView *mValuePopupSuperview;
    struct _NSRect mValuePopupFrame;
    int mChangeType;
    NSView *mDetailView;
    BOOL mDetailInstalled;
    NSView *mInstalledView;
    TitleDateTime *mDateTimeSettingsView;
    SetDateOptions *mDateTimeView;
    SetTitleText *mTitleTextView;
    SetCommentText *mCommentTextView;
    SetRating *mRatingView;
    SetDateIncrementOptions *mDateTimeIncrementView;
    NSMutableArray *mBatchChangeNibObjects;
}

- (void)awakeFromNib;
- (void)_loadNibIfNeeded;
- (void)runModalInWindow:(id)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)_setValueHidden:(BOOL)fp8;
- (void)changeType:(id)fp8;
- (void)_selectType:(int)fp8;
- (void)_switchDetailView:(id)fp8;
- (void)_doUndo:(id)fp8;
- (void)_doRedo:(id)fp8;
- (void)_undoChangeType:(int)fp8 document:(id)fp12 selection:(id)fp16 originalValues:(id)fp20 newValues:(id)fp24 userInfo:(id)fp28;
- (void)_redoChangeType:(int)fp8 document:(id)fp12 selection:(id)fp16 originalValues:(id)fp20 newValues:(id)fp24 userInfo:(id)fp28;
- (void)batchChange:(int)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;
- (void)dealloc;
- (void)_changeDateDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)adjustedDateChanged:(id)fp8;
- (void)runModalDateChangeInWindow:(id)fp8 document:(id)fp12 selection:(struct IPPhotoList *)fp16;

@end

@interface SetCommentText : NSView
{
    NSTextView *mCommentText;
    NSButton *mAppendSwitch;
}

- (id)commentText;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)appendSwitchChanged:(id)fp8;
- (id)text;
- (BOOL)append;

@end

@interface SetDateOptions : NSView
{
    NSDatePicker *mDatePicker;
    NSButton *mAddTimeSwitch;
    NSTextField *mAddTimeValue;
    NSPopUpButton *mAddTimeQuanta;
    NSTextField *mAddTimePrompt;
    NSButton *mEmbedSwitch;
    BOOL mCanAddTime;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setCanAddTime:(BOOL)fp8;
- (void)addTimeSwitchChanged:(id)fp8;
- (void)addTimeValueChanged:(id)fp8;
- (id)date;
- (void)_selectQuanta:(int)fp8;
- (BOOL)embed;
- (BOOL)addTime;
- (int)addTimeValue;
- (int)addTimeQuanta;

@end

@interface SetRating : NSView
{
    RankingTextField *mRatingText;
}

- (void)loadFromPrefs;
- (void)saveToPrefs;
- (int)rating;

@end

@interface SetTitleText : NSView
{
    NSTextField *mTitleText;
    NSButton *mAddNumberSwitch;
    BOOL mCanAddNumber;
}

- (id)titleText;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setCanAddNumber:(BOOL)fp8;
- (void)addNumberSwitchChanged:(id)fp8;
- (id)text;
- (BOOL)addNumber;

@end

@interface TitleDateTime : NSView
{
    NSControl *mOKButton;
    id mDateSwitch;
    id mTimeSwitch;
    id mDateFormatCluster;
    id mDateShortRadio;
    id mDateLongRadio;
    id mDateFullRadio;
    id mTimeFormatCluster;
    id mTime24HourRadio;
    id mTime12HourRadio;
    id mTimeSecondsSwitch;
    id mExampleText;
}

- (void)awakeFromNib;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (void)changeFormat:(id)fp8;
- (id)formattedStringForDate:(id)fp8;
- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)showDateTimePreference:(id)fp8;
- (int)_dateFormatForTag:(int)fp8;
- (int)_tagForDateFormat:(int)fp8;
- (int)_timeFormatForTag:(int)fp8 withSeconds:(BOOL)fp12;
- (int)_tagForTimeFormat:(int)fp8;
- (int)_secondsForTimeFormat:(int)fp8;

@end

@interface DBDocument : NSDocument
{
    IWWindow *mWindow;
    ProgressController *mProgress;
    NSDate *mStartTime;
    BOOL mIsMounted;
    NSRunLoop *mRunLoop;
    NSString *mRoot;
    unsigned int mDBKey;
    unsigned int mTempDBKey;
    AlbumMgr *mAlbumMgr;
    Album *mCurrentAlbum;
    BOOL mIsDPAPDocument;
    ICController *mICController;
    PhotoCDManager *mPhotoCDManager;
    NSMutableArray *mAlbumChangeValidators;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)close;
- (id)runLoop;
- (id)db;
- (id)tempDB;
- (void)setIsMounted:(BOOL)fp8;
- (BOOL)isMounted;
- (id)window;
- (id)currentAlbum;
- (id)executeShellCommand:(id)fp8;
- (void)packageLibrary;
- (id)root;
- (id)albumMgr;
- (BOOL)isDocumentEdited;
- (void)setCurrentAlbum:(id)fp8;
- (void)setCurrentAlbum:(id)fp8 force:(BOOL)fp12;
- (void)_setCurrentAlbum:(id)fp8 force:(BOOL)fp12 notify:(BOOL)fp16;
- (BOOL)validateAlbumChangeFromAlbum:(id)fp8 toAlbum:(id)fp12;
- (void)addAlbumChangeValidator:(id)fp8;
- (void)removeAlbumChangeValidator:(id)fp8;
- (void)_setCurrentAlbumOnLaunch:(id)fp8;
- (id)_doRepairLibraryPanel;
- (void)setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (id)_rootForDPAPDatabase:(id)fp8;
- (id)initWithDPAPDatabase:(id)fp8;
- (void)setNetworkRoot:(id)fp8;
- (void)_setRoot:(id)fp8 rootHasSpecialAlbums:(BOOL)fp12;
- (id)_canTerminate;
- (void)start;
- (void)_makeAlbumMgr;
- (void)startDeviceManagers;
- (BOOL)documentIsBusy;
- (id)startTime;
- (void)startLoadingProgress;
- (void)endLoadingProgress;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (id)documentWithAlbums:(struct IPAlbumList *)fp8 progress:(id)fp12;
- (id)documentWithPhotos:(struct IPPhotoList *)fp8 progress:(id)fp12;
- (id)virtualArchive;
- (BOOL)isDPAP;

@end

@interface DBImportSpec : ImportSpec
{
    struct IPPhotoInfo *mOriginalPhoto;
    int mImportState;
}

+ (id)importSpecWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (id)initWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (void)dealloc;
- (struct IPPhotoInfo *)originalPhoto;
- (void)setOriginalPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)fileIsMounted;
- (int)importState;
- (void)setImportState:(int)fp8;

@end

@interface DBKeyMgr : KeyMgr
{
    ImageDB *mDB;
}

+ (void)initialize;
- (id)initWithDB:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;

@end

@interface ImageDB : NSObject <ThreadManagerTask, ILShareContentsDelegate>
{
    BOOL mWarnTransactions;
    BOOL mShowLoadSaveTimes;
    BOOL mLogPeriodicSaving;
    BOOL mUseNoCacheIO;
    BOOL mFinishingWriteTransaction;
    BOOL mTransactionIsPublish;
    // Error parsing type: ^{hash_map<long unsigned int,IPPhotoInfo*,__gnu_cxx::hash<long unsigned int>,std::equal_to<long unsigned int>,std::allocator<IPPhotoInfo*> >={hashtable<std::pair<const long unsigned int, IPPhotoInfo*>,long unsigned int,__gnu_cxx::hash<long unsigned int>,std::_Select1st<std::pair<const long unsigned int, IPPhotoInfo*> >,std::equal_to<long unsigned int>,std::allocator<IPPhotoInfo*> >="_M_node_allocator"{allocator<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> > >=}"_M_hash"{hash<long unsigned int>=}"_M_equals"{equal_to<long unsigned int>=}"_M_get_key"{_Select1st<std::pair<const long unsigned int, IPPhotoInfo*> >=}"_M_buckets"{vector<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >*,std::allocator<__gnu_cxx::_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >*> >="_M_impl"{_Vector_impl="_M_start"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}"_M_finish"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}"_M_end_of_storage"^^{_Hashtable_node<std::pair<const long unsigned int, IPPhotoInfo*> >}}}"_M_num_elements"I}}, name: mPhotoKeys
    struct SqDB *mSqDB;
    DBDocument *mDocument;
    unsigned int mKey;
    NSString *mRoot;
    int mLoadedVersion;
    BOOL mMoveToSQL;
    ProgressController *mSQLUpgradeProgress;
    struct SqGlobals *mSqGlobals;
    unsigned int mNextTempKey;
    BOOL mLastImportRollKeyChanged;
    BOOL mLastEmptyEventKeyChanged;
    BOOL mIsModified;
    BOOL mQuitWithoutWrite;
    KeywordMgr *mKeywordMgr;
    Thumbnailer *mThumbnailer;
    DirectoryMgr *mDirectoryMgr;
    BOOL mIsTemporary;
    BOOL mWasUpgraded;
    int mRepairOptions;
    struct IPPhotoList *mNeedThumbRegen;
    ThumbnailManager *mThumbnailManager;
    unsigned long mMarkValue;
    BOOL mIsShared;
    short mSharedImagesState;
    struct _opaque_pthread_mutex_t mInstanceLock;
    int mLockCount;
    BOOL mIsWriteTransaction;
    BOOL mGUIThreadWaiting;
    struct set<IPPhotoInfo*, std::less<IPPhotoInfo*>, std::allocator<IPPhotoInfo*>> *mModifiedPhotos;
    struct set<Album*, std::less<Album*>, std::allocator<Album*>> *mRefilteredAlbums;
    struct _opaque_pthread_t *mMainThread;
    struct _opaque_pthread_t *mCurrentTransactionThread;
    struct _opaque_pthread_mutex_t mHighPriorityLock;
    int mHighPriorityCount;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mAlbumsNeedingBackup;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mPhotosNeedingBackup;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mEventsNeedingBackup;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mPlacesNeedingBackup;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mUserPlacesNeedingBackup;
    struct set<Key, std::less<Key>, std::allocator<Key>> *mGpsTracksNeedingBackup;
    struct map<Key, Album*, std::less<Key>, std::allocator<std::pair<const Key, Album*>>> *mAllAlbums;
    struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *mAllRolls;
    struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *mAllStacks;
    NSRunLoop *mRunLoop;
    struct IPPhotoList *mPendingAdd;
    struct IPPhotoList *mPendingRemove;
    double mUpdateStart;
    struct IPRoll *mUpdateRoll;
    BOOL mIsLoading;
    NSMutableArray *mOldPathsToDelete;
    BOOL mIsArchiving;
    int mArchiveNice;
    NSTimer *mArchiveTimer;
    ProgressController *mCopyProgress;
    unsigned long mCopyTotalCount;
    unsigned long mCopyCurrentCount;
    float mLastCopyPercent;
    NSData *mAlbumData;
    NSData *mRollData;
    NSMutableArray *mOldKeywordTable;
    BOOL mDelayLoading;
    ILPhotoShare *mPhotoShare;
    NSDate *mUpgradeStartTime;
    NSDate *mLastUpdateTime;
    double mLastTimeRemaining;
    unsigned long long mTotalUpgradeBytes;
    unsigned long long mCompletedUpgradeBytes;
    struct list<float, std::allocator<float>> *mLastNUpgradedPercent;
    struct list<long long unsigned int, std::allocator<long long unsigned int>> *mLastNUpgradedBytes;
    struct list<NSDate*, std::allocator<NSDate*>> *mLastNUpgradedTime;
    int _integrity;
    BOOL _dbWasUpgraded;
    NSArray *mPostUnarchiveImportPhotos;
    int mPostUnarchiveImportReference;
    NSString *mPostRecoveryImportDir;
    struct IPPhotoList *mUpgradeNewKeyPhotos;
    struct IPPhotoList *mRollPhotoInfos;
    struct KeyRemapArray *mKeyRemapArray;
    BOOL mNeedUpgradeAutoSplit;
    BOOL mEmptyThumbCaches;
    struct MessageSender mMessageSender;
    struct IPPhotoList *mCutList;
    NewFaceDetector *mFaceDetector;
    NSMutableDictionary *mPlaceNameCache;
}

+ (void)initialize;
- (id)init;
- (id)initWithDocument:(id)fp8 isTemporary:(BOOL)fp12;
- (int)loadedVersion;
- (void)dealloc;
- (id)faceDetector;
- (int)peopleSortOrder;
- (int)peopleSortDirection;
- (int)eventSortOrder;
- (int)eventSortDirection;
- (int)eventSortHonorRolls;
- (float)eventLastScrollFloat;
- (long)eventLastScrollLong;
- (float)monthsLastScrollFloat;
- (long)monthsLastScrollLong;
- (void)prepareForRelease;
- (BOOL)isWriteTransactionThread;
- (void)callPerformSelectorOnMainThread:(SEL)fp8 withObjectArgument:(id)fp12 andObject:(id)fp16;
- (void)beginTransaction;
- (void)beginTransaction:(BOOL)fp8;
- (void)beginWriteTransaction;
- (void)setTransactionIsPublish:(BOOL)fp8;
- (BOOL)isTransactionPublish;
- (BOOL)guiThreadWaiting;
- (BOOL)highPriorityThreadWaiting;
- (void)endTransaction;
- (BOOL)isInTransaction;
- (BOOL)isInWriteTransaction;
- (void)requireTransaction;
- (void)requireWriteTransaction;
- (void)requireNoTransaction;
- (void)performSetImageOnMainThread:(id)fp8;
- (void)performEnsureOriginalOnMainThread:(id)fp8;
- (void)photoChangedInTransaction:(struct IPPhotoInfo *)fp8;
- (void)_sendRefilterNotifications:(id)fp8;
- (void)_postGlobalPhotoVisibilityChangedNotification;
- (void)albumRefiltered:(id)fp8;
- (void)addAlbumToDB:(id)fp8;
- (void)removeAlbumFromDB:(id)fp8;
- (void)addRollToDB:(struct IPRoll *)fp8;
- (void)removeRollFromDB:(struct IPRoll *)fp8;
- (void)addStackToDB:(struct IPStack *)fp8;
- (void)removeStackFromDB:(struct IPStack *)fp8;
- (unsigned long)makeEventWithPhotos:(struct IPPhotoList *)fp8 destination:(struct IPRoll *)fp12 deletedRollKeys:(id *)fp16 renameMergeToUnnamed:(BOOL)fp20 undoMgr:(id)fp24;
- (void)ensureAlbumsHaveAllStackMembers:(struct IPStack *)fp8;
- (struct IPStack *)createStackFromListOfPhotos:(struct IPPhotoList *)fp8 forceNewStack:(BOOL)fp12;
- (void)unstackPhotos:(struct IPStack *)fp8;
- (void)removePhotosFromStack:(struct IPPhotoList *)fp8;
- (void)movePhotos:(struct IPPhotoList *)fp8 toStack:(struct IPStack *)fp12 beforePhoto:(struct IPPhotoInfo *)fp16;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (id)document;
- (void)setDocument:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (int)compare:(id)fp8;
- (id)relativePath;
- (id)archivePath;
- (id)tempArchivePath;
- (id)archive5Path;
- (id)oldArchivePath;
- (id)tempPath;
- (id)backupPath;
- (_Bool)layoutInVirtualArchive:(id)fp8;
- (id)archiveRolls;
- (id)archiveStacks;
- (void)unarchiveRolls:(id)fp8;
- (void)unarchiveStacks:(id)fp8;
- (void)loadDPAPPhotos:(id)fp8;
- (BOOL)loadPhotosFromIFFData:(void *)fp8 duringUpgrade:(BOOL)fp12;
- (void)_doUpgradeAutoSplit;
- (void)doUpgradeAutoSplitIfNeeded;
- (void)cleanRollPhotoInfos;
- (BOOL)_verifyUserData:(id)fp8;
- (BOOL)hasPhotocastAlbums;
- (BOOL)photocastNotified;
- (void)setPhotocastNotified:(BOOL)fp8;
- (id)albumData;
- (void)clearCachedAlbumData;
- (id)rollData;
- (void)clearCachedRollData;
- (id)stackData;
- (void)clearCachedStackData;
- (BOOL)isDelayLoading;
- (BOOL)cancelWriteIfRequested;
- (void)saveBeforeTerminate;
- (int)writeToFile:(struct __sFILE *)fp8 nice:(BOOL)fp12;
- (void)addOldPathsToDelete:(id)fp8;
- (BOOL)_addCustomSQLFunctions;
- (void)clearLoadingFlag;
- (void)terminateWithoutWrite;
- (int)readFromFile:(struct __sFILE *)fp8 size:(long)fp12;
- (int)loadFromSqDB;
- (BOOL)dbWasUpgraded;
- (void)_warnUpgradeAndRepairPermissions;
- (BOOL)unarchive;
- (BOOL)_checkLibraryIntegrity;
- (BOOL)_checkForLocalFiles:(id)fp8 checkChildDirs:(BOOL)fp12;
- (struct KeyRemapArray *)keyRemapArray;
- (void)finishRepair;
- (void)finishUpgrade;
- (void)_removeEmptyDirectoriesRecursively:(id)fp8 pathContents:(id)fp12;
- (void)autoImportPhotosIfNecessary;
- (void)_autoImportPhotos:(id)fp8;
- (void)_recoverOrphanImportPhotos:(id)fp8;
- (void)_recoverOrphanPhotos:(id)fp8;
- (void)_recoverOrphanPhotosAfterUpgrade;
- (void)_removeSymbolicLinksInFolder:(id)fp8;
- (void)_removeSymbolicLinksInRoot;
- (void)_removeDirsNamed:(id)fp8;
- (void)_removeDirsNamedRecursively:(id)fp8 atPath:(id)fp12;
- (BOOL)needUpgradeAutoSplit;
- (void)setNeedUpgradeAutoSplit:(BOOL)fp8;
- (void)finishMoveToSQL;
- (BOOL)setRoot:(id)fp8;
- (BOOL)moveToSQL;
- (void)setMoveToSQL:(BOOL)fp8;
- (void)addAlbumsToSqDB;
- (void)empytThumbCachesIfNecessary;
- (id)root;
- (void)_setRoot:(id)fp8;
- (void)setRunLoop:(id)fp8;
- (id)runLoop;
- (id)uid;
- (struct SqDB *)sqDB;
- (unsigned long)nextKeyAndIncrement;
- (unsigned long)nextTempKeyAndIncrement;
- (void)_setNextKey:(unsigned long)fp8;
- (unsigned long)nextRollIDAndIncrement;
- (unsigned long)lastImportRollKey;
- (void)setLastImportRollKey:(unsigned long)fp8;
- (unsigned long)lastEmptyEventKey;
- (void)setLastEmptyEventKey:(unsigned long)fp8;
- (BOOL)latestEventUpdateEnabled;
- (void)setLatestEventUpdateEnabled:(BOOL)fp8;
- (id)getMetaDataForKey:(id)fp8;
- (void)setMetaData:(id)fp8 forKey:(id)fp12;
- (void)removeMetaDataForKey:(id)fp8;
- (id)thumbnailManager;
- (unsigned long)lastAlbumKey;
- (int)lastViewerType;
- (unsigned long)lastDetailKey;
- (struct MessageSender *)messageSender;
- (void)doneWithChanges;
- (void)mark;
- (void)unMark;
- (unsigned long)markValue;
- (BOOL)isShared;
- (void)setShared:(BOOL)fp8;
- (void)invalidateSharedImageState;
- (BOOL)determineSharedImages:(BOOL)fp8;
- (void)_addPhotoInfoFromProxy:(id)fp8;
- (void)_addPhotoInfo:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)addKey:(unsigned long)fp8 caption:(id)fp12 attributes:(id)fp16 destFile:(struct IPFileInfo *)fp20 roll:(unsigned long)fp24 modifiedDate:(double)fp28 archiveDate:(double)fp36 insert:(BOOL)fp44 buildThumbnail:(BOOL)fp48;
- (struct IPPhotoInfo *)addKeyDuringImport:(unsigned long)fp8 filename:(id)fp12 caption:(id)fp16 roll:(unsigned long)fp20 modifiedDate:(double)fp24 archiveDate:(double)fp32 insert:(BOOL)fp40 buildThumbnail:(BOOL)fp44;
- (struct IPPhotoInfo *)_addKey:(unsigned long)fp8 filename:(id)fp12 imageType:(unsigned long)fp16 caption:(id)fp20 attributes:(id)fp24 destFile:(struct IPFileInfo *)fp28 roll:(unsigned long)fp32 modifiedDate:(double)fp36 archiveDate:(double)fp44 insert:(BOOL)fp52 buildThumbnail:(BOOL)fp56 duringImport:(BOOL)fp60;
- (id)filenameForPath:(id)fp8 ofType:(unsigned long)fp12;
- (void)createDestFileFrom:(id)fp8 roll:(struct IPRoll *)fp12 type:(unsigned long)fp16 toFile:(struct IPFileInfo *)fp20;
- (struct IPPhotoInfo *)copyPhoto:(struct IPPhotoInfo *)fp8 intoRoll:(struct IPRoll *)fp12 error:(int *)fp16;
- (struct IPPhotoInfo *)photoOfNameIsDuplicate:(id)fp8 originalDate:(double)fp12;
- (id)photoKeysAndOriginalFilenames;
- (struct IPPhotoInfo *)photoAtPathIsDuplicate:(id)fp8 keysAndOriginalFileNames:(id)fp12;
- (struct IPPhotoInfo *)photoAtPathIsDuplicate:(id)fp8;
- (struct IPPhotoInfo *)photoWithHashIsDuplicate:(id)fp8;
- (struct IPPhotoList *)photosNeedingLocationLookup:(int)fp8;
- (void)_importFinished:(id)fp8;
- (void)_importCanceled:(id)fp8;
- (void)_nextKeyAndIncrement:(id)fp8;
- (void)_addPhotoToUpdateRoll:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)copyAndAddPhoto:(struct IPPhotoInfo *)fp8 error:(int *)fp12;
- (void)_waitForXML:(id)fp8;
- (void)beginUpdate:(id)fp8 fromSource:(id)fp12;
- (void)beginUpdate:(id)fp8;
- (void)notifyPendingAdds;
- (void)notifyPendingRemoves;
- (void)endUpdate;
- (struct IPRoll *)updateRoll;
- (void)setUpdateRoll:(struct IPRoll *)fp8;
- (void)startRoll;
- (void)endRoll;
- (id)nextEmptyEventName;
- (struct IPPhotoList *)cutList;
- (int)cutListCount;
- (void)clearCutList;
- (void)addPhotoToCutList:(struct IPPhotoInfo *)fp8;
- (void)addPhotoListToCutList:(struct IPPhotoList *)fp8;
- (void)removePhotoFromCutList:(struct IPPhotoInfo *)fp8;
- (void)removePhotoListFromCutList:(struct IPPhotoList *)fp8;
- (unsigned int)count;
- (id)allKeys;
- (struct IPPhotoList *)contentsOfRoll:(unsigned long)fp8;
- (struct IPPhotoInfo *)photoForPath:(id)fp8;
- (struct IPPhotoInfo *)photoForUID:(id)fp8;
- (id)albumForKey:(unsigned long)fp8;
- (struct IPRoll *)rollForKey:(unsigned long)fp8;
- (struct IPRoll *)rollForUID:(id)fp8;
- (struct IPRoll *)rollForName:(id)fp8;
- (struct IPStack *)stackForKey:(unsigned long)fp8;
- (BOOL)likelyRollUser;
- (struct IPPhotoList *)photosInUnnamedRolls;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rolls;
- (struct map<Key, IPRoll*, std::less<Key>, std::allocator<std::pair<const Key, IPRoll*>>> *)rollsNoCopy;
- (int)rollCount;
- (struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *)stacks;
- (struct map<Key, IPStack*, std::less<Key>, std::allocator<std::pair<const Key, IPStack*>>> *)stacksNoCopy;
- (int)stackCount;
- (struct IPPhotoInfo *)photoForKey:(unsigned long)fp8;
- (struct IPPhotoList *)photosForKeys:(struct vector<DatabaseKey, std::allocator<DatabaseKey>> *)fp8;
- (void)getOriginalDir:(id *)fp8 andPath:(id *)fp12 forPhoto:(struct IPPhotoInfo *)fp16;
- (void)removeImageWithKey:(unsigned long)fp8 notify:(BOOL)fp12;
- (void)removeAllObjects;
- (id)thumbnailer;
- (id)directoryMgr;
- (id)keywordMgr;
- (id)oldKeywordTable;
- (id)definedKeywords;
- (BOOL)isModified;
- (void)markAsModified;
- (BOOL)wasUpgraded;
- (BOOL)rebuildArchiveAlbum;
- (BOOL)libraryRebuild;
- (struct IPPhotoList *)needThumbRegen;
- (void)clearNeedThumbRegen;
- (id)modificationDate;
- (id)ensureDateDir:(double)fp8;
- (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
- (void)addToPendingAdd:(struct IPPhotoInfo *)fp8;
- (void)addToPendingRemove:(struct IPPhotoInfo *)fp8;
- (void)removeFromPendingAdd:(struct IPPhotoInfo *)fp8;
- (BOOL)isTemporary;
- (void)setIsTemporary:(BOOL)fp8;
- (void)_renameImageFromKey:(struct IPFileImage *)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)_updateImageDates:(id)fp8 rename:(BOOL)fp12 copyEXIF:(BOOL)fp16 verifyIntegrity:(BOOL)fp20 upgradeThumbs:(BOOL)fp24;
- (void)fileManager:(id)fp8 willProcessPath:(id)fp12;
- (int)_backupLibrary:(id)fp8;
- (id)recoverLostPhotos;
- (id)_beginUpgradeProgress:(id)fp8 thumbsOnly:(BOOL)fp12 updateCachedThumbs:(BOOL)fp16 repairingLibrary:(BOOL)fp20;
- (void)_continueUpgradeProgress:(id)fp8 percentDone:(float)fp12 lastImage:(struct IPPhotoInfo *)fp16 wasUpgraded:(BOOL)fp20;
- (void)_endUpgradeProgress:(id)fp8;
- (BOOL)_upgradeThumbnails:(id)fp8 rebuildAllThumbs:(BOOL)fp12 repairingLibrary:(BOOL)fp16;
- (void)_addPhotoToMap:(struct IPPhotoInfo *)fp8;
- (void)_removePhotoFromMap:(unsigned long)fp8;
- (void)_removeAllPhotosFromMap;
- (id)ilPhotoShare;
- (void)setPersistentDictionary:(id)fp8 forShare:(id)fp12;
- (id)persistentDictionaryForShare:(id)fp8;
- (id)galleryName;
- (void)timerWriteDB;
- (void)performTask;
- (id)_canTerminate;
- (void)queueArchivingAsynch:(BOOL)fp8 withDelay:(BOOL)fp12;
- (void)_queueArchivingWithDelay:(id)fp8;
- (void)_warnArchiveSavingError:(id)fp8;
- (void)_archive:(BOOL)fp8;
- (void)_backupKeywords:(id)fp8;
- (id)_createDummyOldDBFilesAtRoot:(id)fp8;

@end

@interface ThumbnailManager : NSObject <ThreadManagerTask>
{
    int mObjectCacheCapacity;
    struct SegmentCacheFile *mSegmentCacheFile64;
    struct SegmentCacheFile *mSegmentCacheFileJPG;
    struct IPObjectCache *mObjectCache;
    struct _opaque_pthread_mutex_t mThumbnailDataReadLock;
    struct _opaque_pthread_mutex_t mThumbnailDataRequestLock;
    struct _opaque_pthread_mutex_t mThumbnailRequestRunningLock;
    struct _opaque_pthread_mutex_t mPreloadRunningLock;
    struct _opaque_pthread_mutex_t mRebuildRunningLock;
    struct _opaque_pthread_cond_t mPreloadStopCondition;
    struct _opaque_pthread_mutex_t mFragmentedRequestLock;
    struct _opaque_pthread_mutex_t mWriteLock;
    struct ThumbDataArray *mThumbnailDataRequest;
    BOOL mThumbnailRequestRunning;
    id mThumbnailRequestObject;
    SEL mThumbnailRequestSelector;
    BOOL mPreloadRunning;
    BOOL mPreloadStop;
    BOOL mRebuildRunning;
    ImageDB *mImageDB;
    BOOL mDBHasCaches;
    int mFragmentedRequestCount;
}

- (void)objectReleased:(unsigned long)fp8 object:(void *)fp12 size:(int)fp16;
- (id)initWithDB:(id)fp8;
- (void)dealloc;
- (void)closeCaches;
- (BOOL)hasCaches;
- (void)preloadThumbnailDataForPhotos:(struct ThumbDataArray *)fp8;
- (BOOL)isPreloadingThumbnailData;
- (int)_nextUnreadThumbIndexInRequest:(struct ThumbDataArray *)fp8 fromIndex:(int)fp12;
- (void)_preloadRequest;
- (void)stopPreloadingThumbnailData;
- (BOOL)isRunningThumbnailRequest;
- (BOOL)isRunningRebuild;
- (BOOL)thumbnailDataInCache:(struct IPPhotoInfo *)fp8 imageType:(int)fp12;
- (float)thumbnailDataInCache:(struct ThumbDataArray *)fp8;
- (void)resetFragmentedRequestCount;
- (int)fragmentedRequestCount;
- (BOOL)thumbnailDataForPhotosThreaded:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12 completionSelector:(SEL)fp16 completionObject:(id)fp20;
- (void)_thumbnailRequest;
- (BOOL)thumbnailDataForPhotos:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12;
- (void)allocateCacheForThumbnails:(int)fp8;
- (void)_thumbnailDataForPhotos:(struct ThumbDataArray *)fp8 cachedOnly:(BOOL)fp12;
- (void *)thumbnailDataForPhoto2:(struct IPPhotoInfo *)fp8 imageType:(int)fp12 dataSize:(int *)fp16 cachedOnly:(BOOL)fp20;
- (void *)_thumbnailDataForPhoto:(struct IPPhotoInfo *)fp8 imageType:(int)fp12 dataSize:(int *)fp16 cachedOnly:(BOOL)fp20;
- (void)emptyObjectCaches;
- (void)clearObjectCaches;
- (void)createObjectCaches;
- (void)emptyThumbCaches;
- (void)checkThumbCaches2:(BOOL)fp8;
- (int)addThumbData64:(void *)fp8 image64Size:(int)fp12 jpgData:(char **)fp16;
- (void)generateThumbnailsForPhoto2:(struct IPPhotoInfo *)fp8 forceNewIndex:(BOOL)fp12;
- (void)triggerThumbnailCreationIfNeeded;
- (void)performTask;

@end

@interface TDAHolder : NSObject
{
    struct ThumbDataArray *mThumbDataArray;
}

+ (id)hold:(struct ThumbDataArray *)fp8;
- (id)initWithThumbDataArray:(struct ThumbDataArray *)fp8;
- (struct ThumbDataArray *)thumbDataArray;

@end

@interface DirectoryMgr : NSObject
{
    NSString *mRoot;
    unsigned int mNextKey;
    NSMutableArray *mDirectories;
    DirectoryRec *mLast;
    BOOL mIsModified;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithRoot:(id)fp8;
- (void)setRoot:(id)fp8;
- (void)_setRoot:(id)fp8;
- (id)directoryForKey:(unsigned long)fp8;
- (unsigned long)keyForDirectory:(id)fp8;
- (void)encodeWithArchiver:(id)fp8;
- (void)archive;
- (id)relativePath;
- (id)_archivePath;
- (void)_unarchive;

@end

@interface DirectoryRec : NSObject <NSCoding>
{
    unsigned int mKey;
    NSString *mDirectory;
}

+ (void)initialize;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (id)initWithKey:(unsigned long)fp8 dir:(id)fp12;
- (void)setKey:(unsigned long)fp8;
- (unsigned long)key;
- (void)setDirectory:(id)fp8;
- (id)directory;

@end

@interface BurnButton : FirstMouseButton <HeartBeatClient>
{
}

+ (Class)cellClass;
- (void)close:(id)fp8;
- (void)open:(id)fp8;
- (void)startRotating:(id)fp8;
- (void)stopRotating:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)heartBeat:(CDAnonymousStruct6 *)fp8;

@end

@interface BurnButtonCell : NSButtonCell <HeartBeatClient>
{
    unsigned short m_ButtonState;
    NSImage *m_Image;
    NSImage *m_OverlayImage;
    int m_Sequence;
    unsigned int m_OpenTime;
    SEL m_HeartbeatSelector;
    HeartBeat *m_Heartbeat;
    unsigned int mFadeStartTime;
    NSTimer *mRefreshTrigger;
    NSImage *mRotationImage[12];
    BOOL m_LockOpen;
    NSWindow *mWindow;
}

- (void)registerInWindow:(id)fp8;
- (void)dealloc;
- (void)_windowWillClose:(id)fp8;
- (unsigned short)getButtonState;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)_throbbingSequenceMainThread;
- (void)throbbingSequence;
- (void)setLockedOpen:(BOOL)fp8;
- (void)startThrob;
- (void)stopThrob;
- (void)closeSequence;
- (void)closeButton;
- (void)openSequence;
- (void)openButton;
- (void)startRotation;
- (void)stopRotation;
- (void)heartBeat:(CDAnonymousStruct6 *)fp8;

@end

@interface BurnController : NSObject
{
    DRBurnSetupPanel *mBurnSetup;
    DREraseSetupPanel *mEraseSetup;
    DiscPrompt *mDiscPrompt;
    BurnButtonCell *mBurnButton;
    NSButton *mCancelButton;
    NSTextField *mDiscPromptTitle;
    NSTextField *mDiscPromptMessage;
    NSTextField *mBurnInLabel;
    DRDeviceChooser *mBurnInChooser;
    NSImageView *mDiscPromptIcon;
    DRBurnProgressPanel *mBurnProgress;
    DREraseProgressPanel *mEraseProgress;
    DRDevice *mBurnDevice;
    DRDevice *mSelectedDevice;
    DRBurn *mBurn;
    NSString *mDiscName;
    NSString *mBurnPrompt;
    struct IPAlbumList *mAlbums;
    ImageDB *mSourceDB;
    DBDocument *mDocument;
    int mBurnState;
    BOOL mStartedDiscPrompt;
    NSTimer *mSpinUpTimer;
    NSMutableArray *mWatchedDevices;
    NSMutableArray *mReservedDevices;
    NSMutableArray *mDevicesWeOpened;
    BOOL mInitialized;
    BOOL mLoadedDRUI;
    NSMutableArray *mDiscPromptNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)_releaseWatchedDevices;
- (void)_cleanup:(BOOL)fp8;
- (id)burnDevice;
- (id)selectedDevice;
- (id)watchedDevices;
- (BOOL)burnInProgress;
- (void)setBurnButton:(id)fp8;
- (BOOL)armed;
- (void)setArmed:(BOOL)fp8;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)discPromptChangedDevice:(id)fp8;
- (void)_discPromptEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_startDiscPrompt:(id)fp8;
- (void)_closeDiscPrompt;
- (void)_promptForDisc:(id)fp8;
- (void)_promptSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_rejectDiscInDevice:(id)fp8 description:(id)fp12 reason:(id)fp16;
- (void)_rejectSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_foundDeviceForBurn:(id)fp8;
- (void)_ejectMediaInDevice:(id)fp8;
- (void)_deviceStatusChanged:(id)fp8;
- (void)_noDiscInserted:(id)fp8;
- (void)_newDevice:(id)fp8;
- (void)_openTrayIfNeeded:(id)fp8;
- (void)_removedDevice:(id)fp8;
- (void)_startBurn:(id)fp8 withLayout:(id)fp12 inWindow:(id)fp16;
- (id)_canClose;
- (id)_canTerminate;
- (void)_burnDisarmRequested:(id)fp8;
- (void)_burnStarted:(id)fp8;
- (void)_burnFinished:(id)fp8;
- (id)_selectionTextForAlbums:(struct IPAlbumList *)fp8 andPhotos:(struct IPPhotoList *)fp12 fromDB:(id)fp16 fromLibrary:(BOOL)fp20;
- (BOOL)setupPanelShouldHandleMediaReservations:(id)fp8;
- (BOOL)setupPanel:(id)fp8 deviceCouldBeTarget:(id)fp12;
- (BOOL)setupPanel:(id)fp8 deviceContainsSuitableMedia:(id)fp12 promptString:(id *)fp16;
- (void)_cantBurnSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)burnAlbums:(struct IPAlbumList *)fp8 andPhotos:(struct IPPhotoList *)fp12 fromDB:(id)fp16 fromLibrary:(BOOL)fp20 withName:(id)fp24;
- (void)_burnFailedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_virtualDiscNamed:(id)fp8 fromDocument:(id)fp12;
- (void)_printFSObject:(id)fp8;

@end

@interface DRDevice (iPhotoDRAdditions)
- (int)_scopeBurnScore;
@end

@interface BurnDataProducer : NSObject <DRFileDataProduction>
{
    NSData *mData;
    NSString *mPath;
    short mDFRefNum;
    short mRFRefNum;
    BOOL mGotFSRef;
    struct FSRef mFSRef;
    BOOL mDeleteAfter;
}

+ (id)burnDataProducer;
+ (id)burnDataProducerForPath:(id)fp8;
+ (id)burnDataProducerForPath:(id)fp8 deleteAfter:(BOOL)fp12;
+ (id)burnDataProducerWithData:(id)fp8;
- (id)initWithPath:(id)fp8 deleteAfter:(BOOL)fp12;
- (id)initWithPath:(id)fp8;
- (id)initWithData:(id)fp8;
- (void)dealloc;
- (unsigned long long)calculateSizeOfFile:(id)fp8 fork:(unsigned long)fp12 estimating:(BOOL)fp16;
- (BOOL)prepareFileForBurn:(id)fp8;
- (unsigned int)produceFile:(id)fp8 fork:(unsigned long)fp12 intoBuffer:(char *)fp16 length:(unsigned int)fp20 atAddress:(unsigned long long)fp24 blockSize:(unsigned int)fp32;
- (BOOL)prepareFileForVerification:(id)fp8;
- (void)cleanupFileAfterBurn:(id)fp8;

@end

@interface DiscPrompt : NSObject
{
    NSPanel *mDiscPromptPanel;
    NSImageView *mIconImageView;
    NSTextField *mTitleTextField;
    NSTextField *mDevicePrompt;
    DRDeviceChooser *mDeviceMenu;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    BOOL mPromptStarted;
    BurnController *mBurnController;
}

- (void)awakeFromNib;
- (BOOL)showDiscPromptInWindow:(id)fp8 burnController:(id)fp12;
- (id)selectedDevice;
- (void)selectDevice:(id)fp8;
- (void)discPromptChangedDevice:(id)fp8;
- (void)didClose;
- (void)close;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface Edit : NSObject
{
    struct OnScreenImage currentImage;
    struct OnScreenImage currentFullImage;
    struct OnScreenImage cacheImages[3];
    CIImage *mCurrentFilterImage;
    CIImage *mCurrentFullFilterImage;
    ContrastFilter *mContrastFilter;
    DefinitionFilter *mDefinitionFilter;
    SaturationFilter *mSaturationFilter;
    VibrancyFilter *mVibrancyFilter;
    BlackAndWhiteFilter *mBlackAndWhiteFilter;
    SepiaFilter *mSepiaFilter;
    BoostFilter *mBoostFilter;
    FadeFilter *mFadeFilter;
    AntiqueFilter *mAntiqueFilter;
    VignetteWhiteFilter *mVignetteWhiteFilter;
    VignetteBlackFilter *mVignetteBlackFilter;
    EdgeBlurFilter *mEdgeBlurFilter;
    BlackAndWhitePointsFilter *mEqualizeFilter;
    TintFilter *mTintFilter;
    CropEditFilter *mCropFilter;
    ExposureFilter *mLightingFilter;
    RAWTemperatureTintExposureFilter *mRAWAdjustFilter;
    RAWTemperatureTintExposureFilter *mRAWDefaultAdjustFilter;
    EditFilter *mApplyCurvesFilter;
    ColorCorrectionFilter *mColorCorrectionFilter;
    EnhanceFilter *mApplyEnhanceFilter;
    SharpnessFilter *mSharpnessFilter;
    NoiseFilter *mNoiseFilter;
    HighlightShadow *mHighlightsShadowsFilter;
    BitmapFilter *mBlemishFilter;
    RotationEditFilter *mStraightenFilter;
    RotationEditFilter *mRotationFilter;
    CIFilter *mCrystallizeFilter;
    CIFilter *mDotFilter;
    NSMutableArray *mFilterArray;
    char *mBlurWeights;
    struct CGImage *mBlurWeightsRef;
    CIImage *mBlurWeightsImage;
    NSMutableData *mCachedImageData1;
    NSMutableData *mCachedImageData2;
    NSMutableData *mCachedImageDataEnhance;
    CIImage *mScreenBlemishImage;
    struct CGImage *mFullBlemishImageRef;
    struct CGImage *mScreenBlemishImageRef;
    CIImage *mFullBlemishImage;
    char *mCachedBlur1;
    CIImage *mBlurImage;
    CIImage *mFlattenedBlurImage;
    BOOL mBlurWithFull;
    CIImage *mSmallBlurImage;
    NSMutableData *mSmallBlurRasterData;
    EditMgr *mEditMgr;
    NSSlider *mZoomSlider;
    NSTimer *mFullImageLoadTimer;
    struct SThreadedLinkList mNextList;
    struct SThreadedLinkList mPreviousList;
    struct SThreadedLinkList mFreeList;
    struct _opaque_pthread_mutex_t mResizeReloadLock;
    int mResizeThreadState;
    unsigned char mThreadNeedsRestart;
    BOOL mSpawn;
    struct HistogramRecord mHistogram;
    struct HistogramRecord mBaseHistogram;
    float histogramArray[7][256];
    int blackcutoffvals[3];
    int whitecutoffvals[3];
    float mGammaValue;
    float mBlemishOpacity;
    float mToolParam[20];
    float mRedeyeParams[20];
    BOOL mOptionKeyWasDown;
    BOOL mBypassCropFilter;
    BOOL mBypassRotationFilter;
    BOOL mBypassAdjustmentFilters;
    BOOL mBypassEffectFilters;
    BOOL mBypassAntiqueSepiaAndBW;
    int mCurrentAlgorithm;
    int mLastSharpnessTag;
    struct _NSSize mCurrentFrameSize;
    char *mHistoRaster;
    int mHistoRasterSize;
    int mHistoRasterWidth;
    int mHistoRasterHeight;
    BOOL mHasAlitvec;
    BOOL mRAWOn;
    BOOL mNeedsToChain;
    struct IPPhotoInfo *mRevertInfo;
    BOOL mClearedHisto;
    BOOL mChangingMultipleFilters;
    BOOL mBetterIsActive;
    MutableEditList *mEditList;
    BOOL mEditListLoaded;
    NSMutableArray *mNewBlemishEvents;
    float mDefaultRAWTemperature;
    float mDefaultRAWTint;
    float mDefaultRAWExposure;
    struct _NSRect mStraightenStartCropRect;
    BOOL mResetStraightenStartCropRect;
    NSUndoManager *mEditUndoManager;
    NSUndoManager *mCropModeUndoManager;
    BOOL mUseCropUndoManager;
    int mLastManualConstrainTag;
    int mLastManualConstrainRatio;
    int mLastManualConstrainOrientation;
    struct _NSRect mCropModeInitialCropRect;
    float mCropModeInitialConstrainTag;
    float mCropModeInitialConstrainRatio;
    float mCropModeInitialConstrainOrientation;
    BOOL mPendingEdit;
    BOOL mSliderDragInProgress;
    CIImage *mIconImage;
    char *mIconRaster;
    struct CGImage *mIconImageRef;
    NSMutableDictionary *mHUDInstanceStorage;
    IPEditPhotoLayer *mEditLayer;
    BOOL mFinishing;
}

- (BOOL)infoIsFree:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoAfterOnScreenImage:(struct OnScreenImage *)fp8;
- (struct IPPhotoInfo *)infoBeforeOnScreenImage:(struct OnScreenImage *)fp8;
- (struct IPPhotoInfo *)currentLoadedInfo;
- (struct IPPhotoInfo *)currentInfo;
- (struct CGSize)currentFullSize;
- (void)viewResized;
- (struct IPImage *)croppedPhoto;
- (struct _NSSize)cropSizeToFitSizeForInfo:(struct IPPhotoInfo *)fp8;
- (void)initializeWithRect:(struct _NSRect)fp8;
- (id)transformForImageRotation:(float)fp8 width:(float *)fp12 height:(float *)fp16;
- (void)forMachinesThatShouldBeDestroyedWhackOnRaster:(char *)fp8 forImage:(struct CGImage *)fp12 inPlaceOfFilter:(id)fp16;
- (struct CGColorSpace *)genericRGBProfile;
- (void)commitImageEdits;
- (BOOL)hasPendingEdit;
- (void)lockCurrent;
- (void)unlockCurrent;
- (void)lockFull;
- (void)unlockFull;
- (struct CGImage *)currentImageRef;
- (struct CGImage *)currentFullResImageRef;
- (struct OnScreenImage)currentImage;
- (struct OnScreenImage)currentFullImage;
- (void)chainFilters;
- (void)rechainIfNecessary;
- (id)fullFilteredImage;
- (id)prefilterFullImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (void)freeCachedIconImage;
- (id)filterResult;
- (id)prefilterImage;
- (float)currentSharpnessRatio;
- (id)fullBlemishImage;
- (id)smallBlemishImage;
- (void)resetBlemishFilter;
- (void)updateHistogram;
- (struct HistogramRecord)currentHistogram;
- (void)respondToEffectsViewButton0:(int)fp8;
- (void)respondToEffectsViewButton1:(int)fp8;
- (void)respondToEffectsViewButton2:(int)fp8;
- (void)respondToEffectsViewButton3:(int)fp8;
- (void)respondToEffectsViewButton5:(int)fp8;
- (void)respondToEffectsViewButton6:(int)fp8;
- (void)respondToEffectsViewButton7:(int)fp8;
- (void)respondToEffectsViewButton8:(int)fp8;
- (struct _NSRect)rotateCropRect:(struct _NSRect)fp8 degrees:(float)fp24;
- (void)resetFilters:(id)fp8;
- (void)resetCurrentImage;
- (id)editList;
- (struct EditListData)editListData;
- (float)defaultRAWTemperature;
- (float)defaultRAWTint;
- (float)defaultRAWExposure;
- (void)resetAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)restoreAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)resetStraightenWithScreenRefresh:(BOOL)fp8;
- (void)restoreStraightenWithScreenRefresh:(BOOL)fp8;
- (void)resetEffectsWithScreenRefresh:(BOOL)fp8;
- (void)resetSlidersWithScreenRefresh:(BOOL)fp8;
- (void)releaseEditResources;
- (void)resetCurrentImageAndUI:(BOOL)fp8;
- (BOOL)acceptsFirstResponder;
- (int)effectsViewButtonLevel:(int)fp8;
- (void)startChangingMultipleFilters;
- (void)stopChangingMultipleFilters;
- (void)displayImage;
- (void)hudSliderMouseDown:(id)fp8;
- (void)hudSliderMouseUp:(id)fp8;
- (void)hudTempTintSliderMouseDown:(id)fp8;
- (void)hudTempTintSliderMouseUp:(id)fp8;
- (BOOL)hudSliderDragInProgress;
- (void)currentImageReverted;
- (void)currentImageRotated;
- (void)photoInfoRotated:(struct IPPhotoInfo *)fp8;
- (void)resetImagesAndCaches;
- (void)setPreviousNextFromCurrent;
- (BOOL)alreadyInEdit;
- (void)updateRotationForImage:(struct IPImage *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 loadedImage:(struct IPImage *)fp16;
- (BOOL)isLoadingImage;
- (void)currentPhoto:(struct IPPhotoInfo *)fp8 didFinishLoadingImage:(struct IPImage *)fp12;
- (void)currentPhoto:(struct IPPhotoInfo *)fp8 didFinishLoadingFullResImage:(struct IPImage *)fp12;
- (void)currentPhotoDidRevert;
- (void)setEditMgr:(id)fp8;
- (void)dontSpawn;
- (void)become_Active;
- (void)resetAllEditContexts;
- (void)windowDidMiniaturize:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)clearQueues;
- (struct IPPhotoList *)volatileImages;
- (void)resetHUDController;
- (id)hudController;
- (id)straightenHUDController;
- (id)editMgr;
- (void)release_Active;
- (struct IPPhotoInfo *)currentPhoto;
- (void)updateNavigator;
- (void)updateLoop:(struct _NSPoint)fp8;
- (id)currentAlbum;
- (BOOL)validateMenuItem:(id)fp8;
- (void)dealloc;
- (void)addFilterInOrder:(id)fp8;
- (id)blackAndWhiteFilter;
- (id)sepiaFilter;
- (id)antiqueFilter;
- (id)filterArray;
- (void)addFilterBackToFilterArray:(id)fp8;
- (void)removeFilterFromFilterArray:(id)fp8;
- (id)window;
- (id)localUndoManager;
- (id)currentUndoManager;
- (void)addFilterToArray:(id)fp8;
- (void)onContrastChanged:(id)fp8;
- (void)onDefinitionChanged:(id)fp8;
- (void)onSaturationChanged:(id)fp8;
- (void)onVibrancyChanged:(id)fp8;
- (void)onSaturationVibrancyToggle:(float)fp8 useVibrancy:(BOOL)fp12;
- (void)onTemperatureChanged:(id)fp8;
- (void)onTintChanged:(id)fp8;
- (void)onRecoveryChanged:(id)fp8;
- (void)onSharpnessChanged:(id)fp8;
- (void)onShadowsChanged:(id)fp8;
- (void)onHighlightsChanged:(id)fp8;
- (void)onStraightenChanged:(id)fp8;
- (void)onNoiseChanged:(id)fp8;
- (void)onExposureChanged:(id)fp8;
- (void)onBlackWhitePointsChanged:(id)fp8;
- (void)onRotationChanged:(int)fp8;
- (void)onApplyAutoRedeye;
- (void)onApplyEnhance;
- (void)onConstrainChange:(int)fp8 withRatio:(int)fp12 withOrientation:(int)fp16;
- (float)calculateConstrain:(float)fp8 denominator:(float)fp12 forceRatio:(BOOL)fp16 orientation:(int)fp20;
- (float)currentConstrain;
- (int)currentConstrainTag;
- (void)performNothingBecauseOfUndoBugs;
- (void)performContrastChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performDefinitionChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performSaturationChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performSaturationChange:(float)fp8 version:(float)fp12 storeUndo:(BOOL)fp16 updateUI:(BOOL)fp20;
- (void)performVibrancyChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performTemperatureChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performTintChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performSharpnessChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performNoiseChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performShadowsChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performShadowsChange:(float)fp8 version:(float)fp12 storeUndo:(BOOL)fp16 updateUI:(BOOL)fp20;
- (void)performHighlightsChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performHighlightsChange:(float)fp8 version:(float)fp12 storeUndo:(BOOL)fp16 updateUI:(BOOL)fp20;
- (void)performStraightenChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performExposureChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performBlackWhitePointsChange:(float)fp8 whitePoint:(float)fp12 andGamma:(float)fp16 storeUndo:(BOOL)fp20 updateUI:(BOOL)fp24;
- (void)performRAWSettingsChangeForTemperature:(float)fp8 forTint:(float)fp12 forExposure:(float)fp16 forRecovery:(float)fp20 storeUndo:(BOOL)fp24 updateUI:(BOOL)fp28;
- (void)performApplyBlackAndWhiteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplySepiaEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyAntiqueEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyFadeEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBoostEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyWhiteVignetteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBlackVignetteEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyBlurEffect:(int)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performCropChange:(struct _NSRect)fp8 storeUndo:(BOOL)fp24 updateUI:(BOOL)fp28;
- (void)performCropChangeRespectingStraightenAngle:(struct _NSRect)fp8 storeUndo:(BOOL)fp24 updateUI:(BOOL)fp28;
- (void)performConstrainChange:(int)fp8 constrainRatio:(int)fp12 constrainOrientation:(int)fp16 cropRect:(struct _NSRect)fp20 storeUndo:(BOOL)fp36 updateUI:(BOOL)fp40;
- (void)performRotationChange:(float)fp8 storeUndo:(BOOL)fp12 updateUI:(BOOL)fp16;
- (void)performApplyEnhance:(struct EditEnhanceData)fp8 storeUndo:(BOOL)fp56 updateUI:(BOOL)fp60;
- (void)performAddBlemishEvents:(id)fp8 toBlemishArray:(id)fp12 ofType:(int)fp16 storeUndo:(BOOL)fp20 updateUI:(BOOL)fp24;
- (void)initializeEditWithEditList:(id)fp8;
- (void)initializeEditWithBlemishList:(id)fp8;
- (void)updateDefaultRAWAdjustmentValues;
- (BOOL)currentImageIsRAW;
- (BOOL)currentImageIs16Bit;
- (id)transformForImageRotation:(float)fp8 scale:(float)fp12 width:(float *)fp16 height:(float *)fp20;
- (id)smallBlurredImage:(BOOL)fp8;
- (void)resetBlurImage;
- (id)setBlur:(BOOL)fp8;
- (void)straightenMouseUp:(id)fp8;
- (void)straightenMouseDown:(id)fp8;
- (void)resetStraightenStartCropRect;
- (void)deleteImage;
- (void)initializeRetouchRasters;
- (void)resetRetouchRasters;
- (void)recreateCache1FromCache2;
- (void)recreateCIImagesForBlemishFilter;
- (void)clearRetouchRasters;
- (void)initializeEnhanceRaster;
- (void)resetEnhanceRaster;
- (void)clearEnhanceRaster;
- (void)letRedeyeHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withAggressiveness:(int)fp20 passingFloatParameter1:(float)fp24 param2:(float)fp28 param3:(float)fp32 param4:(float)fp36 usingAlgorithm:(int)fp40 onFaceIndex:(int)fp44 withKey:(int)fp48;
- (void)letWhitenBrushHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withRadius:(float)fp20 invokedWithDrag:(int)fp24;
- (void)letBlemishHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 withRadius:(float)fp20 invokedWithDrag:(int)fp24 sourcePoint:(struct _NSPoint)fp28;
- (struct _NSRect)averageAdjacentPixels:(char *)fp8 withBytesPerPixel:(int)fp12 rowBytes:(unsigned long)fp16;
- (void)setTempTintAtPoint:(struct _NSPoint)fp8;
- (void)letColorSamplerHandleEvent:(id)fp8 atPoint:(struct _NSPoint)fp12 usingAlgorithm:(int)fp20;
- (void)setCurrentAlgorithm:(int)fp8;
- (void)loadImageBytes:(struct _NSRect)fp8;
- (float)retouchRadiusToSliderValue:(float)fp8;
- (float)sliderValueToRetouchRadius:(float)fp8;
- (float)scaleForRetouchTools;
- (float)blemishOpacity;
- (void)setBlemishOpacity:(float)fp8;
- (void)printSelection:(id)fp8;
- (struct CGSize)editSizeForFull:(BOOL)fp8 withRotate:(BOOL)fp12 andStraighten:(BOOL)fp16 andCrop:(BOOL)fp20;
- (struct _NSRect)editCropRectForFull:(BOOL)fp8 withRotate:(BOOL)fp12 andStraighten:(BOOL)fp16 andCrop:(BOOL)fp20;
- (struct _NSRect)editCropRectForFullN:(BOOL)fp8 withRotate:(BOOL)fp12 andStraighten:(BOOL)fp16 andCrop:(BOOL)fp20;
- (void)setImageRenderModeWithRotate:(BOOL)fp8 andCrop:(BOOL)fp12 andAdjustments:(BOOL)fp16 andEffects:(BOOL)fp20;
- (struct _NSPoint)editLocationFromImageLocation:(struct _NSPoint)fp8 withCrop:(BOOL)fp16;
- (struct _NSPoint)imageLocationFromEditLocation:(struct _NSPoint)fp8 withRotate:(BOOL)fp16 andCrop:(BOOL)fp20;
- (struct _NSRect)recomputeCropRect:(struct _NSRect)fp8 forStraightenAngle:(float)fp24;
- (struct _NSRect)recomputeCropRect:(struct _NSRect)fp8 forFull:(BOOL)fp24 withDrag:(BOOL)fp28 withConstrain:(BOOL)fp32;
- (BOOL)enterCropMode;
- (void)applyCurrentCropAndConstrain:(BOOL)fp8;
- (void)HUDWillClose:(id)fp8;
- (void)saveAdjustmentHUDSettings;
- (void)restoreAdjustmentHUDSettings;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (BOOL)blemishEventListContains:(int)fp8;
- (BOOL)supportsFindCommand;
- (void)forceRAWReloadWithParams:(id)fp8;
- (void)setHUDInstanceData:(id)fp8 forKey:(id)fp12;
- (id)getHUDInstanceDataForKey:(id)fp8;
- (void)setEditLayer:(id)fp8;
- (id)editLayer;
- (BOOL)hasImageForFull:(BOOL)fp8;
- (int)lastManualConstrainTag;
- (int)lastManualConstrainRatio;
- (int)lastManualConstrainOrientation;
- (void)setLastManualConstrainTag:(int)fp8 ratio:(int)fp12 andOrientation:(int)fp16;

@end

@interface ExportController : NSObject
{
    id mWindow;
    id mExportView;
    NSButtonCell *mExportButton;
    NSTextField *mImageCount;
    ExportMgr *mExportMgr;
    ExportMgrRec *mCurrentPluginRec;
    ProgressController *mProgressController;
    BOOL mCurrentPluginHandlesMovies;
    BOOL mCancelExport;
    NSTimer *mTimer;
    NSString *mDirectoryPath;
    NSMutableArray *mExportPanelNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)currentPlugin;
- (id)currentPluginRec;
- (void)setCurrentPluginRec:(id)fp8;
- (BOOL)currentPluginHandlesMovies;
- (id)directoryPath;
- (void)setDirectoryPath:(id)fp8;
- (void)show;
- (void)_openPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)panel:(id)fp8 userEnteredFilename:(id)fp12 confirmed:(BOOL)fp16;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (BOOL)filesWillFitOnDisk;
- (void)export:(id)fp8;
- (void)_exportThread:(id)fp8;
- (void)_exportProgress:(id)fp8;
- (void)startExport:(id)fp8;
- (void)finishExport;
- (void)cancelExport;
- (void)cancel:(id)fp8;
- (void)enableControls;
- (id)window;
- (void)disableControls;
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)selectExporter:(id)fp8;
- (id)exportView;
- (BOOL)_hasPlugins;
- (void)_resizeExporterToFitView:(id)fp8;
- (void)_updateImageCount;

@end

@interface ExportMgr : NSObject <ExportImageProtocol>
{
    ArchiveDocument *mDocument;
    NSMutableArray *mExporters;
    NSArray *mSelectedAlbumsArray;
    struct IPPhotoList *mSelection;
    struct IPPhotoList *mMovieSelection;
    struct IPAlbumList *mSelectedAlbums;
    ExportController *mExportController;
    ImageDB *mDB;
    Thumbnailer *mThumbnailer;
    NSString *mOriginalDateFormatString;
    NSString *mDateTimeFormat;
    unsigned int mSessionID;
    struct _NSSize mLastExportSize;
}

+ (id)exportMgr;
+ (id)exportMgrNoAlloc;
+ (struct _NSSize)exportImage:(struct IPPhotoInfo *)fp8 dest:(id)fp12 format:(unsigned long)fp16 quality:(float)fp20 rotation:(float)fp24 width:(unsigned int)fp28 height:(unsigned int)fp32 metadata:(int)fp36;
- (id)init;
- (void)dealloc;
- (void)releasePlugins;
- (void)setExportController:(id)fp8;
- (id)exportController;
- (void)setDocument:(id)fp8;
- (id)document;
- (void)updateDocumentSelection;
- (unsigned int)count;
- (id)recAtIndex:(unsigned int)fp8;
- (void)scanForExporters;
- (unsigned int)imageCount;
- (BOOL)imageIsEditedAtIndex:(unsigned int)fp8;
- (BOOL)imageIsPortraitAtIndex:(unsigned int)fp8;
- (id)imagePathAtIndex:(unsigned int)fp8;
- (id)sourcePathAtIndex:(unsigned int)fp8;
- (struct _NSSize)imageSizeAtIndex:(unsigned int)fp8;
- (unsigned long)imageFormatAtIndex:(unsigned int)fp8;
- (unsigned long)originalImageFormatAtIndex:(unsigned int)fp8;
- (BOOL)originalIsRawAtIndex:(unsigned int)fp8;
- (BOOL)originalIsMovieAtIndex:(unsigned int)fp8;
- (id)imageTitleAtIndex:(unsigned int)fp8;
- (id)imageCommentsAtIndex:(unsigned int)fp8;
- (float)imageRotationAtIndex:(unsigned int)fp8;
- (id)thumbnailPathAtIndex:(unsigned int)fp8;
- (float)imageAspectRatioAtIndex:(unsigned int)fp8;
- (unsigned long long)imageFileSizeAtIndex:(unsigned int)fp8;
- (id)imageDateAtIndex:(unsigned int)fp8;
- (int)imageRatingAtIndex:(unsigned int)fp8;
- (id)imageTiffPropertiesAtIndex:(unsigned int)fp8;
- (id)imageExifPropertiesAtIndex:(unsigned int)fp8;
- (id)imageKeywordsAtIndex:(unsigned int)fp8;
- (id)imageFileNameAtIndex:(unsigned int)fp8;
- (void)commitImageRotation;
- (unsigned int)albumCount;
- (unsigned int)imageCountAtAlbumIndex:(unsigned int)fp8;
- (id)albumNameAtIndex:(unsigned int)fp8;
- (id)albumMusicPathAtIndex:(unsigned int)fp8;
- (id)albumCommentsAtIndex:(unsigned int)fp8;
- (id)albumsOfImageAtIndex:(unsigned int)fp8;
- (unsigned int)positionOfImageAtIndex:(unsigned int)fp8 inAlbum:(unsigned int)fp12;
- (struct IPPhotoInfo *)photoAtIndex:(unsigned int)fp8;
- (void)enableControls;
- (void)disableControls;
- (id)window;
- (void)clickExport;
- (void)startExport;
- (void)cancelExport;
- (void)cancelExportBeforeBeginning;
- (void)markFilesExported;
- (id)directoryPath;
- (unsigned int)sessionID;
- (id)temporaryDirectory;
- (BOOL)doesFileExist:(id)fp8;
- (BOOL)doesDirectoryExist:(id)fp8;
- (BOOL)createDir:(id)fp8;
- (id)uniqueSubPath:(id)fp8 child:(id)fp12;
- (id)makeUniquePath:(id)fp8;
- (id)makeUniqueFilePath:(id)fp8 extension:(id)fp12;
- (id)makeUniqueFileNameWithTime:(id)fp8;
- (BOOL)makeFSSpec:(id)fp8 spec:(struct FSSpec *)fp12;
- (id)pathForFSSpec:(struct FSSpec *)fp8;
- (BOOL)getFSRef:(struct FSRef *)fp8 forPath:(id)fp12 isDirectory:(BOOL)fp16;
- (id)pathForFSRef:(struct FSRef *)fp8;
- (unsigned long)countFiles:(id)fp8 descend:(BOOL)fp12;
- (unsigned long)countFilesFromArray:(id)fp8 descend:(BOOL)fp12;
- (unsigned long long)sizeAtPath:(id)fp8 count:(unsigned long *)fp12 physical:(BOOL)fp16;
- (BOOL)isAliasFileAtPath:(id)fp8;
- (id)pathContentOfAliasAtPath:(id)fp8;
- (id)stringByResolvingAliasesInPath:(id)fp8;
- (BOOL)ensurePermissions:(unsigned long)fp8 forPath:(id)fp12;
- (id)validFilename:(id)fp8;
- (id)getExtensionForImageFormat:(unsigned long)fp8;
- (unsigned long)getImageFormatForExtension:(id)fp8;
- (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 rotation:(float)fp24 colorProfile:(char ***)fp28;
- (void *)createThumbnailer;
- (void *)retainThumbnailer:(void *)fp8;
- (void *)autoreleaseThumbnailer:(void *)fp8;
- (void)releaseThumbnailer:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 maxBytes:(unsigned int)fp12 maxWidth:(unsigned int)fp16 maxHeight:(unsigned int)fp20;
- (struct _NSSize)thumbnailerMaxBounds:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 quality:(int)fp12;
- (int)thumbnailerQuality:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 rotation:(float)fp12;
- (float)thumbnailerRotation:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 outputFormat:(unsigned long)fp12;
- (unsigned long)thumbnailerOutputFormat:(void *)fp8;
- (void)setThumbnailer:(void *)fp8 outputExtension:(id)fp12;
- (id)thumbnailerOutputExtension:(void *)fp8;
- (BOOL)thumbnailer:(void *)fp8 createThumbnail:(id)fp12 dest:(id)fp16;
- (struct _NSSize)lastImageSize:(void *)fp8;
- (struct _NSSize)lastThumbnailSize:(void *)fp8;
- (BOOL)exportImageAtIndex:(unsigned int)fp8 dest:(id)fp12 options:(CDAnonymousStruct24 *)fp16;
- (struct _NSSize)lastExportedImageSize;
- (BOOL)_checkForChangedDateLayout;

@end

@interface ExportMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id <ExportPluginProtocol> mPlugin;
    struct _NSSize mViewSize;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)description;
- (id)initWithPath:(id)fp8;
- (id)path;
- (id)bundle;
- (id)bundleInfo;
- (BOOL)isValidExportPlugin;
- (BOOL)loadPlugin;
- (id)exportPlugin;
- (void)unloadPlugin;
- (id)view;
- (struct _NSSize)viewSize;
- (void)rememberViewSize;
- (void)setPath:(id)fp8;
- (void)setBundle:(id)fp8;

@end

@interface ICController : NSObject
{
    ICObject *mRootObject;
    short mGetDeviceError;
}

+ (void)setHotPlugAction:(id)fp8;
+ (id)hotPlugAction;
+ (id)hotPlugActionPossibilities;
+ (id)deviceCapabilities:(id)fp8;
- (id)initWithDocument:(id)fp8;
- (void)dealloc;
- (id)_startupDeviceProc:(id)fp8;
- (void)_callCameraTreeWalk:(id)fp8;
- (void)_threadedStartupCheck:(id)fp8;
- (void)startupDeviceCheck;
- (void)_deviceAdded:(id)fp8;
- (void)_deviceRemoved:(id)fp8;
- (id)rootObject;
- (short)findRootObject;
- (short)icRegister;
- (short)_registerEventNotification:(id)fp8 notifyType:(unsigned long)fp12 notifyProc:(void *)fp16 refcon:(unsigned long)fp20;
- (short)icUnregister;
- (short)_unregisterEventNotification:(id)fp8 notifyType:(unsigned long)fp12 refcon:(unsigned long)fp16;

@end

@interface ICImportSpec : DBImportSpec
{
    ICObject *mICObject;
}

+ (id)importSpecWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
+ (id)importSpecWithICObject:(id)fp8 file:(id)fp12 shouldDelete:(BOOL)fp16;
- (id)initWithMountedPhoto:(struct IPPhotoInfo *)fp8 internalPhoto:(struct IPPhotoInfo *)fp12 shouldDelete:(BOOL)fp16;
- (void)dealloc;
- (id)initWithICObject:(id)fp8 file:(id)fp12 shouldDelete:(BOOL)fp16;
- (BOOL)fileIsPersistent;
- (id)object;
- (void)setObject:(id)fp8;
- (id)creationDate;
- (id)attributes;
- (BOOL)deleteIfNeeded;

@end

@interface ICObject : NSObject
{
    unsigned int mICAObject;
    ImageDB *mDB;
    unsigned int mKey;
    BOOL mDeviceFound;
    NSLock *mLock;
    NSDictionary *mPropertyDictionary;
    BOOL mPropertyDictionaryRetrieved;
    NSMutableArray *mChildren;
    BOOL mChildrenRetrieved;
    unsigned long mChildCount;
    BOOL mChildCountRetrieved;
    unsigned long mImageCount;
    BOOL mImageCountRetrieved;
    NSData *mThumbnail;
    BOOL mThumbnailRetrieved;
    NSMutableArray *mPropertyList;
    long mOrientation;
    double mLatitude;
    double mLongitude;
    NSString *mLocationName;
    NSString *mCity;
    NSString *mState;
}

+ (short)setHotPlugAction:(id)fp8;
+ (BOOL)asyncCommunication;
+ (void)setAsyncCommunication:(BOOL)fp8;
+ (id)icObjectWithICAObject:(unsigned long)fp8;
+ (id)ICAThumbnailToNSImage:(struct ICAThumbnail *)fp8;
- (id)init;
- (id)initWithICAObject:(unsigned long)fp8;
- (void)dealloc;
- (id)description;
- (unsigned long)icaObject;
- (void)setICAObject:(unsigned long)fp8;
- (BOOL)isEqual:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)setDeviceFound:(BOOL)fp8;
- (BOOL)deviceFound;
- (BOOL)isCamera;
- (BOOL)isImage;
- (BOOL)isMovie;
- (BOOL)isDirectory;
- (BOOL)isLocked;
- (void)notifyMounted;
- (void)notifyUnmounted;
- (id)countObjectProc:(id)fp8;
- (unsigned long)countCameras;
- (void)threadedCountImages:(BOOL)fp8;
- (BOOL)imageCountRetrieved;
- (void)_doCountImages:(id)fp8;
- (unsigned long)countImages:(BOOL)fp8;
- (id)treeWalk:(unsigned long)fp8 target:(id)fp12 selector:(SEL)fp16 userInfo:(id)fp20;
- (id)getName:(BOOL)fp8;
- (id)getPropertyDictionary:(BOOL)fp8;
- (id)getChildren:(BOOL)fp8;
- (unsigned long)getChildCount:(BOOL)fp8;
- (id)getThumbnail:(BOOL)fp8;
- (id)getPropertyByType:(unsigned long)fp8 forceUpdate:(BOOL)fp12;
- (short)deleteObject;
- (short)eject;
- (short)retrievePropertyDictionary;
- (void)setPropertyDictionary:(id)fp8;
- (short)retrieveChildCount;
- (void)setChildCount:(unsigned long)fp8;
- (short)retrieveChildren;
- (id)_findRolls:(id)fp8;
- (void)setChildren:(id)fp8 needPropertyDictionary:(BOOL)fp12;
- (double)latitude;
- (double)longitude;
- (id)locationName;
- (id)locationCity;
- (id)locationState;
- (void)setLocationName:(id)fp8;
- (void)setLocationCity:(id)fp8;
- (void)setLocationState:(id)fp8;
- (void)clearThumbnail;
- (void)retrieveThumbnail;
- (id)retrievePropertyByType:(unsigned long)fp8;
- (id)retrievePropertyData:(id)fp8;
- (id)retrievePropertyData:(id)fp8 startByte:(unsigned long)fp12 maxSize:(long)fp16;
- (unsigned long)retrievePropertyDataSize:(id)fp8;
- (id)downloadFile:(id)fp8 error:(short *)fp12;

@end

@interface ICProperty : NSObject
{
    unsigned int mProperty;
    struct ICAPropertyInfo mPropertyInfo;
}

+ (id)icPropertyWithProperty:(unsigned long)fp8 info:(struct ICAPropertyInfo *)fp12;
- (id)init;
- (id)initWithProperty:(unsigned long)fp8 info:(struct ICAPropertyInfo *)fp12;
- (unsigned long)property;
- (void)setProperty:(unsigned long)fp8;
- (struct ICAPropertyInfo *)propertyInfo;
- (void)setPropertyInfo:(struct ICAPropertyInfo *)fp8;

@end

@interface ICTreeWalk : NSObject
{
    ICObject *mObject;
    id mUserInfo;
}

- (id)init;
- (id)initWithObject:(id)fp8 userInfo:(id)fp12;
- (id)object;
- (id)userInfo;

@end

@interface ImageFilterMgr : NSObject <ImageFilterSupportProtocol>
{
    NSMutableArray *mFilters;
}

+ (id)imageFilterMgr;
- (void)scanForFilters;
- (void)releasePlugins;
- (unsigned int)count;
- (id)recAtIndex:(unsigned int)fp8;

@end

@interface ImageFilterMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id mController;
    id <ImageFilterPluginProtocol> mPlugin;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)initWithPath:(id)fp8 controller:(id)fp12;
- (id)path;
- (id)controller;
- (void)setController:(id)fp8;
- (id)bundle;
- (id)bundleInfo;
- (id)title;
- (BOOL)isValidImageFilterPlugin;
- (BOOL)loadPlugin;
- (id)imageFilterPlugin;
- (void)unloadPlugin;
- (void)setPath:(id)fp8;
- (void)setBundle:(id)fp8;

@end

@interface ImportSheet : NSObject
{
    id mSheet;
    BOOL mDeleteAfter;
}

- (id)init;
- (id)sheet;
- (BOOL)deleteAfter;
- (void)yes:(id)fp8;
- (void)no:(id)fp8;
- (void)toggleDelete:(id)fp8;

@end

@interface ImportSpec : NSObject
{
    NSString *mFile;
    unsigned int mImageFormat;
    struct IPPhotoInfo *mPhoto;
    BOOL mDelete;
    int mValidateResult;
    int mFailReason;
    int mOrder;
}

+ (id)importSpecWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)init;
- (id)initWithFile:(id)fp8;
- (id)initWithFile:(id)fp8 shouldDelete:(BOOL)fp12;
- (void)dealloc;
- (id)initWithPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)fileIsPersistent;
- (BOOL)fileIsMounted;
- (id)file;
- (void)setFile:(id)fp8;
- (struct IPPhotoInfo *)photo;
- (void)setPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)shouldDelete;
- (void)setShouldDelete:(BOOL)fp8;
- (int)validateResult;
- (void)setValidateResult:(int)fp8;
- (int)failReason;
- (void)setFailReason:(int)fp8;
- (id)creationDate;
- (id)attributes;
- (unsigned long)imageFormat;
- (void)setImageFormat:(unsigned long)fp8;
- (int)order;
- (void)setOrder:(int)fp8;
- (int)compareOrder:(id)fp8;
- (BOOL)deleteIfNeeded;

@end

@interface PhotoCD : NSObject
{
    NSString *mName;
    ImageDB *mDB;
    unsigned int mKey;
    NSNumber *mDiskID;
    NSString *mMountPoint;
    unsigned int mImageCount;
    NSString *mImageRoot;
    NSArray *mImages;
    int mPhotoCDFormat;
}

- (id)initWithDiskID:(id)fp8 mountPoint:(id)fp12;
- (void)dealloc;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (int)photoCDFormat;
- (void)_acquireImageList;
- (id)_translateResolutionKeyToString:(int)fp8;
- (id)name;
- (id)mountPoint;
- (id)diskID;
- (id)getThumbnail;
- (BOOL)stillExists;
- (int)imageCount;
- (id)images;
- (id)imageRoot;
- (id)imagePathAtIndex:(int)fp8;
- (id)imageAtIndex:(int)fp8 resolution:(int)fp12;
- (id)jpegAtIndex:(int)fp8 resolution:(int)fp12 compression:(float)fp16 putSize:(struct _NSSize *)fp20;
- (void *)rgbBufferAtIndex:(int)fp8 resolution:(int)fp12 putSize:(struct _NSSize *)fp16;
- (id)modificationDateForPhotoAtIndex:(int)fp8;

@end

@interface PhotoCDImage : NSObject
{
    NSString *mPath;
    PhotoCD *mPhotoCD;
    ImageDB *mDB;
    unsigned int mKey;
}

+ (id)imageArrayWithPaths:(id)fp8 photoCD:(id)fp12;
- (id)initWithPath:(id)fp8 photoCD:(id)fp12;
- (void)dealloc;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;

@end

@interface PhotoCDManager : NSObject
{
    NSMutableDictionary *mPhotoCDs;
    NSMutableDictionary *mMountPoints;
    id mDelegate;
    BOOL mRegistered;
    BOOL mMountNotifySuppressed;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (BOOL)ready;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (int)photoCDCount;
- (id)photoCDs;
- (id)mountPoints;
- (void)suppressMountNotifications:(BOOL)fp8;
- (BOOL)isMountSuppressed;
- (void)registerWithDiskArb:(BOOL)fp8;
- (void)CDInserted:(id)fp8;
- (void)CDEjected:(id)fp8;
- (id)JPEGDataFromPhotoCDFile:(id)fp8 resolution:(id)fp12 compression:(float)fp16 putSize:(struct _NSSize *)fp20;
- (id)NSImageFromPhotoCDFile:(id)fp8 resolution:(id)fp12;
- (id)PPMDataFromPhotoCDFile:(id)fp8 resolution:(id)fp12;
- (CDAnonymousStruct14)rgbBufferFromPPMData:(id)fp8;
- (id)NSBitmapImageRepFromRGB:(CDAnonymousStruct14)fp8;
- (id)NSImageFromRGB:(CDAnonymousStruct14)fp8;

@end

@interface CalendarView : NSControl
{
    NSButton *mReturnToYearsButton;
    NSButton *mClearSelectionButton;
    NSButton *mPreviousButton;
    NSButton *mNextButton;
    BOOL mShowDays;
    int mWeekStartOffset;
    int mYear;
    int mMonth;
    int mMonthsToShow;
    BOOL mShowPartialMonths;
    int mMinYear;
    int mMinMonth;
    int mMaxYear;
    int mMaxMonth;
    struct MapOfDays *mPictureDays;
    struct SetOfDays *mSelectedDays;
    BOOL mClickThroughSelection;
    NSDictionary *mTitleTextAttrs;
    NSDictionary *mTextAttrs;
    NSDictionary *mSelectedTextAttrs;
    NSDictionary *mNoPhotoTextAttrs;
    NSDictionary *mNoPhotoSelectedTextAttrs;
    float mLocalizedWidth;
    float mCellWidth;
    float mCellLeft;
    float mWeekTabWidth;
    float mCellAscent;
    float mCellDescent;
    float mCellLeading;
    float mMonthTextHeight;
    float mWeekTextHeight;
    float mWeekTextExtraHeight;
    float mMonthExtraHeight;
    float mMonthModeYearTextHeight;
    float mMonthModeCenterDividerWidth;
    float mMonthModeExtraHeight;
    float mMonthModeYearMonthHeightSpace;
    float mDayTextSize;
    char *mDayTextFont;
    char *mNoPhotoDayTextFont;
    NSColor *mBlackColor;
    NSColor *mCellBackgroundColor;
    NSColor *mCellSelectedBackgroundColor;
    NSColor *mCellClickThroughSelectedBackgroundColor;
    NSColor *mCellSelectedBackgroundNoPhotoColor;
    NSColor *mCellClickThroughSelectedBackgroundNoPhotoColor;
    NSColor *mNoPhotoTextColor;
    NSColor *mNoPhotoSelectedTextColor;
    NSColor *mTextColor;
    NSColor *mSelectedTextColor;
    NSColor *mWeekTabBackgroundColor;
    NSColor *mWeekTabSelectedBackgroundColor;
    NSColor *mWeekTabClickThroughSelectedBackgroundColor;
    NSColor *mWeekTabDimpleColor;
    NSColor *mWeekTabSelectedDimpleColor;
    float mAnimationOffset;
    double mAnimationDuration;
    SEL mAction;
    id mTarget;
    double mLastScrollWheelEvent;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (BOOL)isShowingDays;
- (void)setShowDays:(BOOL)fp8;
- (void)setShowPartialMonths:(BOOL)fp8;
- (void)showReasonableRange;
- (BOOL)clearPictureDays;
- (BOOL)setPictureDay:(double)fp8;
- (void)doneSetPictureDay;
- (void)selectDate:(double)fp8;
- (void)currentlyShowingStartYear:(int *)fp8 startMonth:(int *)fp12 endYear:(int *)fp16 endMonth:(int *)fp20;
- (void)scrollIntoView:(double)fp8 withAnimation:(BOOL)fp16 atBottom:(BOOL)fp20;
- (void)scrollToToday;
- (void)drawingPreflight;
- (BOOL)hasSelection;
- (BOOL)clickThroughSelection;
- (struct SetOfDays *)selectedDays;
- (struct MapOfDays *)pictureDays;
- (void)showWeekTab:(BOOL)fp8;
- (float)preferredHeightForVerticalSize:(float)fp8 monthsFittingOut:(int *)fp12;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (float)localizedWidth;
- (void)chooseNextMonth:(id)fp8;
- (void)choosePrevMonth:(id)fp8;
- (void)chooseFirstPictureMonth:(id)fp8;
- (void)chooseLastPictureMonth:(id)fp8;
- (void)chooseFirstSelectedMonth:(id)fp8;
- (void)chooseLastSelectedMonth:(id)fp8;
- (void)chooseShowWeekTabs:(id)fp8;
- (void)chooseToggleDays:(id)fp8;
- (void)chooseShowToday:(id)fp8;
- (void)chooseCancelSelection:(id)fp8;
- (void)_forceShowDays:(BOOL)fp8;
- (void)synchYearMonthToggleButton;
- (void)_synchUpDownButtons;
- (id)_pathForRectangle:(struct _NSRect)fp8 leftCurve:(BOOL)fp24 rightCurve:(BOOL)fp28;
- (float)_pointInYear:(int)fp8 inRectangle:(struct _NSRect)fp12 mousePoint:(struct _NSPoint)fp28 partOut:(int *)fp36 dateOut:(double *)fp40;
- (float)_pointInMonth:(int)fp8 forYear:(int)fp12 inRectangle:(struct _NSRect)fp16 mousePoint:(struct _NSPoint)fp32 partOut:(int *)fp40 dateOut:(double *)fp44;
- (float)_drawYear:(int)fp8 inRectangle:(struct _NSRect)fp12;
- (void)_drawWeekTabForWeekStarting:(double)fp8 usingRectangle:(struct _NSRect)fp16;
- (float)_drawMonth:(int)fp8 forYear:(int)fp12 inRectangle:(struct _NSRect)fp16;
- (float)_heightOfMonth:(int)fp8 forYear:(int)fp12;
- (float)_heightOfYear;
- (void)_adjustToViewSize:(struct _NSSize)fp8;
- (void)_showMonth:(double)fp8 atEnd:(BOOL)fp16;
- (void)_findPoint:(struct _NSPoint)fp8 partOut:(int *)fp16 dateOut:(double *)fp20;
- (double)_dateWithClickThrough:(double)fp8;
- (int)_yearWithClickThrough:(int)fp8;
- (void)_setRangeLimits;
- (void)_setupFontCG:(struct CGContext *)fp8 forDrawingDay:(double)fp12;
- (id)_textAttrsForPictures:(BOOL)fp8 selected:(BOOL)fp12;
- (void)_setupFontCG:(struct CGContext *)fp8 pictures:(BOOL)fp12 selected:(BOOL)fp16;
- (id)_backgroundForSelected:(BOOL)fp8 withPictures:(BOOL)fp12;
- (void)_selectionChanged;
- (BOOL)_wholeWeekSelected:(double)fp8;
- (float)_minWidthForLanguage;

@end

@interface ICUndoRec : NSObject
{
    id mId;
    id mValue;
    int mType;
}

- (id)initWithObject:(id)fp8 andValue:(id)fp12 type:(int)fp16;
- (void)dealloc;
- (int)type;
- (id)value;
- (id)object;

@end

@interface InfoCommentView : BackgroundColorView
{
    id commentText;
    BOOL mFullSizeInfo;
}

- (void)_installSubview:(id)fp8;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)setFullSizeInfo:(BOOL)fp8;

@end

@interface InfoController : NSObject
{
    ArchiveController *mArchiveController;
    BurnController *mBurnController;
    InfoView *mBurnInfo;
    BOOL mInited;
    int mSpecialSwitch;
    int mInitialMode;
    float mPreviousViewHeight;
    int mPauseCount;
    NSButton *mInfoButton;
    NSButton *mCalendarButton;
    NSButton *mKeywordButton;
    id mSplitView;
    NSView *mBottomView;
    InfoView *mCurrentInfo;
    InfoView *mBlankInfo;
    InfoView *mSuperInfo;
    ImageDB *mCurrentDB;
    struct MessageReceiver mMessageReceiver;
    SuperInfo *mHUDInfo;
    HUDWindow *mHUDPanel;
    BOOL mUpdatePaused;
    BOOL mPausedIsAlbumSwitch;
    BOOL mPausedNeedUpdate;
    NSImage *mButtonInfoH;
    NSImage *mButtonInfoN;
    NSImage *mButtonInfoHP;
    NSImage *mButtonInfoNP;
    BOOL mCurrentAlbumAllowsSearch;
}

- (void)_initializeHUD;
- (void)showHUD:(id)fp8;
- (void)hideHUD:(id)fp8;
- (void)closeHUD:(id)fp8;
- (id)hudInfo;
- (id)hudPanel;
- (void)awakeFromNib;
- (void)dealloc;
- (id)undoManagerForTextView:(id)fp8;
- (id)currentAlbum;
- (id)displayedAlbum;
- (id)albumMgr;
- (void)importFromCurrentSource:(id)fp8;
- (void)ensureInfoVisibility;
- (id)aggregateDateForSelection:(struct IPPhotoList *)fp8;
- (void)_setCurrentInfo:(id)fp8;
- (void)selectionChanged:(id)fp8;
- (void)safeToBegin;
- (void)showOrHideIfNeeded;
- (void)pauseUpdating;
- (void)resumeUpdating;
- (void)dataChanged:(id)fp8;
- (float)minimumHeight;
- (void)loadSavedPosition;
- (BOOL)isSearchingAllowed;
- (void)initializeImages;
- (void)refreshModeButtons;
- (void)_setInfoViewHeight:(float)fp8 forView:(id)fp12 withAnimation:(BOOL)fp16;
- (void)cancelInfoSearching;
- (int)currentMode;
- (void)setMode:(int)fp8 withAnimation:(BOOL)fp12;
- (void)infoModeClicked:(id)fp8;
- (void)rememberHeight;
- (BOOL)snapIfNeeded;
- (id)undoManager;
- (id)stateDictionary;
- (void)resetState:(id)fp8;
- (BOOL)burnArmed;
- (BOOL)burnInProgress;
- (void)setBurnInfo:(id)fp8;
- (id)burnInfo;
- (id)discName;
- (void)setDiscName:(id)fp8;
- (id)superInfo;
- (id)archiveController;

@end

@interface InfoInspector : NSObject
{
    ArchiveController *mArchiveController;
    NSWindow *mWindow;
    NSTabView *mTabView;
    id mCameraFormat;
    id mCameraMaker;
    id mCameraModel;
    id mCameraSoftware;
    id mEXIFVersion;
    id mExposureAperture;
    id mExposureBias;
    id mExposureBrightness;
    id mExposureDistance;
    id mExposureFlash;
    id mExposureFocalLength;
    id mExposureIndex;
    id mExposureISOASA;
    id mExposureLightSource;
    id mExposureMaxAperture;
    id mExposureMetering;
    id mExposureProgram;
    id mExposureSensing;
    id mExposureShutter;
    id mGPSLatitude;
    id mGPSLongitude;
    id mGPSAltitude;
    id mGPSShowButton;
    id mFileImportedDate;
    id mFileKind;
    id mFileModifiedDate;
    id mFileName;
    id mFileSize;
    id mFlashPixVersion;
    id mImageColorMode;
    id mImageCompressor;
    id mImageDepth;
    id mImageDigitizedDate;
    id mImageDPI;
    id mImageHeight;
    id mImageOriginalDate;
    id mImageRatio;
    id mImageSize;
    id mImageUserComment;
    id mImageWidth;
    id mLocationDescription;
    NSFlippedView *mScrollDocumentView;
    double mGPSLatitudeValue;
    double mGPSLongitudeValue;
    NSMutableArray *mInfoPanelNibObjects;
    struct MessageReceiver mMessageReceiver;
    BOOL mMessageReceiverCreated;
    NSString *mDateTimeFormat;
    NSString *mOriginalDateFormatString;
    Ellipsizer *mEllipsizer;
    NSWindow *mRegularWindow;
    HUDWindow *mHUDWindow;
    BOOL mWantsHUD;
}

+ (void)initialize;
+ (id)dateFormatString;
+ (id)dateString:(id)fp8;
+ (id)fileSizeString:(struct IPPhotoInfo *)fp8;
+ (id)fileImportDateString:(struct IPPhotoInfo *)fp8 format:(id)fp12;
+ (id)fileModifiedDateString:(struct IPPhotoInfo *)fp8 format:(id)fp12;
+ (id)nonEmptyString:(id)fp8;
+ (id)emptyString;
+ (id)nonEmptyDateString:(id)fp8 format:(id)fp12;
+ (id)ellipsizedNonEmptyString:(id)fp8 width:(float)fp12;
+ (id)apertureString:(double)fp8;
+ (id)shutterString:(double)fp8;
+ (id)brightnessString:(double)fp8;
+ (id)biasString:(double)fp8;
+ (id)distanceString:(double)fp8;
+ (id)focalLengthString:(double)fp8;
+ (id)indexString:(double)fp8;
+ (id)sensingString:(short)fp8;
+ (id)meteringString:(short)fp8;
+ (id)lightSourceString:(short)fp8;
+ (id)programString:(short)fp8;
+ (id)flashString:(short)fp8;
+ (id)isoSpeedString:(short)fp8;
+ (id)positionString:(BOOL)fp8 unsignedDegrees:(double)fp12;
+ (id)altitudeString:(double)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)_loadNibIfNeeded;
- (void)show;
- (BOOL)isVisible;
- (void)hide;
- (void)windowWillClose:(id)fp8;
- (void)_userDefaultsChanged:(id)fp8;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)selectionChanged:(id)fp8;
- (void)showGPS:(id)fp8;
- (void)_updateImageInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateFileInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateCameraInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateExposureInfo:(struct IPPhotoInfo *)fp8;
- (void)_updateGPSInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)isHUD;
- (void)_layOutSections;
- (void)groupDisclosurePressed:(id)fp8;
- (void)_convertToNewLook;
- (BOOL)closeHUD:(id)fp8;
- (void)useHUDLook:(BOOL)fp8;
- (BOOL)_checkForChangedDateLayout;

@end

@interface NSFavoriteButton : NSButton
{
}

- (void)mouseDown:(id)fp8;

@end

@interface InfoView : NSView
{
    InfoController *mInfoController;
    NSTextField *mTitleText;
    BOOL mAnimatingRightNow;
    BOOL mCurrent;
}

- (id)infoController;
- (void)setInfoController:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)updateData:(BOOL)fp8;
- (float)titleInset;
- (void)setFrameSize:(struct _NSSize)fp8;
- (float)minimumHeight;
- (float)snapSizeForHeight:(float)fp8;
- (float)snapIncrement;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)beginAnimation;
- (void)endAnimation;

@end

@interface KeyClass : NSObject
{
    unsigned long mKey;
}

+ (void)initialize;
+ (id)keyWithKey:(id)fp8;
+ (id)keyWithString:(id)fp8;
+ (id)keyWithUnsignedLong:(unsigned long)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithKey:(id)fp8;
- (id)initWithString:(id)fp8;
- (id)initWithUnsignedLong:(unsigned long)fp8;
- (void)setKey:(id)fp8;
- (void)increment;
- (BOOL)isEqual:(id)fp8;
- (int)compare:(id)fp8;
- (id)description;
- (id)number;
- (unsigned long)unsignedLongValue;
- (void)setUnsignedLongValue:(unsigned long)fp8;
- (id)stringValue;
- (id)stringValueWithExtension:(id)fp8;

@end

@interface KeyMgr : NSObject <NSCoding, NSCopying, KeyProtocol>
{
    struct vector<Key, std::allocator<Key>> *mKeys;
    BOOL mIsModified;
    NSLock *mKeyLock;
}

+ (void)initialize;
+ (id)keyMgrWithKeyMgr:(id)fp8;
+ (id)keyMgrWithKeySet:(struct KeySet *)fp8;
+ (id)keyMgrWithCapacity:(unsigned int)fp8;
+ (id)keyMgrWithKey:(unsigned long)fp8;
+ (id)keyMgrWithKeys:(unsigned int *)fp8 count:(unsigned int)fp12;
+ (id)keyMgr;
- (id)init;
- (id)initWithKeyMgr:(id)fp8;
- (id)initWithKeySet:(struct KeySet *)fp8;
- (id)initWithCapacity:(unsigned int)fp8;
- (id)initWithKey:(unsigned long)fp8;
- (id)initWithKeys:(unsigned int *)fp8 count:(unsigned int)fp12;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)description;
- (id)listString;
- (unsigned int)count;
- (struct vector<Key, std::allocator<Key>> *)keys;
- (id)keysAsIndexSet;
- (unsigned long)keyAtIndex:(unsigned int)fp8;
- (BOOL)hasAnyKeys:(id)fp8;
- (BOOL)hasKey:(unsigned long)fp8;
- (BOOL)isEqualKeys:(id)fp8;
- (unsigned int)findIndexForKey:(unsigned long)fp8;
- (void)replaceKeyAtIndex:(unsigned int)fp8 withKey:(unsigned long)fp12;
- (void)addKey:(unsigned long)fp8;
- (void)insertKey:(unsigned long)fp8 atIndex:(int)fp12;
- (id)uniqueKeys:(id)fp8;
- (void)add:(unsigned long)fp8;
- (void)addWithKeyMgr:(id)fp8;
- (void)addUniqueWithKeyMgr:(id)fp8;
- (void)addWithKeySet:(struct KeySet *)fp8;
- (void)addUniqueWithKeySet:(struct KeySet *)fp8;
- (BOOL)addUnique:(unsigned long)fp8;
- (void)addWithPhotoList:(struct IPPhotoList *)fp8;
- (void)addUniqueWithPhotoList:(struct IPPhotoList *)fp8;
- (void)remove:(unsigned long)fp8;
- (void)removeWithKeyMgr:(id)fp8;
- (void)removeAll;
- (BOOL)isModified;
- (void)replaceContentsWithKeyMgr:(id)fp8;
- (void)_setKeys:(id)fp8;

@end

@interface Keyword : NSObject <NSCoding>
{
    struct SqKeyword *_keyword;
}

+ (void)initialize;
+ (id)keywordWithKeyword:(id)fp8;
- (id)init;
- (id)initWithSqKeyword:(struct SqKeyword *)fp8;
- (void)dealloc;
- (id)initWithKey:(unsigned long)fp8 stringValue:(id)fp12 shortcut:(id)fp16;
- (id)initWithKeywordDictionary:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (void)_setKey:(unsigned long)fp8;
- (id)shortcut;
- (void)setShortcut:(id)fp8;
- (BOOL)_setShortcut:(id)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (BOOL)_setStringValue:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)description;
- (BOOL)isVisible;
- (BOOL)isFavorite;
- (BOOL)isEqual:(id)fp8;
- (int)compareStringValue:(id)fp8;

@end

@interface Keyword (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface KeywordCell : NSActionCell
{
    NSImage *mIcon;
    struct _NSRect mFrame;
}

+ (void)initialize;
+ (unsigned int)desiredHeight;
- (id)init;
- (void)dealloc;
- (BOOL)drawIcon;
- (struct _NSPoint)iconOriginForCell:(struct _NSRect)fp8 iconSize:(struct _NSSize)fp24;
- (struct _NSRect)textFrameForCell:(struct _NSRect)fp8 textSize:(struct _NSSize)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)editWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 event:(id)fp36;
- (void)endEditing;

@end

@interface KeywordController : NSWindowController
{
    ArchiveController *mArchiveController;
    KeywordMgr *mKeywordMgr;
    id mKeywordTable;
    id mSearchResultText;
    int mDraggedRow;
    BOOL mCreatingNewKeyword;
    Album *mOldCurrentAlbum;
    int mOldCurrentAlbumRetainCount;
}

- (id)initWithKeywordMgr:(id)fp8 archiveController:(id)fp12;
- (void)dealloc;
- (id)keywordMgr;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_notifyKeywordsChanged;
- (void)undoAddKeywords:(id)fp8 changeDict:(id)fp12 withState:(id)fp16;
- (void)undoRemoveKeywords:(id)fp8 changeDict:(id)fp12 withState:(id)fp16;
- (void)assignKeywordsToSelectedImages:(id)fp8;
- (void)assignKeywords:(id)fp8 toImages:(struct IPPhotoList *)fp12 writeDB:(BOOL)fp16;
- (void)removeKeywordsFromSelectedImages:(id)fp8;
- (void)removeKeywords:(id)fp8 fromImages:(struct IPPhotoList *)fp12 writeDB:(BOOL)fp16;
- (void)deleteKeywords:(id)fp8;
- (void)renameKeywordAtIndex:(int)fp8 to:(id)fp12;

@end

@interface KeywordMgr : NSObject <NSCoding>
{
    unsigned int mNextKey;
    NSMutableArray *mKeywords;
    NSMutableDictionary *mRootCategory;
    ImageDB *mImageDB;
    struct SqDB *mSqDB;
    Keyword *mFavoriteKeyword;
    unsigned int mCurrentCategory;
    unsigned long long mChangedFields;
}

+ (int)indexOfKeywordString:(id)fp8 inArrayOfKeywordStrings:(id)fp12;
+ (void)initialize;
+ (id)checkmarkString;
- (void)_resort;
- (void)_initBlankKeywordCategories;
- (id)initWithDB:(id)fp8;
- (void)addToSqDB:(struct SqDB *)fp8;
- (id)initWithSqDB:(struct SqDB *)fp8 imageDB:(id)fp12;
- (id)description;
- (void)addDefaultKeywords;
- (void)dealloc;
- (id)stringArrayFromKeywords:(id)fp8;
- (id)keywordStrings;
- (id)keywordStringsForCategory:(id)fp8;
- (void)unarchive:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)keywordData;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)favoriteKeyword;
- (id)favoriteKeywordString;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)nextKeyAndIncrement;
- (void)setKeywordMgrFromKeywordMgr:(id)fp8;
- (BOOL)resortKeywordsToMgrOrder:(id)fp8;
- (id)keywords;
- (int)count;
- (id)keywordAtIndex:(unsigned int)fp8;
- (void)deleteKeyword:(id)fp8;
- (id)findKeywordsContainingString:(id)fp8;
- (unsigned int)findKeywordByString:(id)fp8;
- (id)findOrAddKeywordByString:(id)fp8;
- (id)specialMovieKeyword;
- (id)specialRawKeyword;
- (id)keywordWithKey:(unsigned long)fp8;
- (id)keywordWithShortcut:(id)fp8;
- (BOOL)keywordIsDefined:(id)fp8;
- (id)untitledKeywordString;
- (id)addNewUntitledKeyword;
- (BOOL)canRenameKeywordAtIndex:(int)fp8 toString:(id)fp12;
- (BOOL)renameKeywordAtIndex:(int)fp8 toString:(id)fp12;
- (BOOL)_shortcutAlreadyUsed:(id)fp8;
- (id)suggestShortcutForKeywordName:(id)fp8;
- (void)addKeywordObject:(id)fp8;
- (BOOL)notifyChangedFromTransaction:(BOOL)fp8;
- (void)markChangedField:(unsigned long long)fp8;
- (BOOL)hasCategories;
- (id)currentCategory;
- (id)topCategories;
- (id)keywordsNotInACategory;
- (void)setCurrentCategory:(id)fp8;
- (void)setCurrentCategoryKey:(int)fp8;
- (void)_recursiveBuildMenu:(id)fp8 withCategory:(id)fp12 currentDepth:(int)fp16;
- (id)categorySelectionMenu;
- (id)categoryWithKey:(unsigned long)fp8;
- (id)addSubcategoryNamed:(id)fp8 toCategory:(id)fp12;
- (BOOL)removeCategoryHeirarchy:(id)fp8;
- (BOOL)renameCategory:(id)fp8 toString:(id)fp12;
- (BOOL)moveCategory:(id)fp8 toChildOfCategory:(id)fp12;
- (BOOL)reorderCategory:(id)fp8 toIndex:(int)fp12;
- (id)allCategories;
- (id)rootCategory;
- (BOOL)isCategory:(id)fp8;
- (int)depthOfCategory:(id)fp8;
- (id)parentOfItem:(id)fp8;

@end

@interface IPBook : NSObject
{
    ImageDB *mDB;
    IPBookController *mController;
    IPTemplate *mTemplate;
    BOOL mIsPrototype;
    unsigned long mAlbumKey;
    Album *mAlbum;
    struct _NSSize mBookSize;
    struct _NSSize mBookCoverSize;
    float mBleed;
    struct IPPhotoList *mPhotoList;
    NSMutableArray *mPages;
    BOOL mDoubleSided;
    BOOL mAlternatePages;
    BOOL mShowsCaptions;
    BOOL mIncludeAppleBranding;
    BOOL mShouldAutoflow;
    BOOL mPrintsPageNumbers;
    NSMutableArray *mDefaultPageNumberElements;
    IPPage *mScrapAreaPage;
    IPPage *mDefaultLayoutPage;
    int mLastViewedPage;
    float mRanking;
    BOOL mLeadingEnabled;
    BOOL mAlwaysShowPlacard;
    int mDefaultViewMode;
    float mDefaultZoomLevel;
    BOOL mIsModified;
    struct MessageSender mMessageSender;
    BOOL mNotificationActive;
    NSMutableDictionary *mBookTemplateCache;
    BOOL mIsSwitchingThemes;
    IPPageElement *mDragSource;
    IPPageElement *mDropTarget;
    BOOL mHasUserText;
    BOOL mThumbViewShowing;
    BOOL mSwitchToUnplacedIfModified;
    IPMultiPageTextView *mBookTextSuperview;
    struct CGDataProvider *mBookTextPDFProvider;
    struct CGPDFDocument *mBookTextPDFDoc;
    double mCalendarBaseDate;
    IPCalendarData *mCalendarData;
    NSMutableArray *mCalendarSources;
    NSMutableArray *mCalendarSourceNames;
    NSString *mHolidayCalendar;
    int mHolidayCalendarTag;
    BOOL mIncludeBirthdays;
    NSDictionary *mLocaleDictionary;
    int mStartOfWeek;
    BOOL mIsWireBound;
    NSArray *mUserCustomizedPages;
    BOOL mShouldHideProductRotationPrompt;
    BOOL mModifyBlock;
    BOOL mSoftProofingEnabled;
    BOOL mDrawCropMarks;
    struct _NSSize mEmbeddedPrintSize;
    struct _NSSize mDefaultContactSheetCellSize;
    NSMutableArray *mMapMarkers;
    BOOL mLinkedTextTitlePref;
    BOOL mLinkedTextCommentsPref;
    BOOL mLinkedTextDatePref;
    BOOL mLinkedTextRatingPref;
    BOOL mLinkedTextKeywordsPref;
    BOOL mLinkedTextFilenamePref;
    BOOL mLinkedTextCameraPref;
    BOOL mLinkedTextISOPref;
    BOOL mLinkedTextFlashPref;
    BOOL mLinkedTextShutterPref;
    BOOL mLinkedTextAperturePref;
    BOOL mLinkedTextFocalLengthPref;
    NSMutableArray *mPreservedImageAdjustments;
}

+ (id)bookWithEmbeddedBook:(id)fp8 paperSize:(struct _NSSize)fp12 photoRect:(struct _NSRect)fp20 photoLayout:(int)fp36;
- (id)init;
- (id)initWithAlbum:(id)fp8 theme:(id)fp12;
- (id)initWithOldBookAlbum:(id)fp8 forAlbum:(id)fp12;
- (void)_getImageListFromAlbum:(id)fp8;
- (id)bestThemeForCardBasedOnTheme:(id)fp8 photoInfo:(struct IPPhotoInfo *)fp12;
- (void)ensurePage:(id)fp8 complementsPageType:(id)fp12;
- (void)encodeWithDictionary:(id)fp8 forArchive:(BOOL)fp12;
- (id)initWithDictionary:(id)fp8 bookTemplate:(id)fp12 db:(id)fp16 isPrototype:(BOOL)fp20;
- (void)takeValuesFromDictionary:(id)fp8 bookTemplate:(id)fp12;
- (void)restoreValuesFromDictionary:(id)fp8 bookTemplate:(id)fp12;
- (id)db;
- (void)setDB:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (id)bookTemplate;
- (void)setTemplate:(id)fp8;
- (void)setTemplate:(id)fp8 force:(BOOL)fp12;
- (void)setTemplate:(id)fp8 force:(BOOL)fp12 scaleContent:(BOOL)fp16;
- (void)setIsSwitchingThemes:(BOOL)fp8;
- (void)_saveBookTemplateState;
- (BOOL)_restoreBookStateFromTemplate:(id)fp8;
- (void)_clearBookTemplateCache;
- (BOOL)isPrototype;
- (void)setIsPrototype:(BOOL)fp8;
- (BOOL)canUtilizeInsideCovers;
- (BOOL)isBookProduct;
- (BOOL)isWireBound;
- (BOOL)isCalendarProduct;
- (BOOL)isCardProduct;
- (BOOL)isPostcardProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (struct _NSSize)bookSize;
- (void)setBookSize:(struct _NSSize)fp8;
- (void)setBookSize:(struct _NSSize)fp8 scaleContent:(BOOL)fp16;
- (struct _NSSize)bookCoverSize;
- (void)setBookCoverSize:(struct _NSSize)fp8;
- (float)bookPageAspectRatio;
- (float)bleedAllowance;
- (struct IPPhotoList *)photoList;
- (void)setPhotoList:(struct IPPhotoList *)fp8;
- (id)pages;
- (id)userPages;
- (id)newPage;
- (id)newPageAfterPage:(id)fp8;
- (id)newPageBeforePage:(id)fp8;
- (id)newPageAtIndex:(int)fp8;
- (void)addPages:(id)fp8 resize:(BOOL)fp12;
- (void)addPage:(id)fp8;
- (void)addPage:(id)fp8 atIndex:(int)fp12;
- (void)removePage:(id)fp8;
- (void)removeAllPages;
- (void)removePageAtIndex:(int)fp8;
- (void)replacePage:(id)fp8 withPage:(id)fp12 reflow:(BOOL)fp16;
- (void)ensureTrailingPages:(BOOL)fp8;
- (int)pageCount;
- (int)perceivedPageCount;
- (int)unplacedPhotoCount;
- (id)pagesWithPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearCacheForPageElementsWithPhoto:(struct IPPhotoInfo *)fp8 refill:(BOOL)fp12;
- (void)createHolesForPageElementsWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)firstPage;
- (id)firstInsidePage;
- (id)lastPage;
- (id)lastInsidePage;
- (BOOL)hasEndingPages;
- (id)pageAtIndex:(int)fp8;
- (int)indexOfPage:(id)fp8;
- (void)movePageFromIndex:(int)fp8 toIndex:(int)fp12;
- (id)pageWithPageDesign:(id)fp8;
- (id)pageWithPageDesignSuffix:(id)fp8 pageType:(id)fp12;
- (id)pageWithPageDesignPrefix:(id)fp8 preferringTextPage:(BOOL)fp12;
- (id)pageWithPageType:(id)fp8 startingPage:(id)fp12 preferringTextPage:(BOOL)fp16;
- (id)pageWithHoleCount:(int)fp8 startingPage:(id)fp12 preferringTextPage:(BOOL)fp16;
- (id)pagesWithPageType:(id)fp8;
- (int)indexOfLastViewedPage;
- (void)setLastViewedPage:(int)fp8;
- (id)defaultLayoutPage;
- (void)updateDefaultLayoutPage;
- (id)scrapAreaPage;
- (void)_scrapChanged:(id)fp8;
- (BOOL)hasScraps;
- (BOOL)switchToUnplacedIfModified;
- (id)moveElement:(id)fp8 from:(id)fp12 to:(id)fp16 notify:(BOOL)fp20 reflow:(BOOL)fp24;
- (void)reflowPage:(id)fp8 preservingBackground:(BOOL)fp12 traverse:(BOOL)fp16;
- (void)reflowPage:(id)fp8 withPage:(id)fp12 preservingBackground:(BOOL)fp16 force:(BOOL)fp20;
- (void)reflowPage:(id)fp8 withPageOfType:(id)fp12 preservingBackground:(BOOL)fp16;
- (void)_copyMarkersFromMapElements:(id)fp8 toPage:(id)fp12;
- (void)_preserveImageAdjustmentsBeforeReflow:(id)fp8;
- (void)_applyImageAdjustmentsAfterReflow:(id)fp8;
- (BOOL)canTraversePage:(id)fp8 direction:(int)fp12;
- (int)maximumPageCount;
- (BOOL)shouldAutoflow;
- (void)setShouldAutoflow:(BOOL)fp8;
- (int)ranking;
- (void)setRanking:(int)fp8;
- (struct IPPhotoList *)imagesOnPage:(id)fp8 markForOrientation:(BOOL)fp12;
- (void)_flowPage:(id)fp8 usingPage:(id)fp12 withPhotos:(struct IPPhotoList *)fp16 force:(BOOL)fp20 notify:(BOOL)fp24;
- (BOOL)leadingEnabled;
- (void)setLeadingEnabled:(BOOL)fp8;
- (BOOL)isDoubleSided;
- (void)setDoubleSided:(BOOL)fp8;
- (BOOL)doesAlternatePages;
- (void)setAlternatePages:(BOOL)fp8;
- (BOOL)printsPageNumbers;
- (void)setPrintsPageNumbers:(BOOL)fp8;
- (id)defaultPageNumberElements;
- (BOOL)canPrintPageNumbers;
- (BOOL)showsCaptions;
- (void)setShowsCaptions:(BOOL)fp8;
- (BOOL)includeAppleBrandingOnPage:(id)fp8;
- (void)setIncludeAppleBranding:(BOOL)fp8;
- (BOOL)isModified;
- (void)setModifyBlock:(BOOL)fp8;
- (void)updateCalendarDataDates;
- (void)markAsModified;
- (void)clearModified;
- (BOOL)hasEmptyHoles:(BOOL)fp8;
- (void)checkForClipping;
- (BOOL)hasClippedText;
- (void)resizedImageCheck;
- (BOOL)hasLowQualityImages;
- (BOOL)hasDefaultText;
- (BOOL)hasUserText;
- (void)setHasUserText:(BOOL)fp8;
- (id)pageWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)allHoleElements:(BOOL)fp8;
- (id)allTextElements:(BOOL)fp8;
- (id)allMapElements;
- (id)allGroupElements;
- (id)allReferencedAssets;
- (struct IPPhotoList *)allPlacedPhotos;
- (struct IPPhotoList *)removeAllPlacedPhotos;
- (id)lastFilledHoleElement;
- (id)lastEmptyHoleElement;
- (id)firstEmptyHoleElement;
- (BOOL)thumbViewShowing;
- (void)setThumbViewShowing:(BOOL)fp8;
- (BOOL)shouldHideProductRotationPrompt;
- (void)setShouldHideProductRotationPrompt:(BOOL)fp8;
- (BOOL)shouldAdjustBrandingAlignment;
- (void)markAllMapElementsForUpdate;
- (void)recenterMapElements:(BOOL)fp8;
- (id)mapMarkers;
- (void)clearMapMarkers;
- (BOOL)linkedTextTitlePref;
- (BOOL)linkedTextCommentsPref;
- (BOOL)linkedTextDatePref;
- (BOOL)linkedTextRatingPref;
- (BOOL)linkedTextKeywordsPref;
- (BOOL)linkedTextFilenamePref;
- (BOOL)linkedTextCameraPref;
- (BOOL)linkedTextISOPref;
- (BOOL)linkedTextFlashPref;
- (BOOL)linkedTextShutterPref;
- (BOOL)linkedTextAperturePref;
- (BOOL)linkedTextFocalLengthPref;
- (BOOL)setLinkedTextTitlePref:(BOOL)fp8;
- (BOOL)setLinkedTextCommentsPref:(BOOL)fp8;
- (BOOL)setLinkedTextDatePref:(BOOL)fp8;
- (BOOL)setLinkedTextRatingPref:(BOOL)fp8;
- (BOOL)setLinkedTextKeywordsPref:(BOOL)fp8;
- (BOOL)setLinkedTextFilenamePref:(BOOL)fp8;
- (BOOL)setLinkedTextCameraPref:(BOOL)fp8;
- (BOOL)setLinkedTextISOPref:(BOOL)fp8;
- (BOOL)setLinkedTextFlashPref:(BOOL)fp8;
- (BOOL)setLinkedTextShutterPref:(BOOL)fp8;
- (BOOL)setLinkedTextAperturePref:(BOOL)fp8;
- (BOOL)setLinkedTextFocalLengthPref:(BOOL)fp8;
- (id)allCalendarElements;
- (void)populateCalendarsWithEventData;
- (double)calendarBaseDate;
- (void)setCalendarBaseDate:(double)fp8;
- (int)startDayOfWeek;
- (id)calendarData;
- (id)calendarSources;
- (id)calendarSourceNames;
- (BOOL)setCalendarSourcesFromNames:(id)fp8;
- (int)holidayCalendarTag;
- (void)setHolidayCalendarTag:(int)fp8;
- (id)holidayCalendar;
- (BOOL)setHolidayCalendar:(id)fp8;
- (BOOL)calendarIncludesBirthdays;
- (void)setCalendarIncludesBirthdays:(BOOL)fp8;
- (id)localeInfo;
- (BOOL)hasUserCustomizedPages;
- (id)userCustomizedPages;
- (void)clearUserCustomizedPageCache;
- (BOOL)softProofingEnabled;
- (void)setSoftProofingEnabled:(BOOL)fp8;
- (BOOL)cropMarksEnabled;
- (void)setCropMarksEnabled:(BOOL)fp8;
- (struct _NSSize)embeddedPrintSize;
- (void)setEmbeddedPrintSize:(struct _NSSize)fp8;
- (BOOL)canDoMultiUp;
- (struct _NSSize)defaultContactSheetCellSize;
- (void)setDefaultContactSheetCellSize:(struct _NSSize)fp8;
- (id)dragSourceElement;
- (void)setDragSource:(id)fp8;
- (id)dropTargetElement;
- (void)setDropTarget:(id)fp8;
- (BOOL)notificationIsActive;
- (void)setNotificationIsActive:(BOOL)fp8;
- (struct MessageSender *)messageSender;
- (void)beginPDFTextGenerationForResolution:(int)fp8;
- (void)overlayTextInContext:(struct CGContext *)fp8 forPage:(int)fp12 atPoint:(struct _NSPoint)fp16 resolution:(int)fp24 forProduction:(BOOL)fp28 scale:(float)fp32;
- (void)finishPDFTextGeneration;
- (void)_preparePagesForDealloc:(id)fp8;
- (void)prepareForDealloc;
- (void)unloadCachedObjects;
- (BOOL)alwaysShowPlacard;
- (void)setAlwaysShowPlacard:(BOOL)fp8;
- (int)defaultViewMode;
- (void)setDefaultViewMode:(int)fp8;
- (float)defaultZoomLevel;
- (void)setDefaultZoomLevel:(float)fp8;
- (BOOL)validate:(id)fp8;
- (void)dealloc;
- (id)controller;
- (void)setController:(id)fp8;

@end

@interface IPLocalCalendarTableController : NSObject
{
    NSMutableSet *mSelectedCalendarTitles;
}

- (id)selectedCalendarTitles;
- (void)setSelectedCalendarTitles:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)dealloc;

@end

@interface IPBookController : IPViewController <IPImageMgrDelegate, IPMarimbaSlideshowDelegate>
{
    IPBook *mBook;
    IPPage *mCurrentPage;
    struct IPSelectionList *mCurrentSelection;
    IPCutSheetPreviewController *mThemePreviewBookController;
    IPBookController *mMainController;
    float mSizeIncrement;
    NSPanel *mThemePanel;
    NSTableView *mThemeTable;
    NSImageView *mThemePreview;
    NSPopUpButton *mBookSizePopup;
    NSButton *mDoubleSidedCheckbox;
    NSMenuItem *mHardcoverMenuItem;
    NSMenuItem *mSoftcoverMenuItem;
    NSMenuItem *mWireboundMenuItem;
    NSButton *mThemeOptionButton;
    NSButton *mThemeCancelButton;
    NSButton *mThemeOKButton;
    BOOL mThemeFlexerEnabled;
    NSPanel *mCalendarThemePanel;
    NSTableView *mCalendarThemeTable;
    NSImageView *mCalendarThemePreview;
    NSPopUpButton *mCalendarTypePopup;
    NSButton *mCalendarThemeOptionButton;
    NSButton *mCalendarThemeCancelButton;
    NSButton *mCalendarThemeOKButton;
    NSPanel *mCardThemePanel;
    DividedTableView *mCardKeywordTable;
    NSTableView *mCardThemeTable;
    NSMatrix *mCardThemeMatrix;
    NSImageView *mCardThemePreview;
    NSPopUpButton *mCardTypePopup;
    NSButton *mCardThemeOptionButton;
    NSButton *mCardThemeCancelButton;
    NSButton *mCardThemeOKButton;
    NSPanel *mCutSheetThemePanel;
    DividedTableView *mCutSheetThemeTable;
    NSMatrix *mCutSheetThemeMatrix;
    NSButton *mCutSheetThemeCancelButton;
    NSButton *mCutSheetThemeOKButton;
    NSPopUpButton *mCutSheetThemePaperSizePopup;
    NSPopUpButton *mCutSheetThemePaperTypePopup;
    NSPopUpButton *mCutSheetThemePrinterPopup;
    NSTextField *mCutSheetThemePrinterLabel;
    NSView *mCutSheetCustomControlView;
    NSView *mCutSheetStandardPrintControls;
    NSPopUpButton *mCutSheetPhotoSizePopup;
    NSTextField *mCutSheetPhotoSizePopupLabel;
    NSView *mCutSheetContactSheetControls;
    PrintAlbum *mCutSheetPreviewAlbum;
    BOOL mCutSheetThemePanelPrintingDisabled;
    NSPanel *mSlideshowThemePanel;
    NSTableView *mSlideshowThemeTable;
    NSImageView *mSlideshowThemePreview;
    NSButton *mSlideshowThemeCancelButton;
    NSButton *mSlideshowThemeOKButton;
    NSPanel *mActiveThemePanel;
    NSPanel *mPageDesignPanel;
    NSPanel *mBookSettingsPanel;
    NSPanel *mCalendarSettingsPanel;
    NSView *mTextStylesView;
    NSView *mCalendarTextStylesView;
    NSView *mTextStylePreview;
    NSImageView *mSettingsPreview;
    NSMenu *mCaptionContentMenu;
    float mSettingsAdjustDelta;
    float mCalendarSettingsPanelBaseHeight;
    float mCalendarSettingsPanelSettingsHolderBaseHeight;
    float mCalendarSettingsPanelStylesHolderBaseHeight;
    float mStyleViewNeededHeight;
    NSTabView *mCalendarSettingsTabView;
    NSButton *mIncludeBrandingCheckbox;
    NSButton *mShowCaptions;
    NSButton *mShowPageNumbers;
    NSButton *mSoftProofingCheckbox;
    NSButton *mSettingsRestoreButton;
    NSButton *mSettingsCancelButton;
    NSButton *mSettingsOKButton;
    NSString *mOriginalShowCaptionsTitle;
    NSPanel *mCardSettingsPanel;
    NSView *mCardTextStylesView;
    NSButton *mCardIncludeBrandingCheckbox;
    NSPanel *mCalendarSettingsDataPanel;
    NSView *mCalendarSettingsContentView;
    NSView *mCalendarDataTabViewPlaceholder;
    NSView *mCalendarDataPanelPlaceholder;
    NSButton *mCalendarDataPanelCancelButton;
    NSButton *mCalendarDataPanelOKButton;
    NSPopUpButton *mHolidayCalendarsPopup;
    NSButton *mBirthdaysCheckbox;
    NSButton *mCalIncludeBrandingCheckbox;
    NSTableView *mLocalCalendarsTable;
    id mCalendarTableController;
    NSPopUpButton *mCalendarStartMonthPopup;
    NSTextField *mCalendarStartYearField;
    NSStepper *mCalendarStartYearStepper;
    NSTextField *mCalendarNumberMonthsField;
    NSStepper *mCalendarNumberMonthsStepper;
    NSButton *mCalendarSettingsCancelButton;
    NSButton *mCalendarSettingsOKButton;
    NSPanel *mCutSheetSettingsPanel;
    NSPopUpButton *mPhotoLayoutPopup;
    NSButton *mCropMarksSetting;
    NSButton *mCutSheetAutoflowSetting;
    NSView *mCutSheetTextStylesView;
    NSPanel *mContactSheetSettingsPanel;
    NSView *mContactSheetTextStylesView;
    NSButton *mContactSheetTitleSetting;
    NSButton *mContactSheetCommentsSetting;
    NSButton *mContactSheetDateSetting;
    NSButton *mContactSheetRatingSetting;
    NSButton *mContactSheetKeywordsSetting;
    NSButton *mContactSheetFilenameSetting;
    NSButton *mContactSheetCameraSetting;
    NSButton *mContactSheetISOSetting;
    NSButton *mContactSheetFlashSetting;
    NSButton *mContactSheetShutterSetting;
    NSButton *mContactSheetApertureSetting;
    NSButton *mContactSheetFocalLengthSetting;
    NSPanel *mCustomSizePanel;
    NSTextField *mCustomSizeWidth;
    NSTextField *mCustomSizeHeight;
    NSPopUpButton *mCustomUnitPopup;
    NSButton *mCustomSizeOKButton;
    float mCurrentCustomUnitFactor;
    IPBookInspector *mInspector;
    NSMenu *mBookContextualMenu;
    NSMenu *mCalendarContextualMenu;
    NSMenu *mCardContextualMenu;
    NSMenu *mCutSheetContextualMenu;
    NSMenu *mElementContextualMenu;
    NSMenu *mMapElementContextualMenu;
    NSMenu *mMapMarkerContextualMenu;
    NSMenu *mMapRegionContextualMenu;
    struct _NSPoint mContextualMenuMousePoint;
    NSView *mAutoflowControls;
    NSButton *mAutoflowTitle;
    NSButton *mAutoflowOnLabel;
    NSButton *mAutoflowOffLabel;
    NSButton *mAutoflowSwitch;
    NSPanel *mAutoflowAtEndPrompt;
    NSPanel *mCalendarAutoflowAtEndPrompt;
    NSButton *mAutoflowAtEndCheckbox;
    NSButton *mCalAutoflowAtEndCheckbox;
    NSButton *mAutoflowAtEndOK;
    NSButton *mCalAutoflowAtEndOK;
    NSButton *mAutoflowAtEndCancel;
    NSTextField *mAutoflowAtEndText;
    NSPanel *mAutoflowRelayoutPrompt;
    NSPanel *mCalendarAutoflowRelayoutPrompt;
    NSButton *mAutoflowRelayoutCheckbox;
    NSButton *mCalAutoflowRelayoutCheckbox;
    NSButton *mAutoflowRelayoutOK;
    NSButton *mAutoflowRelayoutCancel;
    NSTextField *mAutoflowRelayoutTitle;
    NSTextField *mAutoflowRelayoutMessage;
    NSString *mPreviousPromptMessage;
    NSString *mPreviousButtonTitle;
    NSTabView *mBookShelfTabView;
    NSTabView *mCalendarShelfTabView;
    NSTabView *mActiveShelfTabView;
    NSView *mShelfParentView;
    NSView *mSidebarParentView;
    NSView *mCardShelfParentView;
    NSView *mActiveParentView;
    IPPageThumbView *mPageThumbView;
    IPUnplacedPhotoView *mUnplacedPhotosView;
    IPUnplacedPhotoView *mCardUnplacedPhotosView;
    IPPageThumbView *mVerticalPageThumbView;
    IPUnplacedPhotoView *mVerticalUnplacedPhotosView;
    IPPageThumbView *mActivePageThumbView;
    IPUnplacedPhotoView *mActiveUnplacedPhotosView;
    NSButton *mPageThumbButton;
    NSButton *mImageShelfButton;
    NSButton *mVerticalPageThumbButton;
    NSButton *mVerticalImageShelfButton;
    BOOL mBookInterfaceDidLoad;
    NSView *mBookPlacardParentView;
    NSView *mCalendarPlacardParentView;
    NSScrollView *mBookScrollView;
    IPBookView *mInstalledBookView;
    IPBookView *mHardCoverBookView;
    IPBookView *mPhotowrapBookView;
    IPBookView *mHardCoverInsideBookView;
    IPBookView *mCoverBookView;
    IPBookView *mSimplexBookView;
    IPBookView *mSpreadBookView;
    IPBookView *mCoverCalendarView;
    IPBookView *mSimplexCalendarView;
    IPBookView *mSpreadCalendarView;
    IPBookView *mMultiPanelCardView;
    IPBookView *mCardSinglePanelView;
    IPBookView *mCardTwoPanelView;
    IPBookView *mCardThreePanelView;
    IPBookView *mCutSheetView;
    int mViewStylePref;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mAddPageToolbarItem;
    NSButtonCell *mPageButtonCell;
    NSButtonCell *mSpreadButtonCell;
    NSImageView *mPrinterIconView;
    NSMenu *mPaperSizeMenu;
    NSMenu *mPaperTypeMenu;
    NSMenu *mPageTypeMenu;
    IPToolbarItem *mPageTypeToolbarItem;
    NSMenu *mThemesMenu;
    IPToolbarItem *mThemesToolbarItem;
    NSString *mThemesMenuCategory;
    NSMenu *mBackgroundsMenu;
    IPToolbarItem *mBackgroundsToolbarItem;
    NSMenu *mPageDesignMenu;
    IPToolbarItem *mPageDesignToolbarItem;
    IPToolbarItem *mCardOrientationToolbarItem;
    NSMenu *mCardOrientationMenu;
    IPToolbarItem *mElementAdjustToolbarItem;
    NSView *mBookSizeControlView;
    NSTextField *mBookWidthText;
    NSTextField *mBookHeightText;
    NSMenu *mAltElementsMenu;
    IPToolbarItem *mAltElementsToolbarItem;
    IPToolbarItem *mPrinterNameToolbarItem;
    NSView *mPaperSelectionToolbarView;
    NSPopUpButton *mPaperSizeToolbarPopup;
    NSPopUpButton *mPaperTypeToolbarPopup;
    IPToolbarItem *mOnePhotoPerPageToolbarItem;
    IPToolbarItem *mPrintPreviewToolbarItem;
    IPToolbarItem *mCropMarksToolbarItem;
    NSView *mContactSheetToolbarView;
    NSSlider *mContactSheetColumnSlider;
    NSTextField *mContactSheetColumnText;
    IPToolbarItem *mContactSheetToolbarItem;
    IPToolbarItem *mPreviousPageToolbarItem;
    IPToolbarItem *mNextPageToolbarItem;
    ProgressController *mProgress;
    NSString *mMinThumbTooltip;
    NSString *mMaxThumbTooltip;
    NSString *mThumbnailSizerTooltip;
    NSArray *mSavedChildViews;
    NSTimer *mProgressTimer;
    NSMutableDictionary *mSavedStyleSettings;
    BOOL mSavedShowsCaptions;
    BOOL mSavedPrintsPageNumbers;
    NSArray *mSlideshowPages;
    IPBookSlideshowController *mSlideshowController;
    IPMarimbaExporter *mSlideshowExporter;
    NSView *mExportAccessoryView;
    NSPopUpButton *mExportMovieSizePopup;
    EditHUDController *mImageEditHUD;
    NSPopUpButton *mImageEffectPopup;
    HUDSlider *mAlphaAdjustmentSlider;
    IPMapElementHUDController *mMapHUD;
    int mProductCategory;
    int mProductType;
    struct _NSRect mBaseElementRect;
    BOOL mAutoPageRotationEnabled;
    BOOL mDeferredApplyCalendarDataSettings;
    BOOL mForceReimport;
    BOOL mPreserveMatrixSelection;
    BOOL mDoNotKillThumbsDoingSlideshow;
    BOOL mSliderDragInProgress;
    CIImage *mSelectedImageEffectPreview;
    IPTemplateDataInspector *mTemplateDataInspector;
    IPMapTileGeneratorController *mMapTileGenerator;
}

+ (struct _NSSize)cutSheetPaperSize;
+ (struct _NSRect)cutSheetPhotoRect;
+ (struct _NSRect)printAreaOfPageWithSize:(struct _NSSize)fp8;
+ (id)imageMgr;
+ (id)secondaryImageMgr;
+ (void)setAutoPageRotationEnabled:(BOOL)fp8;
+ (BOOL)autoPageRotationEnabled;
- (void)resetViewToDefaults;
- (void)awakeFromNib;
- (void)setMainController:(id)fp8;
- (void)_installBookToolbar;
- (void)_installCalendarToolbar;
- (void)_installCardToolbar;
- (void)_installPrintingToolbar;
- (void)_installSlideshowToolbar;
- (void)_updateToolbarUI;
- (void)_updateImageEditHUD;
- (void)resetInspector:(BOOL)fp8;
- (struct _NSRect)iconRectForPage:(id)fp8;
- (id)_compositeBackground:(id)fp8 withForeground:(id)fp12;
- (id)_compositeCenteredIcon:(id)fp8 onBackground:(id)fp12;
- (id)_compositeCenteredIcon:(id)fp8;
- (id)_mirrorFlapIcon:(id)fp8;
- (void)_populateThemesMenu;
- (void)_populateBackgroundsMenu;
- (void)_populatePageTypeMenu;
- (void)_populatePageDesignMenuForPageType:(id)fp8;
- (BOOL)_populateMenu:(id)fp8 forPageType:(id)fp12;
- (void)_setThumbMenuItem:(id)fp8 forPage:(id)fp12;
- (void)_setThumbWithImage:(id)fp8 menuItem:(id)fp12 onBackground:(id)fp16;
- (void)_populateAlternateElementsMenu:(id)fp8;
- (void)toggleCardPlacardVisible;
- (void)_textStyleChanged:(id)fp8;
- (void)_bookContentsChanged:(id)fp8;
- (void)_bookElementsChanged:(id)fp8;
- (void)_mapRegionDataLoaded:(id)fp8;
- (void)_scrapChanged:(id)fp8;
- (void)loadEditMenuItems;
- (void)unloadEditMenuItems;
- (void)loadCurrentBookProductType;
- (BOOL)loadCurrentBook;
- (void)_handleAddedPhotos;
- (id)book;
- (void)recreateBook:(BOOL)fp8;
- (void)_rebuildMultiUpBook:(BOOL)fp8;
- (void)_bookRemoved:(id)fp8;
- (id)currentPage;
- (void)_updateViewButtons;
- (void)_updatePageTitleMenuSelection:(id)fp8;
- (void)setCurrentPage:(id)fp8 force:(BOOL)fp12 notify:(BOOL)fp16;
- (id)bookTemplate;
- (id)db;
- (id)album;
- (void)setPrintAlbumInfo:(id)fp8;
- (void)resetBook:(BOOL)fp8;
- (void)_installProgress;
- (void)_removeProgress;
- (id)bookScrollView;
- (id)bookView;
- (id)bookViewForPage:(id)fp8;
- (void)_installBookView:(id)fp8;
- (id)themePanel;
- (id)calendarThemePanel;
- (id)calendarSettingsPanel;
- (id)cardThemePanel;
- (void)prepareForNewCutSheetWithSelection:(struct IPPhotoList *)fp8;
- (void)createCutSheetProject;
- (id)cutSheetThemePanel;
- (id)slideshowThemePanel;
- (int)viewStyle;
- (void)setViewStyle:(int)fp8;
- (id)bookViewContextualMenu;
- (id)elementContextualMenu:(struct _NSPoint)fp8;
- (void)_shelfViewSizeChanged:(id)fp8;
- (void)toggleCropMarks:(id)fp8;
- (void)toggleColorSoftProofing:(id)fp8;
- (void)toggleDoubleSided:(id)fp8;
- (void)addPage:(id)fp8;
- (void)removePage:(id)fp8;
- (BOOL)canRemovePage;
- (void)autoflowState:(id)fp8;
- (void)autoflow:(id)fp8;
- (void)handleAutoflowRelayoutPrompt:(id)fp8;
- (void)handleCalendarAutoflowRelayoutPrompt:(id)fp8;
- (void)_handleAutoflowRelayoutPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)handleAutoflowAtEndPrompt:(id)fp8;
- (void)handleCalendarAutoflowAtEndPrompt:(id)fp8;
- (void)_handleAutoflowAtEndPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)handleNoAutoflowPrompt:(id)fp8;
- (void)_handleNoAutoflowPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_performAutoflowForBook:(id)fp8 usingMethod:(int)fp12;
- (void)_performAutoflow:(int)fp8;
- (id)_findIcon:(id)fp8;
- (void)resizeWindow:(id)fp8 forString:(id)fp12;
- (void)showAutoflowInfoPrompt:(id)fp8 inWindow:(id)fp12;
- (void)_handleAutoflowInfoPrompt:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)cleanupBook:(id)fp8;
- (void)toggleShowPageNumbers:(id)fp8;
- (void)toggleShowCaptions:(id)fp8;
- (void)toggleIncludeBranding:(id)fp8;
- (void)changeSettings:(id)fp8;
- (void)_resetSettingsPanel;
- (void)_resetCutSheetSettingsPanel;
- (void)_resetCalendarSettingsPanel;
- (void)_configureSettingsPanel;
- (void)_configureCutSheetSettingsPanel;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)_configureCalendarSettingsPanel;
- (void)handleSettingsChange:(id)fp8;
- (void)cancelSettingsChange:(id)fp8;
- (void)restoreSettings:(id)fp8;
- (void)handleCardSettingsChange:(id)fp8;
- (void)cancelCardSettingsChange:(id)fp8;
- (void)restoreCardSettings:(id)fp8;
- (void)reimport:(id)fp8;
- (void)handleCalendarSettingsChange:(id)fp8;
- (void)cancelCalendarSettingsChange:(id)fp8;
- (void)handleNewCalendarDataPanel:(id)fp8;
- (void)cancelNewCalendarDataPanel:(id)fp8;
- (void)restoreContactSheetSettings:(id)fp8;
- (void)restoreCutSheetSettings:(id)fp8;
- (void)handleCutSheetSettingsChange:(id)fp8;
- (void)cancelCutSheetSettingsChange:(id)fp8;
- (void)_changeSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeCutSheetSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeContactSheetSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_changeCalendarSettingsCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)calNameArray:(id)fp8 matchesNameArray:(id)fp12;
- (void)_applyCalendarDataSettings;
- (void)resetThemePanel;
- (void)resetCalendarThemePanel;
- (void)resetCardThemePanel;
- (void)resetCutSheetThemePanel;
- (void)resetSlideshowThemePanel;
- (void)selectTheme:(id)fp8;
- (id)_themeCategoryForProductType:(int)fp8;
- (void)_selectBookTheme:(id)fp8;
- (void)_selectCalendarTheme:(id)fp8;
- (void)_selectCardTheme:(id)fp8;
- (void)_selectCutSheetTheme:(id)fp8;
- (void)_selectSlideshowTheme:(id)fp8;
- (id)selectedTheme;
- (id)sampleBookImage;
- (void)updateThemePreview:(id)fp8;
- (id)sampleCalendarImage;
- (void)updateCalendarThemePreview:(id)fp8;
- (void)updateCutSheetThemeControls:(id)fp8;
- (void)updateSlideshowThemePreview:(id)fp8;
- (id)sampleCardImage;
- (void)updateCardThemeMatrix:(id)fp8;
- (void)_updateThemeMatrix:(id)fp8 category:(id)fp12 themes:(id)fp16 columns:(int)fp20;
- (void)handleThemeSelection:(id)fp8;
- (void)cancelThemeSelection:(id)fp8;
- (void)handleCalendarThemeSelection:(id)fp8;
- (void)cancelCalendarThemeSelection:(id)fp8;
- (void)handleCardThemeSelection:(id)fp8;
- (void)cancelCardThemeSelection:(id)fp8;
- (void)handleCutSheetThemeSelection:(id)fp8;
- (void)customizeCutSheetProject:(id)fp8;
- (void)cancelCutSheetThemeSelection:(id)fp8;
- (void)handleSlideshowThemeSelection:(id)fp8;
- (void)cancelSlideshowThemeSelection:(id)fp8;
- (void)showThemeInspector:(id)fp8;
- (void)handleThemeFlexer:(id)fp8;
- (void)setThemeFlexerEnabled:(BOOL)fp8;
- (int)productTypeForThemePanel:(id)fp8;
- (void)applyThemeConversion:(id)fp8 productType:(int)fp12;
- (void)_changeTheme:(id)fp8 productType:(int)fp12;
- (void)_ensureLoadedComplete:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_selectThemeCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_selectCutSheetThemeCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)setupNewPrintAlbumBook;
- (void)quickSelectTheme:(id)fp8;
- (void)selectBackground:(id)fp8;
- (void)selectFrame:(id)fp8;
- (void)selectPageType:(id)fp8;
- (void)selectPageDesign:(id)fp8;
- (void)makeCardHorizontal:(id)fp8;
- (void)makeCardVertical:(id)fp8;
- (void)_switchToSiblingTheme;
- (void)updatePageOrientationSelection;
- (void)setCutSheetPaperSize:(struct _NSSize)fp8;
- (void)setCutSheetPhotoRect:(struct _NSRect)fp8;
- (void)selectPrinter:(id)fp8;
- (void)selectPaperSize:(id)fp8;
- (void)_updatePhotoSizeForPaper:(id)fp8;
- (void)showCustomPaperSizePanel:(id)fp8;
- (void)customSizeUnitChanged:(id)fp8;
- (void)selectCustomPaperSize:(id)fp8;
- (struct _NSSize)_bookSizeFromCustomSize;
- (struct _NSSize)_customSizeFromBookSize:(struct _NSSize)fp8;
- (float)_customSizeConversionFactor;
- (void)showCustomPhotoSizePanel:(id)fp8;
- (void)selectCustomPhotoSize:(id)fp8;
- (void)cancelCustomSize:(id)fp8;
- (void)selectPhotoSize:(id)fp8;
- (void)selectPaperType:(id)fp8;
- (void)_populatePrinterMenu;
- (void)_populatePaperSizeMenu:(id)fp8;
- (void)_populatePaperTypeMenu:(id)fp8;
- (id)nextPage:(int)fp8;
- (id)previousPage:(int)fp8;
- (void)selectNextPage:(id)fp8;
- (void)selectPreviousPage:(id)fp8;
- (void)scrollThumbViewToStart:(id)fp8;
- (void)scrollThumbViewToEnd:(id)fp8;
- (void)deleteElements:(id)fp8;
- (void)deleteSelectedElements;
- (void)_removePageSheetCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)removeSelectedUnplacedPhotos;
- (void)makeHolesForSelectedElements:(id)fp8;
- (void)moveSelectionToFront:(id)fp8;
- (void)sendSelectionToBack:(id)fp8;
- (void)toggleSelectionFrameOrientation:(id)fp8;
- (void)moveElementX:(id)fp8;
- (void)moveElementY:(id)fp8;
- (void)panElementX:(id)fp8;
- (void)panElementY:(id)fp8;
- (void)moveSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)beginAdjustElementZoom:(id)fp8;
- (void)adjustElementZoom:(id)fp8;
- (void)endAdjustElementZoom:(id)fp8;
- (void)beginAdjustElementRotation:(id)fp8;
- (void)adjustElementRotation:(id)fp8;
- (void)beginAdjustElementSize:(id)fp8;
- (void)adjustElementSize:(id)fp8;
- (void)divideSelectedElementsVertically:(id)fp8;
- (void)divideSelectedElementsHorizontally:(id)fp8;
- (void)leftAlignSelectedElements:(id)fp8;
- (void)rightAlignSelectedElements:(id)fp8;
- (void)topAlignSelectedElements:(id)fp8;
- (void)bottomAlignSelectedElements:(id)fp8;
- (void)alignSelectedElementsInColumn:(id)fp8;
- (void)alignSelectedElementsInRow:(id)fp8;
- (void)makeSelectedElementsEqualWidth:(id)fp8;
- (void)makeSelectedElementsEqualHeight:(id)fp8;
- (void)distributeSelectedElementsHorizontally:(id)fp8;
- (void)distributeSelectedElementsVertically:(id)fp8;
- (void)setLeftSelectionInset:(id)fp8;
- (void)setBottomSelectionInset:(id)fp8;
- (void)setRightSelectionInset:(id)fp8;
- (void)setTopSelectionInset:(id)fp8;
- (void)setLeftImageInset:(id)fp8;
- (void)setBottomImageInset:(id)fp8;
- (void)setRightImageInset:(id)fp8;
- (void)setTopImageInset:(id)fp8;
- (void)editImages:(id)fp8;
- (void)toggleFitToSize:(id)fp8;
- (void)toggleMirrorImage:(id)fp8;
- (void)changeBlendMode:(id)fp8;
- (void)changeBookWidth:(id)fp8;
- (void)changeBookHeight:(id)fp8;
- (void)changeSelectedElementToAlternate:(id)fp8;
- (void)changeContactSheetColumns:(id)fp8;
- (void)preloadMapRegions;
- (void)centerMapElementOnMarkers:(id)fp8;
- (void)resetMapElement:(id)fp8;
- (void)addMarkerToMapElement:(id)fp8;
- (void)removeSelectedMapMarker:(id)fp8;
- (void)moveSelectedMapMarkerLabel:(id)fp8;
- (void)moveSelectedRegionLabel:(id)fp8;
- (void)toggleMarkerLinesForMapElement:(id)fp8;
- (void)toggleReturnToStartForMapElement:(id)fp8;
- (void)toggleTitleForMapElement:(id)fp8;
- (void)toggleCompassForMapElement:(id)fp8;
- (void)toggleMarkerTextForMapElement:(id)fp8;
- (void)toggleRegionTextForMapElement:(id)fp8;
- (void)toggleUseStraightLinesForMapElement:(id)fp8;
- (void)toggleTextureAndShadowsForMapElement:(id)fp8;
- (void)togglePanAndZoom:(id)fp8;
- (void)toggleResizeAndRotation:(id)fp8;
- (BOOL)moveModeIsEnabled;
- (void)showMapHUD;
- (void)hideMapHUD;
- (struct _NSRect)screenRectForElement:(id)fp8;
- (void)resizedImageCheck;
- (void)resolveAllImageAliases;
- (id)generatePrintPreviewImage;
- (void)cancelPrintProject:(id)fp8;
- (void)printBook:(id)fp8;
- (void)saveBookToPDF:(id)fp8;
- (void)saveProductFile:(id)fp8;
- (void)previewBook:(id)fp8;
- (void)orderPrints:(id)fp8;
- (void)orderBook:(id)fp8;
- (void)sendMail:(id)fp8;
- (void)createPhotosInLibrary:(id)fp8;
- (void)generateBookPDFForPurchase:(id)fp8 path:(id)fp12 sheetOwnerWindow:(id)fp16 success:(char *)fp20;
- (void)gotoBookPricingWebsite:(id)fp8;
- (void)gotoCalendarPricingWebsite:(id)fp8;
- (void)gotoCardPricingWebsite:(id)fp8;
- (void)writeBookXMLToFile:(id)fp8;
- (void)writeCurrentPageXMLToFile:(id)fp8;
- (void)createNewThemeFromBook:(id)fp8;
- (void)_showPageThumbView:(BOOL)fp8;
- (void)_showUnplacedPhotosView:(BOOL)fp8;
- (void)_redrawShelfView;
- (id)pageThumbView;
- (id)unplacedPhotosView;
- (id)shelfView;
- (id)inspector;
- (id)mapHUD;
- (void)setProductType:(int)fp8;
- (int)productType;
- (void)showPageThumbView:(id)fp8;
- (void)showUnplacedPhotosView:(id)fp8;
- (void)_refreshShelfButtons:(BOOL)fp8;
- (void)rebuildView:(id)fp8;
- (void)rebuildShelfView:(id)fp8;
- (void)showCustomControls:(id)fp8;
- (void)showImageEditControls:(id)fp8;
- (id)slideshowForExport;
- (void)playBookSlideshowApplescript:(int)fp8 displayIndex:(int)fp12;
- (void)playBookSlideshow:(id)fp8;
- (void)reloadTheme:(id)fp8;
- (void)saveTemplate:(id)fp8;
- (void)selectFullSpreadView:(id)fp8;
- (void)selectSinglePageView:(id)fp8;
- (void)settingsControlAction:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)bookCategorySelectionDidChange:(id)fp8;
- (void)calendarCategorySelectionDidChange:(id)fp8;
- (void)cutSheetCategorySelectionDidChange:(id)fp8;
- (void)cardCategorySelectionDidChange:(id)fp8;
- (void)clearUndoStack;
- (void)registerUndoForBookWithActionName:(id)fp8;
- (void)undoBookChange:(id)fp8;
- (void)registerUndoForRemovePhotosFromAlbum:(struct IPPhotoList *)fp8;
- (void)undoRemovePhotosFromAlbum:(id)fp8;
- (void)registerUndoForPage:(id)fp8 actionName:(id)fp12;
- (void)registerUndoForPage:(id)fp8 actionName:(id)fp12 isImageAdjustment:(BOOL)fp16;
- (void)undoPageChange:(id)fp8;
- (void)_loadNib;
- (void)_setup;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)validateMenuItem:(id)fp8;
- (id)updateStatus;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (int)pageCount;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (struct IPSelectionList *)retrieveSelection;
- (void)selectionChanged:(BOOL)fp8;
- (void)clearSelection:(BOOL)fp8;
- (void)clearPageSelection;
- (void)clearUnplacedPhotosSelection;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)selectAll;
- (void)selectNone;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)trashAction:(id)fp8;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)installPlacardView:(id)fp8 position:(int)fp12 animate:(BOOL)fp16;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)triggerWriteAndDeleteBook:(id)fp8;
- (void)triggerWriteAndPurgeBook:(id)fp8;
- (void)fillAllTextFields:(id)fp8;
- (void)fillUserTextFields:(id)fp8;
- (void)runTextFlexer:(BOOL)fp8;
- (struct _NSSize)slideshowSizeForScreenSize:(struct _NSSize)fp8;
- (id)title;
- (void)slideshowEnded;
- (void)slideshowPlayerReleaseResourcesForSlideIndex:(long)fp8;
- (BOOL)renderSlideInContext:(struct CGContext *)fp8 slideIndex:(int)fp12;
- (id)titleForSlideIndex:(long)fp8;
- (void)exportBookSlideshow;
- (void)exporterDidFinish;
- (void)onExposureChanged:(id)fp8;
- (void)onTintChanged:(id)fp8;
- (void)onTemperatureChanged:(id)fp8;
- (void)onContrastChanged:(id)fp8;
- (void)onDefinitionChanged:(id)fp8;
- (void)onSaturationChanged:(id)fp8;
- (void)onVibrancyChanged:(id)fp8;
- (void)onSaturationVibrancyToggle:(float)fp8 useVibrancy:(BOOL)fp12;
- (void)onHighlightsChanged:(id)fp8;
- (void)onShadowsChanged:(id)fp8;
- (void)onNoiseChanged:(id)fp8;
- (void)onSharpnessChanged:(id)fp8;
- (void)onAlphaChanged:(id)fp8;
- (void)applyImageEffect:(id)fp8;
- (void)resetAdjustmentsWithScreenRefresh:(BOOL)fp8;
- (void)hudSliderMouseDown:(id)fp8;
- (void)hudSliderMouseUp:(id)fp8;
- (BOOL)hudSliderDragInProgress;
- (BOOL)hasImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (id)smallBlurredImage;
- (int)effectsViewButtonLevel:(int)fp8;
- (void)effectsViewButton0Action:(id)fp8;
- (void)effectsViewButton1Action:(id)fp8;
- (void)effectsViewButton2Action:(id)fp8;
- (void)_refreshAfterImageAdjustments;
- (void)_updateEffectsView;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
- (BOOL)isThemePreviewController;
- (void)dealloc;
- (void)convertTemplateInsets:(id)fp8;
- (void)convertCoordinatesToCenterBased:(id)fp8;
- (void)convertMediumTemplateToLarge:(id)fp8;
- (void)_refreshCalendars:(id)fp8;

@end

@interface IPBookView : NSView
{
    IPBookController *mBookController;
    NSColor *mBackgroundColor;
    IPPageView *mCurrentPageView;
    IPBookOverlayView *mOverlayView;
    id mActiveHUD;
    ImageSlider *mControlHUD;
    ImageSlider *mBackgroundImageControlHUD;
    IPPageElement *mHUDElement;
    IPPageView *mHUDView;
    BOOL mHUDInstalled;
    BOOL mHUDWindowInstalled;
    BOOL mShowHUDAfterResize;
    NSImage *mSpineShadingTile;
    struct _NSRect mSpreadRect;
    struct _NSRect mPageBoundsLeft;
    struct _NSRect mPageBoundsRight;
    BOOL mViewIsResizing;
    float mViewScale;
    float mDrawScale;
    float mPreviousDrawScale;
    NSTimer *mAnimationTimer;
    double mAnimationStart;
    struct _NSRect mSpreadRectTarget;
    struct _NSRect mPageBoundsLeftTarget;
    struct _NSRect mPageBoundsRightTarget;
    IPTextElementView *mActiveTextEditor;
    NSProgressIndicator *mLoadingProgress;
    struct _NSPoint mCenterPercent;
    BOOL mDrawingSuspended;
    BOOL mIsSecondaryView;
    BOOL mGestureStarted;
    BOOL mElementGestureFirstTime;
    BOOL mElementGestureStarted;
    NSMutableDictionary *mPageInstructionViews;
}

+ (id)thumbnailCoverArtForProductType:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)selectionOnPageChanged:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)currentPageView;
- (void)setCurrentPageView:(id)fp8;
- (id)pageViewForPage:(id)fp8;
- (float)drawingScale;
- (void)setDrawingScale:(float)fp8;
- (float)previousDrawingScale;
- (id)book;
- (BOOL)pageIsOnscreen:(id)fp8;
- (id)pageArtNamed:(id)fp8 forSize:(struct _NSSize)fp12;
- (void)loadPreferences;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)pageSelectionDidChange;
- (void)updateDisplayForPage:(id)fp8;
- (void)updateDisplay;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)resizeFrameFromSizeIncrement:(float)fp8;
- (void)viewStyleChanged;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)recenterAreaOfFocus;
- (void)animate:(id)fp8;
- (void)scrollToPoint:(struct _NSPoint)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (id)loadingMessageString;
- (BOOL)drawingSuspended;
- (void)setDrawingSuspended:(BOOL)fp8;
- (void)installInstructionsForPageView:(id)fp8;
- (void)removeInstructionsForPageView:(id)fp8;
- (void)removeAllPageViewInstructions;
- (void)setShadowInContext:(struct CGContext *)fp8;
- (BOOL)isSecondaryView;
- (void)setIsSecondaryView:(BOOL)fp8;
- (void)_drawLoadingMessage;
- (void)drawOverlayForPageView:(id)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)removeSubviews;
- (void)installOverlayView;
- (struct CGRect)clipRect;
- (BOOL)viewIsResizing;
- (void)setFrameSize:(struct _NSSize)fp8;
- (struct _NSRect)controlHUDFrame;
- (struct _NSRect)backgroundImageControlHUDFrame;
- (void)installControlHUDAtPoint:(struct _NSPoint)fp8 initialValue:(float)fp16 forView:(id)fp20 forElement:(id)fp24;
- (void)installBackgroundImageHUDAtPoint:(struct _NSPoint)fp8 forView:(id)fp16 forElement:(id)fp20;
- (void)installTextHUDAtPoint:(struct _NSPoint)fp8 forView:(id)fp16 forElement:(id)fp20;
- (void)_adjustActiveHUDLocationForPoint:(struct _NSPoint)fp8 inView:(id)fp16;
- (void)moveHudX:(float)fp8 Y:(float)fp12 inView:(id)fp16;
- (id)hudElement;
- (void)removeHUD;
- (void)drawSelectionForElement:(id)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 scale:(float)fp24;
- (void)_initializeControlHUD;
- (void)_initializeBackgroundImageControlHUD;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)beginGestureWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)setActiveTextEditor:(id)fp8;
- (id)activeTextEditor;
- (void)havePageViewsRemoveEditors;
- (id)overlayView;
- (void)dealloc;

@end

@interface IPPageElement : NSObject <NSCopying>
{
    NSString *mIconPath;
    IPPage *mParent;
    struct _NSPoint mLocation;
    CDAnonymousStruct15 mAnimationStartLocation;
    struct _NSPoint mRelativeLocation;
    BOOL mDrawingRectIsRelative;
    struct _NSSize mSize;
    struct _NSSize mAnimationStartSize;
    NSString *mOrientation;
    NSDictionary *mVariant;
    NSMutableDictionary *mBackgroundVariants;
    NSBezierPath *mPath;
    NSBezierPath *mSelectionPath;
    float mScale;
    float mZoom;
    float mPanX;
    float mPanY;
    float mRotation;
    float mAnimationStartRotation;
    float mAlpha;
    float mAnimationStartAlpha;
    float mLeftSelectionInset;
    float mRightSelectionInset;
    float mTopSelectionInset;
    float mBottomSelectionInset;
    BOOL mSelected;
    BOOL mLocked;
    BOOL mIsBackground;
    BOOL mFitToSize;
    BOOL mRotateToFit;
    BOOL mFlipOrientation;
    BOOL mDraggingInProgress;
    int mLayer;
    BOOL mMirrorHorizontal;
    BOOL mMirrorVertical;
    BOOL mReflect;
    BOOL mIgnoreFrameMasters;
    IPPageElement *mEnclosingElement;
    NSColor *mBorderColor;
    int mBorderBlendMode;
    float mBorderGap;
    float mUnscaledBorderGap;
    float mTopBorderWidth;
    float mUnscaledTopBorderWidth;
    float mBottomBorderWidth;
    float mUnscaledBottomBorderWidth;
    float mLeftBorderWidth;
    float mUnscaledLeftBorderWidth;
    float mRightBorderWidth;
    float mUnscaledRightBorderWidth;
    float mTopBorderFactor;
    float mBottomBorderFactor;
    float mLeftBorderFactor;
    float mRightBorderFactor;
    NSColor *mFillColor;
    NSColor *mFillTextureColor;
    NSString *mFillTexture;
    struct _NSSize mFillTextureTileSize;
    float mFillTextureAlpha;
    int mFillTextureBlendMode;
    int mFillTextureColorBlendMode;
    float mULCornerRadius;
    float mURCornerRadius;
    float mLLCornerRadius;
    float mLRCornerRadius;
    struct CGPoint mULCornerInset;
    struct CGPoint mURCornerInset;
    struct CGPoint mLLCornerInset;
    struct CGPoint mLRCornerInset;
    int mGradientType;
    struct CGPoint mGradientStartPoint;
    struct CGPoint mGradientEndPoint;
    NSColor *mGradientStartColor;
    NSColor *mGradientEndColor;
    float mGradientStartRadius;
    float mGradientEndRadius;
    float mBevelThickness;
    NSColor *mLeftBevelColor;
    NSColor *mRightBevelColor;
    NSColor *mBottomBevelColor;
    NSColor *mTopBevelColor;
    int mLeftBevelBlendMode;
    int mRightBevelBlendMode;
    int mBottomBevelBlendMode;
    int mTopBevelBlendMode;
    float mOuterBevelThickness;
    float mOuterBevelGap;
    NSColor *mOuterLeftBevelColor;
    NSColor *mOuterRightBevelColor;
    NSColor *mOuterBottomBevelColor;
    NSColor *mOuterTopBevelColor;
    int mOuterLeftBevelBlendMode;
    int mOuterRightBevelBlendMode;
    int mOuterBottomBevelBlendMode;
    int mOuterTopBevelBlendMode;
    NSColor *mBevelGapFillColor;
    NSColor *mBevelGapFillTextureColor;
    NSString *mBevelGapFillTexture;
    struct _NSSize mBevelGapFillTextureTileSize;
    float mBevelGapFillTextureAlpha;
    int mBevelGapFillTextureBlendMode;
    int mBevelGapFillTextureColorBlendMode;
    NSColor *mShadowColor;
    struct CGColor *mShadowColorRef;
    struct _NSPoint mShadowOffset;
    float mShadowBlur;
    BOOL mShadowIsInner;
    struct _NSSize mShadowChoke;
    struct CGPoint mShadowLowerLeftOffset;
    struct CGPoint mShadowLowerRightOffset;
    struct CGPoint mShadowUpperLeftOffset;
    struct CGPoint mShadowUpperRightOffset;
    struct CGPoint mShadowLeftBend;
    struct CGPoint mShadowRightBend;
    struct CGPoint mShadowTopBend;
    struct CGPoint mShadowBottomBend;
    BOOL mIsOval;
    BOOL mIsEquilateral;
    int mEquilateralSides;
    float mAnimationStart;
    float mAnimationDuration;
    NSMutableArray *mAnimationEffects;
    int mBlendMode;
    NSString *mElementName;
    NSString *mSourceElementName;
    IPPageElement *mSourceElement;
    NSMutableArray *mLinkedElements;
    NSAffineTransform *mTransform;
    BOOL mShouldFlipX;
    BOOL mPanZoomModeEnabled;
    BOOL mRotateModeEnabled;
    BOOL mMoveModeEnabled;
    BOOL mResizeModeEnabled;
    BOOL mDidApplyVariant;
    int mWarningToolTipTag;
    BOOL mNeedFinishTakeValues;
    BOOL mDidRegisterAsNotificationObserver;
    NSMutableArray *mAlternateElements;
    struct _NSRect mBaseDrawingRect;
    float mBaseRotation;
    struct _NSPoint mBasePoint;
    struct IPPageElementEdges mSnapEdges;
}

+ (id)loadElementFromDict:(id)fp8 forPage:(id)fp12 fromTemplate:(id)fp16 errorContext:(id)fp20;
+ (int)blendModeForString:(id)fp8;
+ (id)stringForBlendMode:(int)fp8;
+ (int)flipKnob:(int)fp8 horizontal:(BOOL)fp12;
- (id)init;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)copyLinkedElementsFrom:(id)fp8;
- (struct CGImage *)lowQualityBadge;
- (struct _NSSize)lowQualityBadgeSize;
- (struct _NSRect)rectFromCGRect:(struct CGRect)fp8 inContext:(struct CGContext *)fp24 inView:(id)fp28;
- (struct _NSPoint)badgePointFromCGPoint:(struct CGPoint)fp8 inContext:(struct CGContext *)fp16 inView:(id)fp20;
- (struct CGRect)badgeRectForRect:(struct CGRect)fp8 inContext:(struct CGContext *)fp24 inView:(id)fp28 scale:(float)fp32;
- (id)lowResToolTip;
- (id)textWarningToolTip;
- (void)setWarningToolTipRect:(struct _NSRect)fp8 fromView:(id)fp24 warning:(id)fp28;
- (void)clearWarningToolTipFromView:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)shouldEncodeAllAttributes;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)applyVariant;
- (void)setDidApplyVariant:(BOOL)fp8;
- (BOOL)applyVariantForBackground:(id)fp8;
- (id)applyMasterElement:(id)fp8 toDictionary:(id)fp12 forPage:(id)fp16;
- (BOOL)ignoreFrameMasters;
- (id)iconPath;
- (id)parent;
- (void)setParent:(id)fp8;
- (id)elementName;
- (void)setElementName:(id)fp8;
- (id)sourceElementName;
- (void)setSourceElementName:(id)fp8;
- (id)sourceElement;
- (void)setSourceElement:(id)fp8;
- (BOOL)isLinkedElement;
- (id)linkedElements;
- (void)updateLinkedElements;
- (struct _NSPoint)location;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)rotateSizeAndLocation;
- (CDAnonymousStruct15)animationStartLocation;
- (void)snapToGuide:(id)fp8 byResizing:(BOOL)fp12;
- (void)setSnapEdges:(struct IPPageElementEdges)fp8;
- (void)snapToEdgesByResizing:(BOOL)fp8;
- (struct _NSPoint)relativeLocation;
- (void)setRelativeLocation:(struct _NSPoint)fp8;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)fp8;
- (struct _NSSize)animationStartSize;
- (float)frameAspectRatio;
- (float)imageAspectRatio;
- (BOOL)isOval;
- (void)setIsOval:(BOOL)fp8;
- (BOOL)isEquilateralPolygon;
- (int)equilateralSides;
- (void)setEquilateralSides:(int)fp8;
- (id)orientation;
- (void)setOrientation:(id)fp8;
- (id)variant;
- (void)setVariant:(id)fp8;
- (id)backgroundVariants;
- (void)cachePDFData;
- (struct _NSRect)insetRect:(float)fp8;
- (struct _NSRect)drawingRect:(float)fp8;
- (struct _NSRect)drawingRectWithReflection:(float)fp8;
- (struct _NSRect)cropRect:(float)fp8;
- (struct _NSRect)rotatedDrawingRect:(float)fp8;
- (struct _NSRect)animationDrawingRect:(float)fp8;
- (struct _NSRect)animationDrawingRectWithReflection:(float)fp8;
- (struct _NSRect)drawingRectWithSelection:(float)fp8;
- (struct _NSRect)drawingRectWithBorders:(float)fp8;
- (struct _NSRect)_scaledDrawingRectForRect:(struct _NSRect)fp8 scale:(float)fp24;
- (BOOL)drawingRectIsRelativeToSource;
- (void)setDrawingRectIsRelativeToSource:(BOOL)fp8;
- (struct IPPageElementCorners)elementCornersAtScale:(float)fp8 forBounds:(struct CGRect)fp12;
- (struct CGPath *)clippingPath:(float)fp8 forBounds:(struct CGRect)fp12;
- (struct _NSRect)pathBounds;
- (struct _NSRect)selectionPathBounds;
- (void)updatePath;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)prepareForLiveAlteration:(struct _NSPoint)fp8;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 scale:(float)fp20 aboutCenter:(BOOL)fp24;
- (float)rawZoom;
- (struct _NSPoint)rawPan;
- (float)zoom;
- (void)setZoom:(float)fp8;
- (BOOL)shouldZoom;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (struct _NSPoint)pan;
- (void)setPan:(struct _NSPoint)fp8;
- (BOOL)sendDeltaOnlyDuringPan;
- (struct _NSPoint)maxPan;
- (BOOL)panX:(float)fp8 Y:(float)fp12;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (float)rotation;
- (float)rotationInRadians;
- (float)animationStartRotation;
- (void)setRotation:(float)fp8;
- (float)alpha;
- (float)animationStartAlpha;
- (void)setAlpha:(float)fp8;
- (int)rotateByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)isSelected;
- (void)setSelected:(BOOL)fp8;
- (BOOL)isLocked;
- (void)setLocked:(BOOL)fp8;
- (void)setIsBackgroundElement:(BOOL)fp8;
- (BOOL)isBackgroundElement;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)rotateToFit;
- (BOOL)canRotateToFit;
- (void)setRotateToFit:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustGradientToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustVariantToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (BOOL)shouldMirrorHorizontally;
- (void)setMirrorHorizontally:(BOOL)fp8;
- (BOOL)shouldMirrorVertically;
- (void)setMirrorVertically:(BOOL)fp8;
- (BOOL)reflectionEnabled;
- (void)setReflectionEnabled:(BOOL)fp8;
- (float)reflectionHeightFactor;
- (int)blendMode;
- (void)setBlendMode:(int)fp8;
- (float)bevelThickness;
- (id)leftBevelColor;
- (id)rightBevelColor;
- (id)topBevelColor;
- (id)bottomBevelColor;
- (int)leftBevelBlendMode;
- (int)rightBevelBlendMode;
- (int)bottomBevelBlendMode;
- (int)topBevelBlendMode;
- (float)outerBevelThickness;
- (float)outerBevelGap;
- (id)outerLeftBevelColor;
- (id)outerRightBevelColor;
- (id)outerTopBevelColor;
- (id)outerBottomBevelColor;
- (int)outerLeftBevelBlendMode;
- (int)outerRightBevelBlendMode;
- (int)outerBottomBevelBlendMode;
- (int)outerTopBevelBlendMode;
- (id)bevelGapFillColor;
- (void)setBevelGapFillColor:(id)fp8;
- (id)bevelGapFillTextureColor;
- (void)setBevelGapFillTextureColor:(id)fp8;
- (id)bevelGapFillTexture;
- (void)setBevelGapFillTexture:(id)fp8;
- (struct _NSSize)bevelGapFillTextureTileSize;
- (void)setBevelGapFillTextureTileSize:(struct _NSSize)fp8;
- (float)bevelGapFillTextureAlpha;
- (void)setBevelGapFillTextureAlpha:(float)fp8;
- (int)bevelGapFillTextureBlendMode;
- (void)setBevelGapFillTextureBlendMode:(int)fp8;
- (int)bevelGapFillTextureColorBlendMode;
- (void)setBevelGapFillTextureColorBlendMode:(int)fp8;
- (int)layer;
- (void)setLayer:(int)fp8;
- (struct _NSRect)selectionInsets;
- (void)setSelectionInsets:(struct _NSRect)fp8;
- (id)enclosingElement;
- (void)setEnclosingElement:(id)fp8;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (id)fillTextureColor;
- (void)setFillTextureColor:(id)fp8;
- (id)fillTexture;
- (void)setFillTexture:(id)fp8;
- (struct _NSSize)fillTextureTileSize;
- (void)setFillTextureTileSize:(struct _NSSize)fp8;
- (float)fillTextureAlpha;
- (void)setFillTextureAlpha:(float)fp8;
- (int)fillTextureBlendMode;
- (void)setFillTextureBlendMode:(int)fp8;
- (int)fillTextureColorBlendMode;
- (void)setFillTextureColorBlendMode:(int)fp8;
- (id)borderColor;
- (void)setBorderColor:(id)fp8;
- (int)borderBlendMode;
- (int)gradientType;
- (void)setGradientType:(int)fp8;
- (struct CGPoint)gradientStartPoint;
- (void)setGradientStartPoint:(struct CGPoint)fp8;
- (struct CGPoint)gradientEndPoint;
- (void)setGradientEndPoint:(struct CGPoint)fp8;
- (id)gradientStartColor;
- (void)setGradientStartColor:(id)fp8;
- (id)gradientEndColor;
- (void)setGradientEndColor:(id)fp8;
- (float)gradientStartRadius;
- (void)setGradientStartRadius:(float)fp8;
- (float)gradientEndRadius;
- (void)setGradientEndRadius:(float)fp8;
- (BOOL)hasDropShadow;
- (BOOL)hasInnerShadow;
- (id)shadowColor;
- (struct _NSPoint)shadowOffset;
- (struct _NSSize)shadowChoke;
- (float)shadowBlur;
- (struct CGPoint)shadowLowerLeftOffset;
- (struct CGPoint)shadowLowerRightOffset;
- (struct CGPoint)shadowUpperLeftOffset;
- (struct CGPoint)shadowUpperRightOffset;
- (struct CGPoint)shadowLeftBend;
- (struct CGPoint)shadowRightBend;
- (struct CGPoint)shadowTopBend;
- (struct CGPoint)shadowBottomBend;
- (float)borderGap;
- (float)unscaledBorderGap;
- (float)topBorderWidth;
- (float)unscaledTopBorderWidth;
- (void)setTopBorderWidth:(float)fp8;
- (float)bottomBorderWidth;
- (float)unscaledBottomBorderWidth;
- (void)setBottomBorderWidth:(float)fp8;
- (float)leftBorderWidth;
- (float)unscaledLeftBorderWidth;
- (void)setLeftBorderWidth:(float)fp8;
- (float)rightBorderWidth;
- (float)unscaledRightBorderWidth;
- (void)setRightBorderWidth:(float)fp8;
- (float)topBorderFactor;
- (void)setTopBorderFactor:(float)fp8;
- (float)bottomBorderFactor;
- (void)setBottomBorderFactor:(float)fp8;
- (float)leftBorderFactor;
- (void)setLeftBorderFactor:(float)fp8;
- (float)rightBorderFactor;
- (void)setRightBorderFactor:(float)fp8;
- (void)_scaleAttributesIfNeeded;
- (float)upperLeftCornerRadius;
- (void)setUpperLeftCornerRadius:(float)fp8;
- (float)upperRightCornerRadius;
- (void)setUpperRightCornerRadius:(float)fp8;
- (float)lowerLeftCornerRadius;
- (void)setLowerLeftCornerRadius:(float)fp8;
- (float)lowerRightCornerRadius;
- (void)setLowerRightCornerRadius:(float)fp8;
- (struct CGPoint)upperLeftCornerInset;
- (void)setUpperLeftCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)upperRightCornerInset;
- (void)setUpperRightCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)lowerLeftCornerInset;
- (void)setLowerLeftCornerInset:(struct CGPoint)fp8;
- (struct CGPoint)lowerRightCornerInset;
- (void)setLowerRightCornerInset:(struct CGPoint)fp8;
- (float)scale;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setDraggingInProgress:(BOOL)fp8;
- (id)draggingImage:(struct _NSSize)fp8;
- (BOOL)isImageElement;
- (BOOL)isCompoundElement;
- (BOOL)isArtElement;
- (BOOL)isMapElement;
- (BOOL)isDrawingElement;
- (BOOL)isVectorElement;
- (BOOL)isTextElement;
- (BOOL)isCalendarElement;
- (BOOL)isCalendarCellElement;
- (BOOL)isContainerElement;
- (BOOL)isGuideElement;
- (BOOL)isGroupElement;
- (BOOL)isGridElement;
- (BOOL)isCellElement;
- (id)embeddedTextElements;
- (void)clearElementCache:(BOOL)fp8;
- (void)drawStrokeAndFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 resolution:(int)fp28;
- (void)_cgPatternFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 drawRect:(struct CGRect)fp28;
- (void)_patternWithLayersFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 drawRect:(struct CGRect)fp28;
- (void)drawFillInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24 resolution:(int)fp28;
- (void)drawStrokeInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20 alpha:(float)fp24;
- (void)enableShadowInContext:(struct CGContext *)fp8 scale:(float)fp12 displacement:(float)fp16;
- (void)drawShadowInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)disableShadowInContext:(struct CGContext *)fp8;
- (BOOL)drawsHighlightBorder;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (BOOL)intersectsRect:(struct _NSRect)fp8 scale:(float)fp24;
- (int)knobUnderPoint:(struct _NSPoint)fp8;
- (id)alternateElements;
- (void)setAlternateElements:(id)fp8;
- (float)animationStartTime;
- (float)animationDuration;
- (id)animationEffects;
- (BOOL)animationRequiresAlpha;
- (BOOL)isAnimated;
- (BOOL)shouldFlipX;
- (void)setShouldFlipX:(BOOL)fp8;
- (void)unloadCachedObjects;
- (BOOL)panZoomModeIsEnabled;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (BOOL)rotateModeIsEnabled;
- (void)setRotateModeEnabled:(BOOL)fp8;
- (BOOL)moveModeIsEnabled;
- (void)setMoveModeEnabled:(BOOL)fp8;
- (BOOL)resizeModeIsEnabled;
- (void)setResizeModeEnabled:(BOOL)fp8;
- (void)disableAllEditModes;
- (void)preparePanZoom;
- (int)layerOrderComparison:(id)fp8;
- (int)xPositionComparison:(id)fp8;
- (int)yPositionComparison:(id)fp8;
- (void)addReferencedAssetsToSet:(id)fp8;
- (BOOL)validate:(id)fp8;
- (void)_notify;
- (void)prepareForDealloc;
- (void)dealloc;
- (BOOL)needFinishTakeValues;
- (void)setNeedFinishTakeValues:(BOOL)fp8;
- (void)finishTakeValues;
- (void)installEditorForView:(id)fp8;

@end

@interface IPPageThumbCell : NSView
{
    IPBookController *mBookController;
    IPPage *mPage;
    float mPageRatio;
    BOOL mIsSelected;
    BOOL mIsDropTarget;
    BOOL mDrawSplitSpreads;
}

- (id)initWithFrame:(struct _NSRect)fp8 forPage:(id)fp24;
- (id)key;
- (void)setController:(id)fp8;
- (id)page;
- (void)drawRect:(struct _NSRect)fp8;
- (void)_callbackWithThumb:(id)fp8;
- (void)setIsSelected:(BOOL)fp8;
- (BOOL)isSelected;
- (void)setIsDropTarget:(BOOL)fp8;
- (BOOL)isDropTarget;
- (float)interpageGap;
- (BOOL)shouldDrawSplitSpreads;
- (void)setDrawSplitSpreads:(BOOL)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 withBackground:(BOOL)fp24 isSelected:(BOOL)fp28 isDropTarget:(BOOL)fp32;
- (void)_pageContentsChanged:(id)fp8;
- (struct _NSRect)pageIconRect;
- (id)thumbnail;
- (void)dealloc;

@end

@interface IPPageThumbView : NSView
{
    IPBookController *mBookController;
    struct ElementPageThumbArray *mCells;
    BOOL mVariableWidth;
    BOOL mFixedHeight;
    float mCellSize;
    long mSelectionAnchor;
    long mSelectionExtentStart;
    long mSelectionExtentEnd;
    IPPageThumbCell *mSelectedCell;
    BOOL mInDrag;
    NSTimer *mAnimationTimer;
    long mDragFromIndex;
    float mDragHoleWidth;
    long mDropTargetIndex;
    double mAnimationDuration;
    BOOL mDraggingSpread;
    IPPageThumbCell *mPreviousDropCell;
    unsigned char mDrawShadow;
    unsigned char mDrawBorder;
    BOOL mIsVertical;
    float mScrollStep;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (id)controller;
- (int)cellCount;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)resetCells;
- (void)addCell:(id)fp8 recalc:(BOOL)fp12;
- (id)newCellAtIndex:(int)fp8 forPage:(id)fp12 recalc:(BOOL)fp16;
- (void)insertCell:(id)fp8 atIndex:(int)fp12 recalc:(BOOL)fp16;
- (void)removeCellAtIndex:(int)fp8 recalc:(BOOL)fp12;
- (void)removeCell:(id)fp8 recalc:(BOOL)fp12;
- (void)removeAllCells;
- (int)indexOfCell:(id)fp8;
- (id)cellAtIndex:(int)fp8;
- (void)ensureCellIsVisible:(id)fp8;
- (void)resizeBoundingFrame;
- (void)recalcCellBounds;
- (id)selectedCells;
- (void)setSelectedCells:(id)fp8;
- (BOOL)isVertical;
- (void)setVertical:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)cellAtPoint:(struct _NSPoint)fp8;
- (void)_calculateCellsVisibleFrom:(long *)fp8 to:(long *)fp12 hardWay:(BOOL)fp16 useSelection:(BOOL)fp20 whollyVisible:(BOOL)fp24;
- (long)_firstDroppableIndex;
- (long)_lastDroppableIndex;
- (long)_thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)_moveCell:(id)fp8 toIndex:(long)fp12;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)_animateAHoleAt:(long)fp8;
- (void)_cleanUpAnimation;
- (void)_clearAnimationTimer;
- (void)_serviceAnimation;
- (unsigned int)_determineDragResult:(id)fp8;
- (id)_makeCellThumbnail:(id)fp8;
- (void)_dragCell:(id)fp8 event:(id)fp12;
- (BOOL)isFlipped;

@end

@interface IPPageView : NSView
{
    IPPage *mPage;
    IPBookView *mBookView;
    IPPageView *mProxyView;
    NSMutableArray *mTextEditors;
    struct _NSPoint mOriginOffset;
    float mLocalDrawingScale;
    BOOL mScaleByHeight;
    NSColor *mBackgroundColor;
    BOOL mMouseIsDown;
    NSImage *mEditingCacheImage;
    struct _NSRect mEditingCacheRect;
    IPBookController *mController;
}

+ (id)sharedOffscreenView;
- (void)setController:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)flushWarningToolTips;
- (id)page;
- (void)setPage:(id)fp8;
- (struct _NSRect)focusFrame;
- (float)localDrawingScale;
- (void)setLocalDrawingScale:(float)fp8;
- (void)setScaleByHeight:(BOOL)fp8;
- (void)setProxyView:(id)fp8;
- (id)bookView;
- (void)redrawSelectedElements;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8 atScale:(float)fp24 forResolution:(int)fp28;
- (void)setOriginOffset:(struct _NSPoint)fp8;
- (struct _NSPoint)originOffset;
- (void)_pageContentsChanged:(id)fp8;
- (void)_mapNeedsRedraw:(id)fp8;
- (void)setBounds:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)_ensureTextEditorSizes;
- (void)installEditor:(id)fp8;
- (void)removeEditor:(id)fp8;
- (void)removeEditors;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)_internalMouseDown:(id)fp8 isRightClick:(unsigned char)fp12;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)trackDrag:(id)fp8 element:(id)fp12;
- (void)dragElement:(id)fp8 event:(id)fp12 location:(struct _NSPoint)fp16;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (struct _NSPoint)hudLocationForElement:(id)fp8 hudFrame:(struct _NSRect)fp12;
- (void)selectElement:(id)fp8 notify:(BOOL)fp12;
- (void)deselectElement:(id)fp8 notify:(BOOL)fp12;
- (void)deselectAllElementsAndNotify:(BOOL)fp8;
- (void)reselectAllElements;
- (void)moveOrPanSelectedElements:(id)fp8;
- (void)panSelectedElementsWithGesture:(id)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (struct _NSRect)_unionRectForSelectedElements;
- (void)trackKnob:(int)fp8 ofElement:(id)fp12 withEvent:(id)fp16;
- (BOOL)isOpaque;
- (void)dealloc;

@end

@interface IPTextElementView : VAlignTextView
{
    IPTextElement *mTargetElement;
    NSTimer *mAnimator;
    BOOL mIsAnimating;
    float mStartingScale;
    BOOL mShouldSelectAll;
    BOOL mTextDidChange;
    BOOL mInDoFirstResponder;
    BOOL isFirst;
    BOOL isTiger;
    BOOL isBadRepaint;
    BOOL isBufferEnabled;
    struct _NSRect lastScrollVisibleRect;
    BOOL mIsPrimaryEditor;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)drawViewBackgroundInRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (void)_doFirstResponderWork;
- (void)_doFirstResponder:(id)fp8;
- (void)setNeedsDisplay:(BOOL)fp8;
- (void)setFrameRotation:(float)fp8;
- (void)_setBufferedBackground:(BOOL)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)mouseUp:(id)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)isAnimating;
- (id)targetElement;
- (void)setTargetElement:(id)fp8;
- (void)pageViewDidResizeInView:(id)fp8;
- (void)setTextDidChange:(BOOL)fp8;
- (BOOL)isPrimaryEditor;
- (void)setIsPrimaryEditor:(BOOL)fp8;
- (void)animateFromBounds:(struct _NSRect)fp8 toBounds:(struct _NSRect)fp24 fromRotation:(float)fp40 toRotation:(float)fp44 inView:(id)fp48 remove:(BOOL)fp52;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation;
- (void)animateNextFrame:(id)fp8;
- (void)didChangeText;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (float)verticalAlignmentWeight;
- (void)dealloc;

@end

@interface IPPhotoObjCProxy : NSObject
{
    struct IPPhotoInfo *mPhotoInfo;
    NSNumber *mUniqueID;
}

+ (id)proxyWithPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)initWithPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)dealloc;
- (struct IPPhotoInfo *)photoInfo;
- (void)setPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)canTerminate;
- (id)uniqueID;
- (id)aeDimensions;
- (id)width;
- (id)height;
- (id)name;
- (void)setName:(id)fp8;
- (id)annotation;
- (void)setAnnotation:(id)fp8;
- (id)imagePath;
- (id)thumbPath;
- (id)aeTitle;
- (void)setAeTitle:(id)fp8;
- (id)aeImageFileName;
- (id)aeThumbFileName;
- (id)aeDate;
- (void)setAeDate:(id)fp8;
- (id)aeKeywords;
- (id)handleAddScriptCommand:(id)fp8;
- (id)handleRemoveScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (id)removeKeyword:(id)fp8;

@end

@interface IPPhotoObjCProxy (NSScriptObjectSpecifiers)
- (id)objectSpecifier;
@end

@interface Filter : NSObject <NSCoding>
{
    int mType;
    int mOperation;
    NSDictionary *mUserInfo;
    NSString *mStringArg;
    NSString *mStringArg2;
    double mDoubleArg1;
    double mDoubleArg2;
    double mDoubleArg3;
    struct _NSRect mRectArg;
    double mTimeIntervalStart;
    double mTimeIntervalEnd;
    unsigned int *mKeywordKeys;
    int mKeywordKeysCount;
    BOOL mSearchInvert;
    BOOL mKeywordSearchNone;
    long mLongArg1;
    long mLongArg2;
    unsigned int mKeyArg1;
    int mIntArg1;
    int mIntArg2;
    char *mQueryString;
    NSString *mTextSearchString;
    NSArray *mTextMultiSearch;
    KeyMgr *mKeyMgr;
    AlbumMgr *mAlbumMgr;
    Album *mShelfAlbum;
    struct KeySet *mKeySet;
    struct KeySet *mKeySet2;
    unsigned int mKeyArg2;
}

+ (id)dateFilterWithOperation:(int)fp8 startPhotoDate:(double)fp12 endPhotoDate:(double)fp20;
+ (id)dateFilter:(int)fp8 operation:(int)fp12 startDate:(id)fp16 endDate:(id)fp20;
+ (id)dateFilter:(int)fp8 operation:(int)fp12 value:(int)fp16 span:(int)fp20;
+ (id)userTextFilter:(id)fp8 matchAll:(BOOL)fp12;
+ (id)textFilter:(int)fp8 operation:(int)fp12 text:(id)fp16 caseInsensitive:(BOOL)fp20;
+ (id)albumFilter:(int)fp8 operation:(int)fp12 text:(id)fp16;
+ (id)keywordFilterWithOperation:(int)fp8 keys:(id)fp12;
+ (id)keywordCategoryFilterWithOperation:(int)fp8 categoryKey:(unsigned long)fp12;
+ (id)albumFilter:(int)fp8 operation:(int)fp12 key:(unsigned long)fp16;
+ (id)rollFilterWithRollsInKeyMgr:(id)fp8;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 key:(unsigned long)fp16;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 startRoll:(int)fp16 endRoll:(int)fp20;
+ (id)rollFilter:(int)fp8 operation:(int)fp12 text:(id)fp16 useSpaceSeparators:(BOOL)fp20 matchAll:(BOOL)fp24;
+ (id)rollLocationFilterForRegion:(struct _NSRect)fp8;
+ (id)rankingFilterWithOperation:(int)fp8 startRanking:(int)fp12 endRanking:(int)fp16;
+ (id)photoAttributeFilterWithOperation:(int)fp8 value:(int)fp12;
+ (id)photoActionFilterWithOperation:(int)fp8 value:(int)fp12;
+ (id)exifShutterFilterWithOperation:(int)fp8 min:(float)fp12 max:(float)fp16;
+ (id)exifISOFilterWithOperation:(int)fp8 min:(int)fp12 max:(int)fp16;
+ (id)exifApertureFilterWithOperation:(int)fp8 min:(double)fp12 max:(double)fp20;
+ (id)exifFocalLengthFilterWithOperation:(int)fp8 min:(double)fp12 max:(double)fp20;
+ (id)exifCameraModelFilterWithOperation:(int)fp8 value:(id)fp12;
+ (id)exifFlashFilterWithOperation:(int)fp8 value:(int)fp12;
+ (id)gpsProximityFilter:(id)fp8 matchAll:(BOOL)fp12 inRange:(BOOL)fp16;
+ (id)gpsRegionFilter:(struct _NSRect)fp8 inRange:(BOOL)fp24;
+ (id)placeKeyFilter:(unsigned long)fp8;
+ (id)placeKeyFilterMultiple:(id)fp8;
+ (id)userPlaceKeyFilter:(unsigned long)fp8;
+ (id)userPlaceKeyFilterMultiple:(id)fp8;
+ (id)photoKeyFilterWithPhotoKeys:(id)fp8;
+ (id)peopleFilter:(BOOL)fp8;
+ (id)namedPeopleFilter;
+ (id)peopleFilter:(BOOL)fp8 eventKeys:(id)fp12;
+ (id)peopleFilter:(BOOL)fp8 faceKeys:(id)fp12;
+ (id)placesFilter:(BOOL)fp8;
+ (id)placeNameFilter:(id)fp8;
+ (id)cityNameFilter:(id)fp8;
+ (id)stateNameFilter:(id)fp8;
+ (id)countryNameFilter:(id)fp8;
+ (id)cityNameFilter:(id)fp8 stateName:(id)fp12;
+ (id)cityNameFilter:(id)fp8 countryName:(id)fp12;
+ (id)gpsLocationFilterForLatitude:(double)fp8 longitude:(double)fp16;
+ (id)copyFilter:(id)fp8;
+ (void)initialize;
- (id)initWithType:(int)fp8 operation:(int)fp12;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)copyFromFilter:(id)fp8;
- (id)userInfo;
- (void)setUserInfo:(id)fp8;
- (int)type;
- (id)typeLabel;
- (void)setType:(int)fp8;
- (int)operation;
- (id)operationLabel;
- (void)setOperation:(int)fp8;
- (double)doubleArg1;
- (double)doubleArg2;
- (double)doubleArg3;
- (long)longArg1;
- (long)longArg2;
- (unsigned long)keyArg1;
- (int)intArg1;
- (int)intArg2;
- (struct _NSRect)rectArg;
- (char *)queryString;
- (id)keyMgr;
- (id)albumMgr;
- (void)setStringArg:(id)fp8;
- (id)stringArg;
- (void)setStringArg2:(id)fp8;
- (id)stringArg2;
- (void)setDoubleArg1:(double)fp8;
- (void)setDoubleArg2:(double)fp8;
- (void)setDoubleArg3:(double)fp8;
- (void)setLongArg1:(long)fp8;
- (void)setLongArg2:(long)fp8;
- (void)setKeyArg1:(unsigned long)fp8;
- (void)setIntArg1:(int)fp8;
- (void)setIntArg2:(int)fp8;
- (void)setRectArg:(struct _NSRect)fp8;
- (void)setQueryString:(id)fp8;
- (void)setAlbumMgr:(id)fp8;
- (void)_initializeKeywordSearch:(id)fp8;
- (struct IPAlbumList *)matchingAlbums;
- (void)initializeFilter;
- (struct IPAlbumList *)observedAlbums;
- (unsigned long long)albumMgrChangeMask;
- (unsigned long long)albumChangeMask;
- (unsigned long long)photoInfoChangeMask;
- (void *)filterFuncForFilter;

@end

@interface PhotoViewer : NSView <CellSwapAnimatorDelegate>
{
    ArchiveController *mArchiveController;
    NSMenu *mImageContextMenu;
    NSMenu *mRollContextMenu;
    NSMenu *mNoCellContextMenu;
    float mAccumRotate;
    int mRotateInterlock;
    FilterController *_placesFilterController;
    BOOL _placesFilterHeaderNeedsRefresh;
    float mThumbWidth;
    float mThumbHeight;
    float mThumbHSpace;
    float mThumbVSpace;
    float mReadAheadTop;
    float mReadAheadBottom;
    float mLastScrollPosition;
    unsigned char mForceHighResDraw;
    long mRunningDrawCount;
    double mRunningTimeCount;
    unsigned long mSelectionAnchor;
    float mScrollInterval;
    float mBackfillInterval;
    NSTimer *mHiResScrollTimer;
    NSTimer *mHiResEventScrollTimer;
    NSTimer *mDisplayResultsTimer;
    NSTimer *mAnimationTimer;
    double mAnimationStart;
    unsigned long mCenterZoomIndex;
    unsigned long mCenterZoomLowIndex;
    unsigned long mCenterZoomHighIndex;
    BOOL _haveDeferredScrollPoint;
    struct _NSPoint _deferredScrollPoint;
    BOOL mResetAllowedToTopScroll;
    BOOL mRegisteredForNotifications;
    BOOL mNeedsRebuild;
    BOOL mNeedsHeaderRefresh;
    BOOL mNeedsRepaint;
    BOOL mIsFiltered;
    BOOL mInDrag;
    BOOL mDragIsFromOneStack;
    unsigned int mDragSingleStackRollKey;
    unsigned int mDragSingleStackStackKey;
    BOOL mResetSelection;
    float mRegularLineScroll;
    float mOriginalLineScroll;
    struct _NSPoint mLastDragPoint;
    unsigned long mCurrentDragIndex;
    BOOL mCurrentDragBefore;
    struct UnsignedLongSet *mCurrentSelection;
    struct UnsignedLongSet *mTemporaryRollSelection;
    struct _NSRect mDragSelectionRect;
    KeyMgr *_dragRollKeys;
    BOOL mDragSelectActive;
    BOOL mDragStartedInternal;
    struct _NSPoint mDragStartingPoint;
    BOOL mDrewLowRes;
    float mConstrainAspectRatio;
    BOOL mForceRatio;
    BOOL mConstrainWasOn;
    BOOL mNotLoaded;
    NSProgressIndicator *mLoadingProgress;
    BOOL mReloadOfPrefsNeeded;
    NSAttributedString *mLoadingString;
    float mPageHeight;
    struct _NSRect mInsertionRect;
    BOOL mInsertionOnStack;
    unsigned int mInsertionStackKey;
    BOOL mCenteringZoom;
    float mSizeIncrement;
    unsigned long mLastIdx;
    struct _NSRect mLastPreloadRect;
    struct MessageReceiver mDBMessageReceiver;
    struct MessageReceiver mAlbumMessageReceiver;
    double mEventSplitThreshold;
    unsigned int mEventSplitModeNextKey;
    unsigned long mHoverImageIndex;
    struct vector<MetaTrackingRecord, std::allocator<MetaTrackingRecord>> *mZoneTracking;
    struct map<float, UInt32, std::less<float>, std::allocator<std::pair<const float, UInt32>>> *mRowBreaks;
    float mLastMaxTextHeight;
    OverlayWindow *mOverlay;
    BOOL mLastDrawWasScroll;
    float mAnimationFrameRate;
    float mLineSpeedFactor;
    float mPageSpeedFactor;
    BOOL mUseScrollOverlay;
    NSTimer *mOverlayCloseTimer;
    BOOL mPossibleDoubleClickReturn;
    BOOL mPossibleDoubleClickMagnify;
    id mOriginalScrollerTarget;
    SEL mOriginalScrollerSelector;
    struct _NSRect mCurrentNewVisible;
    struct _NSRect mLatestNewVisible;
    struct ThumbDataArray *mBackgroundThumbDataArray;
    BOOL mBackgroundThumbDataArrayValid;
    BOOL mOverlayFromThumb;
    NSTimer *mScrollAnimateTimer;
    struct _NSPoint mScrollAnimateStart;
    struct _NSPoint mScrollAnimateFinish;
    struct _NSPoint mScrollAnimateFinalFinish;
    double mScrollAnimateStartTime;
    double mScrollAnimateDuration;
    BOOL mForceHUD;
    double mRampDuration;
    float mRampDistance;
    float mScrollDistance;
    struct _NSPoint mScrollAnimatePreviousFinish;
    struct _NSPoint mScrollAnimateLastDraw;
    BOOL mInThumbScroll;
    float mUsedFrameHeight;
    NSString *mShortDateFormat;
    struct __CFDateFormatter *mMediumDateFormatter;
    struct __CFDateFormatter *mLongDateFormatter;
    NSDictionary *mCalendarFormattingLocaleX;
    BOOL mUseScrollAnimation;
    BOOL mOneShotOneUpForceHiRes;
    BOOL mInLinePageScroll;
    BOOL mLastScrollWasWheel;
    NSTextField *mInlineEditor;
    NSTokenField *mInlineKeywordEditor;
    NSTextField *mInlineCommentEditor;
    StarRatingControl *mInlineRatingEditor;
    struct IPPhotoInfo *mInlineEditPhoto;
    struct IPRoll *mInlineEditRoll;
    NSLock *mInlineEditUpdateLock;
    int mSplitModeStartingEventCount;
    IPRollInfoCache *mRollInfoCache;
    struct map<Key, StackFramingEntry, std::less<Key>, std::allocator<std::pair<const Key, StackFramingEntry>>> *mStackFramingCache;
    NSRecursiveLock *mStackFramingCacheLock;
    unsigned int mHoveringStackKey;
    struct _NSRect mHoveringStackRect;
    unsigned int _eventCreatedBySplit;
    int mBackgroundThumbDataArrayPunt;
    int mBackgroundThumbDataArrayDump;
    BOOL _personShowFaceActive;
    BOOL _personResetModeActive;
    NSMutableIndexSet *_personResetConfirmedPhotoKeys;
    NSMutableIndexSet *_personResetRejectedPhotoKeys;
    int _personResetFaceKey;
    unsigned long _personResetHoverIndex;
    BOOL _personResetHoverLatch;
    BOOL _personResetHoverAlt;
    NSString *_personResetNotString;
    NSString *_personResetString;
    ReviewModeUndoTarget *_reviewModeUndoer;
    BOOL _flipInfoIsActive;
    NSImage *_infoBadge;
    NSImage *_infoBadgeHighlighted;
    IPPhotoFlip *_photoFlipInfo;
    BOOL mIsSeparateWindow;
    Album *mCurrentAlbum;
    BOOL mIgnoreApplicationCurrentAlbum;
    struct RenderCache *mRenderCache;
    NSDictionary *msCaptionAttrsLight;
    NSDictionary *msCaptionAttrsDark;
    NSDictionary *msCaptionAttrs;
    Ellipsizer *msCaptionEllipsizer;
    float msCaptionHeight;
    NSDictionary *msKeywordAttrsLight;
    NSDictionary *msKeywordAttrsDark;
    NSDictionary *msKeywordAttrs;
    Ellipsizer *msKeywordEllipsizer;
    float msKeywordHeight;
    NSDictionary *msRankAttrsLight;
    NSDictionary *msRankAttrsDark;
    NSDictionary *msRankAttrs;
    float msRankHeight;
    NSDictionary *msPlaceHeaderTextAttrs;
    NSDictionary *msPlaceHeaderCountAttrs;
    NSDictionary *msMainTextRollAttrs;
    NSDictionary *msAltTextRollAttrs;
    NSDictionary *msSelectedMainTextRollAttrs;
    NSDictionary *msSelectedAltTextRollAttrs;
    NSDictionary *msSelectedBubbleTextRollAttrs;
    NSDictionary *msBubbleTextRollAttrs;
    float msTextHeight;
    Ellipsizer *msMainTextRollEllipser;
    Ellipsizer *msAltTextRollEllipser;
    Ellipsizer *msSelectedMainTextRollEllipser;
    Ellipsizer *msSelectedAltTextRollEllipser;
    NSString *mStar;
    NSString *mBullet;
    float mStarSize;
    float msStarSize[6];
    NSString *msStar[6];
    BOOL msWereGonnaQuit;
    float msDiclosureWidth;
    float msRollImageWidth;
    float msDiclosureHeight;
    NSImage *msRollImageSmall;
    NSImage *msStackImageSmall;
    NSImage *msCalImageSmall;
    struct _NSSize msCalImageSmallSize;
    NSImage *msDisclosureOpenH;
    NSImage *msDisclosureClosedH;
    NSImage *msDisclosureWhiteOpenH;
    NSImage *msDisclosureWhiteClosedH;
    NSImage *msDisclosureOpenN;
    NSImage *msDisclosureClosedN;
    NSImage *msDisclosureWhiteOpenN;
    NSImage *msDisclosureWhiteClosedN;
    NSImage *mHiddenBadge;
    struct _NSSize mHiddenBadgeSize;
    NSImage *mShelvedBadge;
    struct _NSSize mShelvedBadgeSize;
    NSImage *msFavoriteBadge;
    struct _NSSize msFavoriteBadgeSize;
    NSImage *msMovieBadge;
    NSImage *msMovieBadgeBlack;
    struct _NSSize msMovieBadgeSize;
    NSImage *msPendingBadge;
    struct _NSSize msPendingBadgeSize;
    BOOL mOverrideColors;
    NSColor *msBackgroundColor;
    NSColor *mStackBackgroundColor;
    NSColor *mStackStrokeColor;
    NSColor *msYearBackgroundColor;
    NSColor *msMonthBackgroundColor;
    NSColor *msDayBackgroundColor;
    struct vector<ViewStruct, std::allocator<ViewStruct>> *msPhotos;
    unsigned long msCellCount;
    struct _opaque_pthread_mutex_t msRebuildLock;
    ImageDB *mgCurrentDB;
    unsigned int mgFavoriteKeywordKey;
    unsigned int mgViewState;
    int mgInterpolation;
    int mgStdInterpolation;
    BOOL mSplitModeHoldRollsVisible;
    BOOL mSplitModeHoldDatesVisible;
    BOOL mSplitModeHoldHiddenVisible;
    BOOL mSupressSelectionScroll;
    float msRollStroke;
    struct CGContext *msGContext;
    BOOL mgCopyOnScroll;
    float msAlpha;
    CDAnonymousStruct16 *msShadowCache;
    CDAnonymousStruct16 *mSelectedShadowCache;
    CDAnonymousStruct16 *mInactiveSelectedShadowCache;
    CDAnonymousStruct16 *msStackShadowCache;
    CDAnonymousStruct16 *mSelectedStackShadowCache;
    CDAnonymousStruct16 *mInactiveSelectedStackShadowCache;
    struct CGImage *_eventFrameImage;
    float msScale;
    struct _NSRect _lastToolTipConfigureRect;
    int mDefeatKeepSelectionVisible;
    BOOL mHaveWrittenMissingThumbnailWarning;
    BOOL mHaveDoneMissingThumbnailWarning;
    int mNeedMissingThumbnailWarning;
    BOOL mgRollDateOnRight;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaBeginRects;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaEndRects;
    struct vector<AnimationRects, std::allocator<AnimationRects>> *_eaFinalRects;
    struct _NSPoint _eaBeginScrollPoint;
    struct _NSPoint _eaEndScrollPoint;
    long _eaBeginIndexRange;
    long _eaEndIndexRange;
    IPAnimator *_eventToggleAnimator;
    NSLock *_eventAnimatingLock;
    unsigned int _eaOldFirstIndex;
    unsigned int _eaOldLastIndex;
    struct _NSRect _eaFinalViewFrame;
    float _eaDuration;
    KeyMgr *_eaFadeOutKeys;
    KeyMgr *_eaFadeInKeys;
    KeyMgr *_eaPreSlideKeys;
    KeyMgr *_eaPostSlideKeys;
    KeyMgr *_eaChangingKeys;
    BOOL _eaEmptyChangingKeys;
    struct map<Key, EventDataCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, EventDataCacheRecord>>> *_eaEventDataCacheMap;
    struct map<Key, ViewStruct, std::less<Key>, std::allocator<std::pair<const Key, ViewStruct>>> *_eaCacheMap;
    struct vector<ViewStruct, std::allocator<ViewStruct>> *_eaCacheVector;
    float _eaFadeAlpha;
    unsigned long _eaActualCount;
    IPAnimation *_eaAnimation;
    int _placesCityCount;
    int _placesNameCount;
    NSString *_thumbSizePreferenceKey;
    float _currentAnimationAlpha;
    IPDetailHeaderView *_detailHeaderView;
    IPPeopleDetailHeaderView *_peopleDetailHeaderView;
    IPPlacesDetailHeaderView *_placesDetailHeaderView;
    IPDotMacHeaderView *_dotMacHeaderView;
    IPInstructionDetailHeaderView *_instructionDetailHeaderView;
    NSSlider *_thumbnailSizer;
    IPDetailWindowController *_detailWindowController;
    NSTimer *_springTimer;
    struct _NSPoint _springLocation;
    BOOL _inRotateGesture;
    BOOL _inMagnifyGesture;
    unsigned long _photoToRotateWithGesture;
    BOOL _viewInstalled;
    BOOL _needsRebuilding;
    KeyMgr *_faceKeys;
    NSString *_personResetName;
    NSView *_toolbarView;
    BOOL _doingAnimationCover;
    BOOL _capturingAnimationCover;
    BOOL _overridePlacesBrowser;
    NSArray *_facesLikeThis;
    BOOL _facesLikeThisActive;
    int _facesLikeThisFaceKey;
    unsigned long _facesLikeThisHeaderIndex;
    BOOL _dragSourceHasPreFacesLikeThis;
    BOOL _dragSourceHasPostFacesLikeThis;
    FullScreenScroller *_myScroller;
    CellSwapAnimator *_animationEngine;
    NSProgressIndicator *_facesLikeThisProgress;
}

+ (void)initialize;
+ (int)_cacheSize;
+ (id)_stringForImageType:(int)fp8;
- (void)abortAnimationEngine;
- (void)setPersonResetModeActive:(BOOL)fp8;
- (void)setPersonShowFaceActive:(BOOL)fp8;
- (void)setNeedSimilarFacesProgress:(BOOL)fp8;
- (void)ensureNoFacesLikeThisOverlap;
- (void)_similarFacesDataAvailable:(id)fp8;
- (void)_faceDataChanged:(id)fp8;
- (void)_albumProgressMsg:(id)fp8;
- (id)archiveController;
- (void)setArchiveController:(id)fp8;
- (id)detailHeaderView;
- (void)setDetailHeaderView:(id)fp8;
- (id)peopleDetailHeaderView;
- (void)setPeopleDetailHeaderView:(id)fp8;
- (id)placesDetailHeaderView;
- (void)setPlacesDetailHeaderView:(id)fp8;
- (id)instructionDetailHeaderView;
- (void)setInstructionDetailHeaderView:(id)fp8;
- (id)dotMacHeaderView;
- (void)setDotMacHeaderView:(id)fp8;
- (id)detailWindowController;
- (void)setDetailWindowController:(id)fp8;
- (id)thumbnailSizer;
- (void)setThumbnailSizer:(id)fp8;
- (void)callUpdateStatus;
- (void)selectionChanged;
- (unsigned long)viewerIndexForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setViewerIndex:(unsigned long)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (unsigned long)viewerIndexForRoll:(struct IPRoll *)fp8;
- (void)setViewerIndex:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;
- (void)handlePhotoInfoRemoved:(struct IPPhotoInfo *)fp8;
- (BOOL)isOpaque;
- (void)showRolls:(char *)fp8 showInvisible:(char *)fp12 showingLibrary:(char *)fp16;
- (void)flagsForPhotoAtIndex:(unsigned int)fp8 isPhoto:(char *)fp12 isRoll:(char *)fp16 isHeader:(char *)fp20 isOpen:(char *)fp24 isVisible:(char *)fp28;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)scrollWheel:(id)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)precacheDone:(id)fp8;
- (void)hijackVerticalScroller;
- (void)decoupledScrollAnnounce:(id)fp8;
- (void)scrollPoint:(struct _NSPoint)fp8;
- (void)imageRequestDone:(id)fp8;
- (void)queueRequestForImagesInRect:(struct _NSRect)fp8 cacheOnly:(BOOL)fp24;
- (float)findRowBreakRelativeTo:(struct _NSPoint)fp8 below:(BOOL)fp16;
- (float)findRowBreak:(int)fp8 below:(BOOL)fp12;
- (void)decoupledScroll:(id)fp8;
- (void)maxThumbSizeBumped:(id)fp8;
- (void)initVariables;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)setHidden:(BOOL)fp8;
- (void)awakeFromNib;
- (void)prepareToTerminateApp:(id)fp8;
- (BOOL)isFlipped;
- (void)defaultsChanged:(id)fp8;
- (void)placesStatsChanges:(id)fp8;
- (id)calendarFormattingLocale;
- (void)ignoreDPAPNotifications;
- (void)resumeDPAPNotifications;
- (id)document;
- (void)loadPreferences:(id)fp8;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)_resetToolTips;
- (void)resetCaptionAttributes;
- (void)resetRankingAttributes;
- (void)resetRollAttrributes;
- (void)resetKeywordAttributes;
- (void)resetAttributes;
- (void)dealloc;
- (id)db;
- (void)setDB:(id)fp8;
- (unsigned long)indexOfImageInCenterOfRect:(struct _NSRect)fp8;
- (unsigned long)indexOfImageInCenterOfRectOrCurrentSelection:(struct _NSRect)fp8;
- (void)_scrollSelectionIntoView;
- (void)setMetaRectsForViewStruct:(CDAnonymousStruct3 *)fp8;
- (void)setMetaRectsForImageAtIndex:(unsigned int)fp8;
- (void)moveSelectionForInlineEditOfItemAtIndex:(unsigned long)fp8;
- (id)proxyForCell:(CDAnonymousStruct3 *)fp8;
- (CDAnonymousStruct3 *)cellForProxy:(id)fp8;
- (unsigned long)indexForProxy:(id)fp8;
- (CDAnonymousStruct3 *)nextPrevInlineTarget:(BOOL)fp8;
- (void)undoRedoInlineCaptionEdit:(id)fp8;
- (void)inlineEditorAction:(id)fp8;
- (void)sheetStarting:(id)fp8;
- (void)updateInlineCaptionEditor:(id)fp8;
- (id)currentKeywordEditor;
- (void)inlineKeywordEditorAction:(id)fp8;
- (void)updateInlineKeywordEditor:(id)fp8;
- (id)tokenField:(id)fp8 completionsForSubstring:(id)fp12 indexOfToken:(int)fp16 indexOfSelectedItem:(int *)fp20;
- (id)tokenField:(id)fp8 shouldAddObjects:(id)fp12 atIndex:(unsigned int)fp16;
- (id)tokenField:(id)fp8 displayStringForRepresentedObject:(id)fp12;
- (void)undoRedoInlineCommentEdit:(id)fp8;
- (void)inlineCommentEditorAction:(id)fp8;
- (void)updateInlineCommentEditor:(id)fp8;
- (void)undoRedoInlineRatingEdit:(id)fp8;
- (void)inlineRatingEditorAction:(id)fp8;
- (void)updateInlineRatingEditor:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)_control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)resetOffset;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setBounds:(struct _NSRect)fp8;
- (void)scrollingStopped:(id)fp8;
- (void)setLoadingString:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)uncacheSelectedPhotos;
- (void)uncachePhotosForStack:(struct IPStack *)fp8;
- (void)uncacheStackedPhotosForAlbum:(id)fp8;
- (void)storeLastFloat:(float)fp8 onAlbum:(id)fp12;
- (void)refreshPeopleDetailSetup;
- (void)rebuildView:(id)fp8;
- (id)currentAlbum;
- (float)sliderValueFromThumbValue:(float)fp8;
- (float)sliderValueToThumbSize:(float)fp8;
- (float)sliderPositionToThumbSize;
- (void)zoomBandForThumbSize:(float)fp8 centerIndex:(unsigned long)fp12 visibleRect:(struct _NSRect)fp16 lowIdx:(unsigned long *)fp32 highIdx:(unsigned long *)fp36;
- (float)sizeIncrement;
- (BOOL)_isImportAlbum;
- (void)setSizeIncrement:(float)fp8 forceRebuild:(BOOL)fp12;
- (void)setSizeIncrement:(float)fp8;
- (float)thumbSize;
- (float)sizeCutover;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (unsigned long)indexWithImageRecKey:(unsigned long)fp8;
- (unsigned long)indexOfRoll:(struct IPRoll *)fp8;
- (unsigned long)indexOfPhoto:(struct IPPhotoInfo *)fp8;
- (id)backgroundColorForCell:(CDAnonymousStruct3 *)fp8;
- (struct _NSRect)rectForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)_checkPhotoListForUpdate:(struct IPPhotoList *)fp8 andReset:(BOOL)fp12;
- (void)_dpapItemDataUpdateDidEnd:(id)fp8;
- (void)networkImageLoadedNotification:(id)fp8;
- (void)setNeedsRebuild:(BOOL)fp8;
- (void)setNeedsHeaderRefresh:(BOOL)fp8;
- (void)setNeedsRepaint:(BOOL)fp8;
- (void)resizeView:(id)fp8;
- (struct _NSRect)_progressRect;
- (id)_loadingString;
- (void)_createAlbumProgress;
- (void)_removeAlbumProgress;
- (void)updateAlbumProgress;
- (void)_drawLoadingFeedback;
- (float)maxOverlayKeywordWidth;
- (float)maxOverlayRollNamedWidth;
- (void)updateOverlay:(BOOL)fp8 visible:(struct _NSRect)fp12;
- (void)overlayCloser:(id)fp8;
- (void)forceOverlayCloser;
- (BOOL)isScrolled:(struct _NSRect)fp8;
- (float)cacheCheckForRect:(struct _NSRect)fp8;
- (void)prefetchSurroundings;
- (void)missingThumbnailWarningMark;
- (void)missingThumbnailWarning;
- (void)setNSImageInterpolationFromCGInterpolation:(int)fp8;
- (id)thumbSizePreferenceKey;
- (void)setThumbSizePreferenceKey:(id)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)clearSelection;
- (struct IPPhotoList *)selectedPhotos;
- (BOOL)trackDisclosureWithIndex:(unsigned long)fp8 rect:(struct _NSRect)fp12 event:(id)fp28 didTrack:(char *)fp32;
- (void)_doClickOnRollWithIndex:(unsigned long)fp8 inDisclosure:(BOOL)fp12 wasSelected:(BOOL)fp16 wasOpen:(BOOL)fp20 doAllRolls:(BOOL)fp24;
- (BOOL)handleMouseEventForRollWithIndex:(unsigned long)fp8 wasSelected:(BOOL)fp12 inDisclosure:(BOOL)fp16 modifierFlags:(unsigned int)fp20 rebuild:(BOOL)fp24 clickCount:(int)fp28;
- (void)_doClickOnDateHeaderWithIndex:(unsigned long)fp8 inDisclosure:(BOOL)fp12 wasSelected:(BOOL)fp16 wasOpen:(BOOL)fp20 doAllRolls:(BOOL)fp24;
- (void)loadSimilarFaces;
- (BOOL)handleMouseEventForMoreFacesHeaderWithIndex:(unsigned long)fp8 wasSelected:(BOOL)fp12 inDisclosure:(BOOL)fp16 modifierFlags:(unsigned int)fp20 rebuild:(BOOL)fp24 clickCount:(int)fp28;
- (BOOL)handleMouseEventForDateHeaderWithIndex:(unsigned long)fp8 wasSelected:(BOOL)fp12 inDisclosure:(BOOL)fp16 modifierFlags:(unsigned int)fp20 rebuild:(BOOL)fp24 clickCount:(int)fp28;
- (void)selectFromIndex:(unsigned long)fp8 toIndex:(unsigned long)fp12 inDisclosure:(BOOL)fp16;
- (void)resetCursorRects;
- (unsigned long)_keyOfAdjacentRoll:(long)fp8 below:(BOOL)fp12;
- (void)cellSwapAnimatorStarted:(id)fp8;
- (void)cellSwapAnimatorFinished:(id)fp8;
- (int)cellSwapAnimatorCellCount:(id)fp8 startState:(BOOL)fp12;
- (void)cellSwapAnimatorCellData:(id)fp8 startState:(BOOL)fp12 info:(CDAnonymousStruct17 *)fp16;
- (void)updateStackHoverState;
- (void)updateHoverImageHoverState;
- (void)updatePersonResetHoverImage;
- (void)updateHoverState;
- (void)_modifiersChanged:(id)fp8;
- (void)updateUIToInfo:(struct IPPhotoInfo *)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)showFlipInfoForPhotoAtIndex:(unsigned long)fp8;
- (void)closingFlipInfo;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (void)_showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)_showMagnifierForPhoto:(CDAnonymousStruct3 *)fp8;
- (void)mouseMoved:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)jogShuttle:(id)fp8;
- (int)_dotMacAlbumTitleState:(id)fp8;
- (void)_goToDotMacAlbum:(id)fp8;
- (void)_announceDotMacAlbum:(id)fp8;
- (void)toggleRevealConcealForRollWithKey:(unsigned long)fp8;
- (BOOL)trackItemRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28 index:(unsigned long)fp32 stateMask:(unsigned short)fp36;
- (void)_backToEventView;
- (void)_backToPeopleView;
- (void)_backToPlacesView:(struct _NSRect)fp8;
- (unsigned long)indexOfPhotoUnderMouse:(struct _NSPoint)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)handlePersonResetEvent:(id)fp8 forIndex:(unsigned long)fp12 inRect:(struct _NSRect)fp16;
- (void)trackDragSelectForReviewMode:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)ensureImageIsVisible:(unsigned long)fp8;
- (void)ensureImageIsVisibleMovingUp:(unsigned long)fp8;
- (void)ensureImageIsVisibleMovingDown:(unsigned long)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (struct IPPhotoInfo *)nextPrevImageWithOptions:(unsigned char)fp8 isNext:(unsigned char)fp12 returnOnly:(BOOL)fp16;
- (struct IPPhotoInfo *)whatIsNextImage;
- (struct IPPhotoInfo *)whatIsPrevImage;
- (void)nextPrevImageWithOptions:(unsigned char)fp8 isNext:(unsigned char)fp12;
- (void)upDownImageWithOptions:(unsigned char)fp8 isDown:(unsigned char)fp12;
- (void)nextImage;
- (void)previousImage;
- (void)_redoOrderChanges:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 albums:(id)fp20;
- (void)_undoOrderChanges:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 albums:(id)fp20;
- (void)prepareOrderChangeUndo:(id)fp8 rolls:(id)fp12 stacks:(id)fp16 allManualAlbums:(BOOL)fp20 db:(id)fp24;
- (void)toggleOpenStateForStackWithKey:(unsigned long)fp8;
- (void)_redoMakeSelectedPhotoStackKey:(unsigned long)fp8 originalKey:(unsigned long)fp12;
- (void)_undoMakeSelectedPhotoStackKey:(unsigned long)fp8 originalKey:(unsigned long)fp12;
- (void)makeSelectedPhotoStackKey;
- (void)_redoStackSelectedPhotos:(id)fp8 originalRolls:(id)fp12 originalStacks:(id)fp16 newStack:(unsigned long)fp20;
- (void)_undoStackSelectedPhotos:(id)fp8 originalRolls:(id)fp12 originalStacks:(id)fp16 newStack:(unsigned long)fp20;
- (void)closeNewStack:(id)fp8;
- (void)stackSelectedPhotos;
- (void)_redoUnstackSelectedPhotos:(id)fp8 stackKey:(unsigned long)fp12;
- (void)_undoUnstackSelectedPhotos:(id)fp8 stackKey:(unsigned long)fp12;
- (void)unstackSelectedPhotos;
- (void)openSelectedStacks;
- (void)closeSelectedStacks;
- (BOOL)_canOpenStacks;
- (BOOL)_canCloseStacks;
- (BOOL)_canUnstackPhotos;
- (BOOL)_canSetStackKeyPhoto;
- (void)openAllStacksAction:(id)fp8;
- (void)closeAllStacksAction:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (void)stackPhotosAction:(id)fp8;
- (void)unstackPhotosAction:(id)fp8;
- (void)removePhotosFromStackAction:(id)fp8;
- (void)setStackKeyPhotoAction:(id)fp8;
- (void)_undoRedoShowHidePhotos:(id)fp8 oldSelection:(id)fp12 newSelection:(id)fp16 undoManager:(id)fp20;
- (BOOL)showingUserHidden;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (BOOL)_canShowUserHiddenPhotos;
- (BOOL)_canHideUserHiddenPhotos;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (struct _NSRect)globalRectForSelectedPhoto;
- (void)undoRedoQuickConfirmWithBeginState:(id)fp8 endState:(id)fp12 removed:(id)fp16 undoManager:(id)fp20;
- (void)addToCurrentFaceFromPasteboard:(id)fp8;
- (void)ignoreOrUnassignSelectedFaces:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)prepImageContextMenuForFaceReject:(unsigned long)fp8;
- (id)menuForEvent:(id)fp8;
- (id)dragRollKeys;
- (void)setDragRollKeys:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)sortPhotoListLikeAlbum:(struct IPPhotoList *)fp8;
- (void)_fillPasteboardWithSelection:(id)fp8 addAllStackMembers:(BOOL)fp12;
- (void)pasteboard:(id)fp8 provideDataForType:(id)fp12;
- (void)_undoRedoMovePhotosToNewEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 addedKeys:(id)fp20 removedKeys:(id)fp24 undoManager:(id)fp28;
- (void)_undoCommandPasteImages:(id)fp8 toAlbum:(id)fp12 overRec:(struct IPPhotoInfo *)fp16 targetRec:(struct IPPhotoInfo *)fp20 originalOrder:(id)fp24 originalSortOrder:(int)fp28 originalSortDirection:(int)fp32 uniqueOnly:(BOOL)fp36;
- (void)_doCommandPasteImages:(id)fp8 toAlbum:(id)fp12 overRec:(struct IPPhotoInfo *)fp16 targetRec:(struct IPPhotoInfo *)fp20 uniqueOnly:(BOOL)fp24;
- (void)_redoMovePhotos:(id)fp8 toStack:(unsigned long)fp12 beforePhoto:(unsigned long)fp16 originalRolls:(id)fp20 originalStacks:(id)fp24;
- (void)_undoMovePhotos:(id)fp8 toStack:(unsigned long)fp12 beforePhoto:(unsigned long)fp16 originalRolls:(id)fp20 originalStacks:(id)fp24;
- (void)movePhotos:(struct IPPhotoList *)fp8 toStack:(struct IPStack *)fp12 beforePhoto:(struct IPPhotoInfo *)fp16;
- (void)_redoRemovePhotos:(id)fp8 beforePhoto:(unsigned long)fp12 originalStacks:(id)fp16;
- (void)_undoRemovePhotos:(id)fp8 beforePhoto:(unsigned long)fp12 originalStacks:(id)fp16;
- (void)removePhotosFromStack:(struct IPPhotoList *)fp8 beforePhoto:(struct IPPhotoInfo *)fp12;
- (void)_undoRedoMakeKeyPhotoForAlbum:(id)fp8 oldPhotoUID:(id)fp12 newPhotoUID:(id)fp16 undoManager:(id)fp20;
- (void)_undoRedoMakeKeyPhotoForRoll:(id)fp8 oldPhoto:(id)fp12 newPhoto:(id)fp16 undoManager:(id)fp20;
- (void)_pasteFromPasteboard:(id)fp8 fromSource:(id)fp12 uniqueOnly:(BOOL)fp16;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)_determineDragResult:(id)fp8;
- (struct _NSSize)_badgeImageSizeForCount:(int)fp8;
- (void)_drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)dragSelection:(id)fp8 location:(struct _NSPoint)fp12 imageIndex:(int)fp20 slideBack:(BOOL)fp24;
- (BOOL)isPasteboardJustOneStack:(id)fp8 stacksRollKey:(unsigned int *)fp12 stacksStackKey:(unsigned int *)fp16;
- (id)rollsRepresentedOnPasteboard:(id)fp8;
- (unsigned long)imageMostUnderPoint:(struct _NSPoint)fp8 leftSide:(char *)fp16 rowTop:(float *)fp20 rowBottom:(float *)fp24 firstIdx:(unsigned long *)fp28 lastIdx:(unsigned long *)fp32;
- (void)bumpSpringTimer:(struct _NSPoint)fp8;
- (void)clearSpringTimer;
- (void)doSpringTimer:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_acceptDroppedFilesPromised:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (void)resetState:(id)fp8;
- (id)stateDictionary;
- (void)_undoRedoSetCutList:(id)fp8 oldCutList:(id)fp12 undoManager:(id)fp16;
- (void)_setCutList:(id)fp8;
- (void)_doCommandCutImages:(id)fp8 fromAlbum:(id)fp12 withState:(id)fp16;
- (void)_undoCommandCutImages:(id)fp8 fromAlbum:(id)fp12 sortedArray:(id)fp16 withState:(id)fp20;
- (BOOL)_canCut;
- (BOOL)_canCopy;
- (BOOL)_canPaste;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)setEventKeyPhotoToSelectedPhoto;
- (void)_undoRedoSetPersonKeyPhotoForPerson:(unsigned long)fp8 oldKeyImageKey:(unsigned long)fp12 newKeyImageKey:(unsigned long)fp16 db:(id)fp20 undoManager:(id)fp24;
- (void)setPersonKeyPhotoToSelectedPhoto;
- (void)makePhotoEventKey:(id)fp8;
- (int)_selectionCount;
- (BOOL)validateMenuItem:(id)fp8;
- (void)setAlignToGrid:(BOOL)fp8;
- (BOOL)rollsVisible;
- (void)setCaptionsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setRollsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (BOOL)userHiddenVisible;
- (void)setHiddenPhotosVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setHideImportPhotos:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setDatesVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setRankingsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setKeywordsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setDrawFrame:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawShadow:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawFrameOnClosedStacks:(BOOL)fp8 display:(BOOL)fp12;
- (void)setDrawCount:(BOOL)fp8 display:(BOOL)fp12;
- (void)setConstrainVisible:(BOOL)fp8;
- (void)animateScrollAbsolute:(float)fp8;
- (void)animateScrollDelta:(float)fp8;
- (void)startScrollAnimateFrom:(struct _NSPoint)fp8 to:(struct _NSPoint)fp16;
- (void)finishScrollAnimate;
- (BOOL)isScrollAnimating;
- (void)scrollAnimateHandler:(id)fp8;
- (void)ourWindowResigningKey:(id)fp8;
- (void)setup;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (id)faceKeys;
- (void)setFaceKeys:(id)fp8;
- (id)personResetRejectedPhotoKeys;
- (id)personResetConfirmedPhotoKeys;
- (id)animationEngine;
- (void)setAnimationEngine:(id)fp8;
- (BOOL)doingAnimationCover;
- (void)setDoingAnimationCover:(BOOL)fp8;
- (int)personResetFaceKey;
- (void)setPersonResetFaceKey:(int)fp8;
- (BOOL)personResetModeActive;
- (BOOL)personShowFaceActive;
- (BOOL)dragSourceHasPostFacesLikeThis;
- (void)setDragSourceHasPostFacesLikeThis:(BOOL)fp8;
- (BOOL)dragSourceHasPreFacesLikeThis;
- (void)setDragSourceHasPreFacesLikeThis:(BOOL)fp8;
- (unsigned long)facesLikeThisHeaderIndex;
- (void)setFacesLikeThisHeaderIndex:(unsigned long)fp8;
- (int)facesLikeThisFaceKey;
- (void)setFacesLikeThisFaceKey:(int)fp8;
- (BOOL)facesLikeThisActive;
- (void)setFacesLikeThisActive:(BOOL)fp8;
- (id)facesLikeThis;
- (void)setFacesLikeThis:(id)fp8;
- (id)myScroller;
- (void)setMyScroller:(id)fp8;

@end

@interface RBCodec : NSObject
{
}

@end

@interface PreferenceController : NSObject
{
    id mWindow;
    id mTabView;
    NSUserDefaults *mUserDefaults;
    NSDictionary *mOriginalPrefs;
    id mGridAlignBox;
    id mUseFileNamesBox;
    id mHierarchicalAlbumsBox;
    id mBackgroundColorSlider;
    id mPhotoFrameRadioCluster;
    id mEditPopup;
    id mDoubleClickDetail;
    id mRotateRadioCluster;
    id mRotateIcon;
    id mUpdateCheckbox;
    NSPopUpButton *mLibraryContainsOption;
    NSButton *mAutoSplitNonCameraButton;
    NSMatrix *mMagnifyMatrix;
    NSPopUpButton *mAutoSplitGranularityPopup;
    NSButton *mShowReflectionsButton;
    NSButton *mShowEventScrollingInfoButton;
    NSButton *mDPAPClientCheckbox;
    NSButton *mDPAPServiceCheckbox;
    NSMatrix *mDPAPServiceModeMatrix;
    NSMatrix *mSharableAlbumMatrix;
    NSTextField *mDPAPServiceNameText;
    NSButton *mDPAPServicePasswordCheckbox;
    NSSecureTextField *mDPAPServicePasswordText;
    NSTextField *mDPAPServiceStatusText;
    id mShowNMonthsCheckbox;
    id mMonthsString;
    id mNMonthsTextfield;
    id mShowNRollsCheckbox;
    id mRollsString;
    id mRollsTextfield;
    id mMonthStepper;
    id mRollStepper;
    id mLaunchPopup;
    id mCountInAlbumNamesCheckbox;
    id mBorderCheckbox;
    id mShadowCheckbox;
    id mFrameClosedStacksCheckbox;
    id mSourceTextSizePopup;
    NSButton *mCopyFilesCheckbox;
    NSButton *mEmbedColorSyncCheckbox;
    NSButton *mUseColorSyncCheckbox;
    NSTextField *mAdvancedPrefDetails;
    NSButton *mShowScrollingInfoBox;
    NSButton *mUseScrollAnimationBox;
    NSButton *mUseHUDTransparencyBox;
    id mRAWCheckbox;
    id mRAWEditorCheckbox;
    NSPopUpButton *mCameraConnectChoice;
    NSPopUpButton *mReverseGeocodePopup;
    NSButton *mIncludePlaceInfoCheckbox;
    NSButton *mSubPollNowButton;
    NSPopUpButton *mSubscriptionPollingTime;
    NSTextField *mSubscriptionNextPoll;
    NSTextField *mSubStatusText;
    NSProgressIndicator *mSubStatusProgress;
    NSView *mSubPollingContainerView;
    NSTextField *miDiskStoragePrompt;
    NSTextField *miDiskStorageMinimum;
    NSTextField *miDiskStorageMiddle;
    NSTextField *miDiskStorageMaximum;
    NSLevelIndicator *miDiskStorageMeter;
    NSTextField *miDiskCurrentlyUsedPrompt;
    NSTextField *miDiskCurrentlyUsedValue;
    NSTextField *miDiskCapacityPrompt;
    NSTextField *miDiskCapacityValue;
    NSButton *miDiskBuyMoreButton;
    NSView *miDiskStorageContainerView;
    NSTextField *miDiskErrorLabel;
    NSString *miDiskCurrentlyUsedSave;
    NSString *miDiskCapacitySave;
    NSString *miDiskUsagePromptSaved;
    NSError *mPubSubError;
    BOOL mUpdatePublishPromptWhenBecomeKey;
    BOOL mDoBackgroundMusic;
    float mFavoriteGray;
    NSMovie *mCurrentSongQT;
    NSTimer *mTuneTimer;
    BOOL mSlideUserClickedButton;
    NSMutableArray *mBackgroundMusicChoices;
    id mMailAppPopup;
    NSString *mMailAppString;
    id mMailAppIcon;
    NSString *mExternalEditorPath;
    NSString *mBackgroundMusicPath;
    NSString *mLastUserChoice;
    ArchiveDocument *mArchiveDocument;
    NSMutableArray *mPreferencePanelObjects;
    NSMutableSet *mSharedAlbumAdjustedIdSet;
    BOOL mDidChangeSharedAlbumDMAPIdSet;
    BOOL mKillUndoStack;
    struct _NSRect mSavedPreviewFrame;
    NSOpenGLPixelFormat *mSavedPixelFormat;
    Album *mCurrentAlbum;
    BOOL mWasShownOnResignActive;
    struct MessageReceiver mAlbumMgrMessageReceiver;
    NSMutableArray *mCameraConnectPaths;
}

- (id)_prefStatesDictionary;
- (void)awakeFromNib;
- (id)init;
- (void)_loadNib;
- (void)dealloc;
- (void)_appResignedActive:(id)fp8;
- (void)_appBecameActive:(id)fp8;
- (void)show;
- (void)tabView:(id)fp8 didSelectTabViewItem:(id)fp12;
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
- (void)hide;
- (BOOL)timeForThemeUpgradeCheck;
- (void)setExternalEditorPath:(id)fp8;
- (void)resetDoubleClickEditor:(id)fp8;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)_updatePollTime:(id)fp8;
- (id)pathForAppNamed:(id)fp8;
- (BOOL)doesMailAppExistWithName:(id)fp8;
- (id)mailAppImageWithName:(id)fp8;
- (id)displayNameForAppAtPath:(id)fp8;
- (id)displayNameForAppNamed:(id)fp8;
- (void)_updatePublishPrompt2;
- (void)_updatePublishPrompt;
- (void)_readUserDefaultsIntoUI;
- (void)_showQuotaFailure;
- (void)_retrieveQuota;
- (void)_dotMacConfigChanged:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)_canTalkToDotMac:(id *)fp8;
- (void)_checkDotMac;
- (void)_showPubSubError:(id)fp8;
- (void)_setPubSubRawError:(id)fp8;
- (void)_setPubSubError:(id)fp8;
- (void)selectPhotoFrame:(id)fp8;
- (void)selectRotation:(id)fp8;
- (void)setHierarchicalAlbums:(id)fp8;
- (void)setAlignToGrid:(id)fp8;
- (void)setShowReflections:(id)fp8;
- (void)setShowEventScrollingInfo:(id)fp8;
- (void)setShowScrollingInfo:(id)fp8;
- (void)setUseScrollAnimation:(id)fp8;
- (void)setUseHUDTransparency:(id)fp8;
- (void)setUseFileNames:(id)fp8;
- (void)setDoubleClickAction:(id)fp8;
- (void)setDoubleClickDetailPreference:(id)fp8;
- (void)setMagnifyPreference:(id)fp8;
- (void)setSourceTextSize:(id)fp8;
- (void)setCheckForUpdates:(id)fp8;
- (void)changeDynamicAlbumSettings:(id)fp8;
- (void)_synchMonthsAndRollsStrings;
- (void)populateLaunchAlbumPopup;
- (void)setLaunchAlbum:(id)fp8;
- (void)toggleShowCountInAlbumNames:(id)fp8;
- (void)_guaranteeDefaults;
- (void)addSongToMusicChoices:(id)fp8;
- (void)removeSongFromMusicChoices:(id)fp8;
- (int)songCount;
- (id)songAtIndex:(int)fp8;
- (void)_writeUserDefaultsFromUI:(id)fp8;
- (BOOL)_boolFromCheckBox:(id)fp8;
- (int)_checkBoxStateForBoolKey:(id)fp8;
- (void)_setExternalEditorPath:(id)fp8;
- (void)_setBackgroundMusicPath:(id)fp8;
- (void)_setExternalEditorPathUI;
- (void)bkgdColorSliderChanged:(id)fp8;
- (void)setBackgroundBrightness:(float)fp8 favorite:(BOOL)fp12;
- (void)chooseMailApp:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)setKillUndoStackOnClose;
- (void)fireSubscriptionTimer:(id)fp8;
- (void)selectSubscriptionPolling:(id)fp8;
- (void)iDiskBuyMoreClick:(id)fp8;
- (void)setIncludePlaceInfo:(id)fp8;
- (void)setAdvancedCheck:(id)fp8;
- (void)setCopyFilesCheck:(id)fp8;
- (void)setRAWEdit:(id)fp8;
- (void)setAutoStackRAWJPG:(id)fp8;
- (void)setRAWExternalEditorPreference:(id)fp8;
- (void)_advancedPanelMagic;
- (void)_initCameraConnectedPopup;
- (void)setCameraConnectionAction:(id)fp8;
- (void)selectReverseGeocodePreference:(id)fp8;

@end

@interface ListSource : NSObject
{
    id mPopupMenu;
    NSMutableArray *mList;
}

- (void)setPopupMenu:(id)fp8;
- (void)setList:(id)fp8;
- (id)list;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface PreferenceController (DPAP)
- (void)_dpapServicePasswordTextDidChange:(id)fp8;
- (void)_loadSharableAlbumMatrix;
- (void)_removeDPAPRelatedObservers;
- (void)_serviceShutdownAlertDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)_setBoolIfChanged:(BOOL)fp8 forDefaultsKey:(id)fp12;
- (void)setDPAPServiceName:(id)fp8;
- (void)setDPAPServicePassword:(id)fp8;
- (BOOL)_setStringIfChanged:(id)fp8 forDefaultsKey:(id)fp12;
- (void)_syncDPAPDefaultsWithUI;
- (void)_syncUIWithDPAPDefaults;
- (void)toggleAlbumIsShared:(id)fp8;
- (void)toggleDPAPClientIsEnabled:(id)fp8;
- (void)toggleDPAPServiceIsAlbumSpecific:(id)fp8;
- (void)toggleDPAPServiceIsEnabled:(id)fp8;
- (id)_adjustedDMAPIDForAlbum:(id)fp8;
- (void)toggleDPAPServiceIsPasswordRequired:(id)fp8;
@end

@interface PreferenceKeys : NSObject
{
}

+ (id)_defaultDPAPDatabaseName;
+ (id)defaultBackgroundColorData;
+ (float)floatWithKey:(id)fp8 defaultValue:(float)fp12;
+ (BOOL)flagWithKey:(id)fp8 defaultValue:(BOOL)fp12;
+ (void)setFlagWithKey:(id)fp8 value:(BOOL)fp12;
+ (BOOL)systemVersionIsLeopard;
+ (BOOL)systemVersionIsTiger;
+ (BOOL)systemVersionIsSUTiDenver;
+ (BOOL)systemVersionIsPanther;
+ (long)systemVersion;
+ (BOOL)authorizedForSystemPreferences;
+ (BOOL)hasSuitableiDVD;
+ (BOOL)hasSuitableBlade;
+ (unsigned long)megsOfPhysicalMemory;
+ (BOOL)graphiteTheme;
+ (BOOL)libraryShowsAllPhotos;
+ (BOOL)libraryShowsEvents;
+ (BOOL)firstLaunch;
+ (BOOL)capsLockKeyDown;
+ (BOOL)shiftKeyDown;
+ (BOOL)optionKeyDown;
+ (BOOL)commandKeyDown;
+ (BOOL)controlKeyDown;
+ (BOOL)anyModifierKeyDown;
+ (id)englishLanguageCode;
+ (id)preferredLanguageCode;
+ (BOOL)canAnimateOnScreen:(id)fp8;
+ (BOOL)haveLowEndGraphicsCard;
+ (BOOL)reverseGeocodeAllowedToProceed;
+ (BOOL)showNewFaceLayer;
+ (void)setShownNewFaceLayer;
+ (void)setVisitedCorkboard;
- (void)assureDefaults;
- (id)_defaultPersistentDefaults;
- (void)_synchronizeApplicationDefaultsWithDictionary:(id)fp8;

@end

@interface PreferenceController (NSToolbarDelegate)
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
@end

@interface PreferenceController (Toolbar)
- (void)setupToolbar;
- (void)showGeneralPref:(id)fp8;
- (void)showAppearancePref:(id)fp8;
- (void)showEventsPref:(id)fp8;
- (void)showSharingPref:(id)fp8;
- (void)showWebPref:(id)fp8;
- (void)showAdvancedPref:(id)fp8;
@end

@interface PrintAccessoryBox : NSBox
{
    PrintController *mPrintController;
}

- (id)printController;
- (void)printController:(id)fp8;
- (void)printSessionDidChange:(struct OpaquePMPrintSession *)fp8;

@end

@interface PrintController : NSObject <PrintFormatterImageProtocol>
{
    NSWindow *mWindow;
    NSPopUpButton *mFormatPopup;
    NSPopUpButton *mPaperSizePopup;
    PrintView *mSampleView;
    NSBox *mPrintFormatPluginBox;
    PrintAccessoryBox *mEnclosingBox;
    NSBox *mEnclosingViewForPage;
    ShadowView *mShadowView;
    Album *mAlbum;
    struct IPPhotoList *mPhotos;
    NSMutableArray *mPrintFormatters;
    PrintMgrRec *mCurrentPluginRec;
    PrintView *mPrintView;
    BOOL mFirstPrintJob;
    struct _NSSize mImageableSize;
    NSMutableArray *mPrintNibObjects;
    NSDictionary *mTextAttributes;
    NSDictionary *mTextAttributesForDisplay;
    Ellipsizer *mEllipser;
    Ellipsizer *mEllipserForDisplay;
    float mTextHeight;
    float mTextHeightForDisplay;
    void *mPaperInfo;
    struct _NSSize mRequiredPaperSize;
    BOOL mRequireBorderless;
    BOOL mRequiredPaperUnavailable;
    NSPrintInfo *mSavePrintInfo;
    BOOL mLastSelectPaperWasBorderless;
    struct OpaquePMPrintSession *mPrintSession;
}

+ (id)printController;
+ (id)printControllerNoAlloc;
- (id)init;
- (void)dealloc;
- (void)setAlbum:(id)fp8 selection:(struct IPPhotoList *)fp12;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct IPPhotoList *)photos;
- (void)setPhotos:(struct IPPhotoList *)fp8;
- (id)sampleView;
- (id)printView;
- (id)printFormatters;
- (id)currentPlugin;
- (id)currentPluginRec;
- (void)setCurrentPluginRec:(id)fp8;
- (struct _NSSize)imageableSize;
- (void)setImageableSize:(struct _NSSize)fp8;
- (void)_updateSampleAspect;
- (BOOL)requiredPaperUnavailable;
- (void)_updateRequiredPaperWarning;
- (id)_findPaperWithSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (int)_findExistingPaperWithWidth:(double)fp8 height:(double)fp16;
- (void)_selectPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (id)_getPapers:(id)fp8 forPrinter:(struct OpaquePMPrinter *)fp12;
- (void)printSessionDidChange:(struct OpaquePMPrintSession *)fp8;
- (void)clearRequiredPaperSize;
- (BOOL)hasRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)setRequiredPaperSize:(struct _NSSize)fp8 borderless:(BOOL)fp16;
- (void)choosePrintFormat:(id)fp8;
- (void)choosePaperSize:(id)fp8;
- (void)showInWindow:(id)fp8;
- (void)populateFormatPopUpButton;
- (void)scanForPrintFormatters;
- (void)calcViewPages;
- (void)calcViewMargins;
- (long)photoCount;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (void)beginWriteTransactionForPhotoAtIndex:(int)fp8;
- (void)endTransactionForPhotoAtIndex:(int)fp8;
- (struct CGSize)photoSizeAtIndex:(int)fp8;
- (float)photoRotationAtIndex:(int)fp8;
- (BOOL)photoIsPortraitAtIndex:(int)fp8;
- (void)rotatePhotoAtIndex:(int)fp8 byAmount:(float)fp12;
- (struct _NSRect)centerRect:(struct _NSRect)fp8 overRect:(struct _NSRect)fp24;
- (struct _NSRect)scaleRect:(struct _NSRect)fp8 toFillRect:(struct _NSRect)fp24;
- (BOOL)rectIsPortrait:(struct _NSRect)fp8;
- (BOOL)rectIsSquare:(struct _NSRect)fp8;
- (float)dpiForPhotoAtIndex:(int)fp8 targetRect:(struct _NSRect)fp12 convertToPrintCoords:(BOOL)fp28;
- (float)warningImageDPI;
- (float)defaultMaximumDPI;
- (struct _NSRect)scaledRectForPhotoAtIndex:(int)fp8 destRect:(struct _NSRect)fp12;
- (void)drawPhotoAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28 zoomAndTrim:(BOOL)fp32;
- (void)_drawJPEGFileFor:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 clipRect:(struct _NSRect)fp28;
- (void)redisplaySample;
- (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
- (id)localizedString:(id)fp8;
- (void)setTextAttributes:(id)fp8 forDisplay:(BOOL)fp12;
- (float)maxTextHeightForDisplay:(BOOL)fp8;
- (void)drawCaptionAtIndex:(int)fp8 inRect:(struct _NSRect)fp12 forDisplay:(BOOL)fp28;
- (BOOL)_hasPlugins;
- (void)_resizePrintPanelToFitView:(id)fp8 oldView:(id)fp12;
- (void)_updateSelectedCount;
- (void)_resizeView:(id)fp8;
- (void)_printDocument:(id)fp8 fromWindow:(id)fp12;
- (void)_printPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;

@end

@interface PrintMgrRec : NSObject
{
    NSString *mPath;
    NSBundle *mBundle;
    id <PrintFormatterPluginProtocol> mPlugin;
    struct _NSSize mViewSize;
    id <PrintFormatterImageProtocol> mController;
}

- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (id)description;
- (id)initWithPath:(id)fp8 controller:(id)fp12;
- (id)path;
- (void)setPath:(id)fp8;
- (id)bundle;
- (void)setBundle:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)bundleInfo;
- (BOOL)isValidPrintFormatterPlugin;
- (BOOL)loadPlugin;
- (id)printFormatterPlugin;
- (void)unloadPlugin;
- (id)view;
- (struct _NSSize)viewSize;

@end

@interface PrintView : NSView
{
    unsigned int mNumPages;
    unsigned int mCurrentPageNumber;
    id <PrintFormatterPluginProtocol> mPlugin;
    struct _NSSize mImageableSize;
    struct _NSSize mMarginSize;
    BOOL mIsPrinting;
    struct _NSRect mPrintRect;
    struct _NSRect mDisplayRect;
    PrintView *mPrintView;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (unsigned int)numberOfPages;
- (void)setNumberOfPages:(unsigned int)fp8;
- (unsigned int)currentPageNumber;
- (void)setCurrentPageNumber:(unsigned int)fp8;
- (struct _NSSize)marginSize;
- (void)setMarginSize:(struct _NSSize)fp8;
- (id)plugin;
- (void)setPlugin:(id)fp8;
- (struct _NSSize)imageableSize;
- (void)setImageableSize:(struct _NSSize)fp8;
- (BOOL)isPrinting;
- (void)setIsPrinting:(BOOL)fp8;
- (void)calcNumberOfPages;
- (void)setPrintView:(id)fp8;
- (void)calcMarginSize;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (void)_badgeRequiredSize;
- (void)_badgeIncompatibleSize;
- (void)_badgeLowResolution;

@end

@interface ShadowView : NSView
{
}

- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface ProgressController : NSObject
{
    id mWindow;
    id mSheet;
    id mPrimaryText;
    id mSecondaryText;
    id mProgressBar;
    id mCancelButton;
    id mCancelObject;
    SEL mCancelSelector;
    SEL mDoneSelector;
    BOOL mCanceled;
    float mMinimumIncrement;
    float mCurrentValue;
    struct _NSModalSession *modalSession;
    NSMutableArray *mProgressNibObjects;
    BOOL mUsingSheet;
}

- (id)initWithWindow:(id)fp8;
- (void)_start:(id)fp8 enableCancel:(BOOL)fp12 cancelString:(id)fp16 setMinMax:(BOOL)fp20 min:(float)fp24 max:(float)fp28 floatModal:(BOOL)fp32;
- (void)start:(id)fp8;
- (void)start:(id)fp8 enableCancel:(BOOL)fp12;
- (void)start:(id)fp8 cancelString:(id)fp12;
- (void)displayModalWindowWithText:(id)fp8;
- (void)startWithMin:(float)fp8 max:(float)fp12 startText:(id)fp16;
- (void)startWithMin:(float)fp8 max:(float)fp12 startText:(id)fp16 enableCancel:(BOOL)fp20;
- (void)startWithMin:(float)fp8 max:(float)fp12 startText:(id)fp16 cancelString:(id)fp20;
- (void)keepModalResponsive;
- (id)window;
- (id)sheet;
- (void)pause;
- (void)resume;
- (void)setMin:(float)fp8 max:(float)fp12;
- (void)stop;
- (void)setPrimaryText:(id)fp8;
- (void)setSecondaryText:(id)fp8;
- (void)display;
- (void)setPercentDone:(float)fp8;
- (void)incrementBy:(float)fp8;
- (void)setCancelObject:(id)fp8 andSelector:(SEL)fp12;
- (void)setCancelObject:(id)fp8 cancelSelector:(SEL)fp12 doneSelector:(SEL)fp16;
- (id)progressBar;
- (void)setIndeterminate:(BOOL)fp8;
- (BOOL)isIndeterminate;
- (void)exceptionedOut;
- (void)cancel:(id)fp8;
- (BOOL)isCanceled;
- (BOOL)_ensureNibLoaded;
- (void)_useCancel:(BOOL)fp8;
- (void)setCancelButtonTitle:(id)fp8;
- (void)_setCancelString:(id)fp8;
- (void)_endProgress:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)dealloc;

@end

@interface SearchCriteria : NSObject
{
    SmartAlbumInfo *mInfo;
    int mCurrentField;
    NSView *mFirstKeyView;
    NSView *mLastKeyView;
    NSView *mContentView;
    NSPopUpButton *mFieldPopup;
    NSTabView *mCriteriaTab;
    NSPopUpButton *mDateComparisons;
    NSPopUpButton *mTextComparisons;
    NSPopUpButton *mKeywordComparisons;
    NSPopUpButton *mAlbumComparisons;
    NSPopUpButton *mRollComparisons;
    NSPopUpButton *mRankingComparisons;
    NSPopUpButton *mShutterComparisons;
    NSPopUpButton *mISOComparisons;
    NSPopUpButton *mApertureComparisons;
    NSPopUpButton *mFocalLengthComparisons;
    NSPopUpButton *mCameraModelComparisons;
    NSPopUpButton *mFlashComparisons;
    NSPopUpButton *mPhotoAttributeComparisons;
    NSPopUpButton *mPlaceComparisons;
    NSTabView *mValueTab;
    NSTextField *mTextValue;
    NSDatePicker *mDateValueX;
    NSPopUpButton *mAlbumListValue;
    NSPopUpButton *mKeywordListValue;
    NSPopUpButton *mKeywordCategoryListValue;
    NSTextField *mDateInLastText;
    NSPopUpButton *mDateInLastPopup;
    NSDatePicker *mDateRangeStartX;
    NSDatePicker *mDateRangeEndX;
    NSTextField *mRollValue;
    StarRatingControl *mRankingValue;
    StarRatingControl *mRankingStart;
    StarRatingControl *mRankingEnd;
    NSComboBox *mShutterSpeedValue;
    NSComboBox *mShutterSpeedStartValue;
    NSComboBox *mShutterSpeedEndValue;
    NSComboBox *mISOValue;
    NSComboBox *mISOStartValue;
    NSComboBox *mISOEndValue;
    NSComboBox *mApertureValue;
    NSComboBox *mApertureStartValue;
    NSComboBox *mApertureEndValue;
    NSComboBox *mFocalLengthValue;
    NSComboBox *mFocalLengthStartValue;
    NSComboBox *mFocalLengthEndValue;
    NSPopUpButton *mCameraModelValue;
    NSPopUpButton *mFlashValue;
    NSPopUpButton *mPhotoAttributeValue;
    NSPopUpButton *mPhotoActionValue;
    NSButton *mAddCriteriaButton;
    NSButton *mDeleteCriteriaButton;
    NSMenuItem *mCheckItem;
    NSMenuItem *mNoneItem;
}

+ (id)searchCriteriaWithInfo:(id)fp8;
- (id)initWithInfo:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)loadFromFilter:(id)fp8;
- (id)getFilter;
- (id)contentView;
- (id)firstKeyView;
- (id)lastKeyView;
- (void)switchField:(id)fp8;
- (void)switchComparison:(id)fp8;
- (id)info;
- (void)setInfo:(id)fp8;
- (void)setAddEnabled:(BOOL)fp8;
- (void)setDeleteEnabled:(BOOL)fp8;
- (void)addCriteria:(id)fp8;
- (void)deleteCriteria:(id)fp8;
- (void)control:(id)fp8 didFailToValidatePartialString:(id)fp12 errorDescription:(id)fp16;
- (void)_prepareShutterSpeedValueControlWithNone:(BOOL)fp8;
- (void)_prepareISOValueControlWithNone:(BOOL)fp8;
- (void)_prepareApertureValueControlWithNone:(BOOL)fp8;
- (void)_prepareFocalLengthValueControlWithNone:(BOOL)fp8;

@end

@interface SmartAlbumInfo : NSObject
{
    NSWindow *mWindow;
    NSBox *mConditionsBox;
    NSView *mPlaceholderView;
    NSTextField *mAlbumNameText;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    NSTabView *mMatchTabView;
    NSPopUpButton *mMatchPopUp;
    FilterAlbum *mAlbum;
    AlbumViewController *mAlbumViewController;
    NSMutableArray *mSearchCriteria;
    NSMutableArray *mPlaceholderViews;
    NSMutableArray *mAlbumTitles;
    NSArray *mCommonShutterSpeeds;
    NSArray *mCommonISOs;
    NSArray *mCommonApertures;
    NSArray *mCommonFocalLengths;
    NSArray *mCameraModels;
    NSArray *mCameraModelsWithMakes;
    NSMutableArray *mSmartAlbumNibObjects;
    NSMutableArray *mSearchCriteriaNibObjects;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)albumNameField;
- (void)clearCachedLists;
- (id)db;
- (id)albumMgr;
- (id)loadWithDefaultName:(id)fp8 albumViewController:(id)fp12;
- (id)nameText;
- (void)setNameText:(id)fp8;
- (void)replaceWindowReference:(id)fp8;
- (id)conditionsBox;
- (void)showForAlbum:(id)fp8 defaultName:(id)fp12 inWindow:(id)fp16 albumViewController:(id)fp20;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (void)_loadCriteria;
- (id)keywordTitles;
- (id)keywordWithKey:(unsigned long)fp8;
- (id)keywordCategoryMenu;
- (id)albumTitles;
- (void)updateAlbumTitles;
- (id)albumViewController;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)_setSpringsForChangeAt:(id)fp8;
- (void)rewireNextKeyViews;
- (void)_resizeWindowBy:(float)fp8;
- (void)_setEnableDelete:(BOOL)fp8;
- (void)_setEnableAdd:(BOOL)fp8;
- (void)addCriteriaAfter:(id)fp8;
- (void)deleteCriteria:(id)fp8;
- (int)criteriaCount;
- (id)commonShutterSpeeds;
- (id)commonISOs;
- (id)commonApertures;
- (id)commonFocalLengths;
- (void)_initCameraModels;
- (id)cameraModelsWithMakes;
- (id)cameraModels;
- (id)cameraModelFromModelWithMake:(id)fp8;
- (id)cameraModelWithMakeFromCameraModel:(id)fp8;

@end

@interface IARectCollection : NSObject
{
    NSMutableArray *mRects;
}

+ (id)rectCollection;
- (id)init;
- (void)dealloc;
- (void)addRect:(struct _NSRect)fp8;
- (struct _NSRect)collapse;
- (struct _NSRect)unionWith:(id)fp8;
- (id)objectEnumerator;

@end

@interface IARectWrapper : NSObject
{
    struct _NSRect mRect;
}

+ (id)createWithRect:(struct _NSRect)fp8;
- (id)initWithRect:(struct _NSRect)fp8;
- (struct _NSRect)rect;
- (id)description;

@end

@interface IATransitionCurve : NSObject
{
    NSMutableArray *points;
}

+ (void)_generateSineCurve;
+ (id)_sineCurve;
+ (float)sineMap:(float)fp8;
- (id)init;
- (void)addPoint:(struct _NSPoint)fp8;
- (void)addPointX:(float)fp8 andY:(float)fp12;
- (void)addPoints:(float *)fp8;
- (void)clearPoints;
- (void)redistribute;
- (float)interpolatedYgivenX:(float)fp8 withPoint:(struct _NSPoint)fp12 andPoint:(struct _NSPoint)fp20;
- (float)YgivenX:(float)fp8;
- (void)replaceX:(float)fp8 andY:(float)fp12 atIndex:(int)fp16;
- (void)adjustCurveWithX:(float)fp8 andY:(float)fp12;
- (void)dealloc;

@end

@interface SessionContext : NSObject <IASessionProtocol>
{
    struct _NSRect mSlideRect;
    struct _NSSize mDisplaySize;
    int mDepth;
    struct _CGLContextObject *mCglContext;
    struct _CGLContextObject *mWorkContext;
    BOOL mIsDoubleBuffered;
    BOOL mFlipped;
    NSMutableArray *mClipStack;
    float mMaximumTextureSize;
    NSRecursiveLock *mWorkContextLock;
}

+ (void)lockOpenGL;
+ (void)unlockOpenGL;
+ (id)protocolVersion;
+ (struct _NSRect)bestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16;
+ (void)ratioForBestFitWithImageSize:(struct _NSSize)fp8 displaySize:(struct _NSSize)fp16 numerator:(long *)fp24 denominator:(long *)fp28;
+ (int)VRAM;
+ (BOOL)usingRage128;
+ (BOOL)slowMachine;
+ (int)cpuCount;
+ (unsigned long)cpuSpeed;
+ (void)checkMachine;
+ (long)numProcessors;
+ (BOOL)textureRectangleExtAvailable;
+ (BOOL)_determineIfRage128;
+ (BOOL)_determineIfSlowMachine;
+ (BOOL)_determineIfTextureRectangleExtAvailable;
- (void)lockWorkContext;
- (void)unlockWorkContext;
- (id)initWithSlideRect:(struct _NSRect)fp8 displaySize:(struct _NSSize)fp24 displayDepth:(int)fp32 pixelFormat:(struct _CGLPixelFormatObject *)fp36;
- (struct _CGLContextObject *)workContext;
- (float)maximumTextureSize;
- (float)_determineMaximumTextureSize;
- (void)dealloc;
- (void)_computeAndApplyClipping;
- (struct _CGLContextObject *)context;
- (struct _NSSize)displaySize;
- (int)displayDepth;
- (struct _NSRect)slideRect;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (void)updateRenderer;
- (void)enableClipping:(struct _NSRect)fp8;
- (void)disableClipping;
- (void)_forceDisableClipping;
- (void)flushFrame;
- (void)makeCurrentContext;
- (float)perspectiveProjectionFOV;
- (void)applyOrthoProjection;
- (void)applyDefaultProjection;
- (BOOL)doubleBuffered;
- (BOOL)coerceIntoView;

@end

@interface TexturedRectangle : NSObject <IADrawableProtocol>
{
    struct texture_array mTextureArray;
    unsigned int mLoresTextureName[2];
    char *mLoresTextureData;
    struct _NSSize mLoresSize;
    struct _NSSize mDisplaySize;
    struct _NSSize mImageSize;
    int mDepthInBytes;
    unsigned int mGlTarget;
    int mGlInternalFormat;
    unsigned int mGlFormat;
    unsigned int mGlType;
    BOOL mStoreClientSide;
    BOOL mAllowLores;
    int mCoreStride;
    int mAlphaType;
    SessionContext *mSession;
    BOOL mInverted;
    struct _NSPoint mCenter;
    BOOL mTiled;
    struct _CGLContextObject *mWorkContext;
    struct _NSPoint mOffset;
    float mZLocation;
    struct _NSPoint mCenterPointShift;
    float mOpacity;
    float mScale;
    float mRotation;
    float mYRotation;
    float mXRotation;
    BOOL mResState;
}

+ (BOOL)_useLowRes;
+ (id)protocolVersion;
+ (id)scale:(id)fp8 newSize:(struct _NSSize)fp12;
+ (id)scale:(id)fp8 newSize:(struct _NSSize)fp12 frameSize:(struct _NSSize)fp20;
+ (int)getColorBytesPerRow:(int)fp8 trueColor:(BOOL)fp12;
+ (void *)convert:(id)fp8 trueColor:(BOOL)fp12;
+ (int)resampleARGBData:(char *)fp8 colorProfile:(char **)fp12 sourceSize:(struct _NSSize)fp16 sourceRotation:(float)fp24 sourceRowBytes:(int)fp28 sourceRect:(struct _NSRect)fp32 outBuffer:(char **)fp48 destRect:(struct _NSRect)fp52 destSize:(struct _NSSize)fp68;
- (id)initWithBuffer:(void *)fp8 bufferSize:(struct _NSSize)fp12 offset:(struct _NSPoint)fp20 scale:(float)fp28 stride:(int)fp32 depth:(int)fp36 target:(unsigned int)fp40 internalFormat:(int)fp44 format:(unsigned int)fp48 type:(unsigned int)fp52 storeClientSide:(BOOL)fp56 allowLores:(BOOL)fp60 tiled:(BOOL)fp64 alphaType:(int)fp68 session:(id)fp72;
- (BOOL)inverted;
- (id)initFromColorBuffer:(unsigned int)fp8 rect:(struct _NSRect)fp12 session:(id)fp28;
- (id)initWithAlpha:(void *)fp8 bufferSize:(struct _NSSize)fp12 stride:(int)fp20 session:(id)fp24;
- (void)dealloc;
- (void)updateARGB;
- (void)_updateARGB;
- (struct _NSSize)rectSize;
- (struct _NSSize)scaledImageSize;
- (struct texture_array)textureArray;
- (unsigned int *)textureNameArrayLoRes;
- (void)setCenterPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)centerPoint;
- (unsigned int)textureTarget;
- (BOOL)resState;
- (void)setResState:(BOOL)fp8;
- (void)_drawComponentRect:(struct texture_rect)fp8 offset:(struct _NSPoint)fp32 scale:(float)fp40;
- (void)_drawComponentRectClipped:(struct texture_rect)fp8 offset:(struct _NSPoint)fp32 scale:(float)fp40;
- (void)_drawComponent:(struct texture_rect)fp8 subrect:(struct _NSRect)fp32 offset:(struct _NSPoint)fp48 scale:(float)fp56;
- (void)_drawLoresRectAtOffset:(struct _NSPoint)fp8 scale:(float)fp16;
- (BOOL)_enableBlending:(float)fp8;
- (void)draw;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 rotation:(float)fp24;
- (void)drawAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16 highDetail:(BOOL)fp24;
- (void)drawClippedToSlideshowAtOpacity:(float)fp8 scale:(float)fp12 offset:(struct _NSPoint)fp16;
- (void)drawSubrect:(struct _NSRect)fp8 opacity:(float)fp24 scale:(float)fp28 offset:(struct _NSPoint)fp32 highDetail:(BOOL)fp40;
- (struct _NSPoint)_interpolatePercent:(float)fp8 endPoint:(struct _NSPoint)fp12 endPoint:(struct _NSPoint)fp20;
- (struct _NSPoint)_interpolatePoint:(struct _NSPoint)fp8 ul:(struct _NSPoint)fp16 ur:(struct _NSPoint)fp24 ll:(struct _NSPoint)fp32 lr:(struct _NSPoint)fp40;
- (void)_drawCorners:(struct FixedPoint *)fp8 atOffset:(struct _NSPoint)fp12 scale:(float)fp20 opacity:(float)fp24;
- (float)opacity;
- (void)setOpacity:(float)fp8;
- (float)rotation;
- (void)setRotation:(float)fp8;
- (float)yRotation;
- (void)setYRotation:(float)fp8;
- (float)xRotation;
- (void)setXRotation:(float)fp8;
- (struct _NSPoint)offset;
- (void)setOffset:(struct _NSPoint)fp8;
- (float)zLocation;
- (void)setZLocation:(float)fp8;
- (struct _NSPoint)centerPointShift;
- (void)setCenterPointShift:(struct _NSPoint)fp8;
- (float)scale;
- (void)setScale:(float)fp8;
- (void)_determineLoresSize;
- (void)_sanityCheckTarget;
- (int)_largestMultipleOf:(int)fp8;
- (int *)_subdivide:(int)fp8 length:(int *)fp12;
- (void *)_pointerIntoData:(struct _NSRect)fp8 bitmap:(void *)fp24 stride:(int)fp28 depthInBytes:(int)fp32;
- (struct texture_array)_createTextureArray:(id)fp8;
- (struct texture_array)_createTextureArrayFromARGB:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_createTextureArrayFromAlpha:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_initializeTextureArray;
- (struct texture_array)_coreCreateTextureArrayFromARGB:(void *)fp8 stride:(int)fp12;
- (struct texture_array)_createTextureArrayFromColorBuffer:(unsigned int)fp8 rect:(struct _NSRect)fp12;
- (void)_freeTextureArray:(struct texture_array)fp8;
- (void)_drawQuadTexTop:(float)fp8 bottom:(float)fp12 left:(float)fp16 right:(float)fp20 VertexTop:(float)fp24 bottom:(float)fp28 left:(float)fp32 right:(float)fp36 inverted:(BOOL)fp40 flipped:(BOOL)fp44;

@end

@interface ThreadManager : NSObject <ThreadManagerTask>
{
    ArchiveDocument *mArchiveDocument;
    NSMutableDictionary *mTasks;
    NSMutableDictionary *mThreadCounts;
    NSLock *mTaskLock;
    NSLock *mThreadCountLock;
    BOOL mCondition;
    BOOL mStarted;
}

+ (id)sharedManager;
- (id)init;
- (void)setArchiveDocument:(id)fp8;
- (void)dealloc;
- (void)start;
- (void)performTask;
- (BOOL)alreadyHasTask:(id)fp8 withID:(id)fp12;
- (void)registerNewTask:(id)fp8 withID:(id)fp12;
- (void)performThreadedTasks:(id)fp8;
- (void)signalCondition:(BOOL)fp8;
- (void)waitForTasks;
- (BOOL)currentCondition;

@end

@interface ThumbnailSizerCell : NSSliderCell
{
    double _maxFreeSlideValue;
    BOOL _specialTicks;
    BOOL _isTracking;
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (float)knobThickness;
- (struct _NSRect)knobRectFlipped:(BOOL)fp8;
- (void)drawKnob:(struct _NSRect)fp8;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(unsigned int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawBarInside:(struct _NSRect)fp8 flipped:(BOOL)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (BOOL)continueTracking:(struct _NSPoint)fp8 at:(struct _NSPoint)fp16 inView:(id)fp24;
- (struct _NSRect)rectOfTickMarkAtIndex:(int)fp8;
- (double)closestTickMarkValueToValue:(double)fp8;
- (double)maxFreeSlideValue;
- (void)setMaxFreeSlideValue:(double)fp8;
- (BOOL)specialTicks;
- (void)setSpecialTicks:(BOOL)fp8;
- (void)setIsTracking:(BOOL)fp8;

@end

@interface ThumbnailSizer : NSSlider
{
    SEL mStartTrackingAction;
    id mStartTrackingTarget;
    SEL mEndTrackingAction;
    id mEndTrackingTarget;
    BOOL mIsTracking;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isTracking;
- (void)setStartTrackingAction:(SEL)fp8 target:(id)fp12;
- (void)setEndTrackingAction:(SEL)fp8 target:(id)fp12;
- (double)maxFreeSlideValue;
- (void)setMaxFreeSlideValue:(double)fp8;
- (BOOL)specialTicks;
- (void)setSpecialTicks:(BOOL)fp8;

@end

@interface IPToolbarItem : NSObject
{
    int mType;
    NSView *mView;
    NSString *mLabel;
    NSAttributedString *mAttributedLabel;
    NSFont *mFont;
    NSString *mTooltip;
    id mTarget;
    SEL mAction;
    BOOL mState;
    BOOL mShowsState;
    BOOL mEnabled;
    NSMenuItem *mMenuItemRep;
    NSString *mMenuFormString;
}

+ (id)buttonItemWithImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)buttonItemWithImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)buttonItemWithImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)noSpaceButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
+ (id)backgroundButtonItemWithImageNamed:(id)fp8 alternate:(id)fp12 backgroundNormal:(id)fp16 backgroundAlternate:(id)fp20 label:(id)fp24 tag:(int)fp28 font:(id)fp32 target:(id)fp36 action:(SEL)fp40 tooltip:(id)fp44;
+ (id)checkboxItemWithLabel:(id)fp8 tag:(int)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
+ (id)menuItem:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)menuItem:(id)fp8 attributedLabel:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)imageMenuItem:(id)fp8 image:(id)fp12 label:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
+ (id)imageMenuItem:(id)fp8 image:(id)fp12 attributedLabel:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
+ (id)progressItem:(id)fp8 font:(id)fp12 tooltip:(id)fp16;
+ (id)matrixWithButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)matrixWithActualButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
+ (id)segmentsWithImagesNamed:(id)fp8 alternates:(id)fp12 label:(id)fp16 font:(id)fp20 target:(id)fp24 action:(SEL)fp28 tooltip:(id)fp32;
+ (id)segmentsWithTitles:(id)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
+ (id)itemWithView:(id)fp8;
+ (id)separatorItem;
+ (id)flexibleSpaceItem;
+ (id)fixedSpaceItem;
+ (id)overflowItem;
+ (void)checkItemNumber:(int)fp8 ofMenu:(id)fp12;
- (id)init;
- (id)initWithType:(int)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithType:(int)fp8 attributedLabel:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithMenu:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initWithMenu:(id)fp8 attributedLabel:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initWithImageMenu:(id)fp8 image:(id)fp12 label:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
- (id)initWithImageMenu:(id)fp8 image:(id)fp12 attributedLabel:(id)fp16 font:(id)fp20 tooltip:(id)fp24;
- (id)initProgress:(id)fp8 font:(id)fp12 tooltip:(id)fp16;
- (id)initMatrixWithButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initMatrixWithActualButtons:(id)fp8 label:(id)fp12 font:(id)fp16 tooltip:(id)fp20;
- (id)initSegmentsWithImagesNamed:(id)fp8 alternates:(id)fp12 label:(id)fp16 font:(id)fp20 target:(id)fp24 action:(SEL)fp28 tooltip:(id)fp32;
- (id)initSegmentsWithTitles:(id)fp8 label:(id)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithButtonImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithButtonImage:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithBackgroundButtonImageNamed:(id)fp8 alternate:(id)fp12 backgroundNormal:(id)fp16 backgroundAlternate:(id)fp20 label:(id)fp24 tag:(int)fp28 font:(id)fp32 target:(id)fp36 action:(SEL)fp40 tooltip:(id)fp44;
- (id)initWithNoSpaceButtonImageNamed:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithNoSpaceButtonImageNamed:(id)fp8 alternate:(id)fp12 attributedLabel:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithNoSpaceButtonImage:(id)fp8 alternate:(id)fp12 label:(id)fp16 tag:(int)fp20 font:(id)fp24 target:(id)fp28 action:(SEL)fp32 tooltip:(id)fp36;
- (id)initWithCheckboxLabel:(id)fp8 tag:(int)fp12 font:(id)fp16 target:(id)fp20 action:(SEL)fp24 tooltip:(id)fp28;
- (id)initWithView:(id)fp8;
- (void)dealloc;
- (id)description;
- (int)type;
- (void)setType:(int)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)menuItemSelected:(id)fp8;
- (void)setMenu:(id)fp8;
- (void)_setMatrixButtons:(id)fp8;
- (void)_setMatrixWithActualButtons:(id)fp8;
- (void)_setSegmentImages:(id)fp8 alternates:(id)fp12;
- (void)_setSegmentTitles:(id)fp8;
- (id)progressView;
- (id)matrixView;
- (id)segmentedControl;
- (id)menuView;
- (id)titleView;
- (id)view;
- (void)setView:(id)fp8;
- (id)attributedLabel;
- (void)setAttributedLabel:(id)fp8;
- (void)setAttributedTitle:(id)fp8;
- (id)label;
- (void)setLabel:(id)fp8;
- (void)setTitle:(id)fp8;
- (id)tooltip;
- (void)setTooltip:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (int)state;
- (void)setState:(int)fp8;
- (BOOL)showsState;
- (void)setShowsState:(BOOL)fp8;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (void)show;
- (void)hide;
- (BOOL)isHidden;
- (void)displayIfNeeded;
- (void)_performMenuFormRepresentationClick;
- (void)_standardCommonMenuFormRepresentationClicked:(id)fp8;
- (void)_standardCommonMenuFormRepresentationPopupClicked:(id)fp8;
- (void)_standardCustomMenuFormRepresentationClicked:(id)fp8;
- (void)setCheckmarkForMenuItemWithTag:(int)fp8;
- (id)menuFormString;
- (void)setMenuFormString:(id)fp8;
- (id)menuFormRepresentation;
- (void)_updateCheckboxState;
- (void)_toggleCheckbox:(id)fp8;

@end

@interface IPToolbarView : BackgroundColorView
{
    NSMutableArray *mItems;
    float mHSpacing;
    ToolbarClippedItemsIndicator *mClipMenu;
    BOOL mAcceptsFirstMouse;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (id)items;
- (unsigned int)indexOfItem:(id)fp8;
- (BOOL)hasItem:(id)fp8;
- (void)addItem:(id)fp8;
- (void)addItem:(id)fp8 atIndex:(unsigned int)fp12;
- (void)addItem:(id)fp8 beforeItem:(id)fp12;
- (void)addItem:(id)fp8 afterItem:(id)fp12;
- (void)removeItem:(id)fp8;
- (void)releaseAllItems;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)acceptsFirstMouse;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (BOOL)itemWithViewIsEnabled:(id)fp8;
- (void)layoutViews;

@end

@interface AboutView : NSView
{
    id mVersionText;
    id mAboutImage;
}

- (void)awakeFromNib;
- (void)awakeFromnNib;
- (void)mouseDown:(id)fp8;
- (void)appSwitchOut:(id)fp8;

@end

@interface AutoCompleteFormatter : NSFormatter
{
    NSArray *mWordList;
}

- (void)dealloc;
- (id)wordList;
- (void)setWordList:(id)fp8;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;
- (void)useSampleWordList;

@end

@interface BackgroundColorView : NSView
{
    NSColor *mBackgroundColor;
    BOOL mPunchThrough;
    struct _NSRect mInsetRect;
}

- (void)awakeFromNib;
- (void)dealloc;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (BOOL)punchThrough;
- (void)setPunchThrough:(BOOL)fp8;
- (struct _NSRect)insetRect;
- (void)setInsetRect:(struct _NSRect)fp8;
- (void)viewDidEndLiveResize;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledBox : NSBox
{
}

- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledButton : FirstMouseButton
{
}

+ (Class)cellClass;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (int)endCaps;
- (void)setEndCaps:(int)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface BeveledButtonCell : NSButtonCell
{
}

+ (void)initialize;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8;
- (void)_drawRegularButtonWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface BeveledScrollView : NSScrollView
{
}

- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface BeveledTabButtonCell : NSButtonCell
{
    int mEndCaps;
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (int)endCaps;
- (void)setEndCaps:(int)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface BeveledTabView : NSTabView
{
    NSImage *mBufferedBkgd;
}

+ (void)initialize;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface DictionaryCodedObject : NSObject <NSCoding>
{
    NSDictionary *mDictionary;
}

- (void)dealloc;
- (id)dictionary;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;

@end

@interface DiscSpaceGaugeView : NSView
{
    NSImage *mEmptyImage;
    NSImage *mBarImage;
    NSImage *mFullImage;
    float mZeroAngle;
    BOOL mClockwise;
    double mMaxValue;
    double mDoubleValue;
    NSTimer *mAnimateTimer;
    float mInitialValue;
    float mTargetValue;
    float mAnimationProgress;
    double mStartTime;
    double mDuration;
    NSTimer *mFullAnimTimer;
    struct {
        double i;
        double f;
        double duration;
        double startTime;
    } mFullAnim;
    double mFullImageAlpha;
    NSRunLoop *mMainRunLoop;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setMaxValue:(double)fp8;
- (double)maxValue;
- (void)setDoubleValue:(double)fp8;
- (void)setDoubleValue:(double)fp8 animate:(BOOL)fp16;
- (double)doubleValue;
- (void)setAnimating:(BOOL)fp8;
- (void)animateValue;
- (void)setFullImageAlpha:(double)fp8 animate:(BOOL)fp16;
- (void)animateFullImage;
- (void)takeDoubleValueFrom:(id)fp8;

@end

@interface Ellipsizer : NSObject
{
    NSDictionary *mAttributes;
    float mEllipsisWidth;
    float **mWidthTable;
}

+ (id)ellipsizerWithAttributes:(id)fp8;
- (id)initWithAttributes:(id)fp8;
- (void)dealloc;
- (float **)_newByteTable;
- (void)_freeByteTable:(float **)fp8;
- (id)attributes;
- (void)setAttributes:(id)fp8;
- (id)ellipsizedString:(id)fp8 toWidth:(float)fp12 actualWidth:(float *)fp16;
- (id)ellipsizedString_XXX:(id)fp8 toWidth:(float)fp12;

@end

@interface EtchedText : NSTextField
{
    float _shadow;
    BOOL _shouldSmooth;
    BOOL _etched;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)setEtched:(BOOL)fp8;
- (void)setSmoothFonts:(BOOL)fp8;
- (void)setEditable:(BOOL)fp8;
- (void)setSelectable:(BOOL)fp8;
- (void)setBordered:(BOOL)fp8;
- (void)setDrawsBackground:(BOOL)fp8;
- (void)setShadow:(float)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface EtchedTextFieldCell : NSTextFieldCell
{
    Ellipsizer *_ellipsizer;
    BOOL _isEtched;
    float _shadow;
    BOOL _shouldSmooth;
    BOOL _drawInterior;
    BOOL _shouldElipsize;
}

+ (void)_drawEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
+ (void)_drawUnderEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
- (id)init;
- (void)setEtched:(BOOL)fp8;
- (BOOL)isEtched;
- (void)setDrawInterior:(BOOL)fp8;
- (void)setEllipsizes:(BOOL)fp8;
- (void)setSmoothFonts:(BOOL)fp8;
- (void)setBordered:(BOOL)fp8;
- (void)setBezeled:(BOOL)fp8;
- (void)setShadow:(float)fp8;
- (void)selectWithFrame:(struct _NSRect)fp8 inView:(id)fp24 editor:(id)fp28 delegate:(id)fp32 start:(int)fp36 length:(int)fp40;
- (void)endEditing:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ExampleTextField : NSTextField
{
    NSString *_exampleText;
}

- (void)dealloc;
- (void)_reallySetStringValue:(id)fp8;
- (void)awakeFromNib;
- (id)exampleString;
- (void)setExampleString:(id)fp8;
- (void)setStringValue:(id)fp8;
- (void)removeGrayExampleString;
- (BOOL)becomeFirstResponder;
- (void)selectText:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)stringValue;

@end

@interface ExtendedApplication : NSApplication
{
    NSWindow *_mainWindowAtBeginningOfSendEvent;
    unsigned int mLastEventModifiers;
    id mAboutWindow;
    NSWindow *mModalPanel;
    NSTextField *mVersionString;
    BOOL mAppleScriptImport;
    NSMutableArray *mAboutPanelNibObjects;
    BOOL mQuitting;
}

- (id)currentDocument;
- (id)archiveController;
- (id)mainWindowAtBeginningOfSendEvent;
- (void)setQuitting:(BOOL)fp8;
- (BOOL)isQuitting;
- (void)sendEvent:(id)fp8;
- (void)orderFrontStandardAboutPanelWithOptions:(id)fp8;
- (id)subjectForEmail;
- (id)recipientForEmail;
- (id)addressForEmail;
- (id)handleAssignKeywordScriptCommand:(id)fp8;
- (id)handleEnhanceScriptCommand:(id)fp8;
- (id)handleSelectScriptCommand:(id)fp8;
- (id)handleDuplicateScriptCommand:(id)fp8;
- (void)doImportScriptCommand:(id)fp8 toAlbum:(id)fp12 forceNoAliases:(BOOL)fp16;
- (id)handleImportScriptCommand:(id)fp8;
- (id)importing;
- (id)handleNewAlbumScriptCommand:(id)fp8;
- (id)handleEmptyTrashScriptCommand:(id)fp8;
- (id)handleStartSlideshowScriptCommand:(id)fp8;
- (id)handleStopSlideshowScriptCommand:(id)fp8;
- (id)handlePauseSlideshowScriptCommand:(id)fp8;
- (id)handleResumeSlideshowScriptCommand:(id)fp8;
- (id)handleNextSlideScriptCommand:(id)fp8;
- (void)handleAutoImportScriptCommand:(id)fp8;
- (id)handlePreviousSlideScriptCommand:(id)fp8;
- (void)_addRecsFromAlbum:(id)fp8 toArray:(id)fp12;
- (id)imageRecs;
- (id)albums;
- (id)localRootAlbums;
- (id)sharedLibraryAlbums;
- (id)currentAlbum;
- (id)slideshowRunning;
- (void)setCurrentAlbum:(id)fp8;
- (id)archiveAlbum;
- (id)trashAlbum;
- (id)lastNRollsAlbum;
- (id)lastNMonthsAlbum;
- (id)aeKeywords;
- (id)selection;
- (unsigned int)aeView;
- (void)setAeView:(unsigned int)fp8;

@end

@interface ExtendedScrollView : NSScrollView
{
}

+ (struct _NSSize)frameSizeForContentSize:(struct _NSSize)fp8 hasHorizontalScroller:(BOOL)fp16 hasVerticalScroller:(BOOL)fp20 borderType:(unsigned int)fp24;
+ (struct _NSSize)contentSizeForFrameSize:(struct _NSSize)fp8 hasHorizontalScroller:(BOOL)fp16 hasVerticalScroller:(BOOL)fp20 borderType:(unsigned int)fp24;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;

@end

@interface HeartBeat : NSObject
{
    CDAnonymousStruct6 _times;
    NSMutableArray *_clients;
    NSPort *_port;
    NSTimer *_msgSendTimer;
    NSThread *_heartbeatThread;
    NSLock *_clientsLock;
    int _viewCount;
}

+ (id)sharedHeartBeat;
+ (double)heartBeatCycle;
+ (void)setHeartBeatCycle:(double)fp8;
+ (BOOL)isHeartBeatThread;
- (id)init;
- (void)dealloc;
- (void)updateHeartBeatState;
- (void)_activate:(id)fp8;
- (void)addHeartBeatView:(id)fp8;
- (void)removeHeartBeatView:(id)fp8;

@end

@interface ImageTextButton : NSButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (id)text;
- (void)setText:(id)fp8;

@end

@interface ImageTextButtonCell : NSButtonCell
{
    NSString *mText;
}

- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (id)text;
- (void)setText:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface IntegerOnlyFormatter : NSNumberFormatter
{
}

- (BOOL)isPartialStringValid:(id)fp8 newEditingString:(id *)fp12 errorDescription:(id *)fp16;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelecgtedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;

@end

@interface PlainWindow : NSWindow
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (BOOL)canBecomeKeyWindow;

@end

@interface RankingTextField : NSTextField
{
    NSString *mStar;
    NSString *mBullet;
    int mRankingValue;
    BOOL mFieldInitialized;
    BOOL mMinimumRanking;
    BOOL mMaximumRanking;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (int)rankingValue;
- (int)constrainValue:(int)fp8;
- (void)setRankingValue:(int)fp8;
- (int)_mouseLocToRanking:(struct _NSPoint)fp8 forWidth:(float)fp16;
- (void)mouseDown:(id)fp8;
- (void)setMinimum:(int)fp8 maximum:(int)fp12;

@end

@interface RolloverEtchedTextField : NSTextField
{
    BOOL doEtching;
    NSBezierPath *rolloverPath;
    int rolloverTrackingRectTag;
}

- (void)dealloc;
- (void)clearTrackingRect;
- (void)resetTrackingRect;
- (void)setFrameOrigin:(struct _NSPoint)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewDidEndLiveResize;
- (void)_superviewChangedSize:(id)fp8;
- (float)_capRadius;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_drawText:(struct _NSRect)fp8 withEtching:(BOOL)fp24;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface RolloverTextField : NSTextField
{
    NSBezierPath *rolloverPath;
    int rolloverTrackingRectTag;
}

- (void)dealloc;
- (void)clearTrackingRect;
- (void)resetTrackingRect;
- (void)setFrameOrigin:(struct _NSPoint)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewDidEndLiveResize;
- (void)_superviewChangedSize:(id)fp8;
- (float)_capRadius;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface WindowCloseRequestor : NSObject
{
    id mTarget;
    SEL mSelector;
}

- (id)initWithTarget:(id)fp8 selector:(SEL)fp12;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (BOOL)isEqual:(id)fp8;

@end

@interface ScopeWindow : NSWindow
{
    NSMutableArray *mCloseQueue;
}

- (void)awakeFromNib;
- (void)addToCloseQueue:(id)fp8 selector:(SEL)fp12;
- (void)removeFromCloseQueue:(id)fp8;
- (void)removeFromCloseQueue:(id)fp8 selector:(SEL)fp12;
- (BOOL)windowShouldClose:(id)fp8;

@end

@interface SelectVerb : NSScriptCommand
{
    NSScriptObjectSpecifier *_keySpecifier;
}

- (void)setReceiversSpecifier:(id)fp8;
- (void)dealloc;
- (id)directParameter;
- (id)keySpecifier;
- (id)performDefaultImplementation;
- (id)description;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface SeparatorBar : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface FilePath : NSObject
{
}

+ (id)temporaryDirectory;
+ (BOOL)doesFileExist:(id)fp8;
+ (BOOL)doesDirectoryExist:(id)fp8;
+ (id)uniquePathForPath:(id)fp8;
+ (id)pathForAppNamed:(id)fp8;
+ (id)pathForAppWithSignature:(unsigned long)fp8;
+ (BOOL)doesAppExistWithName:(id)fp8;
+ (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
+ (BOOL)createDir:(id)fp8;
+ (void)deleteDirsRecursively:(id)fp8 toRoot:(id)fp12;
+ (BOOL)checkPermissionsRecursively:(id)fp8 toRoot:(id)fp12 mode:(int)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 count:(unsigned long *)fp12 physical:(BOOL)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12 resource:(BOOL)fp16;
+ (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12;
+ (unsigned long long)dataForkSizeAtPath:(id)fp8;
+ (id)commonPath:(id)fp8 secondPath:(id)fp12;
+ (id)uniqueSubPath:(id)fp8 child:(id)fp12;
+ (id)makeUniquePath:(id)fp8;
+ (id)makeUniquePath:(id)fp8 reservedPaths:(id)fp12;
+ (id)removeTrailingCountOfPath:(id)fp8;
+ (BOOL)path:(id)fp8 isTrailingCountSiblingOfPath:(id)fp12;
+ (id)makeUniqueFilePath:(id)fp8 extension:(id)fp12;
+ (id)generateUUID;
+ (id)generateMachineLocalUUID;
+ (id)makeUniqueFileNameWithTime:(id)fp8;
+ (id)makeUniquePathWithTime:(id)fp8;
+ (BOOL)makeFSSpec:(id)fp8 spec:(struct FSSpec *)fp12;
+ (unsigned long)countFiles:(id)fp8 descend:(BOOL)fp12;
+ (unsigned long)countFilesFromArray:(id)fp8 descend:(BOOL)fp12;
+ (BOOL)getFSRef:(struct FSRef *)fp8 forPath:(id)fp12 isDirectory:(BOOL)fp16;
+ (id)pathForFSRef:(struct FSRef *)fp8;
+ (id)pathForFSSpecData:(id)fp8;
+ (id)pathForFSSpec:(struct FSSpec *)fp8;
+ (BOOL)isAliasFileAtPath:(id)fp8;
+ (id)pathContentOfAliasAtPath:(id)fp8;
+ (id)stringByResolvingAliasesInPath:(id)fp8;
+ (BOOL)copyDatesFromPath:(id)fp8 toPath:(id)fp12;
+ (BOOL)copyParentPermissionsForPath:(id)fp8;
+ (BOOL)copyPermissionsToPath:(id)fp8 fromPath:(id)fp12;
+ (BOOL)ensurePermissions:(unsigned long)fp8 forPath:(id)fp12;
+ (BOOL)ensureGroupName:(id)fp8 forPath:(id)fp12;
+ (id)validFilename:(id)fp8;
+ (id)os9Filename:(id)fp8;
+ (unsigned long long)adjustSize:(unsigned long long)fp8 toAllocationBlockSize:(unsigned long long)fp16;
+ (id)createVirtualPath:(id)fp8 inFolder:(id)fp12;
+ (id)drfsObjectAtPath:(id)fp8 inFolder:(id)fp12;
+ (id)pathForDRFSObject:(id)fp8;

@end

@interface HiResManager : NSObject
{
    struct IPPhotoList *mLoaded;
    struct IPPhotoList *mToBeLoaded;
    struct IPPhotoList *mToBeUnloaded;
    long mCacheSize;
    struct IPPhotoInfo *mLastPhoto;
    int mThreadState;
    BOOL mHiResThreadHasExited;
    long mCacheLimit;
    struct _opaque_pthread_mutex_t mLock;
    BOOL mRunning;
    BOOL mInSizedMode;
}

+ (id)defaultManager;
- (void)dealloc;
- (id)init;
- (void)_removeDocument:(id)fp8 fromPhotoList:(struct IPPhotoList *)fp12;
- (void)_docEjected:(id)fp8;
- (void)setInSizedMode:(BOOL)fp8;
- (void)stopThreads;
- (void)disableThreads;
- (void)startThreads;
- (void)startProcessing;
- (void)stopProcessing;
- (BOOL)isProcessing;
- (void)loadPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearToBeLoaded;
- (void)unloadPhoto:(struct IPPhotoInfo *)fp8;
- (void)addLoadedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removePhotoFromLoaded:(struct IPPhotoInfo *)fp8;
- (void)unloadPhotos:(struct IPPhotoList *)fp8;
- (void)unloadPhotoNow:(struct IPPhotoInfo *)fp8;
- (void)unloadAllPhotos;
- (void)_unloadImages;
- (void)threadedLoadHiRes:(id)fp8;

@end

@interface ImageUserData : NSObject <NSCoding>
{
    struct UserDataRecord **mUserData;
    NSData *mData;
    NSDictionary *mICProperties;
}

+ (id)imageUserData;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)data;
- (void)setData:(id)fp8;
- (struct UserDataRecord **)userData;
- (struct UserDataRecord **)userDataCopy;
- (void)setUserData:(struct UserDataRecord **)fp8;
- (void)setUserDataNoCopy:(struct UserDataRecord **)fp8;
- (void)stripExcessUserData;
- (void)_clearDataCache;
- (void)setImageIODictionary:(id)fp8;
- (id)getImageIOEXIFDictionary;
- (id)icProperties;
- (void)setICProperties:(id)fp8;
- (char **)_userDataToHandle;
- (id)_getICProperty:(unsigned long)fp8;
- (id)getLengthStringOfType:(unsigned long)fp8;
- (void)setLengthString:(id)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (id)getStringOfType:(unsigned long)fp8;
- (void)setString:(id)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (short)_getNikonMakerdataISO;
- (BOOL)getByteOfType:(unsigned long)fp8;
- (void)setByte:(BOOL)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (BOOL)getASCIIOfType:(unsigned long)fp8;
- (void)setASCII:(BOOL)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (short)getShortOfType:(unsigned long)fp8;
- (void)setShort:(short)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (unsigned short)getUnsignedShortOfType:(unsigned long)fp8;
- (void)setUnsignedShort:(unsigned short)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (long)getLongOfType:(unsigned long)fp8;
- (void)setLong:(long)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (unsigned long)getUnsignedLongOfType:(unsigned long)fp8;
- (void)setUnsignedLong:(unsigned long)fp8 ofType:(unsigned long)fp12 replace:(BOOL)fp16;
- (double)getRationalOfType:(unsigned long)fp8;
- (BOOL)getRationalNumerator:(unsigned long *)fp8 denominator:(unsigned long *)fp12 ofType:(unsigned long)fp16;
- (void)setRational:(double)fp8 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (void)setRationalNumerator:(unsigned long)fp8 denominator:(unsigned long)fp12 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (double)getRationalOfType:(unsigned long)fp8 index:(int)fp12;
- (BOOL)getRationalNumerator:(unsigned long *)fp8 denominator:(unsigned long *)fp12 ofType:(unsigned long)fp16 index:(int)fp20;
- (void)setRational:(double)fp8 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (void)setRationalNumerator:(unsigned long)fp8 denominator:(unsigned long)fp12 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (double)getSRationalOfType:(unsigned long)fp8;
- (BOOL)getSRationalNumerator:(long *)fp8 denominator:(long *)fp12 ofType:(unsigned long)fp16;
- (void)setSRational:(double)fp8 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (void)setSRationalNumerator:(long)fp8 denominator:(long)fp12 ofType:(unsigned long)fp16 replace:(BOOL)fp20;
- (double)getSRationalOfType:(unsigned long)fp8 index:(int)fp12;
- (BOOL)getSRationalNumerator:(long *)fp8 denominator:(long *)fp12 ofType:(unsigned long)fp16 index:(int)fp20;
- (void)setSRational:(double)fp8 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (void)setSRationalNumerator:(long)fp8 denominator:(long)fp12 ofType:(unsigned long)fp16 index:(int)fp20 replace:(BOOL)fp24;
- (unsigned long)alphaMode;
- (void)setAlphaMode:(unsigned long)fp8 replace:(BOOL)fp12;
- (id)make;
- (void)setMake:(id)fp8 replace:(BOOL)fp12;
- (id)model;
- (void)setModel:(id)fp8 replace:(BOOL)fp12;
- (id)software;
- (void)setSoftware:(id)fp8 replace:(BOOL)fp12;
- (id)creationDate;
- (void)setCreationDate:(id)fp8 replace:(BOOL)fp12;
- (id)dateTime;
- (void)setDateTime:(id)fp8 replace:(BOOL)fp12;
- (id)dateOriginal;
- (void)setDateOriginal:(id)fp8 replace:(BOOL)fp12;
- (id)dateDigitized;
- (void)setDateDigitized:(id)fp8 replace:(BOOL)fp12;
- (short)orientation;
- (void)setOrientation:(short)fp8 replace:(BOOL)fp12;
- (short)exposureProgram;
- (void)setExposureProgram:(short)fp8 replace:(BOOL)fp12;
- (short)isoSpeedRatings;
- (void)setISOSpeedRatings:(short)fp8 replace:(BOOL)fp12;
- (double)shutterSpeed;
- (void)setShutterSpeed:(double)fp8 replace:(BOOL)fp16;
- (double)aperture;
- (void)setAperture:(double)fp8 replace:(BOOL)fp16;
- (void)setFNumber:(double)fp8 replace:(BOOL)fp16;
- (double)brightness;
- (void)setBrightness:(double)fp8 replace:(BOOL)fp16;
- (double)exposureBias;
- (void)setExposureBias:(double)fp8 replace:(BOOL)fp16;
- (double)maxAperture;
- (void)setMaxAperture:(double)fp8 replace:(BOOL)fp16;
- (double)subjectDistance;
- (void)setSubjectDistance:(double)fp8 replace:(BOOL)fp16;
- (short)meteringMode;
- (void)setMeteringMode:(short)fp8 replace:(BOOL)fp12;
- (short)lightSource;
- (void)setLightSource:(short)fp8 replace:(BOOL)fp12;
- (short)flash;
- (void)setFlash:(short)fp8 replace:(BOOL)fp12;
- (short)EXIFcolorSpace;
- (void)setEXIFcolorSpace:(short)fp8 replace:(BOOL)fp12;
- (double)focalLength;
- (void)setFocalLength:(double)fp8 replace:(BOOL)fp16;
- (double)exposureIndex;
- (void)setExposureIndex:(double)fp8 replace:(BOOL)fp16;
- (short)sensingMethod;
- (void)setSensingMethod:(short)fp8 replace:(BOOL)fp12;
- (BOOL)gpsNorSLatitude;
- (void)setGPSNorSLatitude:(BOOL)fp8 replace:(BOOL)fp12;
- (double)gpsLatitudeDegrees;
- (void)setGPSLatitudeDegrees:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLatitudeMinutes;
- (void)setGPSLatitudeMinutes:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLatitudeSeconds;
- (void)setGPSLatitudeSeconds:(double)fp8 replace:(BOOL)fp16;
- (BOOL)gpsEorWLongitude;
- (void)setGPSEorWLongitude:(BOOL)fp8 replace:(BOOL)fp12;
- (double)gpsLongitudeDegrees;
- (void)setGPSLongitudeDegrees:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLongitudeMinutes;
- (void)setGPSLongitudeMinutes:(double)fp8 replace:(BOOL)fp16;
- (double)gpsLongitudeSeconds;
- (void)setGPSLongitudeSeconds:(double)fp8 replace:(BOOL)fp16;
- (double)gpsAltitude;
- (void)setGPSAltitude:(double)fp8 replace:(BOOL)fp16;
- (BOOL)hasGPS;
- (double)gpsLatitude;
- (double)gpsLongitude;

@end

@interface NSString (ScopeNSStringStuff)
- (const char *)myAsciiCString;
@end

@interface NSAppleScript (iPhotoAdditions)
- (id)executeHandlerWithName:(id)fp8 andArguments:(id)fp12 error:(id *)fp16;
@end

@interface NSObject (ScopeAdditions)
+ (void)stackTraceToConsole;
+ (BOOL)boolForDefaultsKey:(id)fp8;
+ (id)hostName;
+ (BOOL)isLogEnabled;
+ (id)objectForDefaultsKey:(id)fp8;
+ (id)objectForDefaultsKey:(id)fp8 domainName:(id)fp12;
+ (id)objectForIPhotoDefaultsKey:(id)fp8;
+ (id)_scopeObjectAdditionsLock;
+ (void)setDefaultsDomainName:(id)fp8;
+ (void)setObjectLogProcessPrefix:(id)fp8;
+ (id)timeString;
- (void)stackTraceToConsole;
- (id)className;
- (void)errorInMethod:(SEL)fp8;
- (void)errorInMethod:(SEL)fp8 string:(id)fp12;
- (BOOL)isRunningInMainThread;
- (void)logAtLevel:(int)fp8 format:(id)fp12;
- (void)logInvocationOfMethod:(SEL)fp8;
- (void)logInvocationOfMethod:(SEL)fp8 withFormat:(id)fp12;
- (id)logId;
- (void)_logFormat:(id)fp8 arguments:(char *)fp12;
- (void)_logString:(id)fp8;
- (void)logWithFormat:(id)fp8;
- (void)raiseExceptionInMethod:(SEL)fp8 name:(id)fp12;
@end

@interface NSString (IPTCAdditions)
- (id)removeIllegalIPTCCharacters;
@end

@interface NSString (NSScopeStringAdditions)
+ (id)numbersWithStrings:(id)fp8;
- (id)abbreviatedPathWithComponentCount:(int)fp8;
- (BOOL)boolValue;
- (id)substringToString:(id)fp8;
- (id)unescapedUnicodeString;
- (void)debugUnicode:(char *)fp8;
@end

@interface NSString (MarkupEscaping)
- (id)htmlEncodedString;
- (id)_markupEscapedString:(BOOL)fp8;
- (id)propertyListXMLEncodedString;
@end

@interface NSString (NumberConversions)
+ (id)stringWithLong:(long)fp8;
+ (id)stringWithUnsignedLong:(unsigned long)fp8;
+ (id)stringWithDouble:(double)fp8;
- (BOOL)stringToUnsignedLongLongInt:(unsigned long long *)fp8;
- (BOOL)stringToUnsignedLongInt:(unsigned long *)fp8;
- (unsigned long long)unsignedLongLongValue;
- (long long)longLongValue;
- (unsigned long)unsignedLongValue;
- (long)longValue;
- (unsigned short)unsignedShortValue;
- (short)shortValue;
- (double)doubleValue;
@end

@interface NSString (Trimming)
- (id)taoStringByTrimmingWhitespace;
- (id)taoStringByTrimmingWhitespaceIncludingNewlines:(BOOL)fp8 atStart:(BOOL)fp12 atEnd:(BOOL)fp16;
@end

@interface NSMutableString (JensAdditions)
- (void)replaceSubstring:(id)fp8 with:(id)fp12;
@end

@interface NSString (JensAdditions)
- (id)stringByReplacing:(id)fp8 with:(id)fp12;
@end

@interface NSString (NiceSizeStrings)
+ (id)sizeStringFromBytes:(unsigned long long)fp8;
@end

@interface NSString (URLExtensions)
- (id)rationalizePathOrURL;
@end

@interface QTUtils : NSObject
{
    NSString *mPath;
    BOOL mAutoRotate;
    struct CGSize mTargetSize;
    BOOL mAllowMainThreadImport;
    BOOL mGenerateHash;
    BOOL mLoadingThumb;
    CDAnonymousStruct4 *mImageContainer;
    NSString *mImageDataHash;
    struct CGSize mFullSize;
    float mRotation;
    ImageUserData *mUserData;
    char **mColorProfile;
    unsigned int mImageFormat;
    float mDurationSeconds;
    char *mNeedsToLoadOnMainFlag;
    NSDictionary *mRAWInfo;
    BOOL mExtendRAW;
    unsigned long mBytesWritten;
    NSString **mRAWMethodVersion;
    NSArray *mRAWLoadParams;
}

+ (BOOL)quickTimeSupportsColorProfiles;
+ (void)lock;
+ (void)unlock;
+ (struct CGColorSpace *)srgbColorSpace;
+ (struct CGColorSpace *)cameraRGBColorSpace;
+ (struct CGColorSpace *)wideGamutColorSpace;
+ (struct CGColorSpace *)adobe1988GamutColorSpace;
+ (struct CGColorSpace *)printerColorSpaceColorSpace;
+ (struct CGColorSpace *)linearAdobeRGBColorSpace;
+ (BOOL)canUseProfileAsDestination:(char **)fp8;
+ (unsigned long)readImage:(id)fp8 into:(char **)fp12;
+ (BOOL)write24RGBData:(id)fp8 rect:(struct _NSRect)fp12 toFile:(id)fp28 userData:(id)fp32 colorProfile:(char **)fp36;
+ (BOOL)writeGWorld:(struct OpaqueGrafPtr *)fp8 toFile:(id)fp12 imageFormat:(unsigned long)fp16 quality:(int)fp20 userData:(id)fp24 colorProfile:(char **)fp28;
+ (struct _NSSize)bounds:(id)fp8;
+ (struct _NSSize)bounds:(id)fp8 imageFormat:(unsigned long)fp12;
+ (unsigned long)loadableImageFormatAtPath:(id)fp8;
+ (unsigned long)getImporterComponentType:(struct ComponentInstanceRecord *)fp8;
+ (unsigned long)getImageFormat:(id)fp8;
+ (BOOL)imageFormatSupportsTransparency:(unsigned long)fp8;
+ (BOOL)isRawImageFormat:(unsigned long)fp8 path:(id)fp12;
+ (BOOL)isMovieImageFormat:(unsigned long)fp8;
+ (id)getExtensionForImageFormat:(unsigned long)fp8;
+ (id)supportedExtensions;
+ (unsigned long)getImageFormatForExtension:(id)fp8;
+ (id)mimeTypeForExtension:(id)fp8;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 colorProfile:(char ***)fp28;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 storage:(char *)fp28 rowBytes:(long)fp32 colorProfile:(char ***)fp36;
+ (struct OpaqueGrafPtr *)uncompressImageData:(char **)fp8 imageFormat:(unsigned long)fp12 size:(struct _NSSize)fp16 pixelFormat:(unsigned long)fp24 storage:(char *)fp28 rowBytes:(long)fp32 rotation:(float)fp36 colorProfile:(char ***)fp40;
+ (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 rotation:(float)fp24 colorProfile:(char ***)fp28;
+ (struct OpaqueGrafPtr *)uncompressImage:(id)fp8 size:(struct _NSSize)fp12 pixelFormat:(unsigned long)fp20 colorProfile:(char ***)fp24;
+ (void)uncompressImage:(id)fp8 into:(struct OpaqueGrafPtr *)fp12 rotation:(float)fp16 colorProfile:(char ***)fp20;
+ (void)uncompressImage:(id)fp8 into:(struct OpaqueGrafPtr *)fp12 colorProfile:(char ***)fp16;
+ (void)release;
+ (unsigned int)bitsPerPixelForFormat:(unsigned long)fp8;
+ (unsigned int)bitsPerComponentForFormat:(unsigned long)fp8;
+ (int)alphaInfoForFormat:(unsigned long)fp8;
+ (unsigned long)colorModelPixelFormat:(id)fp8 withDepth:(int)fp12 hasAlpha:(BOOL)fp16;
+ (void)copyBitsFrom:(char *)fp8 srcRowBytes:(unsigned long)fp12 srcFormat:(unsigned long)fp16 srcOrigin:(struct _NSPoint)fp20 to:(char *)fp28 destRowBytes:(unsigned long)fp32 destFormat:(unsigned long)fp36 destOrigin:(struct _NSPoint)fp40 size:(struct _NSSize)fp48;
+ (void)stretchBitsFrom:(char *)fp8 srcRowBytes:(unsigned long)fp12 srcFormat:(unsigned long)fp16 srcSize:(struct _NSSize)fp20 to:(char *)fp28 destRowBytes:(unsigned long)fp32 destSize:(struct _NSSize)fp36;
+ (id)getAvailableSoundTypes;
+ (id)getSongTitleForPath:(id)fp8;
+ (BOOL)does32ARGBBufferContainAllZerosAlphaChannel:(char *)fp8 width:(long)fp12 height:(long)fp16 rowBytes:(long)fp20;
+ (void)fill32ARGBBufferWithOpaqueAlphaChannel:(char *)fp8 width:(long)fp12 height:(long)fp16 rowBytes:(long)fp20;
+ (char **)copyColorProfile:(char **)fp8;
+ (void)addCameraRGBColorProfileToImageAtPath:(id)fp8;
+ (char **)createProfileFromUserDataComponents:(struct UserDataRecord **)fp8;
+ (BOOL)userPrefUseColorProfileEXIF;
+ (BOOL)profileIsScreenOnly:(char **)fp8;
+ (char **)createProfileHandleFromUserData:(struct UserDataRecord **)fp8 alwaysReturnProfile:(BOOL)fp12;
+ (char **)colorProfileFromCGColorSpace:(struct CGColorSpace *)fp8;
+ (struct CGColorSpace *)currentMonitorColorSpace;
+ (struct CGImage *)threadsafeImportRAW:(id)fp8 format:(unsigned long)fp12 RAWInfo:(id *)fp16 targetSize:(struct CGSize *)fp20 rawMethodVersion:(id *)fp24 rawLoadParams:(id)fp28 imageDataHash:(id *)fp32;
+ (void *)threadsafeImportRAWSmall:(id)fp8 format:(unsigned long)fp12 RAWInfo:(id *)fp16 targetSize:(struct CGSize *)fp20 colorProfile:(char ***)fp24 rawMethodVersion:(id *)fp28 rawLoadParams:(id)fp32 imageDataHash:(id *)fp36;
+ (void *)threadsafeImport:(id)fp8 imageFormat:(unsigned long)fp12 targetSize:(struct CGSize *)fp16 fullSize:(struct CGSize *)fp20 autoRotate:(BOOL)fp24 rotationResult:(float *)fp28 duration:(float *)fp32 userData:(id *)fp36 colorProfile:(char ***)fp40 allow16Bit:(BOOL)fp44 bitDepth:(int *)fp48 allowMainThreadImport:(BOOL)fp52 needsToLoadOnMainFlag:(char *)fp56 loadingThumb:(BOOL)fp60 noCache:(BOOL)fp64 rawMethodVersion:(id *)fp68 imageDataHash:(id *)fp72;
+ (id)threadsafeGetMetadata:(id)fp8 imageFormat:(unsigned long)fp12 allowMainThreadImport:(BOOL)fp16 needsToLoadOnMainFlag:(char *)fp20;
+ (short)threadsafeExport:(id)fp8 imageFormat:(unsigned long)fp12 raster:(void *)fp16 rasterRowBytes:(unsigned long)fp20 imageSize:(struct CGSize)fp24 userData:(id)fp32 colorProfile:(char **)fp36 allowMainThreadImport:(BOOL)fp40 needsToLoadOnMainFlag:(char *)fp44 bytesWritten:(unsigned long *)fp48;
- (id)initWithPath:(id)fp8 imageFormat:(unsigned long)fp12;
- (id)initWithPath:(id)fp8 imageFormat:(unsigned long)fp12 autoRotate:(BOOL)fp16 targetSize:(struct CGSize)fp20 loadingThumb:(BOOL)fp28 generateHash:(BOOL)fp32;
- (void)dealloc;
- (char *)raster;
- (id)imageDataHash;
- (struct CGSize)size;
- (struct CGSize)fullSize;
- (float)rotation;
- (float)durationSeconds;
- (id)newUserData;
- (unsigned long)bytesWritten;
- (void)setUserData:(id)fp8;
- (char **)colorProfile;
- (void)setColorProfile:(char **)fp8;
- (struct CGImage *)imageRef;
- (void)setImageRef:(struct CGImage *)fp8;
- (void)setRasterInfo:(void *)fp8 imageSize:(struct CGSize)fp12 rasterRowBytes:(unsigned long)fp20;
- (id)RAWInfo;
- (void)setExtendRAW:(BOOL)fp8;
- (unsigned long)_countMovieFrames:(struct MovieType **)fp8;
- (struct OpaqueGrafPtr *)_makeImageContainerForMovie:(struct MovieType **)fp8;
- (long)_initDecompressSeq:(int *)fp8 gworld:(struct OpaqueGrafPtr *)fp12 imageSize:(long *)fp16;
- (short)_decompress:(int *)fp8 gworld:(struct OpaqueGrafPtr *)fp12 imageSize:(long *)fp16;
- (short)_endDecompress:(int *)fp8;
- (void)setAllowMainThread:(BOOL)fp8 needsToLoadOnMainFlag:(char *)fp12;
- (void)setUseRAWMethodVersion:(id *)fp8;
- (void)setUseRAWLoadParams:(id)fp8;
- (void)getMetadataQT;
- (void)importQT;
- (short)exportQT;
- (id)_imageIOOptions:(int)fp8 shouldCache:(BOOL)fp12;
- (struct CGImageSource *)imageIOOpen:(int)fp8 shouldCache:(BOOL)fp12;
- (id)_fixCRWDate:(id)fp8;
- (void)getMetadataImageIO:(struct CGImageSource *)fp8;
- (void)importImageIO8Bit:(struct CGImageSource *)fp8;
- (void)importImageIO16Bit:(struct CGImageSource *)fp8;
- (void)importImageIO16BitSmall:(struct CGImageSource *)fp8;

@end

@interface StringUtil : NSObject
{
}

+ (unsigned int)getTrailingCount:(id)fp8 delim:(id)fp12 range:(struct _NSRange *)fp16;
+ (id)incrementTrailingCount:(id)fp8 delim:(id)fp12 first:(BOOL)fp16;
+ (id)localizedCountString:(id)fp8 count:(unsigned int)fp12;
+ (id)localizedFormatString:(id)fp8 count:(unsigned int)fp12;
+ (id)localizedValueString:(id)fp8 value:(float)fp12;
+ (id)localizedDurationString:(id)fp8 seconds:(unsigned long)fp12;
+ (id)localizedDurationString:(id)fp8 keyBase:(id)fp12 seconds:(unsigned long)fp16;
+ (id)localizedCountString:(id)fp8 keyBase:(id)fp12 count:(unsigned int)fp16;
+ (id)localizedFormatString:(id)fp8 keyBase:(id)fp12 count:(unsigned int)fp16;
+ (id)localizedValueString:(id)fp8 keyBase:(id)fp12 value:(float)fp16;
+ (id)stringFromClass:(id)fp8 key:(id)fp12;
+ (id)localizedStringWithFormatKey:(id)fp8;
+ (id)localizedString:(id)fp8;
+ (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
+ (id)stringFromTable:(id)fp8 key:(id)fp12;
+ (id)stringFromTable:(id)fp8 key:(id)fp12 withDefaultValue:(id)fp16;
+ (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
+ (id)stringWithKey:(id)fp8;
+ (id)fileSizeStringFromBytes:(unsigned long long)fp8;
+ (float)maximumDurationStringWidth:(id)fp8;
+ (id)durationString:(double)fp8;
+ (id)timeRemainingString:(double)fp8;
+ (id)stringForDate:(id)fp8 options:(unsigned long)fp12;
+ (id)stringFromFourCharCode:(unsigned long)fp8;
+ (unsigned long)fourCharCodeFromString:(id)fp8;

@end

@interface ThreadsafeMutableArray : NSObject
{
    NSLock *mLock;
    NSMutableArray *mArray;
}

+ (id)array;
- (id)init;
- (void)dealloc;
- (unsigned int)indexOfObject:(id)fp8;
- (unsigned int)count;
- (BOOL)containsObject:(id)fp8;
- (void)addObject:(id)fp8;
- (void)addUniqueObject:(id)fp8;
- (void)addObjectsFromArray:(id)fp8;
- (id)objectAtIndex:(unsigned int)fp8;
- (void)insertObject:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeAllObjects;
- (void)removeLastObject;
- (void)removeObject:(id)fp8;
- (void)removeObjectAtIndex:(unsigned int)fp8;
- (void)removeObjectsInArray:(id)fp8;
- (void)replaceObjectAtIndex:(unsigned int)fp8 withObject:(id)fp12;
- (void)setArray:(id)fp8;
- (void)lock;
- (void)unlock;

@end

@interface Thumbnailer : NSObject <ThreadManagerTask>
{
    struct _NSRect mMaxBounds;
    unsigned long mMaxFileBytes;
    int mQuality;
    float mCustomQuality;
    float mRotation;
    float mOriginalRotation;
    BOOL mAutoRotate;
    unsigned int mOutputFormat;
    NSString *mOutputExtension;
    ImageUserData *mUserData;
    struct list<JobQueueEntry*, std::allocator<JobQueueEntry*>> *mJobQueue;
    NSLock *mQueueLock;
    BOOL mThreadActive;
    BOOL mClearRequested;
    struct MessageSender mMessageSender;
    struct ComponentInstanceRecord *mImport;
    struct ComponentInstanceRecord *mExport;
    struct UserDataRecord **mUserDataHandle;
    char **mColorProfile;
    struct FSSpec mSrc;
    struct FSSpec mDest;
    struct _NSRect mImageBounds;
    struct _NSSize mLastImageSize;
    struct _NSSize mLastThumbSize;
    NSLock *mLock;
    short mMovieRef;
    struct MovieType **mMovie;
    struct OpaqueGrafPtr *mSrcGWorld;
    int mDecompressSeqID;
    long mImageSize;
    unsigned int mMovieFrameCount;
    unsigned int mMovieFrameNumber;
    int mMovieTime;
}

+ (id)scaleImage:(id)fp8 fromSize:(struct _NSSize)fp12 toSize:(struct _NSSize)fp20;
- (id)init;
- (void)dealloc;
- (struct MessageSender *)messageSender;
- (void)setMax:(unsigned int)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16;
- (struct _NSSize)maxBounds;
- (void)setQuality:(int)fp8;
- (int)quality;
- (void)setCustomQuality:(float)fp8;
- (float)customQuality;
- (void)setRotation:(float)fp8;
- (float)rotation;
- (void)setOriginalRotation:(float)fp8;
- (float)originalRotation;
- (void)setAutoRotate:(BOOL)fp8;
- (float)autoRotate;
- (void)setOutputFormat:(unsigned long)fp8;
- (unsigned long)outputFormat;
- (id)userData;
- (void)setUserData:(id)fp8;
- (void)setOutputExtension:(id)fp8;
- (id)outputExtension;
- (void)clearJobQueue;
- (void)addToJobQueue:(id)fp8 dest:(id)fp12 useTempFile:(BOOL)fp16;
- (void)processJobQueue;
- (int)_queueCount;
- (id)_canTerminate;
- (void)performTask;
- (void)thumbThread;
- (id)userDataForSrc:(id)fp8;
- (BOOL)createThumbnailFromJPEG:(CDAnonymousStruct18 *)fp8 dest:(id)fp12;
- (BOOL)createThumbnailFromJPEGData:(char **)fp8 handle:(char **)fp12;
- (BOOL)createThumbnailFromJPEG:(CDAnonymousStruct18 *)fp8 handle:(char **)fp12;
- (BOOL)createThumbnail:(id)fp8 dest:(id)fp12;
- (char **)retrieveColorProfile:(id)fp8;
- (BOOL)retrieveMetadata:(id)fp8 userData:(id *)fp12;
- (BOOL)copyUserDataFromPath:(id)fp8 toPath:(id)fp12;
- (struct _NSSize)lastImageSize;
- (struct _NSSize)lastThumbSize;
- (void)releaseImporter;
- (void)releaseExporter;
- (void)releaseUserData;
- (void)releaseColorProfile;
- (struct OpaqueGrafPtr *)_makeGWorldForMovie;
- (long)_initDecompressSeq;
- (short)_decompress;
- (short)_endDecompress;
- (unsigned long)_countMovieFrames;
- (void)_nextFrame;
- (BOOL)_createImporterForJPEGData:(char **)fp8;
- (BOOL)_createImporterForJPEG:(CDAnonymousStruct18 *)fp8;
- (void)_openMovie:(id)fp8;
- (BOOL)_createImporterForPath:(id)fp8;
- (void)_getUserData;
- (BOOL)ensureImporterForJPEGData:(char **)fp8;
- (BOOL)ensureImporterForJPEG:(CDAnonymousStruct18 *)fp8;
- (BOOL)ensureImporterForPath:(id)fp8;
- (void)_prepareImporter;
- (BOOL)ensureExporterCore;
- (BOOL)ensureExporterForPath:(id)fp8;
- (BOOL)ensureExporterForHandle:(char **)fp8;
- (BOOL)createThumbnail:(id)fp8 dest:(id)fp12 options:(CDAnonymousStruct24 *)fp16;
- (BOOL)ensureExporterForPath:(id)fp8 options:(CDAnonymousStruct24 *)fp12;
- (BOOL)ensureExporterCore:(CDAnonymousStruct24 *)fp8;

@end

@interface CalendarInfo : InfoView
{
    CalendarController *mCalendarController;
    CalendarView *mCalendarView;
    Album *mOriginalAlbum;
    FilterAlbum *mFilterAlbum;
    BOOL mDidInitialPositioning;
    BOOL mSelectionChangeInProgress;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)updateData:(BOOL)fp8;
- (void)releaseCurrent;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)becomeCurrent;
- (void)calendarSelectionChanged:(id)fp8;
- (float)titleInset;
- (float)minimumHeight;

@end

@interface EtchedButton : BackgroundButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface EtchedButtonCell : BackgroundButtonCell
{
}

+ (void)_drawEtchedText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28 shadowColor:(id)fp32;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface GradientView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface PLHolder : NSObject
{
    struct IPPhotoList *mPhotoList;
}

+ (id)hold:(struct IPPhotoList *)fp8;
+ (id)holdNoCopy:(struct IPPhotoList *)fp8;
- (id)initWithPhotoList:(struct IPPhotoList *)fp8;
- (id)initWithPhotoListNoCopy:(struct IPPhotoList *)fp8;
- (void)dealloc;
- (struct IPPhotoList *)photoList;
- (void)setPhotoList:(struct IPPhotoList *)fp8;

@end

@interface ImageSlider : NSControl
{
    NSImage *mBackground;
    NSImage *mKnob;
    NSImage *mOptionOneOffImage;
    NSImage *mOptionOneOnImage;
    NSImage *mOptionTwoOffImage;
    NSImage *mOptionTwoOnImage;
    struct _NSRect mTrackRect;
    struct _NSRect mSecondTrackRect;
    struct _NSRect mKnobBounds;
    struct _NSRect mKnobRect;
    struct _NSRect mSecondSliderKnobRect;
    struct _NSRect mOptionOneRect;
    struct _NSRect mOptionTwoRect;
    float mCurrentValue;
    float mSecondSliderCurrentValue;
    float mMinValue;
    float mSecondSliderMinValue;
    float mMaxValue;
    float mSecondSliderMaxValue;
    SEL mAction;
    SEL mSecondSliderAction;
    SEL mDownAction;
    SEL mSecondSliderDownAction;
    SEL mUpAction;
    SEL mSecondSliderUpAction;
    SEL mOptionOneAction;
    SEL mOptionTwoAction;
    id mTarget;
    BOOL mIsChanging;
    BOOL mIsContinuous;
    BOOL mWholeNumbersOnly;
    float mKnobOffset;
    BOOL mOptionOneOn;
    BOOL mOptionTwoOn;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (BOOL)isOpaque;
- (BOOL)isContinuous;
- (void)setIsContinuous:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setAction:(SEL)fp8;
- (void)setMouseUpAction:(SEL)fp8;
- (void)setMouseDownAction:(SEL)fp8;
- (void)setOptionOneAction:(SEL)fp8;
- (void)setOptionTwoAction:(SEL)fp8;
- (void)setOptionOneOn:(BOOL)fp8;
- (void)setOptionTwoOn:(BOOL)fp8;
- (void)setTarget:(id)fp8;
- (void)setBackground:(id)fp8;
- (void)setKnob:(id)fp8;
- (void)setOptionOneOnImage:(id)fp8 offImage:(id)fp12;
- (void)setOptionTwoOnImage:(id)fp8 offImage:(id)fp12;
- (void)setTrackRect:(struct _NSRect)fp8;
- (void)setOptionOneRect:(struct _NSRect)fp8;
- (void)setOptionTwoRect:(struct _NSRect)fp8;
- (float)floatValue;
- (void)setCurrentValue:(float)fp8;
- (void)setMinValue:(float)fp8;
- (float)minValue;
- (void)setMaxValue:(float)fp8;
- (float)maxValue;
- (void)_adjustValueByMovingKnob:(float)fp8;
- (float)_trackPointForValue:(float)fp8;
- (void)setKnobOffset:(float)fp8;
- (void)setWholeNumbersOnly:(BOOL)fp8;
- (float)_valueForTrackPoint:(float)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isChanging;
- (void)setSecondSliderTrackRect:(struct _NSRect)fp8;
- (float)floatValueForSecondSlider;
- (void)setCurrentValueForSecondSlider:(float)fp8;
- (void)setSecondSliderMinValue:(float)fp8;
- (float)secondSliderMinValue;
- (float)secondSliderMaxValue;
- (void)setSecondSliderMaxValue:(float)fp8;
- (void)setSecondSliderAction:(SEL)fp8;
- (void)setSecondSliderMouseUpAction:(SEL)fp8;
- (void)setSecondSliderMouseDownAction:(SEL)fp8;
- (float)_valueForSecondSliderTrackPoint:(float)fp8;
- (void)_adjustSecondSliderValueByMovingKnob:(float)fp8;
- (float)_trackPointForSecondSliderValue:(float)fp8;
- (void)dealloc;

@end

@interface IPImageElement : IPPageElement
{
    struct IPPhotoInfo *mPhotoInfo;
    struct _NSRect mVisibleRect;
    BOOL mUsingThumbForSized;
    struct CGSize mImageSize;
    struct CGSize mSizedImageSourceSize;
    struct CGRect mSizedImageCropRect;
    float mSizedImageScale;
    float mSizedImageZoom;
    BOOL mSizedImageFit;
    BOOL mSizedImageFlip;
    unsigned long mSizedImageKey;
    BOOL mIsLowQuality;
    BOOL mDrewCorrectResolution;
    BOOL mExposureEnabled;
    float mExposure;
    BOOL mContrastEnabled;
    float mContrast;
    BOOL mSaturationEnabled;
    float mSaturation;
    int mSaturationVersion;
    BOOL mVibrancyEnabled;
    float mVibrancy;
    BOOL mDefinitionEnabled;
    float mDefinition;
    BOOL mHighlightsEnabled;
    float mHighlights;
    BOOL mShadowsEnabled;
    float mShadows;
    int mHighlightsShadowsVersion;
    BOOL mTemperatureEnabled;
    float mTemperature;
    BOOL mTintEnabled;
    float mTint;
    BOOL mNoiseEnabled;
    float mNoise;
    BOOL mBlackAndWhiteEnabled;
    BOOL mSepiaEnabled;
    BOOL mAntiqueEnabled;
    BOOL mBoostEnabled;
    BOOL mFadeEnabled;
    BOOL mGloomEnabled;
    float mGloomIntensity;
    float mGloomRadius;
    BOOL mBloomEnabled;
    float mBloomIntensity;
    float mBloomRadius;
    BOOL mPosterizeEnabled;
    float mPosterizeLevels;
    BOOL mSharpenEnabled;
    float mSharpenScale;
    int mHImageAlignment;
    int mVImageAlignment;
    ExposureFilter *mExposureFilter;
    ContrastFilter *mContrastFilter;
    HighlightShadow *mHighlightsShadowsFilter;
    SaturationFilter *mSaturationFilter;
    VibrancyFilter *mVibrancyFilter;
    DefinitionFilter *mDefinitionFilter;
    ColorCorrectionFilter *mTemperatureFilter;
    TintFilter *mTintFilter;
    NoiseFilter *mNoiseFilter;
    BlackAndWhiteFilter *mBlackAndWhiteFilter;
    SepiaFilter *mSepiaFilter;
    SharpnessFilter *mSharpnessFilter;
    CIFilter *mGloomFilter;
    CIFilter *mBloomFilter;
    CIFilter *mPosterizeFilter;
    EditFilter *mAntiqueFilter;
    EditFilter *mBoostFilter;
    EditFilter *mFadeFilter;
}

- (BOOL)isImageElement;
- (id)initWithPhoto:(struct IPPhotoInfo *)fp8;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillPasteboard:(id)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (BOOL)isLowQuality:(BOOL)fp8;
- (void)setPhotoInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)drewCorrectResolution;
- (void)setImageSize:(struct CGSize)fp8;
- (struct CGSize)imageSize;
- (int)horizontalAlignment;
- (int)verticalAlignment;
- (void)setFitToSize:(BOOL)fp8;
- (float)imageAspectRatio;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)shouldZoom;
- (void)setZoom:(float)fp8;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (void)setPan:(struct _NSPoint)fp8;
- (struct _NSPoint)maxPan;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (void)preparePanZoom;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (BOOL)drawsHighlightBorder;
- (BOOL)animationRequiresAlpha;
- (struct _NSRect)_imageDrawingRect:(float)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (struct CGRect)imageDrawRectAtScale:(float)fp8 origin:(struct _NSPoint)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawImageInContext:(struct CGContext *)fp8 forView:(id)fp12 inRect:(struct CGRect)fp16 pan:(struct _NSPoint)fp32 clipOrigin:(struct _NSPoint)fp40 clipScale:(float)fp48 resolution:(int)fp52;
- (void)clearFilters;
- (id)filteredImageForCoreImage:(id)fp8 size:(struct CGSize)fp12 includeEffects:(BOOL)fp20 resolution:(int)fp24 scale:(float)fp28;
- (struct _NSRect)drawingRectWithSelection:(float)fp8;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)hasImageFilters;
- (void)swapImageAdjustmentsWithElement:(id)fp8;
- (void)encodeImageAdjustmentsInDictionary:(id)fp8;
- (void)takeImageAdjustmentsFromDictionary:(id)fp8;
- (id)exposureFilter;
- (float)exposure;
- (void)setExposure:(float)fp8;
- (BOOL)exposureEnabled;
- (id)contrastFilter;
- (float)contrast;
- (void)setContrast:(float)fp8;
- (BOOL)contrastEnabled;
- (id)definitionFilter;
- (float)definition;
- (void)setDefinition:(float)fp8;
- (BOOL)definitionEnabled;
- (id)highlightsShadowsFilter;
- (float)highlights;
- (void)setHighlights:(float)fp8;
- (BOOL)highlightsEnabled;
- (float)shadows;
- (void)setShadows:(float)fp8;
- (BOOL)shadowsEnabled;
- (id)vibrancyFilter;
- (float)vibrancy;
- (void)setVibrancy:(float)fp8;
- (BOOL)vibrancyEnabled;
- (id)saturationFilter;
- (float)saturation;
- (void)setSaturation:(float)fp8;
- (BOOL)saturationEnabled;
- (id)temperatureFilter;
- (float)temperature;
- (void)setTemperature:(float)fp8;
- (BOOL)temperatureEnabled;
- (id)tintFilter;
- (float)tint;
- (void)setTint:(float)fp8;
- (BOOL)tintEnabled;
- (id)noiseFilter;
- (float)noise;
- (void)setNoise:(float)fp8;
- (BOOL)noiseEnabled;
- (id)blackAndWhiteFilter;
- (BOOL)blackAndWhiteEnabled;
- (void)setBlackAndWhiteEnabled:(BOOL)fp8;
- (id)sepiaFilter;
- (BOOL)sepiaEnabled;
- (void)setSepiaEnabled:(BOOL)fp8;
- (id)antiqueFilter;
- (BOOL)antiqueEnabled;
- (void)setAntiqueEnabled:(BOOL)fp8;
- (id)boostFilter;
- (BOOL)boostEnabled;
- (void)setBoostEnabled:(BOOL)fp8;
- (id)fadeFilter;
- (BOOL)fadeEnabled;
- (void)setFadeEnabled:(BOOL)fp8;
- (id)gloomFilter;
- (float)gloomIntensity;
- (float)gloomRadius;
- (BOOL)gloomEnabled;
- (void)setGloomEnabled:(BOOL)fp8;
- (id)bloomFilter;
- (float)bloomIntensity;
- (float)bloomRadius;
- (BOOL)bloomEnabled;
- (void)setBloomEnabled:(BOOL)fp8;
- (id)posterizeFilter;
- (float)posterizeLevels;
- (BOOL)posterizeEnabled;
- (void)setPosterizeEnabled:(BOOL)fp8;
- (id)sharpnessFilter;
- (float)sharpenScale;
- (void)setSharpenScale:(float)fp8;
- (BOOL)sharpenEnabled;
- (void)resetAdjustments;
- (void)removeEffects;
- (void)clearElementCache:(BOOL)fp8;
- (void)unloadCachedObjects;
- (struct CGSize)_imageLoadSize:(float)fp8;
- (void)_ensureCropRect;
- (void)_checkImageQuality;
- (BOOL)validate:(id)fp8;
- (void)prepareForDealloc;
- (void)dealloc;

@end

@interface ALHolder : NSObject
{
    struct IPAlbumList *mAlbumList;
}

+ (id)hold:(struct IPAlbumList *)fp8;
- (id)initWithAlbumList:(struct IPAlbumList *)fp8;
- (void)dealloc;
- (struct IPAlbumList *)albumList;

@end

@interface FolderAlbum : Album
{
    struct set<Album*, std::less<Album*>, std::allocator<Album*>> *mChildrenNeedingSynch;
    BOOL mChildChanged;
    struct PhotosCountMap *mPhotosMap;
}

- (id)init;
- (id)initWithAlbum:(id)fp8 staticCopy:(BOOL)fp12;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;
- (void)dealloc;
- (void)initWithDictionary:(id)fp8;
- (BOOL)computesPhotos;
- (BOOL)photosAreComputed;
- (BOOL)hasPhoto:(struct IPPhotoInfo *)fp8;
- (void)addChild:(id)fp8;
- (void)removeChild:(id)fp8;
- (void)_photoListOutOfSynch:(id)fp8;
- (BOOL)_checkPhotoListSynch;
- (void)_synch;
- (struct IPPhotoList *)_unsortedArrayNoCopy;
- (void)_child:(id)fp8 changedPhotos:(struct PhotosCountMap *)fp12;
- (struct PhotosCountMap *)photosCountMap;
- (void)_removePhoto:(struct IPPhotoInfo *)fp8;
- (void)removeAll;

@end

@interface ToolbarClippedItemsIndicator : NSPopUpButton
{
    NSArray *_clippedItems;
    BOOL _cachedMenuIsValid;
}

+ (void)initialize;
+ (BOOL)isItemShownInPopupIfSoleEntry:(id)fp8;
- (void)_initClipIndicatorImage;
- (id)init;
- (void)dealloc;
- (BOOL)hasItemsToDisplayInPopUp;
- (void)_computeMenuForClippedItems;
- (BOOL)validateMenuItem:(id)fp8;
- (void)_simpleOverflowMenuItemClicked:(id)fp8;
- (void)_computeMenuForClippedItemsIfNeeded;
- (void)_willPopUpNotification:(id)fp8;
- (void)_updateMenuForClippedItems;
- (void)setClippedItems:(id)fp8;
- (id)clippedItems;
- (id)_clipViewAncestor;
- (void)becomeKeyWindow;
- (void)resignKeyWindow;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)acceptsFirstResponder;
- (BOOL)needsPanelToBecomeKey;
- (void)moveRight:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)performClick:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface _ToolbarClippedItemsIndicatorCell : NSPopUpButtonCell
{
}

- (struct _NSRect)imageRectForBounds:(struct _NSRect)fp8;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;
- (void)drawImageWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ButtonGradientControl : NSControl
{
    BOOL mPressed;
    float mLeftInset;
    float mRightInset;
    SEL mAction;
    id mTarget;
    NSImage *mFillNormal;
    NSImage *mFillPressed;
    NSImage *mLeftNormal;
    NSImage *mLeftPressed;
    NSImage *mRightNormal;
    NSImage *mRightPressed;
    BOOL mImmediateMode;
    NSEvent *mCurrentEvent;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setImmediateMode:(BOOL)fp8;
- (id)currentEvent;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;

@end

@interface BlankInfo : InfoView
{
}

@end

@interface KeywordInfo : InfoView
{
    NSButton *mPageUpButton;
    NSButton *mPageDownButton;
    NSView *mTitleView;
    NSView *mButtonContainerView;
    ButtonGradientControl *mGradientButton;
    NSTextField *mCategoryText;
    ArchiveController *mArchiveController;
    KeywordMgr *mKeywordMgr;
    KeywordButton *mResetButton;
    int mNumRealButtons;
    int mNumFillerButtons;
    int mVerticalButtonScrollPosition;
    BOOL mInSearch;
    BOOL mSearchUsingOR;
    NSMutableDictionary *mSavedSearch;
    NSString *mKeywordsText;
    Album *mOriginalAlbum;
    FilterAlbum *mFilterAlbum;
    char *mSelectionChangeInProgress;
}

- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (id)_addButton:(id)fp8 withSpecialIcon:(id)fp12 toggle:(BOOL)fp16;
- (void)_addFillerButton;
- (void)_removeButtons;
- (void)_layoutButtons;
- (void)_addFillerButtons;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (float)titleInset;
- (float)minimumHeight;
- (void)keywordButtonPressed:(id)fp8;
- (void)keywordButtonShiftPressed:(id)fp8;
- (BOOL)keywordButtonReceviedDrag:(id)fp8 drag:(id)fp12 optionKeyDown:(BOOL)fp16;
- (void)scrollWheel:(id)fp8;
- (void)pageUpPressed:(id)fp8;
- (void)pageDownPressed:(id)fp8;
- (void)categorySelected:(id)fp8;
- (void)categorySelectPressed:(id)fp8;
- (void)_scrollWithAnimation:(int)fp8;
- (float)snapSizeForHeight:(float)fp8;
- (float)snapIncrement;
- (void)viewWillStartLiveResize;
- (void)updateKeywordTitles:(id)fp8;
- (void)cancelSearch;
- (BOOL)isSearching;
- (void)clearSelection;
- (void)clearSelectionExcept:(int)fp8;
- (void)setOrSearching:(BOOL)fp8;
- (int)_indexOfButton:(id)fp8;
- (void)beginAnimation;
- (void)endAnimation;
- (void)updateData:(BOOL)fp8;
- (void)selectionChanged:(id)fp8;
- (void)_searchForSelectedKeywords;
- (void)_saveSearch;
- (void)_restoreSavedSearch;

@end

@interface ImportDisplay : IPViewController
{
    ImportView *mImportView;
    BackgroundColorView *mCameraPlacard;
    BackgroundColorView *mPlacardBackground;
    NSTextField *mFromDateText;
    NSTextField *mToDateText;
    NSTextField *mAggregateDateText;
    NSTextField *mCountText;
    NSTextField *mProgressText;
    ImportImageView *mThumbnail;
    NSPanel *mMapPanel;
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlayView;
    NSTextField *mRollNameText;
    NSTextField *mRollDescriptionText;
    IPToolbarItem *mEraseCheckbox;
    IPToolbarItem *mImportButton;
    IPToolbarItem *mProgressItem;
    IPToolbarItem *mSelectiveImportButton;
    ImportAlbum *mCurrentAlbum;
    ImportSession2 *mCurrentSession;
    ICObject *mCamera;
    PhotoCD *mPhotoCD;
    struct IPImage *mDefaultCameraThumbnail;
    struct IPImage *mDefaultPhotoCDThumbnail;
    struct IPImage *mDefaultIPodThumbnail;
    struct IPImage *mPreviewThumbnail;
    NSProgressIndicator *mLoadingProgress;
    long mRemainingCount;
    long mLastRemaining;
    unsigned long _totalCount;
    unsigned long _importedCount;
    BOOL _beganImporting;
    BOOL mNeedsUpdate;
    struct MessageReceiver mAlbumMessageReceiver;
    double mLastPreviewTime;
    NSMutableArray *mMapMarkers;
}

- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)needsUpdate;
- (void)setNeedsUpdate:(BOOL)fp8;
- (id)camera;
- (void)setCamera:(id)fp8;
- (id)photoCD;
- (void)setPhotoCD:(id)fp8;
- (id)currentAlbum;
- (void)setCurrentAlbum:(id)fp8;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)_loadNib;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)handleMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_loadPreferences:(id)fp8;
- (void)toggleAdvancedImport:(id)fp8;
- (void)toggleEraseCheckbox:(id)fp8;
- (BOOL)importInProgress;
- (void)_setRemainingCount:(id)fp8;
- (void)import:(id)fp8;
- (void)_albumCountChanged;
- (void)_updateUI;
- (void)_updateDate;
- (void)_updateLoadingProgress;
- (void)_updateCount;
- (void)_updateImportButton;
- (void)_updateDeleteCheckbox;
- (id)_eraseMediaTitle;
- (void)_importCompleted:(id)fp8;
- (void)_dbBeginUpdate:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_finishingImport:(id)fp8;
- (void)_pauseImport:(id)fp8;
- (void)_resumeImport:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)_setPreviewThumbnailObj:(id)fp8;
- (void)_setPreviewThumbnail:(struct IPImage *)fp8;
- (void)_importProgress:(id)fp8;
- (id)updateStatus;

@end

@interface ImportAlbum : Album
{
    BOOL mAdvancedImport;
    BOOL mSupportsEject;
    BOOL mSupportsDelete;
    BOOL mShowDelete;
    BOOL mImporting;
    int mMediaType;
    NSString *mFromDate;
    NSString *mToDate;
    NSString *mAggregateDate;
}

- (void)dealloc;
- (BOOL)importing;
- (void)setImporting:(BOOL)fp8;
- (BOOL)advancedImport;
- (void)setAdvancedImport:(BOOL)fp8;
- (BOOL)supportsEject;
- (void)setSupportsEject:(BOOL)fp8;
- (BOOL)supportsDelete;
- (void)setSupportsDelete:(BOOL)fp8;
- (BOOL)showDelete;
- (void)setShowDelete:(BOOL)fp8;
- (BOOL)isRemovable;
- (BOOL)isEjectable;
- (int)mediaType;
- (void)setMediaType:(int)fp8;
- (Class)progressIndicatorClass;
- (id)fromDate;
- (void)setFromDate:(id)fp8;
- (id)toDate;
- (void)setToDate:(id)fp8;
- (id)aggregateDate;
- (void)setAggregateDate:(id)fp8;

@end

@interface KeywordButton : NSButton
{
    SEL mAction;
    SEL mShiftAction;
    id mTarget;
    SEL mDragAction;
    BOOL mPressed;
    BOOL mShiftPressed;
    BOOL mInDrag;
    BOOL mOptionKeyDownInDrag;
    BOOL mDragInvalid;
    NSWindow *mDraggingTooltipWindow;
    BOOL mToggle;
    BOOL mHideTitle;
    NSImage *mSpecialIcon;
    int mPictureCount;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)mouseDown:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (void)setShiftAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (void)setDragAction:(SEL)fp8;
- (void)setShiftPressed:(BOOL)fp8;
- (void)setPictureCount:(int)fp8;
- (void)_setCursor;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)isResetButton;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)_doneDraggingTooltip;
- (void)_createDraggingTooltipForItemCount:(int)fp8;

@end

@interface IPSlideshow : NSObject
{
    Album *mSlideshowAlbum;
    BOOL mIsModified;
    NSMutableArray *mSlides;
    long mLastViewedSlideIndex;
    IPSlideshowSettings *mSlideshowSettings;
    BOOL mDirty;
    long mSelectedCount;
    long *mSelectedIndices;
}

- (id)initWithAlbum:(id)fp8;
- (id)initWithDictionary:(id)fp8 db:(id)fp12 album:(id)fp16;
- (void)dealloc;
- (void)encodeWithDictionary:(id)fp8;
- (id)db;
- (id)album;
- (id)albumForSlideIndex:(long)fp8;
- (id)dbForSlideIndex:(long)fp8;
- (BOOL)imageKeyForSlideIndex:(long)fp8 key:(unsigned int *)fp12;
- (id)slideshowSettings;
- (void)setSlideshowSettings:(id)fp8;
- (id)settingsForSlideIndex:(long)fp8;
- (id)slides;
- (void)add:(id)fp8;
- (void)removeSlideAtIndex:(long)fp8;
- (BOOL)hasSlideWithKey:(unsigned long)fp8;
- (BOOL)removeSlideWithKey:(unsigned long)fp8;
- (void)setDirty:(BOOL)fp8;
- (BOOL)dirty;
- (long)slideCount;
- (long)lastViewedSlideIndex;
- (void)setLastViewedSlideIndex:(long)fp8;
- (BOOL)isModified;
- (void)markAsModified;
- (void)clearModified;
- (void)setSelectedIndices:(long *)fp8 count:(long)fp12;
- (void)getSelectedIndices:(long **)fp8 count:(long *)fp12;
- (id)delegate;

@end

@interface IPSlide : NSObject
{
    unsigned int mKey;
    IPSlideshowSettings *mSettings;
    int mFaceCount;
    struct CGRect mFacesRect;
}

- (id)initWithKey:(unsigned long)fp8;
- (id)initWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)encodeWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)dealloc;
- (unsigned long)key;
- (void)setKey:(unsigned long)fp8;
- (id)slideshowSettings;
- (void)setSlideshowSettings:(id)fp8;

@end

@interface IPSlideshowController : IPViewController <IPMarimbaOptionsDelegate>
{
    IPMarimbaSlideshow *_slideshow;
    IPMarimbaView *_slideshowView;
    IPMarimbaBackgroundView *_fillerView;
    IPSlideThumbView *mSlideThumbView;
    NSScrollView *mThumbViewScrollView;
    NSView *mSlideshowThumbParent;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mPreviewToolbarItem;
    IPToolbarItem *mUserSelectStyleItem;
    IPToolbarItem *mPreviewButtonItem;
    IPToolbarItem *mMusicToolbarButton;
    IPToolbarItem *mSettingsToolbarItem;
    IPToolbarItem *mExportToolbarItem;
    NSTimer *mPlayTimer;
    BOOL mAwakened;
    BOOL mDontReallyRebuildView;
    BOOL mIsInKenBurnsEditMode;
    MPEffectContainer *mSelectedEffectContainer;
    IPMarimbaHUDController *mHUDController;
    IPMarimbaExporter *mExporter;
    NSImageView *mResizeImageView;
    BOOL _isWarmingUp;
    IPMarimbaLoadingWindow *mLoadingWindow;
}

- (void)awakeFromNib;
- (id)slideThumbView;
- (id)slideshow;
- (id)db;
- (id)album;
- (void)resetSlideshow;
- (id)slideshowView;
- (id)mainWindow;
- (void)styleDidChange:(id)fp8;
- (int)cropTypeForSlide:(id)fp8;
- (void)optionsCancelled;
- (void)slideOrderDidChange;
- (void)optionsPlayed;
- (id)screen;
- (void)needsRerender;
- (void)slidesNeedUpdate;
- (id)visibleSlides;
- (BOOL)isPlaying;
- (BOOL)allowThemeSelection;
- (void)pause;
- (void)kenBurnsStateDidChange;
- (void)aspectRatioDidChange;
- (void)timingDidChange;
- (void)_clearSelectedContainer;
- (void)jumpToTitleSlide;
- (void)_moveToTitle;
- (void)_moveTimeToCurrentSlide;
- (void)keyDown:(id)fp8;
- (void)userSelectStyleButtonAction:(id)fp8;
- (void)previewSlideshowButtonAction:(id)fp8;
- (void)playTimerFire:(id)fp8;
- (void)_stopPreview;
- (long)firstSelection;
- (void)playCurrentSlideshowWithApplescriptMode:(int)fp8;
- (void)playSlideButtonAction:(id)fp8;
- (void)slideMusicButtonAction:(id)fp8;
- (void)slideshowSettingsButtonAction:(id)fp8;
- (void)_redoRemoveSelectedPhotos:(id)fp8;
- (void)_undoRemoveSelectedPhotos:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)removeSelectedPhotos;
- (void)markAsModifiedSansRebuild;
- (void)_selectSlideOfPhoto:(struct IPPhotoInfo *)fp8;
- (void)_reconnectTransitions;
- (void)_disconnectTransitions;
- (id)_previousEffectContainerFromContainer:(id)fp8;
- (void)_updateSlideshowViewToNewSelection;
- (void)_selectionChanged:(long)fp8;
- (void)thumbViewSelectionChanged:(id)fp8 photoIndex:(long)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (void)thumbViewMovePhotos:(id)fp8 photos:(struct IPPhotoList *)fp12 toIndex:(long)fp16;
- (void)thumbViewFinishedMove:(id)fp8;
- (void)_forceSlideshowOrderOnAlbum;
- (void)selectNextSlideButtonAction:(id)fp8;
- (void)selectPreviousSlideButtonAction:(id)fp8;
- (void)rebuildView;
- (void)_warmupRenderer;
- (void)_warmupRendererThread;
- (BOOL)hasHUDs;
- (void)closeHUDs;
- (struct _NSRect)_rectToFitIn:(struct _NSRect)fp8 withAspectRatio:(float)fp24;
- (void)_rescaleSlideshowViewForAspectRatio;
- (void)_showResizeViewWithImage:(id)fp8;
- (void)_hideResizeImageView;
- (void)teardown;
- (void)showCustomControls:(id)fp8;
- (void)windowDidResignMain:(id)fp8;
- (void)frameDidChange:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)installCurrentAlbum;
- (void)fullScreenPreviewDidEnd:(id)fp8;
- (void)currentAlbumDidSwitchFromOldAlbum:(id)fp8 toNewAlbum:(id)fp12;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)prepareToEdit;
- (void)_slideClicked:(id)fp8;
- (void)_slideDoubleClicked:(id)fp8;
- (void)slideImageDoubleClicked;
- (void)_thumbViewSelectionToSlideshow;
- (id)updateStatus;
- (BOOL)validateMenuItem:(id)fp8;
- (int)slideCount;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)beatDetectionDidStart:(id)fp8;
- (void)beatDetectionDidEnd:(id)fp8;
- (void)_showLoading;
- (void)_closeLoading;
- (void)userCanceled;
- (void)clearSelection;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (void)selectAll;
- (void)selectNone;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)_updateSlideSettingsForSlide:(id)fp8;
- (void)updateSizer:(float)fp8;
- (void)_updateSlider;
- (BOOL)supportsResizeSlider;
- (void)dealloc;
- (void)exportSlideshowAction:(id)fp8;
- (void)exporterDidFinish;
- (void)_loadNib;

@end

@interface IPMarimbaView : MRMarimbaView
{
    IPSlideshowController *_controller;
    NSString *_draggedLayerID;
    IPMarimbaTextEditor *_textEditor;
    struct _NSPoint _origLocalMouseLoc;
    float _origRotationAngle;
}

- (void)mouseDown:(id)fp8;
- (void)removeFromSuperview;
- (void)viewDidMoveToWindow;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)becomeFirstResponder;
- (void)mouseMoved:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)setSlideshowController:(id)fp8;
- (BOOL)beginEditingTextElement:(id)fp8 inContainer:(id)fp12 clickAt:(struct CGPoint)fp16 vertices:(struct CGPoint (*)[4])fp24;
- (void)endEditingTextElement:(id)fp8 inContainer:(id)fp12;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (id)_image;
- (void)endTextEditing;
- (void)reshape;

@end

@interface IPSlideThumbView : IPThumbView
{
    IPMarimbaSlideshow *_slideshow;
}

- (void)clearController;
- (long)_indexForPhotoInto:(struct IPPhotoInfo *)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (id)getImageDB;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)performKeyEquivalent:(id)fp8;
- (BOOL)keyDownIgnoresShiftKey;
- (void)doDeleteKey;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)layoutThumbs:(BOOL)fp8;
- (void)_fillPasteboardWithSelection:(id)fp8 useSecondary:(BOOL)fp12;
- (BOOL)fillPasteboardWithSelectionDeclaresThumbPBoardType;
- (void)thumbWillRemove:(long)fp8;
- (void)thumbDidInterject:(long)fp8;
- (BOOL)allowDragReorder;

@end

@interface IPImageView : NSView
{
    struct IPImage *mImage;
    BOOL mDropShadow;
}

- (void)dealloc;
- (struct IPImage *)image;
- (void)setImage:(struct IPImage *)fp8;
- (BOOL)dropShadow;
- (void)setDropShadow:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface CPlusObjectHolder : NSObject
{
    void *mObject;
    int mType;
}

+ (id)hold:(void *)fp8;
+ (id)hold:(void *)fp8 type:(int)fp12;
- (id)initWithObject:(void *)fp8;
- (id)initWithObject:(void *)fp8 type:(int)fp12;
- (void *)object;
- (int)type;

@end

@interface IPSlideshowSettings : NSObject
{
    float mZoom;
    float mPanX;
    float mPanY;
    BOOL mAnimatePanAndZoom;
    float mAnimationStartTime;
    float mAnimationEndTime;
    float mEndZoom;
    float mEndPanX;
    float mEndPanY;
    NSString *mTransitionName;
    NSString *mTransitionIdentifier;
    float mTransitionSpeed;
    int mTransitionDirection;
    NSString *mEffectName;
    NSString *mEffectIdentifier;
    int mSecondsPerSlide;
    unsigned long mUseDefaultFlags;
    BOOL mFillScreen;
    BOOL mRandomOrder;
    BOOL mLoop;
    BOOL mUseTitles;
    float mFontSize;
    BOOL mUseRankings;
    BOOL mShowControls;
    BOOL mPlayMusic;
    BOOL mFitToMusic;
    BOOL mAutoPanAndZoom;
    float mPanAndZoomMaxZoom;
    NSString *mSongPath;
    NSString *mPlaylistName;
    int mSlideshowFormat;
}

+ (id)defaultTransitionIdentifier;
+ (id)defaultSettings;
+ (float)formatAspectRatio:(int)fp8 screenFrame:(struct _NSRect)fp12;
+ (struct _NSRect)screenFrame:(int)fp8 screen:(id)fp12;
- (id)init;
- (id)initWithAlbum:(id)fp8;
- (id)initWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (void)dealloc;
- (void)encodeWithDictionary:(id)fp8 baseSettings:(id)fp12;
- (id)copyWithDefaults;
- (void)setAutoPanAndZoom:(BOOL)fp8;
- (BOOL)autoPanAndZoom;
- (void)setPanAndZoomMaxZoom:(float)fp8;
- (float)panAndZoomMaxZoom;
- (void)setZoom:(float)fp8;
- (float)zoom;
- (void)setPanX:(float)fp8;
- (float)panX;
- (void)setPanY:(float)fp8;
- (float)panY;
- (void)setAnimatePanAndZoom:(BOOL)fp8;
- (BOOL)animatePanAndZoom;
- (void)setAnimationStartTime:(float)fp8;
- (float)animationStartTime;
- (void)setAnimationEndTime:(float)fp8;
- (float)animationEndTime;
- (void)setEndZoom:(float)fp8;
- (float)endZoom;
- (void)setEndPanX:(float)fp8;
- (float)endPanX;
- (void)setEndPanY:(float)fp8;
- (float)endPanY;
- (void)setUseDefaultFlags:(unsigned long)fp8;
- (unsigned long)useDefaultFlags;
- (void)setUseDefaultFlag:(unsigned long)fp8;
- (void)setUseDefaultFlagsExcept:(unsigned long)fp8;
- (BOOL)getUseDefaultFlag:(unsigned long)fp8;
- (void)clearUseDefaultFlag:(unsigned long)fp8;
- (BOOL)usingAllDefaultSettings;
- (void)setPlayMusic:(BOOL)fp8;
- (BOOL)playMusic;
- (void)setFitToMusic:(BOOL)fp8;
- (BOOL)fitToMusic;
- (void)setSongPath:(id)fp8;
- (id)songPath;
- (id)songTitle;
- (void)setPlaylistName:(id)fp8;
- (id)playlistName;
- (void)setTransitionName:(id)fp8 andID:(BOOL)fp12;
- (id)transitionName;
- (void)setTransitionIdentifier:(id)fp8;
- (id)transitionIdentifier;
- (BOOL)transitionIsNone;
- (void)setTransitionSpeed:(float)fp8;
- (float)transitionSpeed;
- (void)setTransitionDirection:(int)fp8;
- (int)transitionDirection;
- (void)setEffectName:(id)fp8;
- (id)effectName;
- (void)setEffectIdentifier:(id)fp8;
- (id)effectIdentifier;
- (void)setSecondsPerSlide:(int)fp8;
- (int)secondsPerSlide;
- (void)setFillScreen:(BOOL)fp8;
- (BOOL)fillScreen;
- (void)setRandomOrder:(BOOL)fp8;
- (BOOL)randomOrder;
- (void)setLoop:(BOOL)fp8;
- (BOOL)loop;
- (void)setUseTitles:(BOOL)fp8;
- (BOOL)useTitles;
- (void)setFontSize:(float)fp8;
- (float)fontSize;
- (void)setUseRankings:(BOOL)fp8;
- (BOOL)useRankings;
- (void)setShowControls:(BOOL)fp8;
- (BOOL)showControls;
- (void)setSlideshowFormat:(int)fp8;
- (int)slideshowFormat;
- (float)aspectRatioForImage;
- (struct _NSSize)imageSize;

@end

@interface DirectionView : NSView
{
    float mArrowWidth;
    float mArrowHeight;
    struct _NSRect mUpBounds;
    struct _NSRect mDownBounds;
    struct _NSRect mLeftBounds;
    struct _NSRect mRightBounds;
    BOOL mUpSupported;
    BOOL mDownSupported;
    BOOL mLeftSupported;
    BOOL mRightSupported;
    int mDirection;
    BOOL mIsGraphite;
    SEL mAction;
    id mTarget;
    NSBezierPath *mUpPath;
    NSBezierPath *mDownPath;
    NSBezierPath *mLeftPath;
    NSBezierPath *mRightPath;
    int mUpDirection;
    int mDownDirection;
    int mLeftDirection;
    int mRightDirection;
    int mNoDirection;
    struct _NSPoint mUpPt;
    struct _NSPoint mDownPt;
    struct _NSPoint mRightPt;
    struct _NSPoint mLeftPt;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setCompositePoints;
- (void)dealloc;
- (void)_clearPaths;
- (void)setFrame:(struct _NSRect)fp8;
- (id)_pathForDirection:(int)fp8;
- (id)_pathFromAngle:(float)fp8 toAngle:(float)fp12;
- (id)_bevelImage;
- (id)_upImage;
- (id)_downImage;
- (id)_leftImage;
- (id)_rightImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)disableAll;
- (void)enableAll;
- (void)enableVertical;
- (void)enableHorizontal;
- (void)disableUp;
- (void)disableDown;
- (void)disableLeft;
- (void)disableRight;
- (void)enableUp;
- (void)enableDown;
- (void)enableLeft;
- (void)enableRight;
- (void)setDirection:(int)fp8;
- (int)direction;
- (void)setValueForNone:(int)fp8 up:(int)fp12 down:(int)fp16 left:(int)fp20 right:(int)fp24;
- (void)setDirection:(int)fp8 notify:(BOOL)fp12;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseUp:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (void)initializeArt;
- (id)imageForIndex:(int)fp8;

@end

@interface NSView (ImprovedView)
- (void)improvedSetFrame:(struct _NSRect)fp8 needsDisplay:(BOOL)fp24;
- (void)improvedSetFrameOrigin:(struct _NSPoint)fp8 needsDisplay:(BOOL)fp16;
- (void)improvedSetFrameSize:(struct _NSSize)fp8 needsDisplay:(BOOL)fp16;
@end

@interface SlideshowAlbum : Album
{
    struct SqSlideshowAlbum *mSqSlideshowAlbum;
    IPMarimbaSlideshow *_marimbaSlideshow;
}

- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqSlideshowAlbum *)sqSlideshowAlbum;
- (void)saveSlideshowToDatabase;
- (id)init;
- (void)newSlideshow;
- (id)initWithAlbum:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (unsigned int)aeAlbumType;
- (id)slideshowDict;
- (void)encodeWithDictionary:(id)fp8;
- (id)slideshow;
- (void)setSlideshow:(id)fp8;
- (void)_slideshowContentsChanged:(id)fp8;
- (void)dealloc;
- (void)setName:(id)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (struct IPPhotoList *)slideshowPhotoList;
- (BOOL)remove:(struct IPPhotoInfo *)fp8;
- (void)removeWithArray:(struct IPPhotoList *)fp8;
- (void)add:(struct IPPhotoInfo *)fp8;
- (BOOL)addUnique:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (void)addWithArray:(struct IPPhotoList *)fp8;
- (void)forceSlideshowOrderOnAlbum;
- (BOOL)allowsMovies;
- (BOOL)repeatSlideShow;
- (BOOL)backgroundMusicEnabled;
- (BOOL)slideShowUseTitles;
- (int)secondsPerSlide;
- (id)slideshowSongPath;
- (id)slideshowPlaylistName;
- (int)slideShowTransitionDirection;
- (id)slideshowTransitionIdentifier;
- (float)slideShowTransitionSpeed;

@end

@interface IPPage : NSObject
{
    BOOL mSizedForCover;
    struct _NSPoint mElementOriginOffset;
    IPBook *mParent;
    struct _NSSize mPageSize;
    float mBindingMargin;
    NSString *mPageDesignTag;
    NSString *mOriginalPageDesignTag;
    NSString *mBackgroundPageDesignTag;
    IPPage *mBackgroundPage;
    NSArray *mAlternativePageDesigns;
    BOOL mFavorAlternativePages;
    NSString *mIncreasedHoleCountPage;
    NSString *mDecreasedHoleCountPage;
    NSString *mRotationPage;
    NSString *mBackCoverPage;
    NSMutableArray *mElements;
    NSMutableArray *mHoleElements;
    NSMutableArray *mGuideElements;
    NSString *mPageType;
    NSString *mOriginalPageType;
    int mTotalHoleCount;
    BOOL mReverseHoleOrder;
    NSArray *mHoleOrder;
    NSMutableArray *mSelectedElements;
    NSString *mBackgroundImageName;
    NSString *mBackground2ImageName;
    NSString *mBackground3ImageName;
    float mBackgroundImageAlpha;
    float mBackground2ImageAlpha;
    float mBackground3ImageAlpha;
    BOOL mMirrorBackgroundHorizontal;
    BOOL mMirrorBackground2Horizontal;
    BOOL mMirrorBackground3Horizontal;
    BOOL mMirrorBackgroundVertical;
    BOOL mMirrorBackground2Vertical;
    BOOL mMirrorBackground3Vertical;
    NSString *mPageIconName;
    NSImage *mPageIcon;
    NSImage *mPageIconBackground;
    struct CGLayer *mPageImageCache;
    NSString *mBackgroundThumbnailName;
    NSString *mBackground2ThumbnailName;
    NSString *mBackground3ThumbnailName;
    float mBackgroundTileWidth;
    float mBackground2TileWidth;
    float mBackground3TileWidth;
    float mBackgroundTileHeight;
    float mBackground2TileHeight;
    float mBackground3TileHeight;
    float mBackgroundTileRotation;
    float mBackground2TileRotation;
    float mBackground3TileRotation;
    int mBackgroundMethod;
    int mBackground2Method;
    int mBackground3Method;
    NSColor *mBackgroundColor;
    NSColor *mBackgroundTextureColor;
    int mBackgroundTextureColorBlendMode;
    int mBackgroundBlendMode;
    int mBackground2BlendMode;
    int mBackground3BlendMode;
    BOOL mIsChanging;
    BOOL mIsPanning;
    BOOL mDisplayIsChanging;
    BOOL mEditingText;
    BOOL mIsTransient;
    BOOL mIsEndingPage;
    BOOL mIsRotated;
    BOOL mCanBeRotated;
    int mFrameOption;
    int mBackgroundOption;
    NSMutableDictionary *mBackgroundVariants;
    NSMutableArray *mPageNumberElements;
    NSMutableArray *mPreservedPageText;
    NSImage *mThumbnail;
    BOOL thumbIsDirty;
    NSLock *mThumbGenLock;
    BOOL mIsGeneratingThumb;
    IPPage *mEnclosingPage;
    NSMutableArray *mQueuedElementAddArray;
    BOOL mHasCheckedForClipping;
    BOOL mHasBeenAltered;
    float mMinAnimatedSceneDuration;
    float mAnimatedSceneDurationFactor;
    BOOL mAnimationIncludesBackground;
    float mLeftCropExtent;
    float mRightCropExtent;
    float mTopCropExtent;
    float mBottomCropExtent;
    BOOL mBackgroundDrawingDisabled;
}

+ (void)initialize;
+ (void)disableElementScaling:(BOOL)fp8;
- (id)init;
- (id)initWithBook:(id)fp8 elements:(id)fp12;
- (id)initWithPage:(id)fp8 forBook:(id)fp12;
- (void)takeContentsFromPage:(id)fp8 forBook:(id)fp12 notify:(BOOL)fp16;
- (void)encodeWithDictionary:(id)fp8 forArchive:(BOOL)fp12;
- (id)initWithDictionary:(id)fp8 forBook:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8;
- (void)restoreValuesFromDictionary:(id)fp8;
- (void)copyLegacyBookInfo:(id)fp8 forPage:(int)fp12;
- (BOOL)sizedForCover;
- (void)setElementOriginOffset:(struct _NSPoint)fp8;
- (struct _NSPoint)elementOriginOffset;
- (id)parent;
- (void)setParent:(id)fp8;
- (struct _NSSize)pageSize;
- (void)setPageSize:(struct _NSSize)fp8;
- (void)setPageSize:(struct _NSSize)fp8 scaleContent:(BOOL)fp16;
- (struct _NSRect)boundingBoxOfElements:(id)fp8;
- (void)rotatePage;
- (float)bindingMargin;
- (void)setBindingMargin:(float)fp8;
- (BOOL)isTransient;
- (void)setIsTransient:(BOOL)fp8;
- (BOOL)isEndingPage;
- (void)setIsEndingPage:(BOOL)fp8;
- (BOOL)isRotated;
- (void)setIsRotated:(BOOL)fp8;
- (BOOL)canBeRotated;
- (int)pageNumber;
- (BOOL)isCoverPage;
- (BOOL)isBackCoverPage;
- (BOOL)isCalendarPage;
- (BOOL)isScrapAreaPage;
- (BOOL)isInsideCoverPage;
- (BOOL)isFrontFlapPage;
- (BOOL)isBackFlapPage;
- (BOOL)isFlapPage;
- (BOOL)isFirstInsidePage;
- (BOOL)isLastInsidePage;
- (BOOL)isProductComponentPage;
- (BOOL)isBlankPage;
- (BOOL)hasEmptyPhotoBackground;
- (BOOL)isUserCustomizedPage;
- (BOOL)hasBeenAltered;
- (void)setHasBeenAltered:(BOOL)fp8;
- (BOOL)pageLaysToRight;
- (BOOL)pageLaysToLeft;
- (BOOL)pageLaysAbove;
- (BOOL)pageLaysBelow;
- (id)enclosingPage;
- (void)setEnclosingPage:(id)fp8;
- (id)pageDesign;
- (void)setPageDesign:(id)fp8 notify:(BOOL)fp12;
- (id)originalPageDesign;
- (void)setOriginalPageDesign:(id)fp8 notify:(BOOL)fp12;
- (id)alternativePageDesigns;
- (void)setAlternativePageDesigns:(id)fp8;
- (BOOL)favorAlternativePages;
- (id)increasedHoleCountPage;
- (void)setIncreasedHoleCountPage:(id)fp8;
- (id)decreasedHoleCountPage;
- (void)setDecreasedHoleCountPage:(id)fp8;
- (id)rotationPage;
- (void)setRotationPage:(id)fp8;
- (id)backCoverPage;
- (id)pageType;
- (void)setPageType:(id)fp8;
- (id)originalPageType;
- (BOOL)hasText;
- (int)totalHoleCount;
- (void)setTotalHoleCount:(int)fp8;
- (BOOL)hasEmptyHole;
- (int)emptyHoleCount;
- (id)pageIconWithInstructionText;
- (id)pageIcon;
- (id)pageIconBackground;
- (void)setPageIconBackground:(id)fp8;
- (void)clearPageIconBackground;
- (id)pageIconName;
- (BOOL)usesPhoto:(struct IPPhotoInfo *)fp8;
- (int)frameOption;
- (void)setFrameOption:(int)fp8;
- (int)backgroundOption;
- (void)setBackgroundOption:(int)fp8;
- (void)makeUserCustomizedPage;
- (void)revertToOriginal;
- (BOOL)shouldReverseHoleOrder;
- (void)setShouldReverseHoleOrder:(BOOL)fp8;
- (id)holeOrder;
- (id)elements;
- (id)allReferencedAssets;
- (void)addElement:(id)fp8 notify:(BOOL)fp12;
- (void)addElement:(id)fp8 atIndex:(int)fp12 notify:(BOOL)fp16;
- (void)addQueuedElements;
- (void)queueAddElement:(id)fp8;
- (void)addArtElementForImageNamed:(id)fp8 atLocation:(struct _NSPoint)fp12;
- (void)addElements:(id)fp8 notify:(BOOL)fp12;
- (void)addElementsForFiles:(id)fp8 atLocation:(struct _NSPoint)fp12;
- (void)removeAllElements;
- (void)removeElements:(id)fp8;
- (void)removeElement:(id)fp8 notify:(BOOL)fp12;
- (id)elementAtIndex:(unsigned int)fp8;
- (id)elementNamed:(id)fp8;
- (id)elementForPhotoElement:(struct IPPhotoInfo *)fp8;
- (int)indexOfPhotoElement:(struct IPPhotoInfo *)fp8;
- (int)indexOfElement:(id)fp8;
- (void)createHoleForElement:(id)fp8;
- (void)clearHoleElementCache;
- (void)makeHolesForElements:(id)fp8 usingScrapArea:(BOOL)fp12;
- (id)pageNumberElements;
- (void)setPageNumberElements:(id)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8 scale:(float)fp16 deep:(BOOL)fp20;
- (id)elementsIntersectingRect:(struct _NSRect)fp8;
- (id)nearestVerticalGuideToElement:(id)fp8;
- (id)nearestHorizontalGuideToElement:(id)fp8;
- (void)moveToFront:(id)fp8 notify:(BOOL)fp12;
- (void)sendToBack:(id)fp8 notify:(BOOL)fp12;
- (int)_indexOfFirstForegroundElement;
- (void)moveElementFromIndex:(int)fp8 toIndex:(int)fp12;
- (void)moveSelectionToFront;
- (void)sendSelectionToBack;
- (void)makeCompoundElementFromSelection;
- (void)splitSelectedCompoundElements;
- (void)verticallyDivideSelectedElementsIntoSegments:(int)fp8 withGap:(float)fp12;
- (void)horizontallyDivideSelectedElementsIntoSegments:(int)fp8 withGap:(float)fp12;
- (void)toggleFitOfSelectedElements;
- (void)toggleMirrorImageOfSelectedElements;
- (void)zoomSelectedElements:(float)fp8;
- (void)rotateSelectedElements:(float)fp8;
- (void)moveSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)moveElements:(id)fp8 X:(float)fp12 Y:(float)fp16;
- (void)panSelectedElementsX:(float)fp8 Y:(float)fp12;
- (void)setPanForSelectedElementsWithStartingPoint:(struct _NSPoint)fp8 delta:(struct _NSPoint)fp16 panScale:(float)fp24;
- (struct _NSPoint)getPanSelectedElement:(float)fp8;
- (void)flipOrientationOfSelectedElements;
- (void)setBlendModeOfSelectedElements:(int)fp8;
- (void)setExposureOfSelectedElements:(float)fp8;
- (void)setContrastOfSelectedElements:(float)fp8;
- (void)setDefinitionOfSelectedElements:(float)fp8;
- (void)setHighlightsOfSelectedElements:(float)fp8;
- (void)setShadowsOfSelectedElements:(float)fp8;
- (void)setSaturationOfSelectedElements:(float)fp8;
- (void)setVibrancyOfSelectedElements:(float)fp8;
- (void)setTemperatureOfSelectedElements:(float)fp8;
- (void)setTintOfSelectedElements:(float)fp8;
- (void)setNoiseOfSelectedElements:(float)fp8;
- (void)setSharpnessScaleOfSelectedElements:(float)fp8;
- (void)setAlphaOfSelectedElements:(float)fp8;
- (void)removeEffectsFromSelectedElements;
- (void)setBlackAndWhiteEnabledForSelectedElements:(BOOL)fp8;
- (void)setSepiaEnabledForSelectedElements:(BOOL)fp8;
- (void)setAntiqueEnabledForSelectedElements:(BOOL)fp8;
- (void)setBoostEnabledForSelectedElements:(BOOL)fp8;
- (void)setFadeEnabledForSelectedElements:(BOOL)fp8;
- (void)setBloomEnabledForSelectedElements:(BOOL)fp8;
- (void)setGloomEnabledForSelectedElements:(BOOL)fp8;
- (void)setPosterizeEnabledForSelectedElements:(BOOL)fp8;
- (void)resetAdjustmentsOfSelectedElements;
- (void)adjustElementsToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)applyFrameMasterToElements:(id)fp8;
- (void)setIsChanging:(BOOL)fp8;
- (BOOL)isChanging;
- (void)setIsPanning:(BOOL)fp8;
- (BOOL)isPanning;
- (void)setDisplayIsChanging:(BOOL)fp8;
- (BOOL)displayIsChanging;
- (void)setEditingText:(BOOL)fp8;
- (BOOL)editingText;
- (id)nextHole;
- (id)holeElements;
- (id)holeElementsIncludingBackground;
- (void)createHoles;
- (id)orderedHoleElements;
- (id)wildcardHoleElements;
- (BOOL)hasGroupElements;
- (id)groupElements;
- (void)setBackgroundForGroupElementsFromPageDesign:(id)fp8;
- (id)allPageElements;
- (id)allMapElements;
- (id)textElements:(BOOL)fp8;
- (id)editableTextElements:(BOOL)fp8 specialPurposeOnly:(BOOL)fp12;
- (id)editableTextElements:(BOOL)fp8 includeEditedLinked:(BOOL)fp12 specialPurposeOnly:(BOOL)fp16;
- (id)preservedPageText;
- (void)copyTextFromTextElements:(id)fp8;
- (void)copyTextFromTextElements:(id)fp8 copyFormatting:(BOOL)fp12;
- (void)copyTextFromTextElements:(id)fp8 copyFormatting:(BOOL)fp12 copyAlignment:(BOOL)fp16;
- (BOOL)hasCheckedForClipping;
- (void)setHasCheckedForClipping:(BOOL)fp8;
- (void)checkForClipping;
- (id)calendarElements;
- (void)copyDataFromCalendarElements:(id)fp8;
- (id)gridElements;
- (void)adjustGridElementRows:(int)fp8 columns:(int)fp12;
- (id)vectorElements;
- (id)animatedElements;
- (id)nonAnimatedElements;
- (id)guideElements;
- (void)copyPanAndZoomFromElements:(id)fp8;
- (id)alternateElementsForSelectedElement;
- (void)changeSelectedElementsToElementWithDictionary:(id)fp8;
- (void)markMapElementsForUpdate;
- (void)recenterMapElements:(BOOL)fp8;
- (void)resetPageMap;
- (id)mapMarkers;
- (void)replaceEmbeddedPagesWithPage:(id)fp8 reflow:(BOOL)fp12;
- (void)leftAlignSelectedElements;
- (void)rightAlignSelectedElements;
- (void)topAlignSelectedElements;
- (void)bottomAlignSelectedElements;
- (void)alignSelectedElementsInColumn;
- (void)alignSelectedElementsInRow;
- (void)makeSelectedElementsEqualWidth;
- (void)makeSelectedElementsEqualHeight;
- (void)distributeSelectedElementsHorizontally;
- (void)distributeSelectedElementsVertically;
- (struct IPPageElementEdges)alignmentHintsForElement:(id)fp8 exact:(BOOL)fp12;
- (BOOL)hasClippedText;
- (void)resizedImageCheck;
- (BOOL)hasLowQualityImages;
- (id)selection;
- (id)orderedSelection;
- (id)xOrderedSelection;
- (id)yOrderedSelection;
- (void)addToSelection:(id)fp8;
- (void)removeFromSelection:(id)fp8;
- (void)selectAll;
- (void)clearSelection;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (id)backgroundTextureColor;
- (void)setBackgroundTextureColor:(id)fp8;
- (int)backgroundTextureColorBlendMode;
- (void)setBackgroundTextureColorBlendMode:(int)fp8;
- (int)backgroundImageMethodForLayer:(int)fp8;
- (void)setBackgroundMethod:(int)fp8 forLayer:(int)fp12;
- (struct _NSSize)backgroundTileSizeForLayer:(int)fp8;
- (void)setBackgroundTileSize:(struct _NSSize)fp8 forLayer:(int)fp16;
- (float)backgroundTileRotationForLayer:(int)fp8;
- (id)backgroundImageNameForLayer:(int)fp8;
- (void)setBackgroundImageName:(id)fp8 method:(int)fp12 forLayer:(int)fp16;
- (id)backgroundThumbnailNameForLayer:(int)fp8;
- (void)setBackgroundThumbnailName:(id)fp8 forLayer:(int)fp12;
- (float)backgroundImageAlphaForLayer:(int)fp8;
- (void)setBackgroundImageAlpha:(float)fp8 forLayer:(int)fp12;
- (int)backgroundBlendModeForLayer:(int)fp8;
- (void)setBackgroundBlendMode:(int)fp8 forLayer:(int)fp12;
- (id)backgroundPageDesign;
- (id)backgroundPage;
- (void)_initializeBackgroundPage;
- (void)setBackgroundPage:(id)fp8;
- (id)backgroundVariants;
- (void)applyVariantToElementsForBackground:(id)fp8;
- (void)setBackgroundPageDesign:(id)fp8 icon:(id)fp12 notify:(BOOL)fp16;
- (BOOL)mirrorBackgroundHorizontallyForLayer:(int)fp8;
- (BOOL)mirrorBackgroundVerticallyForLayer:(int)fp8;
- (void)_notify:(id)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 forView:(id)fp28 withBleed:(float)fp32 alpha:(float)fp36 scale:(float)fp40 drawSelection:(BOOL)fp44 resolution:(int)fp48;
- (void)_drawInContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 forView:(id)fp28 withBleed:(float)fp32 alpha:(float)fp36 scale:(float)fp40 drawSelection:(BOOL)fp44 resolution:(int)fp48;
- (void)drawElements:(id)fp8 inContext:(struct CGContext *)fp12 inRect:(struct _NSRect)fp16 forView:(id)fp32 withBleed:(float)fp36 alpha:(float)fp40 scale:(float)fp44 drawSelection:(BOOL)fp48 resolution:(int)fp52 flipX:(BOOL)fp56;
- (void)drawSelectionInContext:(struct CGContext *)fp8 scale:(float)fp12 aboveElements:(BOOL)fp16;
- (void)updatePageImageCacheForView:(id)fp8 withBleed:(float)fp12 alpha:(float)fp16 scale:(float)fp20 drawSelection:(BOOL)fp24 resolution:(int)fp28;
- (struct CGLayer *)pageImageCache;
- (BOOL)backgroundDrawingDisabled;
- (void)setBackgroundDrawingDisabled:(BOOL)fp8;
- (float)minimumAnimatedSceneDuration;
- (float)animatedSceneDurationFactor;
- (BOOL)includeBackgroundInAnimation;
- (void)_clearPageImageCache;
- (id)thumbnail:(struct _NSRect)fp8 overridePage:(id)fp24 callback:(id)fp28;
- (void)invalidateThumbnail;
- (void)_rebuildThumbnailWithOverridePage:(id)fp8;
- (void)drawTextAtScale:(float)fp8 inImage:(id)fp12 offset:(struct _NSPoint)fp16;
- (void)unloadCachedObjects;
- (void)_releaseElements;
- (void)releasePageNumberElements;
- (void)_prepareElementsForDealloc:(id)fp8;
- (void)prepareForDealloc;
- (void)dealloc;
- (id)description;
- (BOOL)validate:(id)fp8;

@end

@interface IPTemplate : NSObject
{
    CachedBundle *mTheme;
    IPBook *mPrototypeBook;
    NSString *mThemeName;
    NSArray *mVisiblePageDesignTags;
    NSDictionary *mRenamedPagesDict;
    NSMutableArray *mPageTypes;
    NSMutableDictionary *mPageTypeDict;
    NSString *mDefaultJacketFront;
    NSString *mDefaultJacketFrontFlap;
    NSString *mDefaultJacketBack;
    NSString *mDefaultJacketBackFlap;
    BOOL mHasDustJacket;
    NSMutableArray *mFirstPages;
    NSMutableArray *mCyclePages;
    IPPage *mCustomCyclePage;
    NSMutableArray *mLastPages;
    BOOL mRandomizeCyclePages;
    NSMutableDictionary *mTextStyles;
    NSArray *mTextStyleNames;
    NSArray *mVisibleTextStyleNames;
    NSMutableDictionary *mColors;
    NSMutableDictionary *mPageTypeIcons;
    struct _NSSize mBookSize;
    struct _NSSize mBookCoverSize;
    float mBleed;
    int mLastPrototypePage;
    NSMutableArray *mMasterBackgrounds;
    NSMutableArray *mMasterCoverBackgrounds;
    NSMutableArray *mMasterFlapBackgrounds;
    NSMutableArray *mMasterFrames;
    NSMutableArray *mPagePositions;
    BOOL mAnimatePagePositionPaths;
    float mPagePositionPause;
    NSColor *mPagePositionPathColor;
    float mPagePositionPathWidth;
    struct _NSSize mAnimatedBackgroundOverdraw;
    int mPageScalingMethod;
    BOOL mPreventEmptyHoles;
    BOOL mLeadingEnabled;
    float mPreloadingDrawScale;
    NSMutableArray *mPreloadedScales;
    BOOL mArtCachingDisabled;
    BOOL mThemeFlexerEnabled;
    NSDictionary *mImplementationDict;
    int mMinimumPageCount;
    NSString *mFallbackThemeName;
    NSString *_productTypeString;
    int _productType;
    BOOL mIsContactSheet;
    BOOL mIsWireBound;
    BOOL mUsePreciseTiling;
}

+ (unsigned char)_themeIsLegacy:(id)fp8;
+ (int)legacyThemeCount;
+ (float)rankingForTheme:(id)fp8;
+ (id)localizedNameForTheme:(id)fp8;
+ (id)productTypeForTheme:(id)fp8;
+ (id)siblingNameForTheme:(id)fp8;
+ (id)activeTemplate;
+ (id)defaultBrandedPageForSize:(struct _NSSize)fp8;
+ (id)_appWillTerminate;
+ (void)_saveThemeCache;
+ (BOOL)_restoreThemeCache;
+ (void)findAvailableThemes;
+ (void)addThemeBundle:(id)fp8 replace:(BOOL)fp12;
+ (id)replaceTheme:(id)fp8 withThemeAtPath:(id)fp12;
+ (BOOL)_addGlobalTheme:(id)fp8 replace:(BOOL)fp12;
+ (BOOL)_addUpdatedTheme:(id)fp8;
+ (void)_addTheme:(id)fp8 toArray:(id)fp12;
+ (void)_addCardTheme:(id)fp8 toDict:(id)fp12;
+ (void)_sortThemesByRanking;
+ (void)_markUpdatedTheme:(id)fp8 updatedTheme:(id)fp12 existingTheme:(id)fp16;
+ (id)findUpdatedThemes:(id)fp8;
+ (id)hardcoverThemeCategories;
+ (id)softcoverThemeCategories;
+ (id)wireboundThemeCategories;
+ (id)calendarThemeCategories;
+ (id)cardThemeCategories;
+ (id)cutSheetThemeCategories;
+ (id)slideshowThemeCategories;
+ (id)availableThemesForHardcoverCategory:(id)fp8;
+ (id)availableThemesForSoftcoverCategory:(id)fp8;
+ (id)availableThemesForWireboundCategory:(id)fp8;
+ (id)availableThemesForCalendarCategory:(id)fp8;
+ (id)keywordsForCardCategory:(id)fp8;
+ (id)availableThemesForCardCategory:(id)fp8 andKeyword:(id)fp12;
+ (id)availableThemesForCutSheetCategory:(id)fp8;
+ (id)availableThemesForSlideshowCategory:(id)fp8;
+ (id)matchingBundleForCategory:(id)fp8 hardcover:(BOOL)fp12 bundle:(id)fp16;
+ (void)insertThemePath:(id)fp8 atIndex:(unsigned int)fp12;
+ (id)themeBundlePaths;
+ (id)themeBundleWithName:(id)fp8;
+ (id)implementationForTheme:(id)fp8;
+ (id)prototypeForTheme:(id)fp8;
+ (id)relativeResourcePath:(id)fp8;
+ (id)defaultPrintingTheme;
+ (id)artCache;
- (id)initWithBundle:(id)fp8;
- (void)preloadResourcesAtScale:(float)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8;
- (id)localizedStringForKey:(id)fp8;
- (id)themePreview;
- (id)alternateThemePreview;
- (id)themeTextPreview;
- (int)lastPrototypePageIndex;
- (void)setLastPrototypePageIndex:(int)fp8;
- (BOOL)hasDustJacket;
- (id)dustJacketFront;
- (id)dustJacketFrontFlap;
- (id)dustJacketBack;
- (id)dustJacketBackFlap;
- (id)firstPages;
- (id)cyclePages;
- (id)lastPages;
- (id)masterBackgrounds;
- (id)masterCoverBackgrounds;
- (id)masterFlapBackgrounds;
- (id)masterFrames;
- (void)setThemeFlexerEnabled:(BOOL)fp8;
- (id)siblingTheme;
- (void)setMinimumPageCount:(int)fp8;
- (BOOL)isContactSheet;
- (BOOL)isDeprecatedTheme;
- (void)_tileIntoContext:(struct CGContext *)fp8 withImage:(struct CGImage *)fp12 atSize:(struct CGSize)fp16 tileSize:(struct CGSize)fp24;
- (void)_drawBackgroundTextureIntoContext:(struct CGContext *)fp8 withImage:(struct CGImage *)fp12 atSize:(struct _NSSize)fp16 tileSize:(struct _NSSize)fp24;
- (struct CGLayer *)layerForBackgroundTextureNamed:(id)fp8 size:(struct _NSSize)fp12 scale:(float)fp20 tileSize:(struct _NSSize)fp24 destContext:(struct CGContext *)fp32 shouldCache:(BOOL)fp36;
- (id)resourceNamed:(id)fp8;
- (struct IPFileImage *)imageResourceNamed:(id)fp8 forSize:(struct _NSSize)fp12 useLowRes:(BOOL)fp20;
- (id)pathForThemeResource:(id)fp8;
- (struct CGImage *)backgroundImageResourceForPage:(id)fp8 forSize:(struct _NSSize)fp12 useLowRes:(BOOL)fp20 forLayer:(int)fp24;
- (BOOL)hasPreloadedArtElementsAtScale:(float)fp8;
- (void)preloadArtElementsForBook:(id)fp8 pages:(id)fp12 atScale:(float)fp16;
- (void)preloadArtElementsForBook:(id)fp8 atScale:(float)fp12;
- (void)releaseArtElementsForBook:(id)fp8 atScale:(float)fp12;
- (void)releaseAllArtElementsForBook:(id)fp8;
- (void)releaseBackgroundTextureCache;
- (void)_removeCachedArtElement:(id)fp8 size:(struct _NSSize)fp12;
- (void)_preloadArtElementsInQueue:(id)fp8;
- (void)_queuePreloadForImage:(id)fp8 forSize:(struct _NSSize)fp12 inQueue:(id)fp20;
- (void)setArtCachingDisabled:(BOOL)fp8;
- (id)pageTypes;
- (id)pageTypeWithPrefix:(id)fp8 suffix:(id)fp12;
- (id)visiblePagesForPageType:(id)fp8;
- (id)blankPageForPage:(id)fp8;
- (BOOL)pageDesignIsVisibleInTemplate:(id)fp8;
- (id)localizedPageTypeDescription:(id)fp8;
- (id)pageOfType:(id)fp8 forPage:(id)fp12;
- (id)iconForPageType:(id)fp8;
- (BOOL)pagePositionIsDefined;
- (BOOL)animatePagePositionPaths;
- (float)pagePositionPause;
- (id)pagePositionPathColor;
- (float)pagePositionPathWidth;
- (struct _NSPoint)positionForPageIndex:(int)fp8;
- (struct _NSSize)animatedBackgroundOverdraw;
- (id)productDimension;
- (id)prototype;
- (void)setTheme:(id)fp8;
- (id)themeName;
- (id)bundleName;
- (id)themeCategory;
- (id)themeBundle;
- (id)visiblePageDesignTags;
- (id)textStyles;
- (id)textStyleNames;
- (id)visibleTextStyleNames;
- (id)textStyleWithName:(id)fp8;
- (void)encodeTextStylesInDictionary:(id)fp8;
- (void)restoreTextStylesFromDictionary:(id)fp8;
- (void)revertTextStylesToTemplateDefaults;
- (id)colorWithName:(id)fp8;
- (struct _NSSize)bookSize;
- (struct _NSSize)bookCoverSize;
- (float)bleedAllowance;
- (BOOL)printsPageNumbers;
- (BOOL)isDoubleSided;
- (BOOL)canDoSimplex;
- (BOOL)alternatesPages;
- (BOOL)shouldPreventEmptyHoles;
- (BOOL)leadingEnabled;
- (int)maximumPageCount;
- (void)setFallbackThemeName:(id)fp8;
- (id)productType;
- (int)productTypeCode;
- (BOOL)isHardcoverBookProduct;
- (BOOL)isBookProduct;
- (BOOL)isWireBound;
- (void)setWireBound:(BOOL)fp8;
- (BOOL)isCalendarProduct;
- (BOOL)isCardProduct;
- (BOOL)isPostcardProduct;
- (BOOL)isCutSheetProduct;
- (BOOL)isSlideshowProduct;
- (BOOL)usePreciseTiling;
- (int)contentScalingMethod;
- (void)fillBook:(id)fp8 withPhotos:(struct IPPhotoList *)fp12 onePerPage:(BOOL)fp16 removeExisting:(BOOL)fp20 manipulateCover:(BOOL)fp24;
- (int)fillBook:(id)fp8 fromPage:(id)fp12 withPhotos:(struct IPPhotoList *)fp16 manipulateCover:(BOOL)fp20;
- (void)_ensureMinimumPagesForBook:(id)fp8;
- (void)_removeFrontAndBackPagesForBook:(id)fp8;
- (void)_ensureFrontAndBackPagesForBook:(id)fp8;
- (void)_runThemeFlexerForBook:(id)fp8;
- (void)_flexBookPages:(id)fp8 excludingProcessed:(id)fp12 forBook:(id)fp16;
- (void)_placeFlexerImagesInPage:(id)fp8 iteration:(int)fp12;
- (id)customCyclePage;
- (void)setCustomCyclePage:(id)fp8;
- (id)blankPlaceholderPage;
- (id)nextPrototypePageForBook:(id)fp8;
- (id)selectFromAlternatesForPage:(id)fp8 withPhotos:(struct IPPhotoList *)fp12 forBook:(id)fp16 traverse:(BOOL)fp20;
- (BOOL)canUsePage:(id)fp8 forPhotos:(struct IPPhotoList *)fp12;
- (id)newNameForPageDesign:(id)fp8;
- (void)dealloc;
- (void)_ensureImplementationDict;
- (void)_loadTemplateInfo;
- (void)_adjustScaleOfElements:(id)fp8 toHorizontalScale:(float)fp12 verticalScale:(float)fp16;
- (void)_loadPageTypes;
- (void)_validateTemplate:(id)fp8;

@end

@interface CachedBundle : NSBundle <NSCoding>
{
    BOOL mRankingIsCached;
    BOOL mNameIsCached;
    BOOL mProductTypeIsCached;
    BOOL mSiblingIsCached;
    BOOL mImplementationIsCached;
    BOOL mPrototypeIsCached;
    float mRanking;
    NSString *mName;
    NSString *mProductType;
    NSString *mSibling;
    NSMutableDictionary *mImplementation;
    NSMutableDictionary *mPrototype;
    NSDictionary *mUpdateDescription;
    int mStatus;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)rankingIsCached;
- (float)cachedRanking;
- (void)setCachedRanking:(float)fp8;
- (BOOL)nameIsCached;
- (id)cachedName;
- (void)setCachedName:(id)fp8;
- (BOOL)productTypeIsCached;
- (id)cachedProductType;
- (void)setCachedProductType:(id)fp8;
- (BOOL)siblingIsCached;
- (id)cachedSibling;
- (void)setCachedSibling:(id)fp8;
- (BOOL)implementationIsCached;
- (id)cachedImplementation;
- (void)setCachedImplementation:(id)fp8;
- (BOOL)prototypeIsCached;
- (id)cachedPrototype;
- (void)setCachedPrototype:(id)fp8;
- (id)updateDescription;
- (void)setUpdateDescription:(id)fp8;
- (int)status;
- (void)setStatus:(int)fp8;

@end

@interface IPArtElement : IPPageElement
{
    NSString *mImageName;
    NSString *mThumbnailName;
    BOOL mIsBranding;
    BOOL mOverrideVisibilitySetting;
}

- (BOOL)isArtElement;
- (id)initWithImageNamed:(id)fp8;
- (id)initWithImage:(struct IPFileImage *)fp8 name:(id)fp12;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (id)imageName;
- (void)setImageName:(id)fp8;
- (id)thumbnailName;
- (void)setThumbnailName:(id)fp8;
- (BOOL)elementIsBranding;
- (void)setElementIsBranding:(BOOL)fp8;
- (void)overrideVisibilitySetting:(BOOL)fp8;
- (BOOL)isLocked;
- (BOOL)isVectorElement;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)addReferencedAssetsToSet:(id)fp8;
- (BOOL)validate:(id)fp8;
- (id)description;
- (void)unloadCachedObjects;
- (struct CGImage *)_getImageForResolution:(int)fp8 scale:(float)fp12;
- (void)dealloc;

@end

@interface IPCompoundElement : IPPageElement
{
    IPPageElement *mBackingMask;
    IPPageElement *mPrimaryElement;
    IPPageElement *mOverlayMask;
    struct CGImage *mCompositedImage;
    struct CGImage *mCompositedThumb;
    float mCompositedImageScale;
    float mLeftInset;
    float mRightInset;
    float mTopInset;
    float mBottomInset;
    float mAbsoluteLeftInset;
    float mAbsoluteRightInset;
    float mAbsoluteTopInset;
    float mAbsoluteBottomInset;
    float mUniformInset;
    BOOL mInsetSelection;
}

- (BOOL)isCompoundElement;
- (id)initWithElement:(id)fp8 overlay:(id)fp12 backing:(id)fp16;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setParent:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (float)imageAspectRatio;
- (id)draggingImage:(struct _NSSize)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)applyVariant;
- (void)setDidApplyVariant:(BOOL)fp8;
- (BOOL)applyVariantForBackground:(id)fp8;
- (id)backingMask;
- (id)primaryElement;
- (id)overlayMask;
- (BOOL)drawsHighlightBorder;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)adjustVariantToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (void)setRotation:(float)fp8;
- (void)setAlpha:(float)fp8;
- (struct _NSRect)insetRect:(float)fp8;
- (void)insetRight:(float)fp8 left:(float)fp12 top:(float)fp16 bottom:(float)fp20;
- (float)leftInset;
- (float)rightInset;
- (float)topInset;
- (float)bottomInset;
- (float)absoluteLeftInset;
- (float)absoluteRightInset;
- (float)absoluteTopInset;
- (float)absoluteBottomInset;
- (float)uniformInset;
- (BOOL)shouldInsetSelection;
- (BOOL)shouldZoom;
- (float)zoom;
- (void)setZoom:(float)fp8;
- (struct _NSPoint)pan;
- (struct _NSPoint)maxPan;
- (void)setPan:(struct _NSPoint)fp8;
- (BOOL)panX:(float)fp8 Y:(float)fp12;
- (BOOL)shouldPanX:(float)fp8;
- (BOOL)shouldPanY:(float)fp8;
- (BOOL)panZoomModeIsEnabled;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (struct _NSPoint)center;
- (void)setCenter:(struct _NSPoint)fp8;
- (void)_syncLayers;
- (void)clearElementCache:(BOOL)fp8;
- (void)_updateCompositedImage:(float)fp8 scale:(float)fp12 resolution:(int)fp16;
- (void)_updateCompositedThumb:(float)fp8 scale:(float)fp12;
- (struct CGImage *)_compositeImageWithAlpha:(float)fp8 forScale:(float)fp12 resolution:(int)fp16;
- (void)unloadCachedObjects;
- (void)addReferencedAssetsToSet:(id)fp8;
- (BOOL)validate:(id)fp8;
- (void)dealloc;

@end

@interface IPTextElement : IPPageElement
{
    NSString *mRawText;
    NSString *mRawTextType;
    NSString *mDefaultText;
    NSMutableAttributedString *mAttributedString;
    NSMutableAttributedString *mAttributedStringHUD;
    IPTextElementStyle *mTextStyle;
    NSString *mTextStyleName;
    BOOL mMakeUpperCase;
    IPTextElementView *mTextEditor;
    IPTextElementView *mSecondaryEditor;
    BOOL mIsBookTitle;
    BOOL mIsBookSubtitle;
    BOOL mRequiresUserEdit;
    BOOL mIsSpecialPurpose;
    BOOL mShouldRequireUserEdit;
    BOOL mShouldInvertColor;
    BOOL mTextIsChangingInternally;
    BOOL mTextIsClipped;
    BOOL mIgnoreClippedText;
    NSString *mLocalTextAlignment;
    NSString *mLocalVertTextAlignment;
    NSColor *mLocalTextColor;
    float mVertTextAlignmentWeight;
    BOOL mShouldDrawGuides;
    BOOL mShouldShrinkToFit;
    BOOL mLastSkipConvert;
    IPPageElement *_captionOwner;
}

- (BOOL)isTextElement;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)setParent:(id)fp8;
- (void)_observeNotifications;
- (id)textStyleName;
- (id)textStyle;
- (void)setTextStyle:(id)fp8;
- (id)rawText;
- (void)setRawText:(id)fp8;
- (id)rawTextType;
- (void)setRawTextType:(id)fp8;
- (id)attributedString;
- (id)attributedString:(BOOL)fp8;
- (void)setAttributedString:(id)fp8;
- (unsigned int)textAlignment;
- (int)verticalTextAlignment;
- (float)verticalTextAlignmentWeight;
- (BOOL)shouldShrinkTextToFit;
- (void)setShouldShrinkTextToFit:(BOOL)fp8;
- (void)copyTextFromTextElement:(id)fp8 copyFormatting:(BOOL)fp12 copyAlignment:(BOOL)fp16;
- (void)reconvertRawText;
- (void)replaceTextWithString:(id)fp8;
- (void)replaceTextWithAttributedString:(id)fp8;
- (void)fillElementWithString:(id)fp8 exact:(BOOL)fp12;
- (id)textAttributes;
- (void)setSourceElement:(id)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)installEditorForView:(id)fp8;
- (void)installSecondaryEditorForView:(id)fp8;
- (id)textEditor;
- (id)secondaryEditor:(BOOL)fp8;
- (id)testEditor;
- (id)_makeTextElementView:(BOOL)fp8 forHUD:(BOOL)fp12;
- (BOOL)isBookTitle;
- (BOOL)isBookSubtitle;
- (BOOL)requiresUserEdit;
- (void)setRequiresUserEdit:(BOOL)fp8;
- (BOOL)isSpecialPurpose;
- (BOOL)hasUserText;
- (BOOL)shouldConvertToUppercase;
- (BOOL)shouldInvertColor;
- (BOOL)textIsClipped;
- (id)localTextAlignment;
- (id)localVertTextAlignment;
- (id)localTextColor;
- (BOOL)shouldDrawGuides;
- (void)checkForClipping;
- (void)textDidChange:(id)fp8;
- (void)textDataChanged;
- (void)textStyleChanged;
- (void)_updateTextStyle;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)setSelected:(BOOL)fp8;
- (void)selectInParent:(BOOL)fp8;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)drawSelectionBehindElement;
- (BOOL)isLocked;
- (id)_convertRawText;
- (void)_bookContentsChanged:(id)fp8;
- (void)_pageNumberingChanged:(id)fp8;
- (void)dealloc;
- (id)captionOwner;
- (void)setCaptionOwner:(id)fp8;

@end

@interface SuperInfo : InfoView
{
    NSMutableArray *mTrackingRectTagArray;
    NSView *mTrackingView;
    float mVerticalSpaceUsed;
    NSView *mFirstKeyableView;
    NSView *mPreviousKeyableView;
    NSString *mOriginalDateFormatString;
    NSString *mShortDateFormatString;
    NSString *mShortTimeFormatString;
    NSString *mShortDateTimeOrdering;
    NSMutableDictionary *mDateParsingDict;
    BOOL mIsHUD;
    int mMode;
    BOOL mIgnoreUpdates;
    float mLabelWidth;
    int mIndexOfPublishURLLabel;
    int mIndexOfImageURLLabel;
    struct IPSelectable *mSinglePhotoInfo;
    Album *mSingleAlbumInfo;
    InfoTextField *mCaptionEdit;
    InfoTextField *mDateEdit;
    NSTokenField *mKeywordEdit;
    InfoTextField *mTimeEdit;
    InfoTextField *mURLEdit;
    InfoTextField *mCommentsEdit;
    StarRatingControl *mRatingEdit;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)setIsHUD:(BOOL)fp8;
- (BOOL)_checkForChangedDateLayout;
- (id)_activelyEditingInfo;
- (id)foregroundColor;
- (id)backgroundColor;
- (void)setForegroundColor;
- (void)setBackgroundColor;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (float)_topMargin;
- (id)_addInfoLabel:(id)fp8 tokens:(id)fp12 allTokens:(id)fp16 editable:(BOOL)fp20;
- (id)_addInfoLabel:(id)fp8 text:(id)fp12 editable:(BOOL)fp16;
- (id)_addComments:(id)fp8 editable:(BOOL)fp12;
- (void)_updateDataMultipleImage:(struct IPPhotoList *)fp8 forFolder:(id)fp12 forAllEventsAlbum:(id)fp16;
- (void)_updateDataSingleDate:(struct IPSelectable *)fp8 forEditing:(BOOL)fp12;
- (id)dateString:(struct IPPhotoInfo *)fp8;
- (id)timeString:(struct IPPhotoInfo *)fp8;
- (void)_updateDataSingleImage:(struct IPPhotoInfo *)fp8 forEditing:(BOOL)fp12;
- (void)updateData:(BOOL)fp8;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)_removeTrackingRects;
- (struct _NSRect)_trackingRectForView:(id)fp8;
- (void)_addTrackingRects;
- (void)_clearTrackingView;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_keywordControlChanged:(id)fp8;
- (void)_ratingControlChanged:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)controlTextDidEndEditing:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)undoRedoTextEditing:(id)fp8 withState:(id)fp12;
- (void)textDidChange:(id)fp8;
- (float)minimumHeight;
- (void)becomeCurrent;
- (void)releaseCurrent;
- (void)beginAnimation;
- (void)endAnimation;
- (void)_removeContentSubviews;

@end

@interface IPImageIO : NSObject
{
}

+ (id)sharedImageIO;
+ (void)releaseSharedImageIO;
- (struct __CFArray *)supportedExtensionsOfType:(struct __CFString *)fp8;
- (BOOL)isSupportedExtension:(struct __CFString *)fp8 usingType:(struct __CFString *)fp12;
- (BOOL)isExtension:(struct __CFString *)fp8 ofType:(struct __CFString *)fp12 forPath:(id)fp16;
- (unsigned long)formatForExtension:(struct __CFString *)fp8;
- (struct __CFString *)extensionForFormat:(unsigned long)fp8 usingType:(struct __CFString *)fp12;
- (unsigned long)imageSourceGetTypeID;
- (struct __CFArray *)imageSourceCopyTypeIdentifiers;
- (struct CGImageSource *)imageSourceCreateWithDataProvider:(struct CGDataProvider *)fp8 options:(struct __CFDictionary *)fp12;
- (struct CGImageSource *)imageSourceCreateWithData:(struct __CFData *)fp8 options:(struct __CFDictionary *)fp12;
- (struct CGImageSource *)imageSourceCreateWithURL:(struct __CFURL *)fp8 options:(struct __CFDictionary *)fp12;
- (unsigned long)imageSourceGetCount:(struct CGImageSource *)fp8;
- (struct __CFString *)imageSourceGetType:(struct CGImageSource *)fp8;
- (struct __CFDictionary *)imageSourceCopyProperties:(struct CGImageSource *)fp8 options:(struct __CFDictionary *)fp12;
- (struct __CFDictionary *)imageSourceCopyProperties:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImage *)imageSourceCreateImage:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImage *)imageSourceCreateThumbnail:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12 options:(struct __CFDictionary *)fp16;
- (struct CGImageSource *)imageSourceCreateIncremental:(struct __CFDictionary *)fp8;
- (void)imageSourceUpdate:(struct CGImageSource *)fp8 dataProvider:(struct CGDataProvider *)fp12 final:(BOOL)fp16;
- (void)imageSourceUpdate:(struct CGImageSource *)fp8 data:(struct __CFData *)fp12 final:(BOOL)fp16;
- (int)imageSourceGetStatus:(struct CGImageSource *)fp8;
- (int)imageSourceGetStatus:(struct CGImageSource *)fp8 atIndex:(unsigned long)fp12;
- (struct __CFString *)getTypeWithExtension:(struct __CFString *)fp8;
- (struct __CFString *)getTypeWithDataProvider:(struct CGDataProvider *)fp8 hint:(struct __CFString *)fp12 insufficientData:(_Bool *)fp16;
- (struct __CFString *)getTypeWithData:(struct __CFData *)fp8 hint:(struct __CFString *)fp12 insufficientData:(_Bool *)fp16;
- (struct __CFString *)getTypeWithURL:(struct __CFURL *)fp8 hint:(struct __CFString *)fp12;
- (struct __CFArray *)copyTypeExtensions:(struct __CFString *)fp8;
- (unsigned long)imageDestinationGetTypeID;
- (struct __CFArray *)imageDestinationCopyTypeIdentifiers;
- (struct CGImageDestination *)imageDestinationCreateWithDataConsumer:(struct CGDataConsumer *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (struct CGImageDestination *)imageDestinationCreateWithData:(struct __CFData *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (struct CGImageDestination *)imageDestinationCreateWithURL:(struct __CFURL *)fp8 type:(struct __CFString *)fp12 capacity:(unsigned long)fp16 options:(struct __CFDictionary *)fp20;
- (void)imageDestination:(struct CGImageDestination *)fp8 setProperties:(struct __CFDictionary *)fp12;
- (void)imageDestination:(struct CGImageDestination *)fp8 addImage:(struct CGImage *)fp12 properties:(struct __CFDictionary *)fp16;
- (void)imageDestination:(struct CGImageDestination *)fp8 addImageFromSource:(struct CGImageSource *)fp12 index:(unsigned long)fp16 properties:(struct __CFDictionary *)fp20;
- (_Bool)imageDestinationFinalize:(struct CGImageDestination *)fp8;
- (struct __CFArray *)copyImageFormats:(struct __CFString *)fp8;

@end

@interface BitmapFilter : EditFilter
{
    struct FilterEventArray *mDraggingEvents;
    unsigned long mBytesPerPixel;
    char *mRasterLarge;
    unsigned long mRowBytesLarge;
    unsigned long mWidthLarge;
    unsigned long mHeightLarge;
    int mRadiusLarge;
    char *mRasterSmall;
    unsigned long mRowBytesSmall;
    unsigned long mWidthSmall;
    unsigned long mHeightSmall;
    int mRadiusSmall;
    float mAngleOfDifference;
    BOOL mWorkingOnRAW;
    float mRedeyeParams[4];
    struct _NSRect mMaskRect;
    int mLastType;
}

+ (id)blemishFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (BOOL)canRebuildAfterUsing;
- (void)initializeWithBytesPerPixel:(unsigned long)fp8 smallRaster:(char *)fp12 smallRowBytes:(unsigned long)fp16 smallWidth:(unsigned long)fp20 smallHeight:(unsigned long)fp24 smallRadius:(int)fp28 largeRaster:(char *)fp32 largeRowBytes:(unsigned long)fp36 largeWidth:(unsigned long)fp40 largeHeight:(unsigned long)fp44 largeRadius:(int)fp48 angleOfDifference:(float)fp52 workingOnRAW:(BOOL)fp56;
- (void)updateSmallRaster:(char *)fp8 smallRowBytes:(unsigned long)fp12 smallWidth:(unsigned long)fp16 smallHeight:(unsigned long)fp20 smallRadius:(int)fp24 fullRaster:(char *)fp28;
- (void)updateLargeRaster:(char *)fp8 largeRowBytes:(unsigned long)fp12 largeWidth:(unsigned long)fp16 largeHeight:(unsigned long)fp20 largeRadius:(int)fp24;
- (struct _NSPoint)rotatePercentageX:(float)fp8 percentageY:(float)fp12 angle:(float)fp16;
- (void)addWhitenBrushX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 usingRadiusFraction:(float)fp24;
- (struct _NSRect)rectCenteredOverPoint:(struct _NSPoint)fp8 withSize:(struct _NSSize)fp16 boundedInSize:(struct _NSSize)fp24;
- (void)paintRaster:(char *)fp8 withRowBytes:(int)fp12 bytesPerPixel:(int)fp16 red:(int)fp20 blue:(int)fp24 green:(int)fp28 atPoint:(struct _NSPoint)fp32 withWidth:(int)fp40 andHeight:(int)fp44;
- (void)initializeReefImage:(struct CReefImage *)fp8 forRaster:(char *)fp12 rowBytes:(int)fp16 boundingRect:(struct _NSRect)fp20;
- (char *)generateMaskForRasterSize:(struct _NSSize)fp8 radius:(float)fp16 maskRect:(struct _NSRect *)fp20;
- (void)fixPointAt:(struct _NSPoint)fp8 withBrushSize:(struct _NSSize)fp16 regionSize:(struct _NSSize)fp24 source:(struct _NSPoint)fp32 imageSize:(struct _NSSize)fp40 raster:(char *)fp48 rowBytes:(unsigned long)fp52 useSource:(BOOL)fp56 blurParms:(struct CReefAutoFixParms)fp60;
- (void)addX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 usingRadiusFraction:(float)fp24 sourceX:(float)fp28 sourceY:(float)fp32 detectEdges:(BOOL)fp36;
- (void)addEventWithX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 operatingOnFull:(BOOL)fp24 usingRadiusFraction:(float)fp28 sourceX:(float)fp32 sourceY:(float)fp36 detectEdges:(BOOL)fp40;
- (void)addWhitenBrushEventWithX:(float)fp8 Y:(float)fp12 inDrag:(BOOL)fp16 withBlendingRatio:(float)fp20 operatingOnFull:(BOOL)fp24 usingRadiusFraction:(float)fp28;
- (void)addRedEyeEventWithX:(float)fp8 Y:(float)fp12 params:(float *)fp16;
- (void)addEventWithCropRect:(struct _NSRect)fp8;
- (void)redEyeWithX:(float)fp8 Y:(float)fp12 operatingOnFull:(BOOL)fp16 params:(float *)fp20;
- (void)redEyeWithCropRect:(struct _NSRect)fp8;
- (id)name;
- (void)dealloc;
- (void)performEdits:(id)fp8;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;

@end

@interface CropEditFilter : EditFilter
{
    struct _NSRect mCurrentRect;
    CIFilter *mCropFilter;
    CIFilter *mTransformFilter;
}

+ (id)cropFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (BOOL)oneTimeFilter;
- (void)setCropRect:(struct _NSRect)fp8 absoluteWidth:(float)fp24 absoluteHeight:(float)fp28 ignoreForUndo:(BOOL)fp32;
- (void)setCropRect:(struct _NSRect)fp8;
- (BOOL)canRebuildAfterUsing;
- (id)chainWithImage:(id)fp8;
- (BOOL)filterScales;

@end

@interface BlurBrushFilter : EditFilter
{
    CIImage *mMaskImage;
    CIFilter *mSourceOutFilter;
    CIFilter *mMaskFilter;
    CIFilter *mMatrixFilter;
}

- (id)init;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface SaturationBrushFilter : EditFilter
{
    CIImage *mMaskImage;
}

- (id)init;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface ContrastBrushFilter : EditFilter
{
    CIImage *mMaskImage;
}

- (id)init;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface ExposureBrushFilter : EditFilter
{
    CIImage *mMaskImage;
}

- (id)init;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface RAWV2ExposureBrushFilter : EditFilter
{
    EditFilter *mExposureFilter;
    CIImage *mMaskImage;
}

- (id)initWithDict:(id)fp8 andTemp:(float)fp12 andTint:(float)fp16 andExposure:(float)fp20;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface RAWV1ExposureBrushFilter : EditFilter
{
    EditFilter *mExposureFilter;
    CIImage *mMaskImage;
}

- (id)initWithDict:(id)fp8 andTemp:(float)fp12 andTint:(float)fp16 andExposure:(float)fp20;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface BrushFilter : EditFilter
{
    CIFilter *mMaskFilter;
    CIImage *mMaskImage;
    EditFilter *mHiFilter;
    EditFilter *mLowFilter;
}

- (id)init;
- (void)dealloc;
- (void)setBrushImage:(id)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface GammaFilter : HUDSliderFilter
{
}

+ (id)gammaFilter;
- (void)setGamma:(float)fp8;

@end

@interface BlackAndWhitePointsFilter : HUDDoubleSliderFilter
{
    GammaFilter *mGammaFilter;
}

+ (id)blackAndWhitePointsFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setBlackPoint:(float)fp8 whitePoint:(float)fp12 andCenterPoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)resetValues;
- (BOOL)canRebuildAfterUsing;
- (void)dealloc;

@end

@interface HUDDoubleSliderFilter : EditFilter
{
    float mLeftValue;
    float mRightValue;
}

- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface RotationEditFilter : HUDSliderFilter
{
    float mRotation;
    float mWidth;
    float mHeight;
}

+ (id)rotationFilter;
- (void)setTransformWidth:(float)fp8 height:(float)fp12 rotation:(float)fp16;
- (void)setTransformWidth:(float)fp8 height:(float)fp12;
- (id)chainWithImage:(id)fp8;
- (void)setRotation:(float)fp8;
- (float)rotation;
- (void)resetValues;
- (BOOL)canRebuildAfterUsing;
- (BOOL)filterScales;
- (BOOL)chainNormallyForCommit;

@end

@interface NoiseFilter : HUDSliderFilter
{
}

+ (id)noiseFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (void)setNoiseLevel:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface SharpnessFilter : HUDSliderFilter
{
    CIFilter *mCropFilter;
}

+ (id)iPhotoUnsharpMaskFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (void)setSharpness:(float)fp8;
- (BOOL)canRebuildAfterUsing;
- (id)chainWithImage:(id)fp8;

@end

@interface DefinitionFilter : HUDSliderFilter
{
}

+ (id)definitionFilter;
- (void)setIntensity:(float)fp8;
- (BOOL)canRebuildAfterUsing;
- (void)setScaledSize:(struct CGSize)fp8 andOriginalSize:(struct CGSize)fp16;

@end

@interface ContrastFilter : HUDSliderFilter
{
}

+ (id)contrastFilter;
- (void)setContrast:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface BrightnessFilter : HUDSliderFilter
{
}

+ (id)brightnessFilter;
- (void)setBrightness:(float)fp8 withMean:(float)fp12;
- (BOOL)canRebuildAfterUsing;

@end

@interface TintFilter : HUDSliderFilter
{
}

+ (id)tintFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setTint:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface ColorCorrectionFilter : HUDSliderFilter
{
}

+ (id)colorCorrectionFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setCorrection:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface ExposureFilter : HUDSliderFilter
{
}

+ (id)exposureFilter;
- (void)setExposure:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface LightingFilter : HUDSliderFilter
{
}

+ (id)lightingFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLighting:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface HighlightShadow : HUDSliderFilter
{
    CIFilter *mCropFilter;
}

+ (id)highlightShadowFilter;
+ (id)highlightShadowFilterV2;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16 version:(float)fp20;
- (void)dealloc;
- (void)setHighlightValue:(float)fp8;
- (void)setShadowValue:(float)fp8;
- (BOOL)canRebuildAfterUsing;
- (BOOL)filterScales;
- (void)setScaledSize:(struct CGSize)fp8 andOriginalSize:(struct CGSize)fp16;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (void)smallBookVersion:(float)fp8;
- (id)chainWithImage:(id)fp8;

@end

@interface VibrancyFilter : HUDSliderFilter
{
}

+ (id)vibrancyFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setVibrancy:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface SaturationFilter : HUDSliderFilter
{
}

+ (id)saturationFilter;
+ (id)saturationFilterV2;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16 version:(float)fp20;
- (void)setSaturation:(float)fp8;
- (BOOL)canRebuildAfterUsing;

@end

@interface RAWTemperatureTintExposureFilterV2 : RAWTemperatureTintExposureFilter
{
    NSMutableArray *mFilterArray;
    CIFilter *mRecoveryFilter;
    BOOL mUseRecovery;
}

+ (id)RAWTemperatureTintExposureFilter:(id)fp8;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16 RAWInfo:(id)fp20;
- (void)setTemperature:(float)fp8 tint:(float)fp12 andExposure:(float)fp16 andRecovery:(float)fp20;
- (id)chainWithImage:(id)fp8;
- (id)filterArray;
- (void)dealloc;
- (BOOL)canRebuildAfterUsing;

@end

@interface RAWTemperatureTintExposureFilterV1 : RAWTemperatureTintExposureFilter
{
    CIFilter *mAdjustFilter;
    CIFilter *mOtrcFilter;
}

+ (id)RAWTemperatureTintExposureFilter:(id)fp8;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16 RAWInfo:(id)fp20;
- (void)setTemperature:(float)fp8 tint:(float)fp12 andExposure:(float)fp16 andRecovery:(float)fp20;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (BOOL)canRebuildAfterUsing;

@end

@interface RAWTemperatureTintExposureFilter : EditFilter
{
}

- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setTemperature:(float)fp8 tint:(float)fp12 andExposure:(float)fp16 andRecovery:(float)fp20;

@end

@interface HUDSliderFilter : EditFilter
{
    float mValue;
}

- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (void)resetValues;

@end

@interface EnhanceFilter : EditFilter
{
}

+ (id)enhanceFilter;
- (BOOL)canRebuildAfterUsing;

@end

@interface BlackAndWhiteFilter : HUDOneClickFilter
{
}

+ (id)blackAndWhiteFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface SepiaFilter : HUDOneClickFilter
{
}

+ (id)sepiaFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;

@end

@interface FadeFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mExposureFilter;
    float mSaturation;
    float mTemperature;
    float mExposure;
}

+ (id)fadeFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andExposure:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface BoostFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mBlackAndWhitePointFilter;
    float mSaturation;
    float mTemperature;
    float mBlackPoint;
}

+ (id)boostFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andBlackPoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface EdgeBlurFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
}

+ (id)edgeBlurFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface VignetteBlackFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
    float mDefaultIntensity;
}

+ (id)vignetteBlackFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface VignetteWhiteFilter : HUDOneClickFilter
{
    CIFilter *m1Filter;
    float mIntensity;
    float mDefaultIntensity;
}

+ (id)vignetteWhiteFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (id)filter;
- (void)setLevel:(int)fp8;
- (void)setIntensity:(float)fp8;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;

@end

@interface AntiqueFilter : HUDOneClickFilter
{
    CIFilter *mSaturationFilter;
    CIFilter *mTemperatureFilter;
    CIFilter *mBlackAndWhitePointFilter;
    float mSaturation;
    float mTemperature;
    float mWhitePoint;
}

+ (id)antiqueFilter;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)setLevel:(int)fp8;
- (void)setSaturation:(float)fp8 andTemperature:(float)fp12 andWhitePoint:(float)fp16;
- (id)chainWithImage:(id)fp8;
- (void)dealloc;
- (void)resetValues;

@end

@interface HUDOneClickFilter : EditFilter
{
    int mLevel;
}

- (int)level;
- (void)setLevel:(int)fp8;
- (BOOL)filterScales;
- (void)resetValues;
- (void)fullVersion:(id)fp8;
- (void)setWidth:(float)fp8 andHeight:(float)fp12;
- (BOOL)canRebuildAfterUsing;

@end

@interface EditFilter : NSObject
{
    CIFilter *mFilter;
    NSString *mName;
    int mFilterOrder;
    float mVersion;
}

+ (void)loadQuartzAndCustomFilters;
- (id)initWithFilter:(id)fp8 name:(id)fp12 filterOrder:(int)fp16;
- (void)dealloc;
- (int)filterOrder;
- (id)chainWithImage:(id)fp8;
- (id)name;
- (id)filter;
- (BOOL)oneTimeFilter;
- (BOOL)filterScales;
- (void)fullVersion:(id)fp8;
- (void)smallVersion:(id)fp8;
- (BOOL)canRebuildAfterUsing;
- (BOOL)chainNormallyForCommit;
- (void)resetValues;
- (float)version;

@end

@interface InfoTextField : NSTextField
{
    NSString *mSavedString;
    BOOL mMultiline;
    BOOL mAttributed;
    BOOL mEllipsisState;
    NSColor *mUnderlineColor;
}

- (void)dealloc;
- (void)setAttributedStringValue:(id)fp8;
- (void)setSavedString:(id)fp8;
- (id)savedString;
- (void)setUnderlineColor:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setEllipsisState:(BOOL)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)becomeFirstResponder;
- (void)mouseDown:(id)fp8;
- (BOOL)isMultiline;
- (void)setMultiline:(BOOL)fp8;

@end

@interface StarRatingControl : NSControl
{
    NSString *mStarString;
    NSString *mBulletString;
    NSDictionary *mTextAttrs;
    NSDictionary *mTextDimAttrs;
    int mIntValue;
    id mTarget;
    SEL mSelector;
    BOOL mIsTracking;
    struct _NSSize mStarSize;
    BOOL mDrawBorder;
    BOOL mDrawBackground;
    int mMinimumRanking;
    int mMaximumRanking;
    BOOL mShouldAcceptFirstMouse;
    BOOL mShouldHandleKeyDown;
    BOOL mContinuous;
    float mFontSize;
    float mExtraSpacing;
    BOOL mSendWillChange;
    SEL mWillChangeSelector;
}

- (void)_setup:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 fontSize:(float)fp24;
- (id)initWithFrame:(struct _NSRect)fp8 fontSize:(float)fp24 extraSpacing:(float)fp28;
- (void)adaptToFrame;
- (void)setFontSize:(float)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setShouldAcceptFirstMouse:(BOOL)fp8;
- (void)setShouldHandleKeyDown:(BOOL)fp8;
- (void)setEnabledColor:(id)fp8 disabledColor:(id)fp12;
- (void)setEnabledColor:(id)fp8 disabledColor:(id)fp12 backgroundColor:(id)fp16;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (float)starWidth;
- (float)extraMargin;
- (void)setExtraSpacing:(float)fp8;
- (void)setIntValue:(int)fp8;
- (int)intValue;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (void)setWillChangeAction:(SEL)fp8;
- (BOOL)isContinuous;
- (void)setContinuous:(BOOL)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isTracking;
- (void)setDrawBackground:(BOOL)fp8;
- (void)setDrawBorder:(BOOL)fp8;
- (int)rankingValue;
- (void)setRankingValue:(int)fp8;
- (int)constrainedRankingValue:(int)fp8;
- (void)setMinimum:(int)fp8 maximum:(int)fp12;

@end

@interface VAlignedTextFieldCell : NSTextFieldCell
{
}

- (id)initWithTextField:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)_alternateTextColor;
- (id)attributedStringValue;

@end

@interface IPThumbView : NSView
{
    id mDelegate;
    IPViewController *mController;
    struct ThumbArray *mThumbs;
    Album *mCurrentAlbum;
    BOOL mVariableWidth;
    BOOL mFixedHeight;
    long mSelectionAnchor;
    long mSelectionExtentStart;
    long mSelectionExtentEnd;
    int mRowsOrColumns;
    BOOL mInDrag;
    NSTimer *mAnimationTimer;
    BOOL mAnimationWasStarted;
    long mDragFromIndex;
    float mDragHoleWidth;
    float mDragHoleHeight;
    long mDropTargetIndex;
    double mAnimationDuration;
    NSColor *mBackgroundColor;
    struct MessageReceiver mMessageReceiver;
    unsigned char mDrawShadow;
    unsigned char mDrawBorder;
    unsigned char mFrameClosedStacks;
    float mThumbGutter;
    float mWidth;
    float mHeight;
    float mMaxWidth;
    float mMaxHeight;
    float mThumbSize;
    float mThumbMaxSize;
    float mATPAnimStart;
    float mATPAnimDest;
    double mATPAnimationStartTime;
    double mATPAnimationDuration;
    NSTimer *mATPAnimationTimer;
    id originalScrollerTarget;
    SEL originalScrollerSelector;
    BOOL mDoNotAnimateNextMove;
    BOOL mIsVertical;
    BOOL _useCustom;
    NSImage *mShelvedBadge;
    struct _NSSize mShelvedBadgeSize;
    NSImage *mHiddenBadge;
    struct _NSSize mHiddenBadgeSize;
    BOOL mDrawPlaceAtExit;
    BOOL mDontDrawHoles;
}

- (id)shelvedBadge;
- (struct _NSSize)shelvedBadgeSize;
- (id)hiddenBadge;
- (struct _NSSize)hiddenBadgeSize;
- (void)setThumbSizeInfo;
- (void)setRowsOrColumns:(int)fp8;
- (struct _NSRect)_calcThumbRect:(struct Thumb *)fp8 thumbSize:(float)fp12 maxThumbSize:(float)fp16 variableHeight:(BOOL)fp20;
- (void)UpdatePreferences:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)setHidden:(BOOL)fp8;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)layoutThumbs:(BOOL)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (void)activateMessageReceiver:(struct MessageSender *)fp8;
- (void)deactivateMessageReceiver;
- (void)clearThumbs;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (void)_calculateSlidesVisibleFrom:(long *)fp8 to:(long *)fp12 hardWay:(BOOL)fp16 useSelection:(BOOL)fp20 whollyVisible:(BOOL)fp24 subRect:(struct _NSRect)fp28;
- (void)awakeFromNib;
- (void)scrollAnimator:(id)fp8;
- (void)animateToPosition:(float)fp8 from:(float)fp12;
- (void)_clearATPAnimationTimer;
- (void)_serviceATPAnimation;
- (void)_cleanUpATPAnimation;
- (BOOL)thumbScrollRectToVisible:(struct _NSRect)fp8;
- (id)getImageDB;
- (struct IPPhotoInfo *)photoInfoForThumb:(struct Thumb *)fp8;
- (BOOL)squareThumbs;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)keyDownIgnoresShiftKey;
- (void)doDeleteKey;
- (void)swipeWithEvent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)scrollSelectedThumbToVisible;
- (void)scrollThumbToVisible:(long)fp8;
- (void)selectAll:(id)fp8;
- (void)selectNone:(id)fp8;
- (void)selectNext:(BOOL)fp8;
- (void)selectPrevious:(BOOL)fp8;
- (void)selectFirstAndForceNotify:(BOOL)fp8;
- (void)selectLast;
- (long)countSelected;
- (long)countSecondarySelected;
- (long)countPrimarySelected;
- (float)thumbGutter;
- (struct Thumb *)_thumbAtIndex:(long)fp8;
- (long)count;
- (struct IPPhotoList *)selectedPhotos;
- (struct IPPhotoList *)secondarySelectedPhotos;
- (struct IPPhotoList *)allSelectedPhotos;
- (void)dirtyThumbFrame:(struct _NSRect)fp8;
- (void)clearSelection:(BOOL)fp8 secondarySelection:(BOOL)fp12 notify:(BOOL)fp16;
- (void)clearSelectionAndNotify:(BOOL)fp8;
- (void)clearSecondarySelectionAndNotify:(BOOL)fp8;
- (BOOL)setSelectionFrom:(long)fp8 to:(long)fp12;
- (BOOL)setSecondarySelectionFrom:(long)fp8 to:(long)fp12;
- (BOOL)setSelection:(BOOL)fp8 secondarySelection:(BOOL)fp12 index:(long)fp16;
- (BOOL)setSelection:(BOOL)fp8 index:(long)fp12;
- (BOOL)getSelection:(long)fp8;
- (BOOL)getSecondarySelection:(long)fp8;
- (void)_notifySelection:(long)fp8;
- (long)getFirstSelection;
- (long)getLastSelection;
- (BOOL)getNextSelection:(BOOL)fp8 next:(long *)fp12;
- (BOOL)getPreviousSelection:(BOOL)fp8 previous:(long *)fp12;
- (BOOL)getNextSecondarySelection:(BOOL)fp8 next:(long *)fp12;
- (BOOL)getPreviousSecondarySelection:(BOOL)fp8 previous:(long *)fp12;
- (void)selectedIndices:(long **)fp8 count:(long *)fp12;
- (void)setSelectionToIndices:(long *)fp8 count:(long)fp12;
- (void)setSelectionForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhotoInfo:(struct IPPhotoInfo *)fp8 secondarySelect:(BOOL)fp12;
- (void)secondarySelectFrom:(long)fp8 to:(long)fp12 newSelection:(long)fp16;
- (void)addPhotoToSelection:(struct IPPhotoInfo *)fp8;
- (void)reduceMultiSelectTo:(struct IPPhotoInfo *)fp8;
- (long)indexForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (long)exhaustiveIndexForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (long)thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (void)_sizeFrameWidthOrHeight:(float)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)acceptsFirstMouse;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)_animateAHoleAt:(long)fp8;
- (void)_cleanUpAnimation;
- (void)_clearAnimationTimer;
- (void)_serviceAnimation;
- (BOOL)fillPasteboardWithSelectionDeclaresThumbPBoardType;
- (void)_fillPasteboardWithSelection:(id)fp8 useSecondary:(BOOL)fp12;
- (unsigned int)_determineDragResult:(id)fp8;
- (void)thumbWillRemove:(long)fp8;
- (void)thumbDidInterject:(long)fp8;
- (void)_pasteFromPasteboard:(id)fp8;
- (BOOL)allowDragReorder;
- (void)_dragSelection:(id)fp8 index:(long)fp12 useSecondary:(BOOL)fp16;
- (id)useBlackScroller;
- (void)setUsesCustomBackgroundColor:(BOOL)fp8;
- (void)_backgroundColorChanged:(id)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (BOOL)isVertical;
- (void)setVertical:(BOOL)fp8;
- (BOOL)renderStackFraming;

@end

@interface BurnInfo : InfoView
{
    id mBackgroundView;
    id mNameText;
    id mSelectedText;
    id mUsedText;
    id mFreeText;
    id mCDGauge;
    id mCancelButton;
    DRDevice *mDevice;
    unsigned long long mSelectionSize;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)becomeCurrent;
- (void)startBurn:(id)fp8;
- (void)cancelBurn:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (void)_deviceStatusChanged:(id)fp8;
- (void)updateData:(BOOL)fp8;
- (id)device;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (unsigned long long)_sizeOfImageRecs:(struct IPSelectionList *)fp8;
- (void)_calculateSelectionSize;
- (void)_setCDGaugeForSelection;
- (void)_updateSelected;
- (void)_updateUsed;
- (void)_updateFree;
- (id)undoManagerForTextView:(id)fp8;

@end

@interface IPShShutdownChecker : NSObject
{
}

+ (void)check:(id)fp8;
+ (void)startChecking:(struct SharingContext *)fp8;

@end

@interface SaturationSlider : HUDSlider
{
}

- (void)loadValue:(float)fp8;
- (void)setCurrentValue:(float)fp8;

@end

@interface HUDSlider : ImageSlider
{
    NSTextField *mTextField;
    float mMinLabelValue;
    float mMaxLabelValue;
    NSString *mFormatString;
    NSString *mZeroString;
    BOOL _useSegmentedTrack;
    BOOL _useNoTickTrack;
    NSImage *_trackLeft;
    NSImage *_trackFill;
    NSImage *_trackRight;
    NSImage *_trackFull;
    BOOL _leftRightGoToEnd;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setMinLabel:(float)fp8 maxLabel:(float)fp12 formatString:(id)fp16 zeroString:(id)fp20;
- (void)setMinLabel:(float)fp8 maxLabel:(float)fp12 formatString:(id)fp16;
- (id)formatString;
- (void)dealloc;
- (void)setStringValue:(id)fp8;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(unsigned int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setCurrentValue:(float)fp8;
- (void)loadValue:(float)fp8;
- (void)resetValue;
- (float)defaultValue;
- (void)setLeftRightGoToEnd:(BOOL)fp8;
- (void)leftButtonClicked:(id)fp8;
- (void)rightButtonClicked:(id)fp8;
- (void)setSliderValue:(float)fp8 andSendAction:(BOOL)fp12;
- (BOOL)useSegmentedTrack;
- (void)setUseNoTickTrack;
- (void)setUseSegmentedTrack:(BOOL)fp8;
- (id)trackLeft;
- (void)setTrackLeft:(id)fp8;
- (id)trackFill;
- (void)setTrackFill:(id)fp8;
- (id)trackRight;
- (void)setTrackRight:(id)fp8;
- (id)trackFull;
- (void)setTrackFull:(id)fp8;

@end

@interface HUDView : NSView
{
    NSString *_pTitle;
    struct _NSPoint _initialWindowPos;
    struct _NSPoint _initialMousePos;
    BOOL _isMovingWindow;
    BOOL _hasDismissButton;
    BOOL _isDismissingWindow;
    BOOL _isAboutToDismiss;
    BOOL _hasShowInspectorButton;
    BOOL _isShowingInspector;
    BOOL _isAboutToShowInspector;
    BOOL _resizesToTitle;
    BOOL _divideSubviews;
    float _opacity;
    float _backgroundGray;
    BOOL _useTransparency;
    NSAttributedString *_pDisplayStr;
    struct _NSRect _strDrawRect;
    struct _NSRect _strHitRect;
    struct _NSPoint _imagePoint;
    NSButton *mCloseButton;
    NSButton *mMenuButton;
    id mDelegate;
    NSAttributedString *mMessageAttString;
    NSString *mMessage;
    NSImage *_bgImage;
    BOOL miPhoto8StyleHUD;
    struct _NSPoint mCloseButtonOffset;
    struct _NSPoint mTitleOffset;
}

+ (float)titleBarHeight;
+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8;
- (void)performClose:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)initDialogueViewWithOrigin:(struct _NSPoint)fp8 width:(float)fp16 delegate:(id)fp20;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 delegate:(id)fp24 showMenu:(BOOL)fp28 showClose:(BOOL)fp32;
- (id)initWithFrame:(struct _NSRect)fp8 delegate:(id)fp24 showMenu:(BOOL)fp28 showClose:(BOOL)fp32 iPhoto8Style:(BOOL)fp36;
- (void)setDelegate:(id)fp8;
- (void)dealloc;
- (void)defaultsChanged:(id)fp8;
- (id)backgroundColor;
- (struct _NSPoint)dismissCenter;
- (BOOL)dismissHitCheck:(struct _NSPoint)fp8;
- (struct _NSPoint)inspectorCenter;
- (BOOL)inspectorHitCheck:(struct _NSPoint)fp8;
- (BOOL)menuHitCheck:(struct _NSPoint)fp8;
- (void)resizeToAccomodateSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)moveWindow:(id)fp8;
- (void)didMoveWindow;
- (id)title;
- (BOOL)isDialogue;
- (void)setTitle:(id)fp8;
- (void)setMessage:(id)fp8;
- (BOOL)hasDismissButton;
- (void)setHasDismissButton:(BOOL)fp8;
- (void)setUsesBGArt:(BOOL)fp8 withName:(id)fp12;
- (struct _NSRect)contentRect;
- (void)doHUDMenu:(id)fp8;
- (BOOL)resizesToTitle;
- (void)setResizesToTitle:(BOOL)fp8;
- (BOOL)divideSubviews;
- (void)setDivideSubviews:(BOOL)fp8;
- (BOOL)useTransparency;
- (void)setUseTransparency:(BOOL)fp8;
- (float)opacity;
- (void)setOpacity:(float)fp8;
- (float)backgroundGray;
- (void)setBackgroundGray:(float)fp8;

@end

@interface HUDWindow : DisappearingWindow
{
    BOOL _isFadingOut;
    BOOL _canBecomeKeyWindow;
}

+ (id)HUDWindowWithContentRect:(struct _NSRect)fp8 title:(id)fp24 delegate:(id)fp28 showMenu:(BOOL)fp32 showClose:(BOOL)fp36;
- (id)view;
- (id)backgroundColor;
- (void)setTitle:(id)fp8;
- (void)setCanBecomeKeyWindow:(BOOL)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)hasCloseButton;
- (void)invalidateShadow;
- (BOOL)isExcludedFromWindowsMenu;
- (BOOL)canBecomeMainWindow;
- (void)setIsHUDFadingOut:(BOOL)fp8;
- (void)fadeClosed;
- (void)mouseMoved:(id)fp8;
- (void)sendEvent:(id)fp8;

@end

@interface EditHUDController : NSObject
{
    Edit *mEdit;
    id mTarget;
    HUDView *mMainView;
    NSPanel *mPanel;
    int mWindowLevel;
    BOOL mCurrentIsRAW;
    id mBrightnessContrastView;
    id mColorView;
    id mAdvancedView;
    id mHighlightsShadowsView;
    HUDHistogram *mHistogramView;
    id mButtonView;
    id mEffectsView;
    id mResetButton;
    id mCopySettingsButton;
    id mPasteSettingsButton;
    NSButton *mNeutralPointDropper;
    HUDDoubleSlider *mLimitsSlider;
    NSTextField *mLimitsSliderName;
    NSTextField *mLimitsSliderLowValue;
    NSTextField *mLimitsSliderHighValue;
    HUDSlider *mExposureSlider;
    HUDSlider *mRecoverySlider;
    HUDSlider *mContrastSlider;
    SaturationSlider *mSaturationSlider;
    HUDCheckboxButton *mVibrancyCheckbox;
    NSTextField *mExposureSliderName;
    NSTextField *mExposureSliderValue;
    NSTextField *mRecoverySliderName;
    NSTextField *mRecoverySliderValue;
    NSTextField *mContrastSliderName;
    NSTextField *mContrastSliderValue;
    NSTextField *mSaturationSliderName;
    NSTextField *mSaturationSliderValue;
    HUDSlider *mDefinitionSlider;
    HUDSlider *mHighlightsSlider;
    HUDSlider *mShadowsSlider;
    HUDSlider *mSharpnessSlider;
    HUDSlider *mNoiseSlider;
    NSTextField *mDefinitionSliderName;
    NSTextField *mDefinitionSliderValue;
    NSTextField *mHighlightsSliderName;
    NSTextField *mHighlightsSliderValue;
    NSTextField *mShadowsSliderName;
    NSTextField *mShadowsSliderValue;
    NSTextField *mSharpnessSliderName;
    NSTextField *mSharpnessSliderValue;
    NSTextField *mNoiseSliderName;
    NSTextField *mNoiseSliderValue;
    HUDSlider *mTemperatureSlider;
    HUDSlider *mTintSlider;
    NSTextField *mTemperatureSliderName;
    NSTextField *mTemperatureSliderValue;
    NSTextField *mTintSliderName;
    NSTextField *mTintSliderValue;
    EffectsView *mRealEffectsView;
    BOOL mFreePanel;
    NSView *mAlternateView;
    BOOL mUseVibrancy;
}

- (id)init;
- (void)awakeFromNib;
- (void)processingRAW;
- (void)notProcessingRAW;
- (void)processingRAWTemp:(float)fp8 tint:(float)fp12 andExposure:(float)fp16 andRecovery:(float)fp20;
- (void)resetNormalSliders;
- (void)useRAWSliderRanges:(BOOL)fp8;
- (void)initializeUI;
- (void)initializeWithEditList:(id)fp8;
- (void)reset:(id)fp8;
- (void)setTarget:(id)fp8;
- (void)setEdit:(id)fp8;
- (id)currentEdit;
- (void)refresh;
- (BOOL)isVisible;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setAlternativeWindow:(id)fp8;
- (void)resetPanel;
- (id)mainView;
- (void)intializeMainView;
- (void)showPanel:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)closePanel;
- (void)layoutMainView;
- (void)toggleBrightness;
- (void)toggleColor;
- (void)toggleAdvanced;
- (id)contrastSlider;
- (id)definitionSlider;
- (id)saturationSlider;
- (id)temperatureSlider;
- (id)tintSlider;
- (id)sharpnessSlider;
- (id)exposureSlider;
- (id)highlightsSlider;
- (id)shadowsSlider;
- (id)limitsSlider;
- (id)histogramView;
- (id)noiseSlider;
- (void)optionKeyDown:(BOOL)fp8;
- (void)copySettings:(id)fp8;
- (void)pasteSettings:(id)fp8;
- (void)toggleNeutralPointDropper:(id)fp8;
- (BOOL)useVibrancy;
- (void)setUseVibrancy:(BOOL)fp8;
- (void)onClickVibrancyCheckbox:(id)fp8;

@end

@interface BackgroundButton : FirstMouseButton
{
    NSImage *mBackgroundImage;
    NSImage *mBackgroundAlternate;
    BOOL mRecordedInitialSize;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)setBackgroundImage:(id)fp8;
- (void)setBackgroundAlternate:(id)fp8;
- (void)sizeToFit;

@end

@interface BackgroundButtonCell : NSButtonCell
{
    NSImage *mBackgroundImage;
    NSImage *mBackgroundAlternate;
    struct _NSSize mInitialSize;
}

- (id)initWithCell:(id)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (void)setBackgroundImage:(id)fp8;
- (void)setBackgroundAlternate:(id)fp8;
- (void)setInitialSize:(struct _NSSize)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface HUDHistogram : NSView
{
    EditHUDController *mHUDController;
    float mBlackPoint;
    float mWhitePoint;
    float mScaleY;
    float mLastScaleY;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)invalidateScale;
- (void)drawChannel:(struct CGContext *)fp8 rect:(struct _NSRect)fp12 histogram:(float *)fp28 color:(const float *)fp32;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setBlackPoint:(float)fp8;
- (void)setWhitePoint:(float)fp8;

@end

@interface IPBookHardCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mSpineEdgeArt;
    NSImage *mFlapEdgeArt;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (struct CGRect)clipRect;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPBookSimplexView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 leftLaying:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface IPBookSoftCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mSpineEdgeArt;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPBookSpreadView : IPBookView
{
    struct _NSRect mArtRect;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)setController:(id)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface HUDDoubleSlider : NSControl
{
    NSImage *mBackground;
    struct _NSRect mTrackRect;
    struct _NSRect mRightKnobRect;
    struct _NSRect mLeftKnobRect;
    struct _NSRect mCenterKnobRect;
    float mCurrentRightValue;
    float mCurrentLeftValue;
    float mCurrentCenterValue;
    float mMinValue;
    float mMaxValue;
    SEL mAction;
    SEL mMouseUpAction;
    SEL mMouseDownAction;
    id mTarget;
    BOOL mIsChanging;
    BOOL mIsChangingLeft;
    BOOL mIsChangingMiddle;
    BOOL mThreeKnobMode;
    NSTextField *mLeftTextField;
    NSTextField *mRightTextField;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)enterThreeKnobMode;
- (void)exitThreeKnobMode;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (BOOL)isOpaque;
- (BOOL)isContinuous;
- (void)setAction:(SEL)fp8;
- (void)setMouseUpAction:(SEL)fp8;
- (void)setMouseDownAction:(SEL)fp8;
- (void)setTarget:(id)fp8;
- (void)setBackground:(id)fp8;
- (void)setTrackRect:(struct _NSRect)fp8;
- (void)setLeftStringValue:(id)fp8;
- (void)setRightStringValue:(id)fp8;
- (float)floatValue;
- (float)leftFloatValue;
- (float)rightFloatValue;
- (float)centerFloatValue;
- (void)setCurrentRightValue:(float)fp8;
- (void)setCurrentCenterValue:(float)fp8;
- (void)resetCenterValue;
- (void)sendAction;
- (void)setCurrentLeftValue:(float)fp8;
- (void)resetValues;
- (void)loadValuesForLeft:(float)fp8 andRight:(float)fp12;
- (void)setMinValue:(float)fp8;
- (void)setMaxValue:(float)fp8;
- (float)minValue;
- (float)maxValue;
- (void)_adjustValueByMovingKnob:(float)fp8;
- (float)_trackPointForValue:(float)fp8;
- (float)_valueForTrackPoint:(float)fp8;
- (BOOL)isChanging;
- (void)dealloc;
- (void)leftButtonClicked:(id)fp8;
- (void)rightButtonClicked:(id)fp8;

@end

@interface HUDMenu : NSView
{
    NSDictionary *mStringAttributes;
    NSMutableArray *mTitles;
    int mTrackTag;
    EditHUDController *mController;
    NSTextField *mBCLabel;
    NSTextField *mColorLabel;
    NSTextField *mCorrectionLabel;
    NSTextField *mAdvancedLabel;
    struct _NSRect mBCRect;
    struct _NSRect mColorRect;
    struct _NSRect mCorrectionRect;
    struct _NSRect mAdvancedRect;
    struct _NSRect mCurrentRect;
    struct _NSPoint mSlopPoint;
    NSAttributedString *mWhiteCheck;
    NSAttributedString *mBlackCheck;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)addTrackingRect;
- (BOOL)acceptsFirstResponder;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseExited:(id)fp8;

@end

@interface IPTextElementStyle : NSObject
{
    NSString *mName;
    NSFont *mFont;
    NSString *mLabel;
    float mLineSpacing;
    unsigned int mAlignment;
    unsigned int mVAlignment;
    float mSize;
    float mPreviousSize;
    float mTargetSize;
    NSColor *mColor;
    NSString *mColorName;
    BOOL mNeedsUpdate;
    BOOL mLeadingEnabled;
    NSView *mEditorView;
    NSTextField *mTextStyleLabel;
    NSPopUpButton *mFontNamePopup;
    NSPopUpButton *mFontStylePopup;
    NSComboBox *mFontSizeCombo;
    NSArray *mFontFamilyMembers;
    NSMutableArray *mFontFamilies;
    float mCachedSampleHeight;
    NSString *mSampleString;
}

+ (id)defaultStyle;
+ (id)defaultTitleStyle;
+ (id)defaultSubtitleStyle;
- (id)initWithString:(id)fp8 name:(id)fp12 forTemplate:(id)fp16;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (struct _NSRect)frameForAttributedString:(id)fp8 maxFrame:(struct _NSRect *)fp12;
- (void)calculateCachedSampleHeight;
- (void)updateFromEncodedString:(id)fp8 forTemplate:(id)fp12;
- (float)cachedSampleHeight;
- (id)sampleString;
- (void)setSampleString:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (id)name;
- (id)label;
- (id)font;
- (void)setFont:(id)fp8;
- (float)lineSpacing;
- (unsigned int)alignment;
- (void)setAlignment:(unsigned int)fp8;
- (int)verticalAlignment;
- (void)setVerticalAlignment:(int)fp8;
- (float)size;
- (float)previousSize;
- (float)targetSize;
- (id)color;
- (void)setColor:(id)fp8;
- (BOOL)leadingEnabled;
- (void)setLeadingEnabled:(BOOL)fp8;
- (id)encodedString;
- (id)editorView;
- (void)awakeFromNib;
- (void)updateEditorView;
- (void)takeValuesFromEditorView;
- (void)selectFontFamily:(id)fp8;
- (void)notify;
- (id)description;
- (void)dealloc;

@end

@interface ImportView : BackgroundColorView
{
    ImageDB *mDB;
}

- (void)awakeFromNib;
- (void)setDropDB:(id)fp8;
- (void)setup;
- (void)tearDown;
- (void)updateStatus;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface HUDDirectionView : DirectionView
{
}

- (void)initializeArt;
- (void)setCompositePoints;
- (id)_bevelImage;
- (id)imageForIndex:(int)fp8;

@end

@interface BeveledPopUpButtonCell : NSPopUpButtonCell
{
    float mTitleOffset;
    float mTitleSizeDiff;
    NSImage *mImages[9];
    NSColor *mColor;
}

+ (void)initialize;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8;
- (void)_initImages;
- (void)dealloc;
- (void)setImages:(id *)fp8;
- (void)setTitleSizeDiff:(float)fp8;
- (void)setTitleOffset:(float)fp8;
- (struct _NSRect)titleRectForBounds:(struct _NSRect)fp8;
- (void)setColor:(id)fp8;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawBorderAndBackgroundWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)__sharedTextCell;

@end

@interface NSTextFieldCell (Access)
- (void)__setControlView:(id)fp8;
@end

@interface BeveledPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface TwoTargetButton : NSButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)setSecondTarget:(id)fp8;
- (void)setSecondAction:(SEL)fp8;

@end

@interface ImagePopUpButton : NSPopUpButton
{
    BOOL mAcceptsFirstMouse;
    BOOL mWasEnabled;
    BOOL mWindowIsKey;
}

+ (Class)cellClass;
- (id)init;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)showsMenuWhenImageClicked;
- (void)setShowsMenuWhenImageClicked:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (id)arrowImage;
- (void)setArrowImage:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;

@end

@interface ImagePopUpButtonCell : NSPopUpButtonCell
{
    NSButtonCell *mButtonCell;
    BOOL mShowsMenuWhenImageClicked;
    NSImage *mImage;
    NSImage *mArrowImage;
    struct _NSSize mImageSize;
}

- (id)init;
- (id)initWithCell:(id)fp8;
- (void)dealloc;
- (struct _NSSize)imageSize;
- (void)setImageSize:(struct _NSSize)fp8;
- (BOOL)showsMenuWhenImageClicked;
- (void)setShowsMenuWhenImageClicked:(BOOL)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (void)setTitle:(id)fp8;
- (void)setAttributedTitle:(id)fp8;
- (id)font;
- (void)setFont:(id)fp8;
- (id)arrowImage;
- (struct _NSSize)arrowSize;
- (void)setArrowImage:(id)fp8;
- (struct _NSSize)cellSize;
- (void)performClick:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)highlight:(BOOL)fp8 withFrame:(struct _NSRect)fp12 inView:(id)fp28;

@end

@interface Book : NSObject
{
    id mParentAlbum;
    CDAnonymousStruct5 mPageInfo;
    NSMutableArray *mPageList;
    NSString *mBookDesignName;
    BOOL mDoubleSided;
    BOOL mCustomDesign;
    BOOL mIsModified;
    NSString *mCaptionFontName;
    NSString *mCommentFontName;
    NSString *mTitleFontName;
    NSString *mTextBlockFontName;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)isRealBook;
- (id)dictionaryWithLegacyBookInfo;
- (id)newBookThemeName;
- (BOOL)isModified;
- (void)setIsModified:(BOOL)fp8;
- (void)setParentAlbum:(id)fp8;
- (id)parentAlbum;
- (id)bookDesignName;
- (void)setBookDesignName:(id)fp8;
- (void)setPageList:(id)fp8;
- (id)pageList;
- (BOOL)isCustomDesign;
- (void)setIsCustomDesign:(BOOL)fp8;
- (void)removeAllPageDesigns;
- (void)removePageDesignForPage:(int)fp8;
- (int)pageDesignCount;
- (id)pageAtIndex:(int)fp8;
- (CDAnonymousStruct5 *)bookPageInfoWithPageRect:(struct _NSRect)fp8 album:(id)fp24 start:(int)fp28;
- (void)resetFontsToDefaults;
- (void)setCaptionFontName:(id)fp8;
- (id)captionFontName;
- (void)setCommentFontName:(id)fp8;
- (id)commentFontName;
- (void)setTitleFontName:(id)fp8;
- (id)titleFontName;
- (void)setTextFontName:(id)fp8;
- (id)textFontName;
- (void)_buildBookDesignTables;
- (BOOL)_designIsDefault;
- (id)_defaultPageList_403;
- (id)_defaultPageList_20;

@end

@interface Page : NSObject <NSCoding>
{
    NSString *mName;
    NSString *mPageDesignName;
    Book *mBook;
    BOOL mDoubleSided;
    BOOL mShowPageNumbers;
    int mImageCount;
    BOOL mLockState;
    BOOL mCoverState;
    NSMutableArray *mTextBlockIndexList;
    NSMutableArray *mTextBlockList;
    struct IPPhotoList *mLockedPhotoList;
    KeyMgr *mKeyList;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setBook:(id)fp8;
- (id)book;
- (id)imageDB;
- (id)name;
- (void)setName:(id)fp8;
- (int)imageCount;
- (void)setImageCount:(int)fp8;
- (id)setPageDesignName:(id)fp8;
- (id)pageDesignName;
- (BOOL)isLocked;
- (void)setLockState:(BOOL)fp8;
- (void)clearLockedPhotoList;
- (void)createLockedPhotoListWithCount:(int)fp8;
- (struct IPPhotoList *)lockedPhotoList;
- (struct IPPhotoInfo *)photoAtIndex:(int)fp8;
- (int)indexOfLockedPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)isCover;
- (void)setCoverState:(BOOL)fp8;
- (BOOL)isDoubleSided;
- (BOOL)shouldShowPageNumbers;
- (void)rebuild;
- (unsigned int)textBlockCount;
- (void)addTextBlock:(id)fp8 atIndex:(int)fp12;
- (id)textBlockAtIndex:(int)fp8;
- (id)arrayWithTextBlocks:(id)fp8;

@end

@interface HUDButton : NSButton
{
    unsigned int mModifiersFromLastClick;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8 andType:(unsigned int)fp12;
- (void)mouseDown:(id)fp8;
- (unsigned int)modifiersFromLastClick;
- (void)setModifiersFromLastClick:(unsigned int)fp8;
- (void)setTitle:(id)fp8;

@end

@interface HUDButtonCell : NSButtonCell
{
    float mTextNudge;
    unsigned int mType;
}

+ (void)initialize;
- (void)setTextNudge:(float)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (id)initWithCell:(id)fp8 andType:(unsigned int)fp12;
- (void)_drawRegularButtonWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)_drawCheckboxWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface DefaultMediaBrowserDelegate : NSObject
{
}

- (id)mediaBrowserView:(id)fp8 displayNameForMediaGroup:(id)fp12;

@end

@interface PhotoDisplay : IPViewController
{
    NSMenu *mSearchMenu;
    BurnInfo *mBurnPlacard;
    BackgroundColorView *mCameraPlacard;
    NSTextField *mFromDateText;
    NSTextField *mToDateText;
    NSView *mCheckBoxesView;
    NSButton *mEraseCheckbox;
    NSButton *mAutoSplitCheckbox;
    NSButton *mHideImportedCheckBox;
    NSTextField *mRollNameText;
    NSTextField *mRollDescriptionText;
    NSButtonCell *mModeAllButtonCell;
    NSButtonCell *mModeEventButtonCell;
    NSButtonCell *mModeDetailButtonCell;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mPeopleAddItem;
    IPToolbarItem *mFixPersonItem;
    NSButtonCell *mPeopleThumbsButtonCell;
    NSButtonCell *mPeopleFacesButtonCell;
    IPToolbarItem *mShowFacesItem;
    IPToolbarItem *mShowEventItem;
    IPToolbarItem *mPeopleItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mSplitItem;
    IPToolbarItem *mSplitDividerItem;
    IPToolbarItem *mRotateSpaceItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mPublishSettingsItem;
    IPToolbarItem *mPublishAnnounceItem;
    IPToolbarItem *mWebItem;
    IPToolbarItem *mNetAlbumsItem;
    IPToolbarItem *mFBAlbumsItem;
    IPToolbarItem *mFlickrAlbumsItem;
    IPToolbarItem *mSmugMugAlbumsItem;
    NSMenu *mKeepsakeMenu;
    NSMenuItem *mOrderPrintsMenuItem;
    IPToolbarItem *mKeepsakeSpaceItem;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    IPToolbarItem *mLocationItem;
    IPToolbarItem *mPrintsItem;
    NSMenu *mPrintsMenu;
    IPToolbarItem *mFacesSeparatorItem;
    IPToolbarItem *mPlacesSeparatorItem;
    NSButtonCell *mTileViewButtonCell;
    NSButtonCell *mMapViewButtonCell;
    IPToolbarItem *mViewModeToolbarItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    BOOL mShowingImportPlacard;
    BOOL mGPSDataAttached;
}

- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)initToolbar;
- (void)freeToolbar;
- (void)doBackButton;
- (void)setController:(id)fp8;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (struct _NSRect)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (id)updateStatus;
- (void)switchToTileView:(id)fp8;
- (void)switchToMapView:(id)fp8;
- (id)searchItem;
- (BOOL)supportsFindCommand;
- (struct _NSRect)keywordActionIndicatorLocation;
- (void)showEventAction:(id)fp8;
- (void)startPeopleMode:(id)fp8;
- (void)fixPersonAction:(id)fp8;
- (void)switchToPeopleDetailThumbs:(id)fp8;
- (void)switchToPeopleDetailFaces:(id)fp8;
- (void)personAddAction:(id)fp8;
- (void)_loadNib;
- (void)_setup;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (BOOL)validateMenuItem:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeCutover;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;

@end

@interface IPAlbumListState : NSObject
{
    struct vector<IPAlbumState*, std::allocator<IPAlbumState*>> *mAlbumStates;
}

- (id)initWithAlbumList:(struct IPAlbumList *)fp8 manageList:(BOOL)fp12;
- (void)dealloc;
- (struct IPAlbumList *)restoreAlbumList;

@end

@interface DMAPClientLogoutRequest : DMAPClientRequest
{
}

- (void)dealloc;
- (id)initWithService:(id)fp8;
- (id)_relativePath;
- (id)_dictionaryForResponse:(id)fp8;

@end

@interface IPUnplacedPhotoView : IPThumbView
{
    IPPage *mScrapPage;
    BookAlbum *mBookAlbum;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setThumbSizeInfo;
- (void)resetCells;
- (void)setBookAlbum:(id)fp8;
- (void)layoutThumbs:(BOOL)fp8;
- (void)_placedPhotosChanged:(id)fp8;
- (void)photoRotated:(id)fp8;
- (void)thumbChanged:(id)fp8;
- (id)getImageDB;
- (struct IPPhotoInfo *)photoInfoForThumb:(struct Thumb *)fp8;
- (void)doDeleteKey;
- (void)clearSelectionAndNotify:(BOOL)fp8;
- (BOOL)setSelectionFrom:(long)fp8 to:(long)fp12;
- (void)mouseDown:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)fillPasteboardWithSelectionDeclaresThumbPBoardType;
- (unsigned int)_determineDragResult:(id)fp8;
- (BOOL)allowDragReorder;
- (void)_dragSelection:(id)fp8 index:(long)fp12 useSecondary:(BOOL)fp16;

@end

@interface HUDImageButton : NSView
{
    NSImage *mNormalImage;
    NSImage *mPressedImage;
    NSImage *mDisabledImage;
    SEL mAction;
    id mTarget;
    BOOL mPressed;
    double mLastNotify;
    BOOL mDisabled;
    NSAttributedString *mTitle;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setAttributedTitle:(id)fp8;
- (void)setNormalImage:(id)fp8;
- (void)setPressedImage:(id)fp8;
- (void)setDisabledImage:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)enabled;
- (void)notify;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;

@end

@interface VAlignTextView : NSTextView
{
    struct _NSRect mPreservedBounds;
    struct _NSRect _boundingBox;
    int _valign;
    struct _NSPoint _lastOrigin;
    struct _NSPoint _lastSuperOrigin;
    BOOL _cacheDirty;
    struct _NSRect _usedRect;
    float _lastDelta;
    BOOL _useRealMetrics;
    BOOL _honorFlipped;
    float _nudgeY;
    NSTextField *mLocationParseField;
}

- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_setFrameSize:(struct _NSSize)fp8 forceScroll:(BOOL)fp16;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)bounds;
- (int)vAlignment;
- (void)setVAlignment:(int)fp8;
- (struct _NSRect)roughUsedRect;
- (struct _NSRect)realUsedRect;
- (float)lastDelta;
- (void)didChangeText;
- (struct _NSPoint)textContainerOrigin;
- (float)nudgeY;
- (void)setNudgeY:(float)fp8;
- (BOOL)honorFlipped;
- (void)setHonorFlipped:(BOOL)fp8;
- (BOOL)useRealMetrics;
- (void)setUseRealMetrics:(BOOL)fp8;

@end

@interface DividedTableView : NSTableView
{
    int mDividerLocation;
    float mDividerHeight;
    NSColor *mDividerColor;
    NSAttributedString *mTitle;
    float mTitleWidth;
    float mTitleLeftInset;
    float mTitleRightSpaceAfter;
    float mTitleFromTop;
    float mHeightAboveLine;
    float mHeightOfLine;
    float mHeightBelowLine;
    float mWidthRightOfLine;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setDividerLocationAfterRow:(int)fp8;
- (void)setBarColor:(id)fp8;
- (void)setTitle:(id)fp8 topInset:(float)fp12 leftInset:(float)fp16 rightSpaceAfter:(float)fp20;
- (void)setSpacingAboveLine:(float)fp8 line:(float)fp12 belowLine:(float)fp16 right:(float)fp20;
- (struct _NSRect)rectOfRow:(int)fp8;
- (int)rowAtPoint:(struct _NSPoint)fp8;

@end

@interface IPShDelayedActions : NSObject
{
}

+ (void)processDelayedActionsOnMain:(id)fp8;

@end

@interface ShCocoaNotification : NSObject
{
}

+ (void)postNotificationOnMain:(id)fp8;
+ (void)dispatchServerEvent:(id)fp8;
+ (void)setUpSharingObserver:(struct ShAppAdapter *)fp8;
+ (void)removeSharingObserver;

@end

@interface IPMultiPageTextView : IPPageView
{
}

- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (id)pdfDataForPage:(int)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)dealloc;

@end

@interface GradientButtonCell : NSButtonCell
{
    struct CGShading *mButtonShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
    BOOL mNoBottom;
    BOOL mNoRight;
}

- (id)initWithCell:(id)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)dealloc;
- (BOOL)noBottom;
- (void)setNoBottom:(BOOL)fp8;
- (BOOL)noRight;
- (void)setNoRight:(BOOL)fp8;

@end

@interface DBRepairPrompt : NSObject
{
    NSWindow *mRepairWindow;
    int mRepairOptions;
    BOOL mAllowRebuild;
    NSButton *mSmallThumbs;
    NSButton *mLargeThumbs;
    NSButton *mUnconvertedImages;
    NSButton *mOrphanedImages;
    NSButton *mRepairPermissions;
    NSButton *mRebuildFromBackup;
    NSButton *mOKButton;
    NSButton *mCancelButton;
}

+ (int)runInWindow:(id)fp8 withRootPath:(id)fp12;
- (id)init;
- (void)setAllowRebuildOption:(BOOL)fp8;
- (int)repairOptions;
- (id)window;
- (void)setOption:(int)fp8 forCheckbox:(id)fp12;
- (void)_updateOptions;
- (void)repairOptionChanged:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface IPEditThumbView : IPThumbView
{
    Album *mOriginalAlbum;
    struct IPPhotoList *mVisiblePhotos;
}

- (void)dealloc;
- (void)_notifySelection:(long)fp8;
- (id)getImageDB;
- (BOOL)extendSelectionForIndex:(long)fp8;
- (void)mouseDown:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)rebuildViewWithController:(id)fp8 forced:(BOOL)fp12;
- (long)thumbnailHitTest:(struct _NSPoint)fp8 clip:(BOOL)fp16;
- (void)setThumbSizeInfo;
- (void)layoutThumbs:(BOOL)fp8;
- (BOOL)renderStackFraming;
- (void)thumbChanged:(id)fp8;
- (void)logThumbInfo:(id)fp8;

@end

@interface MainThreadMessageReceiver : NSObject
{
    void *mFuncToCall;
}

+ (void)callFunction:(void *)fp8 withMessage:(unsigned long)fp12 data1:(void *)fp16 data2:(void *)fp20 data3:(void *)fp24 userData:(void *)fp28;
- (void)_doItOnMainThread:(id)fp8;

@end

@interface DisappearingWindow : NSWindow
{
    BOOL mTieToMainMenu;
    int mWindowType;
    struct _NSRect mOnScreenRect;
    struct _NSRect mOffScreenRect;
    BOOL mOnTop;
    BOOL mAnimatingOn;
    id mKeyEventHandler;
    id mDelegate;
    int mTrackingTag;
    int mAutoKeyTrackingTag;
    BOOL mHaveEntered;
    id _moveTrackingSibling;
    BOOL mChangeWindowLevel;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32 type:(int)fp36;
- (void)setType:(int)fp8;
- (void)setChangeWindowLevel:(BOOL)fp8;
- (void)setFrameToOnScreenRect:(BOOL)fp8;
- (void)updateOnAndOffScreenRectsForOnScreenRect:(struct _NSRect)fp8;
- (void)setDelegate:(id)fp8;
- (void)dealloc;
- (void)zoomOntoScreenFromRect:(struct _NSRect)fp8 toFinalRect:(struct _NSRect)fp24;
- (void)flyToFinalRect:(struct _NSRect)fp8;
- (void)animateWindowsOff:(id)fp8;
- (BOOL)isOnScreen;
- (void)tieToMainMenu;
- (void)untieToMainMenu;
- (void)hideMenu;
- (void)enableAutoKey;
- (void)disableAutoKey;
- (double)animationResizeTime:(struct _NSRect)fp8;
- (void)enableAutoHide;
- (void)disableAutoHide;
- (void)siblingMouseMoved:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)setKeyEventHandler:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)mouseInsideWindow;
- (void)displayIfNeeded;
- (void)setAlphaValue:(float)fp8;
- (void)instantOffIfNecessary;
- (void)instantOnIfNecessary;
- (void)addAnimateOnToAnimation:(id)fp8;
- (void)animateOn;
- (void)addAnimateOffToAnimation:(id)fp8;
- (void)animateOffWithDuration:(double)fp8 ignoreMouse:(BOOL)fp16;
- (void)animateOff;
- (void)_animationOver;
- (void)animationDidEnd:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (id)moveTrackingSibling;
- (void)setMoveTrackingSibling:(id)fp8;

@end

@interface TransparentView : NSView
{
    NSColor *mColor;
    BOOL mSuppressMouse;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setColor:(id)fp8;
- (void)suppressMouse:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface IPCalendarElement : IPGridElement
{
    double mReferenceDate;
    NSArray *mDropZoneRotations;
    int mLastDropZoneRotationIndex;
    NSArray *mDropZoneOffsets;
    int mLastDropZoneOffsetIndex;
    NSString *mPreviewCellPositioning;
    IPTextElementStyle *mTitleTextStyle;
    IPTextElementStyle *mDayOfWeekTextStyle;
    IPTextElementStyle *mDayTextStyle;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)ensureSubElements;
- (void)changeReferenceDateToDate:(double)fp8;
- (void)ensureReferenceDate;
- (double)referenceDate;
- (void)_ensureMonthPreviewCells;
- (void)setParent:(id)fp8;
- (BOOL)isCalendarElement;
- (BOOL)isGridElement;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (BOOL)cellIsAtLeftEdge:(id)fp8;
- (BOOL)cellIsAtRightEdge:(id)fp8;
- (BOOL)cellIsAtTopEdge:(id)fp8;
- (BOOL)cellIsAtBottomEdge:(id)fp8;
- (BOOL)cellIsAtLeftEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtRightEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtTopEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)cellIsAtBottomEdge:(id)fp8 includeEmptyCells:(BOOL)fp12;
- (BOOL)textIsClipped;
- (id)monthName;
- (id)abbreviatedMonthName;
- (id)monthNameAndYear;
- (id)dropZoneRotations;
- (void)setRotationForDropZoneElement:(id)fp8;
- (id)dropZoneOffsets;
- (void)setOffsetForDropZoneElement:(id)fp8;
- (id)previewCellPositioning;
- (BOOL)shouldDrawCalendarPreviews;
- (BOOL)calendarPreviewIsFloating;
- (void)populateCellsWithEventData;
- (void)copyDataFromCalendarElement:(id)fp8;
- (id)availableCaptionLocationsForCell:(id)fp8;
- (id)titleTextStyle;
- (void)setTitleTextStyle:(id)fp8;
- (id)dayOfWeekTextStyle;
- (void)setDayOfWeekTextStyle:(id)fp8;
- (id)dayTextStyle;
- (void)setDayTextStyle:(id)fp8;
- (void)dealloc;

@end

@interface IPCalendarElementCell : IPPageElement
{
    float mCellPaddingLeft;
    float mCellPaddingRight;
    float mCellPaddingTop;
    float mCellPaddingBottom;
    double mDate;
    IPTextElementStyle *mDayTextStyle;
    IPTextElementStyle *mEventDayTextStyle;
    IPTextElementStyle *mUserTextStyle;
    IPTextElementStyle *mDataTextStyle;
    IPTextElementStyle *mCaptionTextStyle;
    IPTextElementStyle *mPrevNextMonthTextStyle;
    IPTextElement *mDayText;
    IPTextElement *mDayContentText;
    NSDictionary *mDropZonePrototype;
    IPPageElement *mDropZoneElement;
    NSString *mCaptionText;
    NSAttributedString *mCaptionPreservedText;
    int mCaptionLocation;
    BOOL mCaptionShowing;
    BOOL mContentIsCaption;
    BOOL mContentIsExternal;
    BOOL mCellIsEmpty;
}

- (id)initWithElement:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)finishTakeValues;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)textIsClipped;
- (float)cellPaddingLeft;
- (float)cellPaddingRight;
- (float)cellPaddingTop;
- (float)cellPaddingBottom;
- (void)setCellPaddingLeft:(float)fp8 right:(float)fp12 top:(float)fp16 bottom:(float)fp20;
- (void)setDate:(double)fp8;
- (double)date;
- (int)dayInMonth;
- (void)setDayTextStyle:(id)fp8;
- (id)dayTextStyle;
- (void)setEventDayTextStyle:(id)fp8;
- (id)eventDayTextStyle;
- (void)setUserTextStyle:(id)fp8;
- (id)userTextStyle;
- (void)setDataTextStyle:(id)fp8;
- (id)dataTextStyle;
- (void)setCaptionTextStyle:(id)fp8;
- (id)captionTextStyle;
- (void)setPrevNextMonthTextStyle:(id)fp8;
- (id)prevNextMonthTextStyle;
- (void)setDayTextElement:(id)fp8;
- (id)dayTextElement;
- (void)setDayContentTextElement:(id)fp8;
- (id)dayContentTextElement;
- (BOOL)showDayText;
- (BOOL)showDayContent;
- (id)dropZonePrototype;
- (void)setDropZonePrototype:(id)fp8;
- (id)dropZoneElement;
- (void)removeDropZoneElement;
- (id)captionText;
- (void)setCaptionTextQuiet:(id)fp8;
- (void)setCaptionText:(id)fp8;
- (id)captionPreservedText;
- (void)setCaptionPreservedText:(id)fp8;
- (int)captionLocation;
- (void)setCaptionLocation:(int)fp8 show:(BOOL)fp12;
- (void)_setCaptionTextIsShowing:(BOOL)fp8;
- (BOOL)captionTextIsShowing;
- (void)showCaptionText:(BOOL)fp8;
- (id)captionDisplayCell;
- (BOOL)contentIsCaption;
- (void)setContentIsCaption:(BOOL)fp8;
- (void)populateCellWithEventData;
- (BOOL)contentIsExternal;
- (void)setContentIsExternal:(BOOL)fp8;
- (void)setCellIsEmpty:(BOOL)fp8;
- (BOOL)cellIsEmpty;
- (BOOL)isCalendarCellElement;
- (void)setLocation:(struct _NSPoint)fp8;
- (BOOL)drawsHighlightBorder;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (void)dealloc;

@end

@interface IPGridElement : IPPageElement
{
    NSDictionary *mCellPrototype;
    NSMutableArray *mHeaderElements;
    NSMutableArray *mColumnHeaderPrototypes;
    NSMutableArray *mColumnHeaderElements;
    NSMutableArray *mFooterElements;
    NSMutableArray *mCellElements;
    float mHorizontalSpacing;
    float mVerticalSpacing;
    int mNumberOfRows;
    int mNumberOfColumns;
    float mHeaderHeight;
    float mColumnHeaderHeight;
    float mFooterHeight;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)ensureSubElements;
- (void)ensureSubElementBounds;
- (id)cellPrototype;
- (id)headerElements;
- (id)columnHeaderElements;
- (id)columnHeaderPrototypes;
- (id)footerElements;
- (id)cellElements;
- (id)cellAboveCell:(id)fp8;
- (id)cellBelowCell:(id)fp8;
- (id)cellToLeftOfCell:(id)fp8;
- (id)cellToRightOfCell:(id)fp8;
- (BOOL)cellIsAtLeftEdge:(id)fp8;
- (BOOL)cellIsAtRightEdge:(id)fp8;
- (BOOL)cellIsAtTopEdge:(id)fp8;
- (BOOL)cellIsAtBottomEdge:(id)fp8;
- (float)horizontalCellSpacing;
- (float)verticalCellSpacing;
- (int)numberOfRows;
- (int)numberOfColumns;
- (void)setNumberOfRows:(int)fp8 columns:(int)fp12;
- (float)headerHeight;
- (float)columnHeaderHeight;
- (float)footerHeight;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (void)setRotation:(float)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setParent:(id)fp8;
- (BOOL)isGridElement;
- (id)holeElements;
- (int)emptyHoleCount;
- (id)embeddedTextElements;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)dealloc;

@end

@interface EditMgr : IPViewController <IPImageMgrDelegate>
{
    IPToolbarItem *mPreviousButton;
    IPToolbarItem *mWindowedPreviousButton;
    IPToolbarItem *mNextButton;
    IPToolbarItem *mWindowedNextButton;
    IPToolbarItem *mDoneButton;
    IPToolbarItem *mWindowedDoneButton;
    NSButton *mCropButton;
    NSButton *mWindowedCropButton;
    NSButton *mStraightenButton;
    NSButton *mWindowedStraightenButton;
    IPToolbarItem *mEnhanceButton;
    IPToolbarItem *mWindowedEnhanceButton;
    IPToolbarItem *mAdjustButton;
    IPToolbarItem *mWindowedAdjustButton;
    IPToolbarItem *mEffectsButton;
    IPToolbarItem *mWindowedEffectsButton;
    NSButton *mRedEyeButton;
    NSButton *mWindowedRedEyeButton;
    NSButton *mRetouchButton;
    NSButton *mWindowedRetouchButton;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mWindowedRotateItem;
    IPToolbarView *mWindowedToolbarView;
    BOOL mRAWOn;
    NSImageView *mRAWBadge;
    IPToolbarItem *mRAWItem;
    TransparentView *mRawSuperview;
    Album *_currentAlbum;
    struct _NSModalSession *mModalSession;
    NSMenu *mContextualMenu;
    IPEditThumbView *mThumbView;
    IPEditThumbView *mWindowedThumbView;
    NSView *mThumbPlacard;
    EditHUDController *mHUDController;
    EffectsController *mEffectsController;
    NavigationController *mNavigationController;
    LoopController *mLoopController;
    CropHUDController *mCropHUDController;
    BlemishHUDController *mBlemishHUDController;
    StraightenHUDController *mStraightenHUDController;
    HUDWindow *mHUDDialogue;
    HUDView *mHUDDialogueView;
    Edit *mCurrentEdit;
    int mCurrentEditCount;
    BOOL mAdding;
    BOOL mOptionKeyWasDown;
    BOOL mShiftKeyDown;
    IPOnscreenImageMgr *mImageMgr;
    EditBackgroundRender *mBackgroundRenderMgr;
    NSTimer *mFullImageLoadTimer;
    id <EditMgrDelegateProtocol> mDelegate;
    unsigned int mCurrentInterpolation;
    BOOL mEffectsPanelWasVisible;
    BOOL mToolPanelWasVisible;
    BOOL mNeedForwardActionIndicator;
    BOOL mNeedReverseActionIndicator;
    struct IPPhotoInfo *mPhotoInfoAfterDelete;
    NSMutableArray *mPhotoGrid;
    NSMutableArray *mPhotosBeingRemoved;
    int mCurrentEditIndex;
    BOOL mInFullScreen;
    BOOL mGoFullScreenAfterInstall;
    IPFullScreenController *mFullScreenController;
    NSView *mWindowViewParent;
    struct _NSRect mWindowViewRect;
    struct _NSPoint mAppViewOffset;
    HUDSlider *mZoomSlider;
    NSString *mMinThumbTooltip;
    NSString *mMaxThumbTooltip;
    NSString *mThumbnailSizerTooltip;
}

- (struct IPPhotoInfo *)infoAfterOnScreenImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoAfterAfterOnScreenImage:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)infoBeforeOnScreenImage:(struct IPPhotoInfo *)fp8;
- (int)indexOfOnScreenImage;
- (void)selectThumbForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)selectPhoto:(struct IPPhotoInfo *)fp8 withSecondary:(struct IPPhotoList *)fp12;
- (void)openStackAction:(id)fp8;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)_hiddenVisibilityChanged:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)_undoRedoHiddenPhotos:(struct IPPhotoInfo *)fp8 show:(BOOL)fp12 undoManager:(id)fp16;
- (void)toggleShowHiddenPhotos:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (BOOL)isThumbWindowVisible;
- (BOOL)isOpenStackEnabled;
- (BOOL)isCloseStackEnabled;
- (void)rebuildThumbView;
- (void)toggleToolbar:(id)fp8;
- (void)toggleThumbView:(id)fp8;
- (struct _NSPoint)centeredPointForHUDPanel;
- (void)dismissHUDDialogue;
- (void)showHUDDialogue:(id)fp8 message:(id)fp12;
- (void)closeHUD:(id)fp8;
- (void)resetHUDControllers;
- (id)hudController;
- (id)effectsController;
- (id)navigationController;
- (id)loopController;
- (id)cropHUDController;
- (id)blemishHUDController;
- (id)straightenHUDController;
- (void)refreshPanels;
- (void)showThumbWindow;
- (void)showToolWindow;
- (BOOL)inFullScreen;
- (void)keyDown:(id)fp8;
- (struct _NSRect)usableArea;
- (void)layoutViews;
- (void)preloadPrevNextOfInfo:(struct IPPhotoInfo *)fp8;
- (id)makeEdit;
- (void)addEditView;
- (void)addEditForPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)addEditForPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 sourceRect:(struct _NSRect)fp16;
- (void)replaceEditForPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 index:(unsigned int)fp16 direction:(int)fp20;
- (void)removeEditAtIndex:(int)fp8;
- (void)removeEditsBeingRemoved;
- (id)currentEdit;
- (id)currentEditLayer;
- (void)selectEdit:(unsigned int)fp8;
- (unsigned int)selectedEdit;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)makeEditAtIndexCurrent:(unsigned int)fp8;
- (void)updatePanelsForEditChange;
- (void)updatePanelsForEditChange:(id)fp8;
- (void)makeEditCurrent:(id)fp8;
- (void)makeEditCurrent2:(unsigned int)fp8;
- (int)editCount;
- (void)closeEditAtIndex:(unsigned int)fp8;
- (void)toggleCompareMode;
- (void)setDelegate:(id)fp8;
- (id)onscreenImageMgr;
- (id)backgroundRenderMgr;
- (BOOL)backgroundRenderMgrIsActive;
- (void)finishBackgroundRenderingWork;
- (struct IPFileImage *)loadedImageForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct IPFileImage *)reloadInfo:(struct IPPhotoInfo *)fp8 forNewEditSize:(struct _NSSize)fp12;
- (void)loadedImage:(struct IPImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)cancelFullLoad;
- (void)backgroundLoadFull:(struct IPPhotoInfo *)fp8;
- (void)loadFullRes;
- (void)loadedFullResImage:(struct IPImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)unloadHighResForInfo:(struct IPPhotoInfo *)fp8;
- (id)editEditingInfo:(struct IPPhotoInfo *)fp8;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (BOOL)photoIsHidden:(struct IPPhotoInfo *)fp8;
- (BOOL)photoIsACurrentPhoto:(struct IPPhotoInfo *)fp8;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (BOOL)shouldLoadRAW:(struct IPPhotoInfo *)fp8;
- (void)updateThumbViewSelectionsForThumbView;
- (void)albumChanged;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)updateSelection;
- (void)pushNewSelectionToCurrentEdit:(struct IPPhotoInfo *)fp8;
- (void)committingEditForPhoto:(struct IPPhotoInfo *)fp8 edit:(id)fp12;
- (id)window;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (struct IPSelectionList *)retrieveSelection;
- (id)updateStatus;
- (BOOL)hasSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8 fromFrames:(id)fp12 backgroundImage:(id)fp16 backgroundColor:(id)fp20;
- (void)currentAlbumWillSwitch:(id)fp8;
- (void)magnifierIsClosing;
- (void)dismissMagnify;
- (struct IPPhotoInfo *)currentPhoto;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)deleteCurrentImage:(BOOL)fp8;
- (void)thumbViewSelectionChanged:(id)fp8 photoIndex:(long)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (void)rebuildView:(id)fp8;
- (id)currentAlbum;
- (id)actualCurrentAlbum;
- (void)setCurrentAlbum:(id)fp8;
- (BOOL)allowsPlacard;
- (void)dealloc;
- (void)_preheat;
- (void)_loadNib;
- (void)_setup;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)viewWillBeRemoved;
- (void)teardown;
- (id)thumbView;
- (BOOL)showPlacard;
- (float)placardSizePreference;
- (void)setPlacardSizePreference:(float)fp8;
- (BOOL)placardSizePinnedPreference;
- (void)setPlacardSizePinnedPreference:(BOOL)fp8;
- (BOOL)showTools;
- (struct IPPhotoList *)volatileImages;
- (void)initializeToolPanel;
- (void)initializeToolPanel:(id)fp8;
- (void)showToolPanel:(id)fp8;
- (void)ensureToolPanel:(id)fp8;
- (void)initializeEffectsPanel;
- (void)showEffectsPanel:(id)fp8;
- (void)ensureEffectsPanel:(id)fp8;
- (void)HUDWillClose:(id)fp8;
- (void)showNavigationPanel:(id)fp8;
- (void)showLoopPanel:(id)fp8;
- (void)showCropPanel:(id)fp8;
- (void)showBlemishPanel:(id)fp8 mode:(int)fp12;
- (void)showStraightenPanel:(id)fp8;
- (void)updateUndoState;
- (void)exitToolbarEditModes:(int)fp8;
- (BOOL)currentEditIsEditable;
- (void)updateToolbarEnableState;
- (void)resetToolbar;
- (BOOL)currentImageIsRAW;
- (BOOL)currentImageIs16Bit;
- (void)refreshRAW;
- (BOOL)hasPendingEdit;
- (void)_notifyCommittedEditsMainThread;
- (void)notifyCommittedEdits;
- (void)commitImageEdits;
- (void)resetAllEditContexts;
- (void)resetEdit;
- (void)clearAllEdits;
- (void)nextActionIndicatorFromIndex:(int)fp8;
- (void)nextImage;
- (void)nextImage:(int)fp8;
- (void)prevActionIndicatorFromIndex:(int)fp8;
- (void)previousImage;
- (void)previousImage:(int)fp8;
- (void)nextImageToThe:(int)fp8;
- (void)promoteImage;
- (void)applyEnhance;
- (void)redEye:(id)fp8;
- (void)whiteBalance;
- (void)crop;
- (void)straighten;
- (void)rotateImage;
- (void)resetFilters:(id)fp8;
- (void)changeBlemishMode:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)awakeFromNib;
- (void)done;
- (void)_modifiersChanged:(id)fp8;
- (BOOL)showOriginalKeyDown;
- (void)cancelShowOriginalKeyDown;
- (id)thumbnailSizer;
- (void)updateSizer:(float)fp8;
- (id)contextualMenu;
- (void)showInspector:(id)fp8;
- (void)showKeywordInspector:(id)fp8;
- (id)undoManagerForCurrentEdit;
- (id)undoManager;
- (void)clearEditsForCurrentEditMode:(id)fp8;
- (struct _NSRect)keywordActionIndicatorLocation;
- (id)photoGrid;
- (void)setupFullScreenToolBar;
- (void)switchToFullScreen;
- (void)switchFromFullScreen;
- (void)switchFromFullScreenStayingInEdit:(BOOL)fp8;
- (void)completeExitFromFullScreen:(BOOL)fp8;
- (void)switchFromFullScreenWithWait;
- (void)switchFromFullScreenWithWaitStayingInEdit:(BOOL)fp8;
- (void)beginResizeThumbnails:(id)fp8;
- (void)endResizeThumbnails:(id)fp8;
- (void)resizeThumbnails:(id)fp8;
- (void)zoomToMax:(id)fp8;
- (void)zoomToMin:(id)fp8;
- (void)showInfoWindow;

@end

@interface IPEditContainer : NSObject
{
    Edit *mEdit;
    IPEditPhotoLayer *mEditLayer;
}

- (id)init;
- (void)dealloc;
- (id)edit;
- (id)editLayer;

@end

@interface MasterEditView : NSView
{
    EditMgr *mEditMgr;
    float mGray;
    IPBackgroundImageLayer *mBackgroundImageLayer;
    CALayer *mRootLayer;
    IPSelectionRingLayer *mSelectionLayer;
    int mSelectedPhotoIndex;
    BOOL mInLiveResize;
    BOOL mInDragMode;
    struct _NSRect mAppViewRect;
    struct _NSPoint mAppViewOffset;
    NSWindow *mFullWindow;
    int mAnimationStartCount;
    BOOL mPendingRedraw;
    SEL mPendingRedrawSelector;
    BOOL mAnimationMustComplete;
    NSInvocation *mDeferredInvocation;
    id mAppController;
    BOOL mStartedRotateGesture;
    BOOL mInRotateGesture;
    BOOL mInMagnifyGesture;
    float mAccumRotate;
    int mRotateInterlock;
    BOOL mStartedCropGesture;
    struct _NSPoint mBlemishSourcePoint;
    struct _NSPoint mMaskMagicSamplePoint;
    BOOL mFirstSetSizeIncrement;
    CIImage *mBackgroundImage;
    BOOL mTransitioningToView;
    BOOL mTransitioningToFullscreen;
    NSTimer *mCropScrollWheelTimer;
    BOOL mCanAnimate;
}

- (float *)gridForCount:(int)fp8;
- (BOOL)supportsResizeSlider;
- (BOOL)validateMenuItem:(id)fp8;
- (void)setEditMgr:(id)fp8;
- (void)setGray:(float)fp8;
- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)clear;
- (struct CGColor *)black;
- (struct CGColor *)white;
- (struct CGColor *)red;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setTransitionStateToView:(BOOL)fp8 toFullScreen:(BOOL)fp12;
- (BOOL)transitioningToView;
- (BOOL)transitioningToFullScreen;
- (void)setFrame:(struct _NSRect)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)mouseDown:(id)fp8;
- (void)pan:(id)fp8;
- (void)crop:(id)fp8;
- (void)blemishBrushing:(id)fp8;
- (void)zoomToCursorWithFactor:(float)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)setBackgroundTransitionImage:(id)fp8 andColor:(id)fp12;
- (void)addLayerAtIndex:(int)fp8 forReplace:(BOOL)fp12 direction:(int)fp16 animate:(BOOL)fp20;
- (void)addLayerAtIndex:(int)fp8 forReplace:(BOOL)fp12 direction:(int)fp16 sourceRect:(struct _NSRect)fp20 animate:(BOOL)fp36;
- (void)removeLayerAtIndex:(unsigned int)fp8 forReplace:(BOOL)fp12 direction:(int)fp16 animate:(BOOL)fp20;
- (void)removeLayer:(id)fp8;
- (struct CGRect)frameForPhotoAtIndex:(int)fp8 ofGridSize:(int)fp12;
- (void)prepareForAnimation:(id)fp8;
- (void)layoutPhotosWithRedraw;
- (void)layoutPhotos;
- (void)layoutPhotosForRootLayerSize:(struct CGSize)fp8 andOffset:(struct CGPoint)fp16;
- (void)layoutPhotosForExitWithRootLayerSize:(struct CGSize)fp8 andOffset:(struct CGPoint)fp16;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)redrawPhotos;
- (void)onRotatePhoto:(int)fp8;
- (void)doFinalRotate;
- (void)onCropChanged:(id)fp8;
- (void)doFinalCrop;
- (void)updateCropRectUI:(BOOL)fp8;
- (void)updateCropRectUI:(BOOL)fp8 wait:(BOOL)fp12;
- (void)updateSelection;
- (void)resetCursorRects;
- (void)doExitFullScreenToRect:(struct _NSRect)fp8 stayingInEdit:(BOOL)fp24;
- (void)completeExitFullScreen;
- (void)doCompleteEnterFullScreenWithDelay;
- (void)completeEnterFullScreen;
- (id)photoFrames;
- (void)setPhotoFrames:(id)fp8 withMaskRect:(struct _NSRect)fp12;
- (void)animationDidStart:(id)fp8;
- (void)animationDidStop:(id)fp8 finished:(BOOL)fp12;
- (void)waitForCompletedAnimation;
- (void)waitForCompletedAnimationIfRequired;
- (void)myWindowDidChangeScreen:(id)fp8;
- (void)setController:(id)fp8;
- (void)setSizeIncrement:(float)fp8;
- (void)setNeedsDisplayForLayer:(id)fp8;
- (void)rotateImage:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)revertImage:(id)fp8;
- (void)trashAction:(id)fp8;
- (void)applyRankingToSelection:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (void)openStackAction:(id)fp8;
- (void)closeStackAction:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)beginGestureWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)scrollWheel:(id)fp8;

@end

@interface OverlayWindow : DisappearingWindow
{
}

+ (float)maxMonthWidth;
+ (id)showForRect:(struct _NSRect)fp8 inView:(id)fp24;
- (id)initWithContentRect:(struct _NSRect)fp8;
- (void)setLabel:(id)fp8;
- (void)setLabel:(id)fp8 second:(id)fp12;
- (void)setStarMode:(BOOL)fp8;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface OverlayView : NSView
{
    NSString *mLabel;
    NSString *mSecond;
    NSAttributedString *mTrunc;
    struct _NSRect mImageRect;
    NSImage *mStar;
    NSImage *mDot;
    NSImage *mFavorite;
    BOOL mStarMode;
}

+ (id)largeOverlayAttributes;
+ (id)largeOverlayEllipser;
+ (id)smallOverlayAttributes;
+ (id)smallOverlayEllipser;
+ (float)largeStringWidth:(id)fp8;
+ (float)smallStringWidth:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (id)label;
- (void)setLabel:(id)fp8 second:(id)fp12;
- (void)setStarMode:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPGridElementContainer : IPPageElement
{
    int mIndex;
    NSMutableArray *mElements;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)setIndex:(int)fp8;
- (int)index;
- (void)addElement:(id)fp8;
- (id)elements;
- (void)setParent:(id)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (BOOL)isContainerElement;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)dealloc;

@end

@interface IPCalendarDataLeopard : IPCalendarData
{
}

+ (void)findLocalCalendars;
- (id)_parseCalendarWithReference:(id)fp8;

@end

@interface IPCalendarData : NSObject
{
    NSString *mHolidayCalendar;
    NSMutableArray *mCalendarReferences;
    NSMutableDictionary *mReferenceDataDict;
    NSMutableDictionary *mEventDictionary;
    NSMutableDictionary *mBirthdayDictionary;
    NSDate *_startDate;
    NSDate *_endDate;
    NSString *mCurrentRecord;
    double mCurrentStartDate;
    double mCurrentEndDate;
    NSString *mCurrentRecurrenceRule;
    int mCurrentMonth;
    int mCurrentYear;
    int mCurrentDay;
}

+ (id)classForOS;
+ (id)calendarRootPath;
+ (void)setNeedRefresh;
+ (void)findLocalCalendars;
+ (id)localCalendarNames;
+ (id)relativePathForCalendarNamed:(id)fp8;
- (id)initWithCalendarReferences:(id)fp8;
- (id)startDate;
- (void)setStartDate:(id)fp8;
- (id)endDate;
- (void)setEndDate:(id)fp8;
- (void)setStartDate:(double)fp8 months:(int)fp16;
- (id)holidayCalendar;
- (void)setHolidayCalendar:(id)fp8;
- (id)calendarReferences;
- (void)setCalendarReferences:(id)fp8;
- (BOOL)addCalendarReference:(id)fp8;
- (void)removeCalendarReference:(id)fp8;
- (void)updateFromSource;
- (id)eventsForPhotoDate:(double)fp8 includingBirthdays:(BOOL)fp16;
- (void)_retrieveBirthdayData;
- (void)_reassembleEventData;
- (id)_parseCalendarWithReference:(id)fp8;
- (id)_unescapeString:(id)fp8;
- (void)_parseLine:(id)fp8 intoDictionary:(id)fp12;
- (double)_parseDateString:(id)fp8;
- (id)_parseRecurrenceRule;
- (double)_photoDateFromDaySpec:(id)fp8 andStartingDate:(double)fp12;
- (double)_adjustRecurrenceDate:(double)fp8 byMonth:(id)fp16;
- (int)_dayOfWeekFromTwoCharDayAtEndOfString:(id)fp8;
- (double)_adjustRecurrenceDate:(double)fp8 byDay:(id)fp16;
- (void)_addCurrentRecordWithKey:(id)fp8;
- (void)dealloc;

@end

@interface IPBackgroundImageLoader : NSObject
{
    struct BackgroundArray *mHighPriority;
    struct BackgroundArray *mLowPriority;
    struct BackgroundArray *mHighResPriority;
    struct BackgroundArray *mFinishedLoading;
    struct BGThread mBGThreads[20];
    struct BGThreadParams mParams[20];
    struct _opaque_pthread_mutex_t mListLock;
    struct _opaque_pthread_mutex_t mFinishedLoadingListLock;
    struct _opaque_pthread_mutex_t mBGProcessLock[2];
    struct _opaque_pthread_mutex_t mBGWaitLock[2];
    struct _opaque_pthread_cond_t mBGCondition[2];
    struct _opaque_pthread_mutex_t mHighResProcessLock;
    struct _opaque_pthread_mutex_t mHighResWaitLock;
    struct _opaque_pthread_cond_t mHighResCondition;
    struct _opaque_pthread_mutex_t mHighResQuitLock;
    struct _opaque_pthread_mutex_t mCommunicationProcessLock;
    struct _opaque_pthread_mutex_t mCommunicationWaitLock;
    struct _opaque_pthread_cond_t mCommunicationCondition;
    struct _opaque_pthread_mutex_t mCommunicationQuitLock;
    int mBGThreadState[2];
    int mHighResThreadState;
    int mCommunicationThreadState;
    IPOnscreenImageMgr *mDelegate;
    SEL mSelector;
    int mProcessorCount;
    int mLoaderCount;
}

- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)fp8 withSelector:(SEL)fp12;
- (void)copyFirstImageInQueue:(struct BackgroundArray *)fp8 into:(struct BackgroundImage *)fp12;
- (long)indexOfImage:(struct BackgroundImage *)fp8 inArray:(struct BackgroundArray *)fp12;
- (void)releaseImagesInArray:(struct BackgroundArray *)fp8;
- (struct BackgroundImage *)recordWithInfo:(struct IPPhotoInfo *)fp8 forSize:(struct CGSize)fp12;
- (void)clearQueues;
- (void)removeImage:(struct BackgroundImage *)fp8 withPriority:(int)fp12;
- (void)addImage:(struct BackgroundImage)fp8 withPriority:(int)fp56;
- (void)spawnThreadsForPriority:(int)fp8 backgroundIndex:(int)fp12;
- (void)ensureInfo:(struct IPPhotoInfo *)fp8 hasPriority:(int)fp12 size:(struct _NSSize)fp16;
- (BOOL)queuePhotoInfoForLoad:(struct IPPhotoInfo *)fp8 image:(struct IPFileImage **)fp12 priority:(int)fp16 size:(struct _NSSize)fp20 loadRAW:(BOOL)fp28 allowAliasUI:(BOOL)fp32 forceOriginal:(BOOL)fp36;
- (void)queuePhotoSecondaryLoad:(struct IPPhotoInfo *)fp8 size:(struct _NSSize)fp12 sourceImage:(struct IPImage *)fp20;
- (BOOL)removeInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (void)signalThreadsToDie;
- (void)waitForThreadsToDie;
- (void)moveToCommunicationThread:(struct BackgroundImage)fp8;
- (void)bgLoad:(id)fp8;
- (void)bgHighResLoad;
- (void)communicationThread;

@end

@interface IPImageCapsule : NSObject
{
    struct IPFileImage *mImage;
    struct IPFileImage *mSecondaryImage;
    struct IPPhotoInfo *mInfo;
}

- (id)initWithFileImage:(struct IPFileImage *)fp8 secondaryImage:(struct IPFileImage *)fp12 photoInfo:(struct IPPhotoInfo *)fp16;
- (struct IPFileImage *)fileImage;
- (struct IPFileImage *)secondaryImage;
- (struct IPPhotoInfo *)photoInfo;
- (void)dealloc;

@end

@interface IPOnscreenImageMgr : NSObject
{
    struct OnscreenArray *mPhotoArray;
    struct OnscreenArray *mThumbArray;
    IPBackgroundImageLoader *mLoader;
    struct MessageReceiver mMessageReceiver;
    struct MessageReceiver mAlbumMessageReceiver;
    id <IPImageMgrDelegate> mDelegate;
    struct IPPhotoInfo *mRevertInfo;
    BOOL mProcessingDelete;
}

- (id)init;
- (void)dealloc;
- (void)initializeBackgroundImageLoader;
- (void)setDelegate:(id)fp8;
- (void)installImagesLoadedWithMgr:(id)fp8;
- (struct OnscreenArray *)photoArray;
- (struct OnscreenArray *)thumbArray;
- (long)indexOfRecordWithInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (long)indexOfAnyRecordWithInfo:(struct IPPhotoInfo *)fp8 screenOnLoaded:(BOOL)fp12 fullSizeOkay:(BOOL)fp16 rawOkay:(BOOL)fp20;
- (long)indexOfAnyRecordWithInfo:(struct IPPhotoInfo *)fp8 screenOnLoaded:(BOOL)fp12 fullSizeOkay:(BOOL)fp16;
- (long)indexOfThumbWithInfo:(struct IPPhotoInfo *)fp8;
- (long)indexOfRecordWithImage:(struct IPImage *)fp8;
- (struct OnscreenRecord *)createRecordForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct OnscreenRecord *)createThumbForInfo:(struct IPPhotoInfo *)fp8;
- (void)cacheStatus;
- (void)releaseLoadingThumbForInfo:(struct IPPhotoInfo *)fp8;
- (void)releaseThumbForView:(id)fp8 ifNotForInfo:(struct IPPhotoInfo *)fp12;
- (void)releaseImageForRecord:(struct OnscreenRecord *)fp8;
- (void)releaseLoadedImageForInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct _NSRect)drawLoadingThumbForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inView:(id)fp28 textColor:(id)fp32 stretchToFit:(BOOL)fp36 flippedHorizontal:(BOOL)fp40 flippedVertical:(BOOL)fp44 inContext:(struct CGContext *)fp48;
- (struct _NSRect)drawLoadingThumbNoMessageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 stretchToFit:(BOOL)fp28 flippedHorizontal:(BOOL)fp32 flippedVertical:(BOOL)fp36 inContext:(struct CGContext *)fp40;
- (id)transformForImageRotation:(float)fp8 withRect:(struct CGRect *)fp12;
- (BOOL)drawBestPossibleForPhotoInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 usingContext:(id)fp28;
- (BOOL)drawImageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inView:(id)fp28 textColor:(id)fp32 stretchToFit:(BOOL)fp36 flippedHorizontal:(BOOL)fp40 flippedVertical:(BOOL)fp44 inLiveResize:(BOOL)fp48 useBestFit:(BOOL)fp52 inContext:(struct CGContext *)fp56 inAllowZoom:(BOOL)fp60;
- (BOOL)immediatelyDrawImageForInfo:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 inContext:(struct CGContext *)fp28 textColor:(id)fp32 flippedHorizontal:(BOOL)fp36 flippedVertical:(BOOL)fp40;
- (void)clearAllLoadedPhotosForInfo:(struct IPPhotoInfo *)fp8;
- (void)clearAllLoadedPhotos;
- (void)clearOutCachesAndCleanup;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28 forceOriginal:(BOOL)fp32;
- (void)bumpPriorityOfInfo:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowAliasUI:(BOOL)fp24;
- (void)preloadPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12 withPriority:(int)fp20 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28;
- (struct IPFileImage *)loadedImageForPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (struct IPFileImage *)loadedImageOrStartLoadForPhoto:(struct IPPhotoInfo *)fp8 withPriority:(int)fp12 forSize:(struct _NSSize)fp16 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28;
- (struct IPFileImage *)loadedImageOrStartLoadForPhoto:(struct IPPhotoInfo *)fp8 withPriority:(int)fp12 forSize:(struct _NSSize)fp16 allowRAW:(BOOL)fp24 allowAliasUI:(BOOL)fp28 forceOriginal:(BOOL)fp32;
- (BOOL)hasLoadedImageForPhoto:(struct IPPhotoInfo *)fp8 forSize:(struct _NSSize)fp12;
- (void)queueLoadForScreenRAW:(struct IPPhotoInfo *)fp8 fromImage:(struct IPFileImage *)fp12 forSize:(struct _NSSize)fp16;
- (void)imageLoaded:(id)fp8;
- (void)synchCache;
- (long)numberOfImagesInCache;
- (void)photoInfoRotated:(struct IPPhotoInfo *)fp8;
- (void)recReverted:(struct IPPhotoInfo *)fp8;
- (void)imageChanged:(struct IPPhotoInfo *)fp8;
- (void)dbDoneWithChanges;
- (BOOL)isProcessingDelete;
- (void)setIsProcessingDelete:(BOOL)fp8;
- (id)currentAlbum;
- (void)albumContentsChanged;
- (void)photosDeleted;
- (void)createReceivers;
- (void)linkReceivers:(id)fp8 db:(id)fp12;
- (void)disableReceivers;
- (void)destroyReceivers;

@end

@interface IPBookInspector : NSObject
{
    IPBookController *mController;
    HUDWindow *mInspectorPanel;
    HUDView *mPageContentView;
    HUDView *mPageElementContentView;
    HUDView *mCompoundElementContentView;
    HUDView *mArtElementContentView;
    HUDView *mTextElementContentView;
    HUDView *mImageElementContentView;
    HUDView *mCalendarElementContentView;
    HUDView *mCalendarElementCellContentView;
    IPPageView *mCalendarCellPageView;
    IPPageView *mCalendarDropZonePageView;
    HUDSlider *mImageElementZoomSlider;
    NSBox *mCalendarDropZoneBox;
    HUDTextView *mCaptionTextView;
    HUDDirectionView *mCaptionLocationView;
    HUDImageButton *mCaptionCheckbox;
    NSTextField *mCationLabel;
    NSColorWell *mBackgroundColorWell;
    NSColorWell *mBorderColorWell;
    NSColorWell *mFillColorWell;
    struct _NSSize mPageContentViewSize;
    struct _NSSize mPageElementContentViewSize;
    struct _NSSize mCompoundElementContentViewSize;
    struct _NSSize mArtElementContentViewSize;
    struct _NSSize mTextElementContentViewSize;
    struct _NSSize mCalendarElementContentViewSize;
    struct _NSSize mCalendarElementCellContentViewSize;
    struct _NSSize mImageElementContentViewSize;
    IPPageElement *mTargetElement;
    IPPageView *mProxyPageView;
}

- (void)setController:(id)fp8;
- (void)setTargetPage:(id)fp8 makeVisible:(BOOL)fp12;
- (void)setTargetElement:(id)fp8 makeVisible:(BOOL)fp12;
- (void)hideInspector;
- (BOOL)isVisible;
- (void)updateImageViews;
- (void)setProxyPageView:(id)fp8;
- (void)setCaptionLocation:(id)fp8;
- (void)toggleCaption:(id)fp8;
- (void)resetPageToOriginal:(id)fp8;
- (void)setBackgroundColor:(id)fp8;
- (void)setBorderColor:(id)fp8;
- (void)setFillColor:(id)fp8;
- (void)flipImage:(id)fp8;
- (void)alignTextLeft:(id)fp8;
- (void)alignTextCenter:(id)fp8;
- (void)alignTextRight:(id)fp8;
- (void)alignTextTop:(id)fp8;
- (void)alignTextMiddle:(id)fp8;
- (void)alignTextBottom:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)_initializePanel;
- (void)_updatePageContentView;
- (void)_updateImageElementContentView;
- (BOOL)_ensurePageIsCustom;
- (void)textDidChange:(id)fp8;
- (void)dealloc;

@end

@interface IPCalendarCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mBottomShadingTile;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPCalendarSimplexView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
    BOOL mPageLaysBelow;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 upperPage:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface IPCalendarSpreadView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSSize mResizingCachedSize;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)setController:(id)fp8;
- (void)dealloc;

@end

@interface IPCalendarPreviewElement : IPCalendarElementCell
{
    float mCurrentDrawScale;
    struct CGPDFDocument *mCachedImage;
    float mHeaderHeight;
    struct CGSize mCellSize;
}

- (id)initWithElement:(id)fp8;
- (BOOL)isVectorElement;
- (void)cachePDFData;
- (void)setSize:(struct _NSSize)fp8;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)setDate:(double)fp8;
- (void)_updateImageCacheForScale:(float)fp8;
- (BOOL)cellIsEmpty;
- (void)dealloc;

@end

@interface EffectsController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    EffectsView *mEffectsView;
    Edit *mEdit;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)layoutMainView;
- (id)edit;
- (void)setEdit:(id)fp8;
- (void)refresh;
- (void)effectsViewButton0Action:(id)fp8;
- (void)effectsViewButton1Action:(id)fp8;
- (void)effectsViewButton2Action:(id)fp8;
- (void)effectsViewButton3Action:(id)fp8;
- (void)effectsViewButton4Action:(id)fp8;
- (void)effectsViewButton5Action:(id)fp8;
- (void)effectsViewButton6Action:(id)fp8;
- (void)effectsViewButton7Action:(id)fp8;
- (void)effectsViewButton8Action:(id)fp8;
- (BOOL)hasImage;
- (id)imageForEffectsIconsWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (id)smallBlurredImage;
- (int)effectsViewButtonLevel:(int)fp8;

@end

@interface IPBookGenerator : NSObject
{
    IPBook *mBook;
    ProgressController *mProgress;
    BOOL mForPrinting;
    BOOL mFingerprintingDisabled;
    SharpnessFilter *mSharpenFilter;
    BookSharpeningAttributes *mSharpeningAttributes;
}

+ (struct CGColorSpace *)colorProfileForBook:(id)fp8;
+ (unsigned long)compressionQualityForBook:(id)fp8;
+ (id)generatorForProductType:(id)fp8 book:(id)fp12;
- (id)init;
- (void)setForLocalPrint:(BOOL)fp8;
- (void)disableFingerprinting:(BOOL)fp8;
- (id)book;
- (void)setBook:(id)fp8;
- (void)setProgressController:(id)fp8;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePDFWithPath:(id)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (BOOL)generateJPEGWithPath:(id)fp8 dpi:(float)fp12 forPage:(int)fp16 includeText:(BOOL)fp20 forProduction:(BOOL)fp24;
- (void)handleProductGenerationException:(id)fp8;
- (void)addPageImageFingerprintToContext:(struct CGContext *)fp8 width:(float)fp12 height:(float)fp16;
- (BOOL)_compositeWithPath:(id)fp8 type:(unsigned long)fp12 dpi:(float)fp16 forPageReference:(id)fp20 fillSize:(struct _NSSize)fp24 includeText:(BOOL)fp32 forProduction:(BOOL)fp36;
- (void)getSharpeningParameters;
- (BOOL)shouldSharpenImageForPage:(id)fp8;
- (id)sharpnessFilter;
- (void)sharpenBitmap:(void *)fp8 inContext:(struct CGContext *)fp12 colorSpace:(struct CGColorSpace *)fp16 totalBytes:(unsigned long)fp20 bytesPerRow:(unsigned long)fp24 width:(unsigned long)fp28 height:(unsigned long)fp32 page:(id)fp36;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)addSheetWithPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)addBackCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSpotCoatingForPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (struct _NSSize)documentPageSourceSize;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (float)documentBleedAllowance;
- (float)documentScale;
- (struct _NSSize)documentSheetSize:(BOOL)fp8;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (BOOL)requiresCoverSheet;
- (int)documentSheetCount;
- (BOOL)oldstyleGeneratePDFWithPath:(id)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)dealloc;

@end

@interface IPHardcoverBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (struct _NSSize)documentPhotowrapSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)_addDustJacketToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)_addPhotowrapToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (int)documentSheetCount;
- (void)_textStyleChanged:(id)fp8;

@end

@interface IPLargeBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPMediumBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPSmallBookGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)requiresCoverSheet;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (struct _NSSize)documentCoverSheetSize:(BOOL)fp8;
- (void)addCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSheetWithIndex:(int)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;

@end

@interface IPWallCalendarGenerator : IPBookGenerator
{
    IPPage *mBackCoverPage;
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (void)addBackCoverSheetToContext:(struct CGContext *)fp8 dpi:(float)fp12 forProduction:(BOOL)fp16;
- (void)addSpotCoatingForPage:(id)fp8 toContext:(struct CGContext *)fp12 dpi:(float)fp16 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;
- (void)dealloc;

@end

@interface IPPhotoPrintGenerator : IPBookGenerator
{
}

- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generateJPEGWithPath:(id)fp8 dpi:(float)fp12 forPage:(int)fp16 includeText:(BOOL)fp20 forProduction:(BOOL)fp24;
- (float)documentScale;
- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;

@end

@interface IPFoldedGreetingCardGenerator : IPBookGenerator
{
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;

@end

@interface IPPostcardGenerator : IPBookGenerator
{
}

- (struct _NSSize)targetSizeForPage:(id)fp8 withBleed:(BOOL)fp12 correctOrientation:(BOOL)fp16;
- (BOOL)generateProductFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePrintFileWithPath:(id)fp8 dpi:(float)fp12;
- (BOOL)generatePreviewFileWithPath:(id)fp8 dpi:(float)fp12;
- (struct CGRect)drawingRectForPage:(id)fp8 atFillSize:(struct _NSSize)fp12 forProduction:(BOOL)fp20;
- (void)_applyProductTransformsForPageIndex:(int)fp8 toContext:(struct CGContext *)fp12 forProduction:(BOOL)fp16;

@end

@interface IPPageElementCacheMgr : NSObject
{
    NSMutableDictionary *mElementRegistry;
}

+ (id)sharedManager;
- (void)registerElement:(id)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)dealloc;

@end

@interface SlimSplitView : NSSplitView
{
    BOOL mDelegateRespondsToSplitViewDoubleClicked;
    BOOL mDelegateRespondsToSplitViewWillTrackOrResize;
    BOOL mDelegateRespondsToSplitViewDidTrackOrResize;
    float xDelta;
}

- (float)dividerThickness;
- (void)drawDividerInRect:(struct _NSRect)fp8;
- (float)dividerPosition;
- (void)setDelegate:(id)fp8;
- (void)_track:(id)fp8;
- (void)_mouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)trackAsIfOnDivider:(id)fp8;
- (float)dividerThicknessForLength:(float)fp8;
- (float)firstSubviewLength;
- (void)setFirstSubviewLength:(float)fp8;
- (void)setNormalDividerThickness;

@end

@interface IPCardSinglePanelView : IPBookView
{
    struct _NSRect mArtRect;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPCardTwoPanelView : IPBookView
{
    struct _NSRect mArtRect;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface IPCardThreePanelView : IPBookView
{
    struct _NSRect mPanelOneBounds;
    struct _NSRect mPanelTwoBounds;
    NSImage *mSpineShadingTileVertical;
}

- (id)loadingMessageString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_resizePageViewsForHorizontalCard:(BOOL)fp8;
- (void)_resizePageViewsForVerticalCard:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)_duplexModeChanged:(id)fp8;
- (void)dealloc;

@end

@interface SkinBox : NSBox
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface SubscribedAlbum : PublishedAlbum
{
    struct SqSubscribedAlbum *mSqSubscribedAlbum;
    _Bool mImagesArePending;
    _Bool mFailedAuthentication;
    _Bool mTriedKeychain;
}

+ (void)initialize;
+ (void)_resetNextPollTimer:(id)fp8;
+ (void)calculateNextPollDate:(id)fp8;
+ (id)nextPollDate;
+ (void)updateAllSubscriptionsFromTimer:(id)fp8;
+ (void)updateAllSubscriptions:(BOOL)fp8;
+ (id)_stripScheme:(id)fp8 fromURL:(id)fp12;
+ (id)cleanSubscriptionURL:(id)fp8;
- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqSubscribedAlbum *)sqSubscribedAlbum;
- (id)init;
- (void)dealloc;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)urlIsValid;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (BOOL)isPublished;
- (BOOL)isEjectable;
- (void)eject;
- (id)publishedName;
- (void)setSubscriptionURL:(id)fp8;
- (id)subscriptionURL;
- (void)_validateCredentialsMainThread:(id)fp8;
- (void)_retryUpdate;
- (void)updateNow:(id)fp8;
- (void)updateNowIfNeeded:(id)fp8;
- (void)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (void)setName:(id)fp8;
- (void)_createNewPhotoOnMainThread:(id)fp8;
- (void)albumProgressCanceled:(id)fp8;
- (void)_showSubscriptionError:(id)fp8;
- (void)_noteChangedPublishSize;
- (void)willBeRemoved;
- (void)_setSubscribedAlbumName:(id)fp8;
- (void)_subUpdateComplete:(id)fp8;
- (void)_notifyImageChanged:(struct IPPhotoInfo *)fp8 previewOnly:(BOOL)fp12;
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (void)_authenticationDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_showAuthentication;
- (void)statusUpdated:(int)fp8 forAlbum:(id)fp12 withProperties:(id)fp16;

@end

@interface SubscriptionContainer : Album
{
}

- (BOOL)allowsModification;
- (id)init;
- (void)initWithDictionary:(id)fp8;
- (void)setDB:(id)fp8;
- (BOOL)isSelectable;
- (id)nameWithCount;
- (BOOL)isEjectable;
- (void)eject;
- (unsigned long long)defaultGroup;
- (unsigned int)aeAlbumType;

@end

@interface IWWindow : NSWindow
{
    IWWindowBackgroundView *mIWBackgroundView;
    int mWindowStyle;
    BOOL mShowResizeIndicator;
    BOOL mWindowIsClosing;
    struct _NSPoint mUnobscuredOrigin;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (void)awakeFromNib;
- (BOOL)setFrameUsingName:(id)fp8;
- (struct _NSRect)keepTopVisibleOnMajorityScreen:(struct _NSRect)fp8;
- (void)updateOpaqueRegionForFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8 display:(BOOL)fp24;
- (void)orderWindow:(int)fp8 relativeTo:(int)fp12;
- (void)setContentView:(id)fp8;
- (void)flushWindow;
- (void)setTitleBarHeight:(float)fp8;
- (float)titleBarHeight;
- (void)setBottomBarHeight:(float)fp8;
- (float)bottomBarHeight;
- (void)setMidBarHeight:(float)fp8 originY:(float)fp12;
- (float)midBarHeight;
- (float)midBarOriginY;
- (void)setShowsResizeIndicator:(BOOL)fp8;
- (BOOL)showsResizeIndicator;
- (void)setShowsTrafficLight:(BOOL)fp8;
- (void)performClose:(id)fp8;
- (void)performMiniaturize:(id)fp8;
- (void)_validSize:(struct _NSSize *)fp8 force:(BOOL)fp12;
- (void)performZoom:(id)fp8;
- (void)setDocumentEdited:(BOOL)fp8;
- (void)setRepresentedFilename:(id)fp8;
- (void)setTitle:(id)fp8;
- (void)setWindowStyle:(int)fp8;
- (int)windowStyle;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)becomeMainWindow;
- (void)resignMainWindow;
- (BOOL)isExcludedFromWindowsMenu;
- (id)backgroundColor;
- (void)obscure;
- (void)unobscure;

@end

@interface IWWindowResizeControl : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;

@end

@interface IWWindowBackgroundView : NSView
{
    NSButton *mCloseButton;
    NSButton *mMinimizeButton;
    NSButton *mZoomButton;
    NSButton *mDocumentButton;
    NSView *mResizeControl;
    float mTitleBarHeight;
    float mBottomBarHeight;
    float mMidBarHeight;
    float mMidBarOriginY;
    int mWindowStyle;
    int mButtonGroupTrackingTag;
    BOOL mMouseInGroup;
    NSString *mWindowTitle;
    NSString *mDocumentDisplayName;
    BOOL mUseLeopardStyle;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)windowBackgroundViewPrivateInit;
- (void)createWindowButtons;
- (void)refreshWindowButtons;
- (void)setTitleBarHeight:(float)fp8;
- (float)titleBarHeight;
- (void)setBottomBarHeight:(float)fp8;
- (float)bottomBarHeight;
- (void)setMidBarHeight:(float)fp8 originY:(float)fp12;
- (float)midBarHeight;
- (float)midBarOriginY;
- (void)mouseDown:(id)fp8;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)acceptsFirstResponder;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)setWindowStyle:(int)fp8;
- (void)setTitle:(id)fp8;
- (void)setDocumentEdited:(BOOL)fp8;
- (void)setRepresentedFilename:(id)fp8;
- (void)showsTrafficLights:(BOOL)fp8;
- (void)_drawFrameShadowAndFlushContext:(id)fp8;
- (void)_setShadowParameters;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawTitleBarInRect:(struct _NSRect)fp8;
- (void)drawBottomBarInRect:(struct _NSRect)fp8;
- (void)drawMidBarInRect:(struct _NSRect)fp8;
- (void)drawTitle;
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
- (void)drawWindowBevel:(struct _NSRect)fp8 inFrame:(struct _NSRect)fp24 topCornerRounded:(BOOL)fp40 bottomCornerRounded:(BOOL)fp44;
- (id)bezierPathWithRoundedRectangle:(struct _NSRect)fp8 withRadius:(float)fp24;
- (id)backgroundColor;
- (id)gradientStartColor;
- (id)gradientEndColor;
- (id)gradientEndColorBottomBar;
- (id)edgeColor;
- (id)topEdgeColor;
- (id)bottomEdgeColor;
- (id)topWindowEdgeColor;
- (id)bottomWindowEdgeColor;
- (id)titleColor;
- (struct _NSRect)_buttonGroupRect;
- (void)_updateMouseTracking;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_setMouseEnteredGroup:(BOOL)fp8;
- (BOOL)_mouseInGroup:(id)fp8;
- (void)_setDisplayName:(id)fp8;
- (id)_displayName;
- (id)titleFont;
- (struct _NSRect)titleTextFrame:(id)fp8;
- (void)_updateDocumentButtonPosition;

@end

@interface NSView (IWWindowViewAdditions)
- (float)contentAlpha;
@end

@interface IPCALRunLoopSemaphore : NSObject
{
    struct __CFRunLoop *_rloop;
    int _count;
    int _pipe[2];
    struct __CFSocket *_socket;
    struct __CFRunLoopSource *_socketSource;
    NSLock *_countLock;
}

- (id)init;
- (id)initWithCFRunLoop:(struct __CFRunLoop *)fp8;
- (void)dealloc;
- (void)down;
- (void)up;
- (int)value;

@end

@interface NSError (CALExtensions)
- (BOOL)iCalIsEqualToError:(id)fp8;
@end

@interface NSData (CALExtensions)
- (BOOL)fastWriteToFile:(id)fp8;
@end

@interface NSMutableDictionary (CALExtensions)
+ (id)newDictionaryKeyString;
@end

@interface IPCALRunLoopSemaphore (Private)
- (void)awake;
@end

@interface NSURL (queryParsingExtensions)
+ (int)classicPortForScheme:(id)fp8;
+ (id)URLWithDirtyString:(id)fp8;
+ (id)URLWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 path:(id)fp20;
+ (id)URLWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
+ (id)URLWithBase:(id)fp8 andFilename:(id)fp12;
+ (id)davCompatibleFilenameForFilename:(id)fp8;
+ (id)iDiskSmallNameCompatibleNameForFilename:(id)fp8;
+ (id)publicDotMacAccessFilename:(id)fp8;
+ (id)publicDotMacAccessURLWithBase:(id)fp8 andFilename:(id)fp12;
- (id)initWithDirtyString:(id)fp8;
- (id)uri;
- (id)URLWithUsername:(id)fp8;
- (id)URLWithoutUsername;
- (id)URLWithoutPassword;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
- (id)queryParameters;
- (id)URLWithUsername:(id)fp8 withPassword:(id)fp12;
- (id)URLByRemovingLastPathComponent;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 path:(id)fp20;
@end

@interface NSString (CALAdditions)
- (id)stringByURLQuoting;
- (id)stringByURLUnquoting;
@end

@interface NSMutableArray (CALExtensions)
- (void)removeAllObjectsWithClass:(Class)fp8;
@end

@interface NSSet (CALExtensions)
- (id)allObjectsWithClass:(Class)fp8;
@end

@interface NSArray (CALExtensions)
+ (id)convertFromXML:(id)fp8;
- (id)allObjectsWithClass:(Class)fp8;
- (id)descriptionByPointer;
- (id)convertToXML;
@end

@interface NSDictionary (CALExtensions)
+ (id)convertFromXML:(id)fp8;
+ (id)convertFromBinaryXML:(id)fp8;
- (id)mutableCopyWithElementsCopy;
- (id)convertToXML;
- (id)convertToBinaryXML;
@end

@interface NSString (IPHURLExtensions)
- (id)stringByEscapingPathForURL;
@end

@interface NSString (CalendarExtensions)
+ (id)stringWithFileSystemRepresentation:(const char *)fp8;
- (id)quote;
- (id)trimWhiteSpace;
- (id)trimFinalComma;
- (id)trimFirstComma;
- (id)trimCommas;
- (id)unquote;
- (id)searchAndReplaceString:(id)fp8 withString:(id)fp12;
- (id)safeFilename;
@end

@interface NSMutableString (CalendarExtensions)
- (void)searchAndReplaceSet:(id)fp8 withString:(id)fp12;
- (void)replaceOccurrencesOfString:(id)fp8 withString:(id)fp12;
- (void)searchAndReplaceInString:(id)fp8 withString:(id)fp12;
@end

@interface NSString (CalendarPathExtensions)
+ (id)stringWithContentsOfFile:(id)fp8 usingEncoding:(unsigned int)fp12;
- (BOOL)isPathToAppleScript;
- (BOOL)isPathToVCalData;
- (BOOL)isPathToICalData;
- (BOOL)isPathToBackupFile;
- (BOOL)isPathToICalBookmark;
@end

@interface NSString (CALIDExtensions)
- (id)stringByEncodingSlashes;
- (id)stringByDecodingSlashes;
@end

@interface NSString (CALExtensions)
+ (id)ellipsisString;
@end

@interface ILPublishedPhotoAlbum : ILPhotoAlbum
{
}

- (BOOL)needsUpdate;
- (id)updateNow;
- (id)publishNow;
- (void)_calculateSpritePositions:(id)fp8 toArray:(id)fp12 start:(unsigned int)fp16 photoCount:(unsigned int)fp20 frameCount:(int)fp24;
- (id)publishOrSync:(BOOL)fp8;
- (void)prepareToSync;
- (id)serviceUsername;
- (void)setRemoteDirectory:(id)fp8;
- (id)_updateStatusOperationType;
- (void)_resetContentOfInternalPhotoDB;
- (void)_postAlbumChangedNotification;
- (void)markAlbumAsModified;
- (void)markPhotoWithUID:(id)fp8 changedToState:(int)fp12;
- (void)markPhotoWithUIDasModified:(id)fp8 propertiesOnly:(BOOL)fp12;
- (void)deletePhotoWithUID:(id)fp8;
- (void)newPhotoWithUID:(id)fp8;
- (void)_updatePhotosOrder;
- (id)unpublishNow;

@end

@interface ILSubscribedPhotoAlbum : ILPhotoAlbum
{
    BOOL _previewOnly;
}

- (BOOL)needsUpdate;
- (void)_notifySubscriptionError:(id)fp8;
- (struct NSObject *)_ensurePluginWithUsername:(id)fp8 password:(id)fp12;
- (struct NSObject *)_pluginForService:(id)fp8 username:(id)fp12 password:(id)fp16;
- (void)prepareToSync;
- (id)updateNow;
- (id)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (id)_updateStatusOperationType;
- (void)_resetContentOfInternalPhotoDB;
- (void)setSubscribeToPreviewsOnly:(BOOL)fp8;
- (BOOL)subscribeToPreviewsOnly;

@end

@interface ILPhotoAlbum : NSObject
{
    ILPhotoShare *_photoShare;
    id <ILAlbumContentsDelegate> _albumContentsDelegate;
    id _updateDelegate;
    id _privateData;
    IPHUpdateOperation *_updateOperation;
    BOOL _updateCanceled;
    BOOL _needsUpdate;
    NSString *_albumOrder;
    NSString *_service;
    struct NSObject *_plugin;
    id _reserved;
}

- (id)init;
- (id)initWithContentsDelegate:(id)fp8;
- (id)initForService:(id)fp8 contentsDelegate:(id)fp12;
- (void)dealloc;
- (id)photoShare;
- (void)setPhotoShare:(id)fp8;
- (void)setUpdateOperation:(id)fp8;
- (void)resetPhotoDB;
- (void)_resetContentOfInternalPhotoDB;
- (void)_savePersistenceDictionary;
- (id)propertyForKey:(id)fp8;
- (void)setProperty:(id)fp8 forKey:(id)fp12;
- (void)removePropertyForKey:(id)fp8;
- (id)UID;
- (BOOL)isPublished;
- (unsigned int)photoCount;
- (id)orderedPhotoUIDs;
- (id)orderedVisiblePhotoUIDs;
- (void)prepareToSync;
- (void)setRemoteDirectory:(id)fp8;
- (BOOL)hasPhotoWithUID:(id)fp8;
- (struct NSObject *)photoWithUID:(id)fp8;
- (struct NSObject *)photoWithPublicationUID:(id)fp8;
- (BOOL)photoWithUIDIsPending:(id)fp8;
- (id)propertiesForPhotoDB;
- (void)updatePropertiesForPhotoDB:(id)fp8;
- (id)propertiesForPhotoWithUID:(id)fp8;
- (id)propertiesForPhotoWithPublicationUID:(id)fp8;
- (void)setAlbumContentsDelegate:(id)fp8;
- (id)albumContentsDelegate;
- (id)_updateStatusOperationType;
- (void)setUpdateDelegate:(id)fp8;
- (id)updateDelegate;
- (BOOL)needsUpdate;
- (BOOL)isUpdating;
- (id)updateNowIfNeeded;
- (id)updateNow;
- (id)publishNow;
- (id)publishOrSync:(BOOL)fp8;
- (BOOL)_albumIsConcernedByOperationNotification:(id)fp8;
- (void)operationStarted:(id)fp8;
- (void)operationMarked:(id)fp8;
- (void)operationEnded:(id)fp8;
- (void)prioritizeUpdate;
- (id)cancelUpdate;
- (struct NSObject *)servicePlugin;
- (struct NSObject *)_pluginForService:(id)fp8 username:(id)fp12 password:(id)fp16;
- (struct NSObject *)_ensurePluginWithUsername:(id)fp8 password:(id)fp12;

@end

@interface NSObject (BSJSONEncoding)
- (id)jsonIndentStringForLevel:(int)fp8;
- (id)jsonStringValueWithIndentLevel:(int)fp8;
- (id)jsonStringValue;
@end

@interface NSDictionary (BSJSONEncoding)
- (id)jsonStringValueWithIndentLevel:(int)fp8;
@end

@interface NSArray (BSJSONEncoding)
- (id)jsonStringValueWithIndentLevel:(int)fp8;
@end

@interface NSString (BSJSONEncoding)
- (id)jsonStringValue;
@end

@interface NSDate (IPHExtras)
- (id)iph_RFC1123DateString;
@end

@interface NSXMLElement (ElementForName)
- (id)elementForName:(id)fp8;
- (id)firstElementForName:(id)fp8;
- (id)findElementForID:(id)fp8;
- (id)findElementWithValue:(id)fp8 forAttribute:(id)fp12;
- (id)findElementForTag:(id)fp8;
@end

@interface NSURL (IPHExtensions)
+ (id)URLWithURL:(id)fp8 username:(id)fp12;
@end

@interface NSNotificationCenter (IPHExtensions)
- (void)postNotificationOnMainThreadWithName:(id)fp8 object:(id)fp12;
@end

@interface NSMutableString (IPHExtensions)
- (void)appendUnsignedChar:(unsigned char)fp8;
@end

@interface NSString (HexStringRepresentations)
+ (id)stringWithHexString:(id)fp8;
- (id)hexStringRepresentation;
- (id)convertHexStringToData;
- (unsigned int)hexValueInRange:(struct _NSRange)fp8;
- (BOOL)isCharacterHexAtIndex:(unsigned int)fp8;
@end

@interface NSMutableData (MethodsForLazyMen)
- (void)appendUnsignedChar:(unsigned char)fp8;
- (void)appendUnsignedShort:(unsigned short)fp8;
@end

@interface NSData (HexStringRepresentations)
+ (id)dataWithHexString:(id)fp8;
- (id)hexStringRepresentation;
@end

@interface NSNull (IPHExtension)
- (BOOL)boolValue;
- (int)intValue;
@end

@interface NSXMLElement (IPHExtension)
- (void)addChildIfNotNil:(id)fp8;
- (void)removeChild:(id)fp8;
@end

@interface NSXMLNode (IPHExtension)
+ (id)elementWithNameIfNotNil:(id)fp8 stringValue:(id)fp12;
@end

@interface NSMutableSet (IPHExtension)
- (void)addObjectIfNotNil:(id)fp8;
@end

@interface NSMutableArray (IPHExtension)
- (void)removeObjectIfNotNil:(id)fp8;
- (void)addObjectIfNotNil:(id)fp8;
- (void)addUniqueObject:(id)fp8;
- (void)addUniqueObjectIfNotNil:(id)fp8;
@end

@interface NSMutableDictionary (IPHExtension)
- (void)setObjectIfNotNil:(id)fp8 forKey:(id)fp12;
@end

@interface NSDictionary (IPHExtension)
- (id)iphObjectForKey:(id)fp8;
@end

@interface NSData (IPHCocoaFixes)
- (id)asUTF8String;
- (id)patchedXMLData;
@end

@interface IPHDiffBag : NSObject
{
    NSMutableDictionary *_localMapping;
    NSMutableArray *_links;
    int _resolvePolicy;
    id _delegate;
    SEL _sortCompareSelector;
}

- (id)init;
- (void)dealloc;
- (int)resolvePolicy;
- (void)setResolvePolicy:(int)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (SEL)sortCompareSelector;
- (void)setSortCompareSelector:(SEL)fp8;
- (id)_stateDescription:(int)fp8;
- (void)normalizeLocalState:(int *)fp8 distantState:(int *)fp12;
- (void)notifyThatLocalResource:(id)fp8 hasChangedStateTo:(int)fp12;
- (void)notifyThatDistantResource:(id)fp8 hasChangedStateTo:(int)fp12;
- (void)setResourceIsSynced:(id)fp8;
- (void)updateWithDistantIDs:(id)fp8;
- (void)updateWithLocalIDs:(id)fp8;
- (void)getLocalState:(int *)fp8 andDistantState:(int *)fp12 forResource:(id)fp16;
- (id)syncTasks;
- (id)links;
- (BOOL)removeLinkForResouce:(id)fp8;
- (void)loadWithPersistencePropertyList:(id)fp8;
- (id)persistencePropertyList;

@end

@interface IPHDiffLink : NSObject
{
    NSString *localID;
    int localState;
    int distantState;
}

- (id)init;
- (void)dealloc;
- (id)localID;
- (void)setLocalID:(id)fp8;
- (int)localState;
- (void)setLocalState:(int)fp8;
- (int)distantState;
- (void)setDistantState:(int)fp8;

@end

@interface IPHDiffEnumerator : NSEnumerator
{
    NSDictionary *_diffDictionary;
    int _state;
    NSEnumerator *_currentEnumerator;
}

- (id)initWithDiffDictionary:(id)fp8;
- (void)dealloc;
- (id)_enumeratorForState:(int)fp8;
- (id)_nextLocalID;
- (id)nextObject;

@end

@interface NSDictionary (IPHDiffAdditions)
- (id)diffTaskEnumerator;
@end

@interface IPHDiffUpdateBackgroundSetDistantProxy : NSObject <IPHDiffUpdateProxyProtocol>
{
    NSObject<IPHPublishServiceProtocol> *_service;
    int _albumPropertyDirection;
    NSObject<IPHPhotoDBProtocol> *_distantAlbum;
    NSObject<IPHPhotoDBProtocol> *_localAlbum;
    BOOL _commentSettingChanged;
    BOOL _feedComesFromTruth;
    BOOL _shouldAbort;
    NSMutableDictionary *_localPhotosByPublicationUID;
    NSMutableDictionary *_distantPhotosByPublicationUID;
    IPHDiffUpdateOperation *_parentOperation;
}

- (id)init;
- (void)dealloc;
- (id)stringByURLQuoting:(id)fp8;
- (id)stringByURLUnquoting:(id)fp8;
- (id)uriForURL:(id)fp8;
- (id)_readDistantAlbum;
- (BOOL)_pushLocalAlbumProperties;
- (BOOL)_pullDistantAlbumProperties;
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)_lookForFilename:(id)fp8 inSet:(id)fp12;
- (void)reorderAndPrepareLocalSet;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)allPublicationUIDs;
- (id)objectForUID:(id)fp8;
- (id)allUIDs;
- (void)_checkThumbnailNeeded:(id)fp8;
- (void)_clearThumbnailNeeded:(id)fp8;
- (id)loadPreviewForObjectWithPublicationUID:(id)fp8;
- (void)_checkImageNeeded:(id)fp8;
- (void)_clearImageNeeded:(id)fp8;
- (id)loadFullForObjectWithPublicationUID:(id)fp8;
- (void)_checkOriginalNeeded:(id)fp8;
- (void)_clearOriginalNeeded:(id)fp8;
- (id)loadOriginalForObjectWithPublicationUID:(id)fp8;
- (void)savePreviewForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)saveFullForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)saveOriginalForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)objectForPublicationUID:(id)fp8;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay:(BOOL)fp8;
- (id)preparePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)reorderedTasksFromArray:(id)fp8;
- (id)distantAlbum;
- (void)setDistantAlbum:(id)fp8;
- (void)setService:(id)fp8;
- (id)imageFileNameForDistantobjectPublicationUID:(id)fp8;
- (id)previewFileNameForDistantobjectPublicationUID:(id)fp8;
- (id)_derivativePathsForAlbum:(id)fp8;
- (id)_localAlbumSourceUID;
- (id)albumSourceUID;
- (id)albumPath;
- (id)pathForItemNamed:(id)fp8;
- (void)abortOperation;
- (BOOL)manageError:(id)fp8;

@end

@interface IPHDiffUpdateBackgroundSetLocalProxy : NSObject <IPHDiffUpdateProxyProtocol>
{
    struct NSObject *_service;
    NSString *_username;
    NSString *_password;
    struct NSObject *_localAlbum;
    BOOL _inChangeSession;
    BOOL _feedComesFromTruth;
    BOOL _feedComesFromFacebook;
    NSMutableDictionary *_localPhotosByPublicationUID;
    IPHDiffUpdateOperation *_parentOperation;
}

- (id)init;
- (id)initWithLocalAlbum:(struct NSObject *)fp8;
- (void)dealloc;
- (BOOL)prepareForSyncOperation:(id)fp8;
- (BOOL)concludeSyncOperation:(id)fp8;
- (id)objectForPublicationUID:(id)fp8;
- (id)objectForUID:(id)fp8;
- (id)sourceUIDForObjectPublicationUID:(id)fp8;
- (id)contentVersionForObjectPublicationUID:(id)fp8;
- (id)propertiesVersionForObjectPublicationUID:(id)fp8;
- (id)allPublicationUIDs;
- (id)allUIDs;
- (void)deleteObjectForPublicationUID:(id)fp8;
- (void)updateObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)createObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (id)loadPreviewForObjectWithPublicationUID:(id)fp8;
- (id)loadFullForObjectWithPublicationUID:(id)fp8;
- (id)loadOriginalForObjectWithPublicationUID:(id)fp8;
- (void)savePreviewForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)_mainThreadSavePreviewForObjectWithPublicationUID:(id)fp8;
- (void)saveFullForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)_mainThreadSaveFullForObjectWithPublicationUID:(id)fp8;
- (void)saveOriginalForObjectWithPublicationUID:(id)fp8 withObject:(id)fp12;
- (void)_mainThreadSaveOriginalForObjectWithPublicationUID:(id)fp8;
- (void)startUpdate;
- (void)endUpdate;
- (void)completeOverlay:(BOOL)fp8;
- (id)preparePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updatePreviewObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateFullObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)prepareOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12;
- (BOOL)updateOriginalObjectForPublicationUID:(id)fp8 withObject:(id)fp12 contextInfo:(id)fp16;
- (id)reorderedTasksFromArray:(id)fp8;
- (void)setUsername:(id)fp8 setPassword:(id)fp12;
- (void)setService:(struct NSObject *)fp8;
- (id)albumSourceUID;
- (struct NSObject *)localAlbum;
- (void)setLocalAlbum:(struct NSObject *)fp8;
- (void)removeInvalidPhotoObjects;
- (void)abortOperation;

@end

@interface IPHDiffUpdateOperation : IPHUpdateOperation <IPHDiffUpdateOperationProtocol>
{
    IPHDiffBag *_diffBag;
    id <IPHDiffUpdateProxyProtocol> _localProxy;
    id <IPHDiffUpdateProxyProtocol> _distantProxy;
    NSString *_uid;
    int _operationMode;
    XTWorkOrderProxy *_workOrderProxy;
    IPHDiffWorker *_worker;
    BOOL _isPaused;
    BOOL _shouldAbortNow;
    NSConditionLock *_workOrderLock;
}

- (id)init;
- (id)initWithBackgroundSet:(struct NSObject *)fp8;
- (void)dealloc;
- (void)start:(id)fp8;
- (void)run;
- (void)stop:(id)fp8;
- (void)end:(id)fp8;
- (void)cancel:(id)fp8;
- (void)pause:(id)fp8;
- (void)resume:(id)fp8;
- (id)reorderedTasksFromArray:(id)fp8;
- (int)newDistantStateForLocalID:(id)fp8 distantID:(id)fp12;
- (int)newLocalStateForLocalID:(id)fp8 distantID:(id)fp12;
- (id)localIDForDistantID:(id)fp8;
- (id)distantIDForLocalID:(id)fp8;
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (id)localProxy;
- (void)setLocalProxy:(id)fp8;
- (id)distantProxy;
- (void)setDistantProxy:(id)fp8;
- (id)uid;
- (float)operationProgressPercentage;
- (BOOL)shouldAbortNow;
- (int)operationMode;
- (void)setOperationMode:(int)fp8;
- (id)operationType;
- (void)sendProgressNotification;

@end

@interface IPHKeychain : NSObject
{
}

+ (id)sharedKeychain;
- (void)saveKeychainInformationsForURL:(id)fp8 andPassword:(id)fp12;
- (id)loadKeychainInformationsForURL:(id)fp8 login:(id *)fp12;
- (id)loadKeychainInformationsForURL:(id)fp8;
- (void)removeKeychainInformationsForURL:(id)fp8;
- (id)loadOldKeychainForURL:(id)fp8;
- (void)guessLoginPasswordForURL:(id)fp8 login:(id *)fp12 password:(id *)fp16;
- (id)guessPasswordForURL:(id)fp8;

@end

@interface IPHKeychain (Private)
- (void)guessLoginPasswordForThisURL:(id)fp8 login:(id *)fp12 password:(id *)fp16;
@end

@interface IPHNetworkErrorFormater : NSObject
{
}

+ (id)errorDisplayStringForError:(id)fp8 url:(id)fp12;
+ (id)errorFromDMKitTransaction:(id)fp8;

@end

@interface IPHNetworkErrorFormater (Private)
+ (id)translateCFNetworkHTTPError:(id)fp8;
+ (id)errorDisplayStringForCFNetworkHTTPError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForCFNetworkHTTPError:(id)fp8;
+ (id)translateDMKitError:(id)fp8;
+ (id)errorDisplayStringForDMKitError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForDMKitError:(id)fp8;
+ (id)errorDisplayStringForNSURLError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForNSURLError:(id)fp8;
+ (id)errorDisplayStringForOSStatusError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForOSStatusError:(id)fp8;
+ (id)errorDisplayStringForPOSIXError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForPOSIXError:(id)fp8;
+ (id)errorDisplayStringForNetDBError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForNetDBError:(id)fp8;
+ (id)errorDisplayStringForStreamSocketSSLError:(id)fp8 url:(id)fp12;
+ (id)dotMacErrorDisplayStringForStreamSocketSSLError:(id)fp8;
+ (void)tobysErrorsThatNeedToBeLocalizedBeforeTheCodeContainingThemCanBeCheckedIn;
@end

@interface NSObject (WallpaperAdditions)
- (BOOL)isPublished;
- (BOOL)isSubscribed;
- (BOOL)isPublishable;
- (id)publicationName;
- (id)subscribeURL;
- (id)publicationUID;
- (id)allPhotosByPublicationUID;
- (BOOL)subscribeLimitEnabled;
- (void)setSubscribeLimitEnabled:(BOOL)fp8;
- (int)subscribeLimitNumber;
- (void)setSubscribeLimitNumber:(int)fp8;
- (id)subscribeUnwantedPhotoUIDs;
@end

@interface IPHPhotoObjectImpl : NSObject <IPHPhotoObjectProtocol>
{
    NSMutableDictionary *_properties;
    NSLock *_propertiesLock;
    ILPhotoAlbum *_photoAlbum;
}

- (id)init;
- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (id)description;
- (BOOL)isEqual:(id)fp8;
- (id)dictionaryToSave;
- (id)UID;
- (void)setUID:(id)fp8;
- (id)publicationUID;
- (void)setPublicationUID:(id)fp8;
- (struct NSObject *)photoRef;
- (BOOL)isMovie;
- (float)movieDuration;
- (id)imageFilePath;
- (id)thumbnailFilePath;
- (id)originalFilePath;
- (id)keywords;
- (id)informationDictionary;
- (void)remapILPubSubKeysToIPHKeys;
- (id)informationForKey:(id)fp8;
- (void)setInformation:(id)fp8 forKey:(id)fp12;
- (id)setInformation:(id)fp8 forKey:(id)fp12 notify:(BOOL)fp16;
- (void)updateInformation:(id)fp8;
- (void)markDirty;
- (id)photoAlbum;
- (void)setPhotoAlbum:(id)fp8;
- (BOOL)originalIsNeeded;
- (BOOL)imageIsNeeded;
- (BOOL)thumbnailIsNeeded;
- (void)setOriginalIsAvailable:(BOOL)fp8;
- (void)setFileIsAvailable:(BOOL)fp8;
- (void)setPreviewIsAvailable:(BOOL)fp8;
- (id)sourceUID;
- (void)setContentVersion:(id)fp8;
- (id)contentVersion;
- (void)bumpContentVersion;
- (void)setPropertiesVersion:(id)fp8;
- (id)propertiesVersion;
- (void)bumpPropertiesVersion;
- (void)updatePublishPhotoInformationFromPhoto:(struct NSObject *)fp8;

@end

@interface IPHArchivedPhotoDB : NSObject <IPHPhotoDBProtocol>
{
    NSMutableDictionary *_properties;
    NSMutableArray *_photos;
    IPHDiffBag *_diffBag;
    ILPhotoAlbum *_photoAlbum;
    struct NSObject *_currentPhotoBeingUpdated;
    NSLock *_photoListLock;
}

- (id)init;
- (id)initWithPhotos:(id)fp8 properties:(id)fp12;
- (id)copy;
- (void)dealloc;
- (BOOL)loadPhotos:(id)fp8 service:(id)fp12 downloadedAtURL:(id)fp16;
- (void)updatePhotosOrder:(BOOL)fp8;
- (BOOL)readArray:(id)fp8 service:(struct NSObject *)fp12 downloadedAtURL:(id)fp16;
- (BOOL)readRSSFeedData:(id)fp8 downloadedAtURL:(id)fp12;
- (id)imageLinkFromXHTML:(id)fp8 feedBaseURLString:(id)fp12;
- (id)imageLinkFromDescription:(id)fp8 feedBaseURLString:(id)fp12;
- (id)initWithSerializedPropertyListData:(id)fp8;
- (id)serializedPropertyListData;
- (id)dictionaryToSave;
- (id)initWithDictionary:(id)fp8;
- (id)informationForKey:(id)fp8;
- (void)setInformation:(id)fp8 forKey:(id)fp12;
- (id)informationDictionary;
- (BOOL)allowReorder;
- (BOOL)allowDeletion;
- (BOOL)allowAddition;
- (id)UID;
- (id)readableName;
- (void)setReadableName:(id)fp8;
- (void)setPublishServerSetUID:(id)fp8;
- (id)photoDBExportedProperties;
- (id)photoDBLocalProperties;
- (id)photoShare;
- (unsigned int)photoCount;
- (id)allPhotos;
- (id)orderedPhotoUIDs;
- (id)allPhotosByUID;
- (struct NSObject *)photoWithUID:(id)fp8;
- (struct NSObject *)photoWithPublicationUID:(id)fp8;
- (int)indexOfPhoto:(struct NSObject *)fp8;
- (struct NSObject *)photoAtIndex:(unsigned int)fp8;
- (struct NSObject *)photoWithFilepath:(id)fp8;
- (struct NSObject *)nextPhoto:(struct NSObject *)fp8 loop:(BOOL)fp12;
- (struct NSObject *)previousPhoto:(struct NSObject *)fp8 loop:(BOOL)fp12;
- (id)ensureOriginalForPhoto:(struct NSObject *)fp8;
- (struct NSObject *)refForPhoto:(struct NSObject *)fp8 format:(unsigned long)fp12 quality:(int)fp16 maxDimensions:(unsigned long)fp20;
- (id)prepareSpriteForPhotos:(id)fp8 qualityValue:(float)fp12 maxDimensions:(unsigned long)fp16;
- (struct _NSSize)sizeOfPhoto:(struct NSObject *)fp8;
- (void)prepareToSync;
- (void)addPhoto:(struct NSObject *)fp8;
- (void)insertPhoto:(struct NSObject *)fp8 atIndex:(unsigned int)fp12;
- (void)removePhotoWithPublicationUID:(id)fp8;
- (void)removePhoto:(struct NSObject *)fp8;
- (void)removePhotoAtIndex:(unsigned int)fp8;
- (void)replacePhototAtIndex:(unsigned int)fp8 withPhoto:(struct NSObject *)fp12;
- (void)removeAllPhotos;
- (void)movePhotoAtIndex:(unsigned int)fp8 toIndex:(unsigned int)fp12;
- (void)movePhotosAtIndexes:(id)fp8 toIndex:(unsigned int)fp12;
- (void)setVersion:(id)fp8;
- (id)version;
- (void)bumpVersion;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)fp8;
- (void)markDirty;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)save;
- (id)diffBag;
- (void)setDiffBag:(id)fp8;
- (void)resetDiffBag;
- (void)markDiffBagChangedToState:(int)fp8 forPhotoObject:(struct NSObject *)fp12;
- (void)markDiffBagChangedToState:(int)fp8 forDistantPhotoObject:(struct NSObject *)fp12;
- (id)photoAlbum;
- (void)setPhotoAlbum:(id)fp8;
- (id)albumContentsDelegate;
- (id)updateDelegate;
- (BOOL)isLive;
- (void)setIsLive:(BOOL)fp8;
- (struct NSObject *)currentPhotoBeingUpdated;
- (void)setCurrentPhotoBeingUpdated:(struct NSObject *)fp8;

@end

@interface NSMutableString (IPHStringExtensions)
- (void)deleteCharactersFromSet:(id)fp8;
@end

@interface NSString (IPHStringExtensions)
+ (id)iph_stringFromUTF8HexaString:(id)fp8;
+ (id)iph_stringFromUCS2HexaString:(id)fp8;
+ (id)uuidString;
+ (id)guessedStringForDefaultString:(id)fp8 andUsedStrings:(id)fp12;
+ (id)iph_stringWithLegalURLCharactersThatShouldBeEscapedIfYouWantToEmbedThemInAURLSafely;
- (id)iph_convertToUTF8Hexa;
- (id)iph_convertToUCS2Hexa;
- (unsigned int)unsignedIntValue;
- (id)_stringByReplacingChar:(BOOL)fp8 withChar:(BOOL)fp12;
- (id)stringByConvertingToDottedName;
- (id)stringByConvertingToUnderscoredName;
- (int)iphNumericalCompare:(id)fp8;
- (id)stringWithLossyASCIIConversion;
- (id)stringWithUTF8Conversion;
- (int)compareToString:(id)fp8 withCaseSensitivity:(BOOL)fp12;
- (id)prettyPrintKeepCR:(BOOL)fp8;
- (id)prettyPrint;
- (id)stringByReplacingMarkupEntities;
- (id)stringByAddingMarkupEntities;
- (id)stringByAddingAmpersandMarkupEntity;
- (id)iph_stringByRemovingHTMLTags;
- (unsigned int)iph_countOfCharactersFromSet:(id)fp8;
- (id)iph_stringByAddingPercentEscapesUsingEncoding:(unsigned int)fp8 legalURLCharactersToEscape:(id)fp12;
- (id)_stringWithSpecialConversionForNameOnServer:(id)fp8;
- (id)iph_stringByCleaningForServer;
- (id)stringByURLQuoting;
- (id)stringByURLUnquoting;
- (int)caseInsensitiveDiacriticalCompare:(id)fp8;
- (BOOL)isCaseInsensitiveDiacriticalEqualToString:(id)fp8;
- (int)iTunesCompare:(id)fp8;
- (BOOL)iph_canReallyBeEncodedLosslessInEncoding:(unsigned int)fp8;
@end

@interface NSData (IPHMD5Extensions)
- (id)md5Digest;
@end

@interface NSString (IPHMD5Extensions)
- (id)md5Digest;
@end

@interface IPHUnpublishOperation : IPHUpdateOperation
{
    struct NSObject *_service;
    NSURL *_url;
    NSArray *_allPhotos;
}

- (id)initWithBackgroundSet:(struct NSObject *)fp8 URL:(id)fp12 service:(struct NSObject *)fp16;
- (void)dealloc;
- (id)operationType;
- (id)stringByURLQuoting:(id)fp8;
- (id)stringByURLUnquoting:(id)fp8;
- (id)uriForURL:(id)fp8;
- (void)start:(id)fp8;
- (void)unpublish;
- (void)finalizeUnpublish;
- (void)manageError:(id)fp8;

@end

@interface IPHUpdateOperation : NSObject
{
    NSString *_operationKey;
    NSError *_error;
    XTThread *_thread;
    struct NSObject *_backgroundSet;
}

+ (void)initialize;
+ (unsigned int)messageCategory;
- (id)initWithBackgroundSet:(struct NSObject *)fp8;
- (void)dealloc;
- (void)setThread:(id)fp8;
- (struct NSObject *)backgroundSet;
- (void)setBackgroundSet:(struct NSObject *)fp8;
- (void)start:(id)fp8;
- (void)end:(id)fp8;
- (void)cancel:(id)fp8;
- (void)pause:(id)fp8;
- (void)resume:(id)fp8;
- (id)operationKey;
- (void)setOperationKey:(id)fp8;
- (id)operationType;
- (id)error;
- (void)setError:(id)fp8;

@end

@interface IPHUpdateManager : NSObject
{
    NSMutableDictionary *_updateOperationsByKey;
    IPHUpdateOperation *_currentOperation;
    NSMutableArray *_pendingOperations;
    XTThread *_thread;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (id)currentOperation;
- (void)setCurrentOperation:(id)fp8;
- (void)addUpdateOperation:(id)fp8;
- (void)addUpdateOperationOnMainThread:(id)fp8;
- (void)prepareOperation:(id)fp8;
- (void)prepareOperationReply:(id)fp8;
- (void)operationEnded:(id)fp8;
- (void)prioritizeUpdateOperation:(id)fp8;
- (void)prioritizeUpdateOperationOnMainThread:(id)fp8;
- (void)_replyToPause:(id)fp8;

@end

@interface IPHUpdateManager (WallpapersAdditions)
+ (id)publishOperationForBackgroundSet:(struct NSObject *)fp8 toService:(struct NSObject *)fp12;
+ (id)publishBackgroundSet:(struct NSObject *)fp8 toService:(struct NSObject *)fp12;
+ (id)syncBackgroundSet:(struct NSObject *)fp8 toService:(struct NSObject *)fp12;
+ (BOOL)parseSubscribeURL:(id)fp8 getBaseURL:(id *)fp12 getPath:(id *)fp16 getDirectoryName:(id *)fp20 getDataFileName:(id *)fp24 getUsername:(id *)fp28 getPassword:(id *)fp32;
+ (id)subscribeOperationToService:(struct NSObject *)fp8;
+ (id)subscribeBackgroundSet:(struct NSObject *)fp8 toService:(struct NSObject *)fp12;
+ (id)unpublishOperationForBackgroundSet:(struct NSObject *)fp8 fromService:(struct NSObject *)fp12;
+ (id)unpublishBackgroundSet:(struct NSObject *)fp8 fromService:(struct NSObject *)fp12;
@end

@interface IPHFriendlyException : NSException
{
}

+ (void)poseAs;
+ (id)_symbolsForCurrentThreadStack;
+ (id)_appendSymbolsForCurrentThreadStackToString:(id)fp8;
+ (id)symbolsForCurrentThreadStack;
+ (id)stackTrace;
- (id)_stackTrace;
- (void)_generateStackTrace;
- (id)initWithName:(id)fp8 reason:(id)fp12 userInfo:(id)fp16;
- (id)reason;
- (id)description;
- (void)raise;

@end

@interface NSImage (IPHAdditions)
- (id)JPEGRepresentationWithCompressionFactor:(float)fp8;
- (BOOL)fixDPI;
@end

@interface NSRunLoop (IPHAdditions)
+ (id)mainRunLoop;
@end

@interface IPDrawingElement : IPPageElement
{
    float mBorderWidth;
    NSMutableArray *mPaths;
    BOOL mClosedShape;
    struct CGPath *mDrawingPath;
    struct _NSPoint mDrawingOffset;
    float mCurrentPathScale;
}

- (id)initWithElement:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)containsPoint:(struct _NSPoint)fp8;
- (BOOL)isLocked;
- (struct _NSRect)drawingRect:(float)fp8;
- (BOOL)isDrawingElement;
- (float)borderWidth;
- (void)setBorderWidth:(float)fp8;
- (id)paths;
- (void)setPaths:(id)fp8;
- (BOOL)isClosedShape;
- (void)setIsClosedShape:(BOOL)fp8;
- (struct _NSPoint)drawingOffset;
- (void)setDrawingOffset:(struct _NSPoint)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)_updateDrawingPathForScale:(float)fp8;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16;

@end

@interface FullScreenScroller : PVScroller
{
    NSImage *_leftArrowD;
    NSImage *_leftArrowN;
    NSImage *_leftArrowP;
    NSImage *_leftArrowTogetherD;
    NSImage *_leftArrowTogetherN;
    NSImage *_leftArrowTogetherP;
    NSImage *_rightArrowTogetherD;
    NSImage *_rightArrowTogetherN;
    NSImage *_rightArrowTogetherP;
    NSImage *_rightArrowD;
    NSImage *_rightArrowN;
    NSImage *_rightArrowP;
    NSImage *_thumbLeftCapD;
    NSImage *_thumbLeftCapN;
    NSImage *_thumbLeftCapP;
    NSImage *_thumbRightCapD;
    NSImage *_thumbRightCapN;
    NSImage *_thumbRightCapP;
    NSImage *_thumbFillD;
    NSImage *_thumbFillN;
    NSImage *_thumbFillP;
    NSImage *_trackFill;
    NSImage *_leftNoArrow;
    NSImage *_topArrowD;
    NSImage *_topArrowN;
    NSImage *_topArrowP;
    NSImage *_topArrowTogetherD;
    NSImage *_topArrowTogetherN;
    NSImage *_topArrowTogetherP;
    NSImage *_bottomArrowTogetherD;
    NSImage *_bottomArrowTogetherN;
    NSImage *_bottomArrowTogetherP;
    NSImage *_bottomArrowD;
    NSImage *_bottomArrowN;
    NSImage *_bottomArrowP;
    NSImage *_thumbTopCapD;
    NSImage *_thumbTopCapN;
    NSImage *_thumbTopCapP;
    NSImage *_thumbBottomCapD;
    NSImage *_thumbBottomCapN;
    NSImage *_thumbBottomCapP;
    NSImage *_thumbVerticalFillD;
    NSImage *_thumbVerticalFillN;
    NSImage *_thumbVerticalFillP;
    NSImage *_trackVerticalFill;
    NSImage *_topNoArrow;
    float _alpha;
    int _fsStyle;
}

- (void)_loadImages;
- (void)_unloadImages;
- (void)_ensureImages;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)_isVertical;
- (void)drawArrow:(unsigned int)fp8 highlightPart:(unsigned int)fp12;
- (void)drawArrow:(unsigned int)fp8 highlight:(BOOL)fp12;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(unsigned int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)_drawVertScaledWidgetInRect:(struct _NSRect)fp8 topImage:(id)fp24 centerImage:(id)fp28 bottomImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (float)alpha;
- (void)setAlpha:(float)fp8;
- (int)fsScrollerStyle;
- (void)setFSScrollerStyle:(int)fp8;

@end

@interface IWAnimation : NSObject <NSCopying, NSCoding>
{
    double _duration;
    float _currentProgress;
    float _framesPerSecond;
    id _delegate;
    NSTimer *_timer;
    double _startTime;
    NSMutableArray *_progressMarks;
    IWAnimation *_startAnimation;
    IWAnimation *_stopAnimation;
    int _nextProgressMark;
    struct {
        unsigned int delegateAnimationShouldStart:1;
        unsigned int delegateAnimationDidStop:1;
        unsigned int delegateAnimationDidEnd:1;
        unsigned int delegateAnimationValueForProgress:1;
        unsigned int delegateAnimationDidReachProgressMark:1;
        unsigned int animating:1;
        unsigned int blocking:1;
        unsigned int reserved:25;
    } _aFlags;
    struct {
        unsigned int animationCurve:8;
        unsigned int animationBlockingMode:2;
        unsigned int reserved:22;
    } _aSettings;
    long _reserved1;
    long _reserved2;
    long _reserved3;
    long _reserved4;
}

+ (void)initialize;
- (id)init;
- (id)initWithDuration:(double)fp8 animationCurve:(int)fp16;
- (void)dealloc;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)startAnimation;
- (void)stopAnimation;
- (BOOL)isAnimating;
- (float)currentProgress;
- (void)setCurrentProgress:(float)fp8;
- (void)setDuration:(double)fp8;
- (double)duration;
- (int)animationBlockingMode;
- (void)setAnimationBlockingMode:(int)fp8;
- (void)setFrameRate:(float)fp8;
- (float)frameRate;
- (void)setAnimationCurve:(int)fp8;
- (int)animationCurve;
- (float)currentValue;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (id)progressMarks;
- (void)setProgressMarks:(id)fp8;
- (void)addProgressMark:(float)fp8;
- (void)removeProgressMark:(float)fp8;
- (void)startWhenAnimation:(id)fp8 reachesProgress:(float)fp12;
- (void)stopWhenAnimation:(id)fp8 reachesProgress:(float)fp12;
- (void)clearStartAnimation;
- (void)clearStopAnimation;
- (id)runLoopModesForAnimating;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface IWTargetAnimationInfo : NSObject <NSCoding>
{
    IWAnimation *_animation;
    float _progress;
    BOOL _start;
}

- (id)initWithAnimation:(id)fp8 progress:(float)fp12 start:(BOOL)fp16;
- (float)floatValue;
- (void)startOrStopTargetAnimation;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)description;

@end

@interface IWAnimation (NSInternal)
- (void)_createTimer:(BOOL)fp8;
- (void)_runBlocking;
- (void)_startRunningNonBlocking;
- (void)_runInNewThread;
- (void)_advanceTime;
- (void)_animationThread;
- (void)_startAnimation;
- (void)_stopAnimation:(int)fp8;
- (void)_addTargetAnimation:(id)fp8 start:(BOOL)fp12 atProgress:(float)fp16;
- (void)_removeTargetAnimation:(id)fp8 start:(BOOL)fp12;
- (float)_progressForAnimation:(id)fp8 start:(BOOL)fp12;
- (void)_clearAllTargetAnimations;
@end

@interface IWMultiWindowAnimation : IWAnimation
{
    NSMutableArray *mInfoArray;
}

- (id)initWithDuration:(double)fp8 animationCurve:(int)fp16;
- (void)dealloc;
- (void)addWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48 scaleContent:(BOOL)fp52;
- (void)addWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48;
- (id)animationInfoForWindow:(id)fp8;
- (float)endAlphaForWindow:(id)fp8;
- (void)setCurrentProgress:(float)fp8;
- (struct _NSRect)blendStartRect:(struct _NSRect)fp8 endRect:(struct _NSRect)fp24 fraction:(float)fp40;
- (struct _NSRect)integralRect:(struct _NSRect)fp8;

@end

@interface IWWindowAnimationView : NSView
{
    NSBitmapImageRep *_content;
}

+ (id)viewForView:(id)fp8;
- (id)initWithView:(id)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IWWindowAnimationInfo : NSObject
{
    NSWindow *mWindow;
    struct _NSRect mStartFrame;
    struct _NSRect mEndFrame;
    float mStartAlpha;
    float mEndAlpha;
    BOOL mScaleContent;
    NSView *mContentViewHolder;
}

- (id)initWithWindow:(id)fp8 startFrame:(struct _NSRect)fp12 endFrame:(struct _NSRect)fp28 startAlpha:(float)fp44 endAlpha:(float)fp48 scaleContent:(BOOL)fp52;
- (void)dealloc;
- (id)window;
- (struct _NSRect)startFrame;
- (struct _NSRect)endFrame;
- (float)startAlpha;
- (float)endAlpha;
- (BOOL)scaleContent;
- (void)setContentViewHolder:(id)fp8;
- (id)contentViewHolder;

@end

@interface EffectsView : NSView
{
    CIContext *mCoreContext;
    struct EffectsStruct mEffects[9];
    Edit *mEdit;
    EffectsController *mController;
    float mMaxTitleHeight;
    struct _NSRect mImageRect;
    NSLayoutManager *sLayoutManager;
    NSTextContainer *sTextContainer;
    BOOL mForEffects;
    int mRows;
    int mMouseInEffect;
}

- (id)initWithFrame:(struct _NSRect)fp8 forEffects:(BOOL)fp24;
- (void)dealloc;
- (void)initializeFilter;
- (id)imageWithEffects:(BOOL)fp8 withoutSepiaAntiqueOrBW:(BOOL)fp12;
- (void)clearCaches;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)setController:(id)fp8;

@end

@interface NavigationController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NavigationView *mNavView;
    Edit *mEdit;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (void)mouseExited:(id)fp8;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)close:(id)fp8;
- (void)layoutMainView;
- (id)mainView;
- (void)setEdit:(id)fp8;
- (id)edit;
- (void)refresh;

@end

@interface NavigationView : NSView
{
    NavigationController *mController;
    CIContext *mCoreContext;
    struct _NSRect mCurrentRect;
    struct _NSPoint mOffset;
}

- (void)dealloc;
- (void)updateFrame;
- (id)filteredImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setController:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drag:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)refreshResources;

@end

@interface IPHProcessIndicator : IPHProgressIndicator
{
}

- (id)iconsForAnimationFilenames;
- (id)indeterminateIconsForAnimationFilenames;
- (id)alternateIconsForAnimationFilenames;
- (id)alternateIndeterminateIconsForAnimationFilenames;
- (void)draw;

@end

@interface IPHProgressIndicator : NSProgressIndicator
{
    NSMutableArray *_icons;
    NSMutableArray *_indeterminateIcons;
    NSMutableArray *_alternateIcons;
    NSMutableArray *_alternateIndeterminateIcons;
    BOOL _animationStarted;
    NSTimer *_animationTimer;
    XTMessage *_cancelMessage;
    BOOL _useAlternateIcons;
    BOOL _flipped;
    BOOL _highlighted;
    int _trackingRectTag;
    BOOL _mouseInside;
    BOOL _mouseIsDown;
    BOOL _wasAnimating;
}

+ (void)initialize;
- (void)commonInit;
- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setIcons:(id)fp8 forAnimationFilenames:(id)fp12;
- (void)setIconsForAnimationFilenames:(id)fp8;
- (void)setIndeterminateIconsForAnimationFilenames:(id)fp8;
- (void)setAlternateIconsForAnimationFilenames:(id)fp8;
- (void)setAlternateIndeterminateIconsForAnimationFilenames:(id)fp8;
- (id)iconsForAnimationFilenames;
- (id)indeterminateIconsForAnimationFilenames;
- (id)alternateIconsForAnimationFilenames;
- (id)alternateIndeterminateIconsForAnimationFilenames;
- (int)nbIconsForAnimation;
- (id)iconForAnimationAtIndex:(int)fp8;
- (id)alternateIconForAnimationAtIndex:(int)fp8;
- (id)imageToDrawAtIndex:(int)fp8;
- (void)setIsHighlighted:(BOOL)fp8;
- (struct _NSRect)_getGaugeFrame;
- (struct _NSRect)getSpinnerFrame;
- (BOOL)isHighlighted;
- (void)setHighlighted:(BOOL)fp8;
- (id)cancelMessage;
- (void)setCancelMessage:(id)fp8;
- (void)draw;
- (void)setIndeterminate:(BOOL)fp8;
- (void)animationProgressed;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)_cancelMouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)_resetTrackingRect;
- (void)resetCursorRects;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)removeFromSuperview;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)_immediatelyDraw;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface NSProgressIndicator (IPHProgressIndicatorExtension)
- (int)currentAnimationStep;
- (void)setCurrentAnimationStep:(int)fp8;
@end

@interface IPSmartResolver : NSObject
{
    NSString *mPath;
    struct IPFileInfo *mFileInfo;
    _Bool mWithUI;
    NSString *mResolvedPath;
}

+ (void)initialize;
+ (id)resolvePath:(id)fp8 forFileInfo:(struct IPFileInfo *)fp12 withUI:(_Bool)fp16;
+ (void)addResolution:(id)fp8 forPath:(id)fp12;
- (id)_initWithPath:(id)fp8 forFileInfo:(struct IPFileInfo *)fp12 withUI:(_Bool)fp16;
- (void)dealloc;
- (id)_resolvedPath;
- (void)_setResolvedPath:(id)fp8;
- (void)_resolvePathOnMainThread:(id)fp8;
- (id)_checkResolveHistory:(id)fp8;

@end

@interface IPFileValidator : NSObject
{
    NSString *mFilename;
}

+ (id)fileValidatorForFilename:(id)fp8;
- (id)initWithFilename:(id)fp8;
- (void)dealloc;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;

@end

@interface HUDTextView : NSTextView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawViewBackgroundInRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;

@end

@interface ColorBackgroundView : NSView
{
    NSColor *mTheColor;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setBackgroundColor:(id)fp8;

@end

@interface HUDBoxView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPToolTipManager : NSObject
{
    NSView *_ownerView;
    NSString *_toolTip;
    NSAttributedString *_attrToolTip;
    int _nextTag;
    void *_toolTipMap;
    int _wholeViewToolTipTag;
    int _visibleToolTipTag;
    IPToolTipWindow *_toolTipWindow;
    NSTimer *_toolTipTimer;
    Class _toolTipViewClass;
    BOOL _timedHideWhenHover;
    BOOL _dontHideWhenOverTip;
}

- (id)initWithView:(id)fp8;
- (void)stopListening;
- (void)startListening;
- (void)dealloc;
- (int)addToolTipRect:(struct _NSRect)fp8 owner:(id)fp24 userData:(void *)fp28;
- (void)removeAllToolTips;
- (void)removeToolTip:(int)fp8;
- (void)setToolTip:(id)fp8;
- (id)toolTip;
- (void)setAttributedToolTip:(id)fp8;
- (id)attributedToolTip;
- (void)_addWholeViewToolTip;
- (void)_removeWholeViewToolTip;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEnteredToolTip:(int)fp8 inWindow:(id)fp12 withEvent:(id)fp16;
- (void)mouseExitedToolTip:(int)fp8 inWindow:(id)fp12 withEvent:(id)fp16;
- (void)stopTimer;
- (void)setShowTimerForTag:(int)fp8 atPoint:(struct _NSPoint)fp12 quick:(BOOL)fp20;
- (void)setHideTimerForTag:(int)fp8 hovering:(BOOL)fp12;
- (void)showToolTip:(int)fp8 atPoint:(struct _NSPoint)fp12;
- (void)hideToolTip:(BOOL)fp8;
- (void)showTimerFired:(id)fp8;
- (void)hideTimerFired:(id)fp8;
- (Class)toolTipViewClass;
- (void)setToolTipViewClass:(Class)fp8;
- (BOOL)timedHideWhenHover;
- (void)setTimedHideWhenHover:(BOOL)fp8;
- (BOOL)dontHideWhenOverTip;
- (void)setDontHideWhenOverTip:(BOOL)fp8;

@end

@interface IPToolTipContext : NSObject
{
    int _tag;
    struct _NSPoint _point;
}

+ (id)contextWithTag:(int)fp8 point:(struct _NSPoint)fp12;
- (int)tag;
- (void)setTag:(int)fp8;
- (struct _NSPoint)point;
- (void)setPoint:(struct _NSPoint)fp8;

@end

@interface IPToolTipWindow : NSWindow
{
}

+ (struct _NSRect)safeRect:(struct _NSRect)fp8;
+ (id)showWithContent:(id)fp8 entry:(struct IPToolTipInfo)fp12 ownerView:(id)fp40 viewClass:(Class)fp44 forPoint:(struct _NSPoint)fp48;
- (id)initWithContentRect:(struct _NSRect)fp8;
- (void)updateWithContent:(id)fp8 entry:(struct IPToolTipInfo)fp12 ownerView:(id)fp40 viewClass:(Class)fp44 forPoint:(struct _NSPoint)fp48;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (BOOL)hideOnExit;
- (void)setHideOnExit:(BOOL)fp8;
- (BOOL)inWindow;

@end

@interface IPToolTipView : NSView
{
    id _content;
    struct IPToolTipInfo _entry;
    NSView *_ownerView;
    BOOL _hideOnExit;
    BOOL _inWindow;
    int _trackingTag;
}

+ (struct _NSSize)sizeForContent:(id)fp8;
- (void)_addTracking;
- (void)_frameChanged:(id)fp8;
- (void)viewDidMoveToWindow;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (BOOL)hideOnExit;
- (void)setHideOnExit:(BOOL)fp8;
- (BOOL)inWindow;
- (void)drawRect:(struct _NSRect)fp8;
- (id)content;
- (void)setContent:(id)fp8;
- (struct IPToolTipInfo)entry;
- (void)setEntry:(struct IPToolTipInfo)fp8;
- (id)ownerView;
- (void)setOwnerView:(id)fp8;

@end

@interface IPThemeSelectionCell : NSActionCell
{
    CachedBundle *mTheme;
    struct IPPhotoInfo *mPhotoInfo;
    NSString *mCategory;
    NSAttributedString *_attributedTitle;
    NSString *_title;
    BOOL mShouldDrawPhoto;
}

- (id)init;
- (BOOL)acceptsFirstResponder;
- (unsigned int)imagePosition;
- (void)setTheme:(id)fp8;
- (id)theme;
- (void)setCategory:(id)fp8;
- (id)category;
- (void)setPreviewPhoto:(struct IPPhotoInfo *)fp8;
- (void)setShouldDrawPhoto:(BOOL)fp8;
- (BOOL)isOpaque;
- (struct _NSRect)aspectedRectInRect:(struct _NSRect)fp8 forSize:(struct CGSize)fp24;
- (struct _NSRect)aspectedRectFillingRect:(struct _NSRect)fp8 forSize:(struct CGSize)fp24;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)dealloc;
- (id)attributedTitle;
- (void)setAttributedTitle:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;

@end

@interface FirstMouseButton : NSButton
{
    BOOL mAcceptsFirstMouse;
    BOOL mWasEnabled;
    BOOL mWindowIsKey;
}

- (id)init;
- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setAcceptsFirstMouse:(BOOL)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)_windowBecameKey:(id)fp8;
- (void)_windowResignedKey:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)isEnabled;

@end

@interface PublishAlbumSettings : NSObject
{
    NSPanel *mSubscribePanel;
    NSTextField *mSubscribeTitle;
    NSTextField *mSubscribeURL;
    NSButton *mSubscribeOKButton;
    NSButton *mSubscribeCancelButton;
    NSPanel *mPasswordPanel;
    NSTextField *mPasswordTitle;
    NSTextField *mPasswordUsernameText;
    NSTextField *mPasswordPasswordText;
    NSButton *mPasswordOKButton;
    NSButton *mPasswordCancelButton;
    NSButton *mPasswordRememberButton;
    NSPanel *mRetryPanel;
    NSTextField *mRetryTitle;
    NSTextField *mRetryUsernameText;
    NSTextField *mRetryPasswordText;
    NSButton *mRetryOKButton;
    NSButton *mRetryCancelButton;
    NSButton *mRetryRememberButton;
    NSPanel *mSubConfirmPanel;
    NSImageView *mSubConfirmPicture;
    NSTextField *mSubConfirmTitle;
    NSTextField *mSubConfirmMessage;
    NSButton *mSubConfirmDontAskCheckbox;
    NSButton *mSubConfirmSubscribeButton;
    NSButton *mSubConfirmCancelButton;
    NSPanel *mConflictPanel;
    NSTextField *mConflictTitle;
    NSTextField *mConflictPhotoLibraryTitle;
    NSImageView *mConflictPhotoLibraryImage;
    NSTextView *mConflictPhotoLibraryText;
    NSTextField *mConflictWebGalleryTitle;
    NSImageView *mConflictWebGalleryImage;
    NSTextView *mConflictWebGalleryText;
    NSButton *mConflictApplyAllButton;
    NSButton *mConflictCancelButton;
    NSButton *mConflictUsePhotoLibraryButton;
    NSButton *mConflictUseWebGalleryButton;
    NSMutableArray *mPublishAlbumNibObjects;
    NSString *mPasswordSavedTitle;
    NSString *mRetrySavedTitle;
    NSWindow *mWindow;
    NSString *mPublishServiceKey;
    NSString *mSubConfirmURL;
    _Bool mShowedRetry;
    id mModalDelegate;
    SEL mDidEndSelector;
    void *mContextInfo;
}

- (void)_ensureNib;
- (void)dealloc;
- (id)beginSubscribeSettingsInWindow:(id)fp8 modalDelegate:(id)fp12 didEndSelector:(SEL)fp16 contextInfo:(void *)fp20;
- (id)beginPasswordPromptForAlbum:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (id)beginRetryPromptForAlbum:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (id)beginSubscribeConfirmForURL:(id)fp8 inWindow:(id)fp12 modalDelegate:(id)fp16 didEndSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (_Bool)showedRetry;
- (void)controlTextDidChange:(id)fp8;
- (id)subscribeURL;
- (void)hitSubscribeOK:(id)fp8;
- (void)hitSubscribeCancel:(id)fp8;
- (id)passwordUsername;
- (id)passwordPassword;
- (BOOL)passwordRememberInKeychain;
- (void)hitPasswordOK:(id)fp8;
- (void)hitPasswordCancel:(id)fp8;
- (id)retryUsername;
- (id)retryPassword;
- (BOOL)retryRememberInKeychain;
- (void)hitRetryOK:(id)fp8;
- (void)hitRetryCancel:(id)fp8;
- (void)hitSubConfirmOK:(id)fp8;
- (void)hitSubConfirmCancel:(id)fp8;
- (void)hitSubConfirmDontAsk:(id)fp8;
- (id)subscribeConfirmURL;
- (BOOL)subscribeConfirmDontAsk;
- (void)hitConflictApplyAll:(id)fp8;
- (void)hitConflictUsePhotoLibrary:(id)fp8;
- (void)hitConflictUseWebGallery:(id)fp8;
- (void)hitConflictCancel:(id)fp8;

@end

@interface TempImageManager : NSObject
{
    struct vector<TempImageEntry, std::allocator<TempImageEntry>> *_fileList;
    NSString *_spritePath;
    unsigned long _nbValidPhotos;
    _Bool _canceled;
}

+ (id)tempPathForPhoto:(struct IPPhotoInfo *)fp8 convertToFormat:(unsigned long)fp12;
- (id)init;
- (void)dealloc;
- (void)addPhoto:(struct IPPhotoInfo *)fp8;
- (void)addPhoto:(struct IPPhotoInfo *)fp8 resizeTo:(unsigned long)fp12;
- (void)addPhoto:(struct IPPhotoInfo *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16;
- (void)addPhoto:(struct IPPhotoInfo *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16 standardizeColorSpace:(_Bool)fp20 includeEXIF:(_Bool)fp24;
- (void)addPhotoList:(struct IPPhotoList *)fp8;
- (void)addPhotoList:(struct IPPhotoList *)fp8 resizeTo:(unsigned long)fp12;
- (void)addPhotoList:(struct IPPhotoList *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16;
- (void)addPhotoList:(struct IPPhotoList *)fp8 convertToFormat:(unsigned long)fp12 resizeTo:(unsigned long)fp16 standardizeColorSpace:(_Bool)fp20 includeEXIF:(_Bool)fp24;
- (id)_getPhotoPathsForPhoto:(struct IPPhotoInfo *)fp8 withFormat:(unsigned long)fp12;
- (_Bool)preparePhotosWithQuality:(float)fp8 progressTitle:(id)fp12 inWindow:(id)fp16;
- (_Bool)prepareSpriteWithQuality:(float)fp8;
- (unsigned long)nbValidPhotos;
- (id)pathForIndex:(unsigned long)fp8;
- (struct _NSSize)sizeForIndex:(unsigned long)fp8;
- (id)spritePath;
- (void)_cancel;
- (void)removeTempPhotos:(BOOL)fp8;

@end

@interface NSData (IPHDataExtensions)
- (id)iph_gzippedData;
- (id)iph_gunzippedData;
@end

@interface OptionAlert : NSObject
{
    NSWindow *mAlertWindow;
    NSTextField *mTitle;
    NSTextField *mMessage;
    NSImageView *mIcon;
    NSButton *mOptionCheckbox;
    NSButton *mOKButton;
    NSButton *mCancelButton;
    NSButton *mOtherButton;
    NSMutableArray *mOptionAlertNibObjects;
    id mContextInfo;
}

+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 okButton:(id)fp24 cancelButton:(id)fp28 modalDelegate:(id)fp32 didEndSelector:(SEL)fp36 contextInfo:(id)fp40 nibName:(id)fp44;
+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 modalDelegate:(id)fp36 didEndSelector:(SEL)fp40 contextInfo:(id)fp44 nibName:(id)fp48;
+ (id)beginOptionAlertInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 otherButton:(id)fp36 defaultReturn:(int)fp40 modalDelegate:(id)fp44 didEndSelector:(SEL)fp48 contextInfo:(id)fp52 nibName:(id)fp56;
- (void)_ensureNib:(id)fp8;
- (void)dealloc;
- (id)initInWindow:(id)fp8 title:(id)fp12 message:(id)fp16 option:(id)fp20 optionDefault:(BOOL)fp24 okButton:(id)fp28 cancelButton:(id)fp32 otherButton:(id)fp36 defaultReturn:(int)fp40 modalDelegate:(id)fp44 didEndSelector:(SEL)fp48 contextInfo:(id)fp52 nibName:(id)fp56;
- (void)_optionAlertDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)close;
- (BOOL)option;
- (id)contextInfo;
- (void)hitOK:(id)fp8;
- (void)hitCancel:(id)fp8;
- (void)hitOther:(id)fp8;
- (void)hitOption:(id)fp8;

@end

@interface CalendarCaptionFormatter : NSFormatter
{
    int _captionLocation;
}

- (id)stringForObjectValue:(id)fp8;
- (id)attributedStringForObjectValue:(id)fp8 withDefaultAttributes:(id)fp12;
- (id)editingStringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (int)captionLocation;
- (void)setCaptionLocation:(int)fp8;

@end

@interface ISLengthFormatter : NSFormatter
{
    int maxLength;
}

- (id)initWithMaxLength:(int)fp8;
- (int)maxLength;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;

@end

@interface ISLengthFormatter (ISUsefulLengthFormatters)
+ (id)formatterWithLength:(int)fp8;
+ (id)addressTitleFormatter;
+ (id)addressStreetFormatter;
+ (id)addressCityFormatter;
+ (id)addressFirstNameFormatter;
+ (id)addressLastNameFormatter;
+ (id)addressPhoneticFirstNameFormatter;
+ (id)addressPhoneticLastNameFormatter;
+ (id)addressPhoneAreaCodeFormatter;
+ (id)addressPhoneNumberFormatter;
+ (id)addressLabelFormatter;
+ (id)addressStateFormatter;
+ (id)debitCardIssueNumberFormatter;
@end

@interface ISLengthEncodingFormatter : ISLengthFormatter
{
    unsigned int encoding;
}

- (id)initWithMaxLength:(int)fp8 encoding:(unsigned int)fp12;
- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;

@end

@interface ISLengthEncodingFormatter (ISUsefulLengthEncodingFormatters)
+ (id)macRomanAddressPhoneNumberFormatter;
+ (id)macRomanLoginAccountIdFormatter;
+ (id)macRomanLoginPasswordFormatter;
@end

@interface IPCutSheetView : IPBookView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPVectorElement : IPPageElement
{
    NSMutableArray *_paths;
    NSMutableDictionary *_subPaths;
    struct _NSRect _pathBounds;
    NSArray *_archiveArray;
    struct _NSPoint mDrawingOffset;
}

- (id)archiveArray;
- (id)initWithElement:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)_calculatePathBounds;
- (id)convertColorStringToColor:(id)fp8;
- (id)svgPathFromDictionary:(id)fp8;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (id)paths;
- (void)setPaths:(id)fp8;
- (id)subPaths;
- (struct _NSRect)pathBounds;
- (void)setSubPaths:(id)fp8;
- (struct _NSPoint)drawingOffset;
- (void)setDrawingOffset:(struct _NSPoint)fp8;
- (void)drawCGPath:(id)fp8 inContext:(struct CGContext *)fp12;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16;

@end

@interface SVGPath : NSObject
{
    NSString *_path;
    NSColor *_fillColor;
    NSColor *_strokeColor;
    BOOL _fillEvenOdd;
    float _strokeWidth;
    int _strokeLineCap;
    int _strokeLineJoin;
    struct CGPath *_cgPath;
    BOOL _lastCubicBezierCtrlSet;
    struct _NSPoint _lastCubicBezierCtrl;
    BOOL _lastQuadraticBezierCtrlSet;
    struct _NSPoint _lastQuadraticBezierCtrl;
}

+ (id)createWithSVGPath:(id)fp8 fillColor:(id)fp12 strokeColor:(id)fp16 strokeWidth:(float)fp20 strokeLineCap:(int)fp24 strokeLineJoin:(int)fp28 fillEvenOdd:(BOOL)fp32;
- (id)initWithSVGPath:(id)fp8 fillColor:(id)fp12 strokeColor:(id)fp16 strokeWidth:(float)fp20 strokeLineCap:(int)fp24 strokeLineJoin:(int)fp28 fillEvenOdd:(BOOL)fp32;
- (struct CGPath *)cgPath;
- (id)fillColor;
- (id)strokeColor;
- (float)strokeWidth;
- (BOOL)fillEvenOdd;
- (int)strokeLineCap;
- (int)strokeLineJoin;
- (void)dealloc;
- (void)processAbsoluteMoveToX:(float)fp8 y:(float)fp12;
- (void)processRelativeMoveToX:(float)fp8 y:(float)fp12;
- (void)processClosePath;
- (void)processAbsoluteLineToX:(float)fp8 y:(float)fp12;
- (void)processRelativeLineToX:(float)fp8 y:(float)fp12;
- (void)processAbsoluteHorizontalLineToX:(float)fp8;
- (void)processRelativeHorizontalLineToX:(float)fp8;
- (void)processAbsoluteVerticalLineToY:(float)fp8;
- (void)processRelativeVerticalLineToY:(float)fp8;
- (void)processAbsoluteCubicBezierWithX1:(float)fp8 y1:(float)fp12 x2:(float)fp16 y2:(float)fp20 x:(float)fp24 y:(float)fp28;
- (void)processRelativeCubicBezierWithX1:(float)fp8 y1:(float)fp12 x2:(float)fp16 y2:(float)fp20 x:(float)fp24 y:(float)fp28;
- (void)processAbsoluteSmoothCubicBezierWithX2:(float)fp8 y2:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processRelativeSmoothCubicBezierWithX2:(float)fp8 y2:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processAbsoluteQuadraticBezierWithX1:(float)fp8 y1:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processRelativeQuadraticBezierWithX1:(float)fp8 y1:(float)fp12 x:(float)fp16 y:(float)fp20;
- (void)processAbsoluteSmoothQuadraticBezierWithX:(float)fp8 y:(float)fp12;
- (void)processRelativeSmoothQuadraticBezierWithX:(float)fp8 y:(float)fp12;
- (void)processAbsoluteElipticalArcWithRx:(float)fp8 ry:(float)fp12 xar:(float)fp16 laf:(float)fp20 sf:(float)fp24 x:(float)fp28 y:(float)fp32;
- (void)processRelativeElipticalArcWithRx:(float)fp8 ry:(float)fp12 xar:(float)fp16 laf:(float)fp20 sf:(float)fp24 x:(float)fp28 y:(float)fp32;
- (void)_convert;

@end

@interface SVGSubPath : NSObject
{
    NSString *_name;
    NSString *_matrix;
    NSArray *_paths;
    struct CGAffineTransform _transform;
}

+ (id)createWithName:(id)fp8 matrix:(id)fp12 paths:(id)fp16;
- (id)initWithName:(id)fp8 matrix:(id)fp12 paths:(id)fp16;
- (void)dealloc;
- (id)paths;
- (struct CGAffineTransform)transform;

@end

@interface IPVectorTextElement : IPTextElement
{
    struct CGPath *mTextPath;
}

- (BOOL)isTextElement;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawPathInContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)textStyleChanged;
- (void)_constructPath;
- (void)dealloc;

@end

@interface ActionIndicatorAnimator : NSObject
{
    ActionIndicatorWindow *mWind;
    NSTimer *mTimer;
    NSArray *mImages;
    int mImageIndex;
}

- (void)_animate:(id)fp8;
- (id)initWithWindow:(id)fp8 images:(id)fp12 interval:(double)fp16;
- (void)dealloc;

@end

@interface ActionIndicatorWindow : NSWindow
{
    NSTimer *mTimer;
    float mFadeIncrement;
    float mFade;
    BOOL mPoof;
    double mAnimationDelay;
}

- (void)dealloc;
- (id)initWithImage:(id)fp8;
- (void)setPoof:(BOOL)fp8;
- (void)scheduleHide:(double)fp8;
- (void)_hideUsingTimer:(id)fp8;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface IPBookAnimationEffect : NSObject
{
    struct {
        NSString *effectType;
        double startTime;
        double duration;
        CDAnonymousStruct15 targetLocation;
        struct CGPoint centerPointShift;
        struct CGSize startSize;
        struct CGSize targetSize;
        float targetRotation;
        float startHorizontalSpin;
        float targetHorizontalSpin;
        float startVerticalSpin;
        float targetVerticalSpin;
        float targetOpacity;
        int curveDynamics;
        double startVelocity;
        double endVelocity;
        double minVelocity;
        double curveParameter;
        CDAnonymousStruct15 startLocation;
        CDAnonymousStruct15 locationDelta;
        struct CGSize rateSize;
        float startRotation;
        float rateRotation;
        float rateXRotation;
        float rateYRotation;
        float rateOpacity;
        double avgSpeedScale;
        char init;
        NSArray *splinePoints;
        struct spline1 *splineObj;
        float **spline;
        int nSplinePoints;
        float timeLastDrawn;
        float arclengthLastDrawn;
        NSMutableArray *timePoints;
    } mEffectData;
}

- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8;
- (CDAnonymousStruct20)effectDataAtScale:(float)fp8 withTextureDuration:(float)fp12 andOffset:(struct CGPoint)fp16;
- (void)dealloc;
- (void)computeInterpolation1From2DArray:(float **)fp8 ofSize:(int)fp12;
- (void)computeInterpolation2From2DArray:(float **)fp8 ofSize:(int)fp12;

@end

@interface NSDatePicker (PhotoDateAdditions)
- (double)photoDate;
- (void)setPhotoDate:(double)fp8;
@end

@interface IPBookPrintView : NSView
{
    IPBook *mBook;
    NSString *mCurrentPrintPath;
    NSNumber *mOverrideMaxDPI;
}

- (void)setBook:(id)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (id)overrideMaxDPI;
- (void)setOverrideMaxDPI:(id)fp8;

@end

@interface NSSplitView (iPhotoExtensions)
- (void)resizeSubviewsToPercentage:(float)fp8;
- (float)getSplitPercentage;
@end

@interface NSString (iPhotoExtensions)
+ (id)generateUUID;
+ (id)thousandSeparatorFormattedNumber:(int)fp8;
- (id)colorRepresentedByString;
- (id)colorRepresentedByFloatString;
- (unsigned long)versionNumberRepresentedByDottedString;
@end

@interface NSColor (iPhotoExtensions)
- (id)stringRepresentingColor;
- (id)floatStringRepresentingColor;
@end

@interface BLAlertController : NSWindowController
{
    NSTextField *mTitleText;
    NSTextField *mMessageText;
    NSButton *mDefaultButton;
    NSButton *mAlternateButton;
    NSButton *mOtherButton;
    id mDelegate;
    NSString *mTitle;
    NSAttributedString *mMessage;
    NSString *mDefaultButtonTitle;
    NSString *mAlternateButtonTitle;
    NSString *mOtherButtonTitle;
}

+ (void)showSheetForWindow:(id)fp8 title:(id)fp12 message:(id)fp16 defaultButtonTitle:(id)fp20 alternateButtonTitle:(id)fp24 otherButtonTitle:(id)fp28 delegate:(id)fp32;
+ (id)attributedStringForURL:(id)fp8;
+ (id)attributedStringForMessage:(id)fp8;
- (id)initWithTitle:(id)fp8 message:(id)fp12 defaultButtonTitle:(id)fp16 alternateButtonTitle:(id)fp20 otherButtonTitle:(id)fp24 delegate:(id)fp28;
- (void)dealloc;
- (void)showSheetForWindow:(id)fp8;
- (void)defaultAction:(id)fp8;
- (void)alternateAction:(id)fp8;
- (void)otherAction:(id)fp8;
- (void)pSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)awakeFromNib;

@end

@interface ThemeUpgrade : NSObject
{
    id mConnection;
    BOOL mReportErrors;
    ProgressController *mProgress;
    int mOperation;
    BOOL mAppWillTerminate;
    NSMutableData *mData;
    NSDictionary *mConfigurationDict;
    NSDictionary *mThemeDict;
    NSMutableArray *mPreviewList;
    NSDictionary *mRequestedPreview;
    IPTemplate *mRequestedTheme;
    struct AuthorizationOpaqueRef *mRequestAuthorization;
    NSString *mTempDirectory;
    NSString *mThemeDirectory;
    id mCompletionTarget;
    SEL mCompletionAction;
    void *mCompletionContext;
    void *stubCFNetDiagnosticCreateWithURL;
    void *stubCFNetDiagnosticDiagnoseProblemInteractively;
}

+ (id)sharedThemeUpgrade;
+ (id)executeShellCommand:(id)fp8;
+ (void)checkForUpdates;
+ (void)forceCheckForUpdates;
- (struct __CFNetDiagnostic *)CFNetDiagnosticCreateWithURL:(struct __CFURL *)fp8;
- (long)CFNetDiagnosticDiagnoseProblemInteractively:(struct __CFNetDiagnostic *)fp8;
- (void)_completionCallback:(id)fp8;
- (BOOL)ensureThemeLoaded:(id)fp8 withUI:(BOOL)fp12 completionTarget:(id)fp16 completionAction:(SEL)fp20 contextInfo:(void *)fp24;
- (id)_appWillTerminate;
- (id)init;
- (int)currentOperation;
- (void)checkForUpdatesWithUI:(BOOL)fp8;
- (void)dealloc;
- (void)_cancel;
- (void)connection:(id)fp8 didReceiveResponse:(id)fp12;
- (void)connection:(id)fp8 didReceiveData:(id)fp12;
- (void)connection:(id)fp8 didFailWithError:(id)fp12;
- (void)connectionDidFinishLoading:(id)fp8;
- (void)_assemblePreview:(id)fp8;
- (void)_assembleTheme:(id)fp8 withArchive:(id)fp12;
- (void)_finishLoadingItem;
- (void)_discoverUpdatedThemes:(id)fp8;
- (void)_getThemePreviews:(id)fp8;
- (BOOL)_requestNextPreview;
- (void)_cancelGetFile;

@end

@interface NSView (iPhotoExtensions)
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28 hiliteFlag:(char *)fp32;
- (BOOL)trackRect:(struct _NSRect)fp8 refreshRect:(struct _NSRect)fp24 event:(id)fp40 didTrack:(char *)fp44 hiliteFlag:(char *)fp48;
- (void)tileBackgroundWithImage:(id)fp8 inRect:(struct _NSRect)fp12;
- (void)removeAllSubviews;
- (void)removeAllSubviewsWithoutNeedingDisplay;
- (void)removeSubviewsAfterIndex:(int)fp8;
- (void)addSubviews:(id)fp8;
- (void)addSubviews:(id)fp8 offset:(struct _NSPoint)fp12;
@end

@interface IPEventObjCProxy : NSObject <IPAttributeProtocol>
{
    struct IPRoll *_event;
}

- (id)initWithEvent:(struct IPRoll *)fp8;
- (struct IPRoll *)event;
- (id)attributeForKey:(id)fp8;
- (void)setAttribute:(id)fp8 forKey:(id)fp12;
- (id)db;

@end

@interface RollHolder : NSObject
{
    struct IPRoll *mRoll;
    BOOL mDeleteOnDealloc;
}

+ (id)hold:(struct IPRoll *)fp8;
+ (id)hold:(struct IPRoll *)fp8 deleteOnDealloc:(BOOL)fp12;
- (id)initWithRoll:(struct IPRoll *)fp8 deleteOnDealloc:(BOOL)fp12;
- (void)dealloc;
- (struct IPRoll *)roll;

@end

@interface RollDateNaming : NSObject
{
    struct __CFDateFormatter *mFormatter;
}

+ (id)localizedStringWithDate:(id)fp8;
- (void)_defaultsChanged:(id)fp8;

@end

@interface StackHolder : NSObject
{
    struct IPStack *mStack;
    BOOL mDeleteOnDealloc;
}

+ (id)hold:(struct IPStack *)fp8;
+ (id)hold:(struct IPStack *)fp8 deleteOnDealloc:(BOOL)fp12;
- (id)initWithStack:(struct IPStack *)fp8 deleteOnDealloc:(BOOL)fp12;
- (void)dealloc;
- (struct IPStack *)stack;

@end

@interface SHolder : NSObject
{
    struct IPSelectable *mSelectable;
}

+ (id)hold:(struct IPSelectable *)fp8;
- (id)initWithSelectable:(struct IPSelectable *)fp8;
- (struct IPSelectable *)selectable;

@end

@interface SLHolder : NSObject
{
    struct IPSelectionList *mSelectionList;
}

+ (id)hold:(struct IPSelectionList *)fp8;
+ (id)holdNoCopy:(struct IPSelectionList *)fp8;
- (id)initWithSelectionList:(struct IPSelectionList *)fp8;
- (id)initWithSelectionListNoCopy:(struct IPSelectionList *)fp8;
- (void)dealloc;
- (struct IPSelectionList *)selectionList;

@end

@interface NSMutableDictionary (KeywordCategory)
- (id)categoryName;
- (void)setCategoryName:(id)fp8;
- (unsigned long)categoryKey;
- (void)setCategoryKey:(unsigned long)fp8;
- (BOOL)addToCategory:(unsigned long)fp8;
- (BOOL)removeFromCategory:(unsigned long)fp8;
- (BOOL)removeSubcategory:(id)fp8;
- (id)subcategories;
- (id)categoryKeywordsNonRecursive;
- (void)_recursiveKeywords:(id)fp8;
- (id)categoryKeywordsRecursive;
- (id)categoryKeywordsRecursiveSet;
- (BOOL)isCategoryExpanded;
- (void)setCategoryIsExpanded:(BOOL)fp8;
- (id)parentOfItem:(id)fp8;
- (int)depthOfSubcategory:(id)fp8;
- (id)subcategoryWithKey:(unsigned long)fp8;
- (void)addSubcategoriesToArray:(id)fp8;
@end

@interface NSBezierPath (iPhotoExtensions)
+ (id)bezierPathWithRect:(struct _NSRect)fp8 roundedCornerRadius:(float)fp24;
- (void)addCurvedCorner:(struct _NSPoint)fp8 starting:(BOOL)fp16 corner:(int)fp20 radius:(float)fp24 flipped:(BOOL)fp28;
- (void)addRoundedCornerRect:(struct _NSRect)fp8 radius:(float)fp24;
@end

@interface PhotoViewer (Layout)
- (BOOL)_rollsVisible:(BOOL)fp8;
- (void)resetAlbum;
- (void)setMetaForVisible;
- (float)calcMaxTextHeight;
- (float)calculateTrackingRectangles:(unsigned long)fp8 frame:(struct _NSRect)fp12 rowBreaksOnly:(BOOL)fp28;
- (struct _NSRect)rebuildViewWithGridAlignLowIdx:(unsigned long)fp8 highIdx:(unsigned long)fp12 changeFrameNow:(BOOL)fp16;
- (struct _NSRect)smartNarrowRebuildViewWithGridAlign:(BOOL)fp8;
- (struct _NSRect)rebuildViewWithoutGridAlign:(BOOL)fp8;
- (struct _NSRect)rebuildViewChangingFrameNow:(BOOL)fp8;
- (void)rebuildView;
@end

@interface IPAnimator : NSAnimation
{
}

- (void)setCurrentProgress:(float)fp8;

@end

@interface PhotoViewerIPAnimationPhase : IPAnimationPhase
{
}

- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface PhotoViewer (Drawing)
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)cacheFrameImages:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)freeFrameImages;
- (void)hitStackToggler;
- (void)clearStackFramingCache;
- (void)cacheStackFrame:(id)fp8 imageTopLeft:(struct _NSPoint)fp12 frameTopLeft:(struct _NSPoint)fp20 stackKey:(unsigned long)fp28;
- (BOOL)didPointHitStackFraming:(struct _NSPoint)fp8 stackKey:(unsigned int *)fp16;
- (void)frameStackForImageAtIndex:(unsigned long)fp8;
- (void)_drawSplitPointIndicator:(struct _NSRect)fp8;
- (struct CGImage *)createCGImageFromData:(const void *)fp8 dataSize:(int)fp12 pixels:(int)fp16;
- (void)drawFaceTileForIndex:(unsigned int)fp8 lowRes:(BOOL)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (void)grabRectsInVector:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 first:(long)fp12 last:(long)fp16;
- (void)storeRectsFromVector:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 first:(long)fp12 last:(long)fp16 indexMap:(struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)fp20;
- (void)syncAnimationVectorsByKey:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp8 with:(struct vector<AnimationRects, std::allocator<AnimationRects>> *)fp12 firstIdx:(long)fp16 lastIdx:(long)fp20 addedItems:(BOOL)fp24;
- (struct _NSRect)rect:(struct _NSRect)fp8 centeredOnRectCenter:(struct _NSRect)fp24;
- (struct _NSRect)fullRectFromDrawRect:(struct _NSRect)fp8 rowTop:(float)fp24 rowHeight:(float)fp28;
- (void)prepAnimateEventWithFadeOutKeys:(id)fp8 fadeInKeys:(id)fp12 preSlideKeys:(id)fp16 postSlideKeys:(id)fp20 changingEventKeys:(id)fp24;
- (void)startAnimateEvent;
- (void)stepEventAnimation:(float)fp8;
- (void)resumeInfo;
- (void)stopEventAnimation;
- (void)_eventAnimateAtCurrentValue:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (void)animationDidEnd:(id)fp8;
- (void)animateAtCurrentValue:(id)fp8;
@end

@interface InfoPanel : NSPanel
{
    BOOL mCanBecomeKeyWindow;
}

- (BOOL)canBecomeKeyWindow;
- (void)setCanBecomeKeyWindow:(BOOL)fp8;
- (BOOL)hasCloseButton;

@end

@interface ThumbScrollView : NSScrollView
{
    NSPopUpButton *_settingsPopUpButton;
    float mPopupWidth;
    ImageDB *_currentDB;
    id _currentAlbumMenuItem;
    id _currentLocationMenuItem;
    id _currentRowMenuItem;
    NSMenuItem *mRowsColumnsMenuItem;
}

- (void)dealloc;
- (id)makeAlbumMenu;
- (id)makeLocationMenu;
- (id)makeRowMenu;
- (void)makeSettingsPopUpButton;
- (void)setRowsColumnsMenuItemTitle:(id)fp8;
- (void)addSubview:(id)fp8;
- (void)settingsPopUpAction:(id)fp8;
- (void)albumPopUpAction:(id)fp8;
- (void)locationPopUpAction:(id)fp8;
- (void)rowsPopUpAction:(id)fp8;
- (id)settingsPopUpButton;
- (id)currentDB;
- (void)setCurrentDB:(id)fp8;

@end

@interface HUDPopUpButtonCell : NSPopUpButtonCell
{
    NSDictionary *_titleAttributes;
    NSColor *_frameColor;
}

- (void)dealloc;
- (void)drawBorderAndBackgroundWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)titleAttributes;
- (void)setTitleAttributes:(id)fp8;
- (id)frameColor;
- (void)setFrameColor:(id)fp8;

@end

@interface SetDateIncrementOptions : NSView
{
    NSPopUpButton *mAddSubtractSwitch;
    NSPopUpButton *mAddTimeQuanta;
    NSTextField *mAddTimeValue;
    NSButton *mEmbedSwitch;
}

- (void)loadFromPrefs;
- (void)saveToPrefs;
- (void)setDateIncrement:(double)fp8 embed:(BOOL)fp16;
- (double)incrementedDateForDate:(double)fp8;
- (BOOL)embed;

@end

@interface NSUserDefaults (iPhotoExtensions)
- (BOOL)hasObjectForKey:(id)fp8;
- (void)setDouble:(double)fp8 forKey:(id)fp16;
- (double)doubleForKey:(id)fp8;
@end

@interface PrintAlbum : BookAlbum
{
    struct SqPrintAlbum *mSqPrintAlbum;
    NSDictionary *mPrinterSettings;
    IPTemplate *mTheme;
}

+ (int)defaultNumberOfContactSheetColumns;
- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqBookAlbum *)sqBookAlbum;
- (id)init;
- (id)initWithAlbum:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (void)setPhotoList:(struct IPPhotoList *)fp8;
- (id)printer;
- (void)setPrinter:(id)fp8;
- (id)theme;
- (void)setTheme:(id)fp8;
- (struct _NSSize)paperSize;
- (void)setPaperSize:(struct _NSSize)fp8;
- (id)paperID;
- (void)setPaperID:(id)fp8;
- (id)presetID;
- (void)setPresetID:(id)fp8;
- (struct _NSRect)photoRect;
- (void)setPhotoRect:(struct _NSRect)fp8;
- (int)photoLayoutPreference;
- (void)setPhotoLayoutPreference:(int)fp8;
- (int)numberOfContactSheetColumns;
- (void)setNumberOfContactSheetColumns:(int)fp8;
- (void)_idleBookPurge:(id)fp8;
- (void)dealloc;

@end

@interface AVSections : NSObject
{
    NSMutableArray *_sections;
    NSMutableArray *_visibleSections;
    float _defaultRowHeight;
    AlbumMgr *_albumMgr;
    NSMutableArray *_docs;
    float _rowHeight;
    int _animateState;
}

- (id)init;
- (void)dealloc;
- (void)updateAutoHide:(BOOL)fp8;
- (int)childCount;
- (id)childAtIndex:(int)fp8;
- (id)sectionForGroup:(unsigned long long)fp8 andSubgroup:(id)fp16;
- (void)_addSectionWithName:(id)fp8 sectionNumber:(int)fp12 group:(unsigned long long)fp16 subgroup:(id)fp24 collapsible:(BOOL)fp28;
- (void)_addSectionWithLocalizableKey:(id)fp8 sectionNumber:(int)fp12 group:(unsigned long long)fp16 subgroup:(id)fp24 collapsible:(BOOL)fp28;
- (void)addDefaultSections;
- (void)updateSections;
- (void)addSection:(id)fp8;
- (void)addSection:(id)fp8 atIndex:(int)fp12;
- (void)removeSection:(id)fp8;
- (void)removeSectionAtIndex:(int)fp8;
- (float)defaultRowHeight;
- (void)setDefaultRowHeight:(float)fp8;
- (id)albumMgr;
- (void)setAlbumMgr:(id)fp8;
- (id)docs;
- (void)setDocs:(id)fp8;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;

@end

@interface AVSection : NSObject
{
    NSString *_name;
    unsigned long long _group;
    NSString *_subgroup;
    AlbumMgr *_albumMgr;
    NSMutableArray *_docs;
    float _rowHeight;
    int _animateState;
    int _lastChildCount;
    BOOL _needAutoExpand;
    BOOL _canCollapse;
    int _sectionNumber;
}

- (id)albumMgr;
- (void)setAlbumMgr:(id)fp8;
- (id)docs;
- (void)setDocs:(id)fp8;
- (void)_commonInit;
- (id)init;
- (id)initWithName:(id)fp8 group:(unsigned long long)fp12 subgroup:(id)fp20;
- (void)dealloc;
- (void)updateMembers:(id)fp8 docs:(id)fp12 baseHeight:(float)fp16 extraSectionGap:(BOOL)fp20;
- (BOOL)needAutoExpand;
- (void)setNeedAutoExpand:(BOOL)fp8;
- (int)childCount;
- (id)childAtIndex:(int)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (unsigned long long)group;
- (void)setGroup:(unsigned long long)fp8;
- (id)subgroup;
- (void)setSubgroup:(id)fp8;
- (float)rowHeight;
- (void)setRowHeight:(float)fp8;
- (int)animateState;
- (void)setAnimateState:(int)fp8;
- (unsigned int)acceptsExternalDrop;
- (BOOL)allowsModification;
- (BOOL)canCollapse;
- (void)setCanCollapse:(BOOL)fp8;
- (int)sectionNumber;
- (void)setSectionNumber:(int)fp8;
- (id)preferenceKey;

@end

@interface LoopController : NSObject
{
    HUDView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    LoopView *mLoopView;
    Edit *mEdit;
    struct _NSPoint mLoupePosition;
}

- (id)init;
- (void)dealloc;
- (void)initialize;
- (void)closePanel;
- (void)mouseExited:(id)fp8;
- (BOOL)panelIsVisible;
- (void)setFullScreenMode;
- (void)setNormalMode;
- (void)showPanel;
- (void)closeHUD:(id)fp8;
- (void)close:(id)fp8;
- (void)layoutMainView;
- (id)mainView;
- (void)setEdit:(id)fp8;
- (id)edit;
- (void)refresh;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updatePosition:(struct _NSPoint)fp8;
- (struct _NSPoint)position;

@end

@interface LoopView : NSView
{
    LoopController *mController;
    CIContext *mCoreContext;
    struct _NSRect mCurrentRect;
    struct _NSPoint mOffset;
    struct _NSPoint mFractionalLoc;
    float mSrcRectDimension;
    float mDestRectDimension;
    float mViewRectDimension;
    BOOL mMustClear;
}

- (void)updateFrame;
- (void)initialize;
- (float)srcRectDimension;
- (id)transformForImageRotation:(float)fp8 width:(float *)fp12 height:(float *)fp16;
- (id)filteredImage;
- (void)drawRect:(struct _NSRect)fp8;
- (void)updatePosition:(struct _NSPoint)fp8;
- (void)setController:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drag:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)backgroundColor;

@end

@interface PhotoViewer (PhotoViewerAccessibility)
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8 forParameter:(id)fp12;
- (BOOL)accessibilityIsAttributeSettable:(id)fp8;
- (void)accessibilitySetValue:(id)fp8 forAttribute:(id)fp12;
@end

@interface InfoTokenField : NSTokenField
{
    NSString *mSavedString;
    BOOL mMultiline;
    BOOL mAttributed;
    BOOL mEllipsisState;
    NSArray *mAllTokens;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setAllTokens:(id)fp8;
- (void)setTokens:(id)fp8;
- (void)setAttributedStringValue:(id)fp8;
- (void)setSavedString:(id)fp8;
- (id)savedString;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setEllipsisState:(BOOL)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (BOOL)becomeFirstResponder;
- (void)mouseDown:(id)fp8;
- (BOOL)isMultiline;
- (void)setMultiline:(BOOL)fp8;
- (id)tokenField:(id)fp8 completionsForSubstring:(id)fp12 indexOfToken:(int)fp16 indexOfSelectedItem:(int *)fp20;
- (id)tokenField:(id)fp8 shouldAddObjects:(id)fp12 atIndex:(unsigned int)fp16;
- (id)tokenField:(id)fp8 representedObjectForEditingString:(id)fp12;
- (id)tokenField:(id)fp8 readFromPasteboard:(id)fp12;
- (void)textDidEndEditing:(id)fp8;

@end

@interface IPGrowBar : NSView
{
    float _min;
    float _max;
    NSColor *_fillColor;
    id _delegate;
    int _edge;
    BOOL _delegateHasWillResize;
    BOOL _delegateHasDidResize;
    BOOL _delegateHasBeginResize;
    BOOL _delegateHasEndResize;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)resetCursorRects;
- (void)setFrame:(struct _NSRect)fp8;
- (BOOL)acceptsFirstMouse;
- (void)mouseDown:(id)fp8;
- (float)min;
- (void)setMin:(float)fp8;
- (float)max;
- (void)setMax:(float)fp8;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (int)edge;
- (void)setEdge:(int)fp8;
- (void)dealloc;

@end

@interface KeywordInspector : NSObject <DragDelegateProtocol>
{
    InfoPanel *mWindow;
    NSView *mKeywordEditingView;
    NSView *mKeywordUsingView;
    NSTextField *mKeywordShortcutHint;
    NSScrollView *mScrollView;
    NSButton *mEditKeywordsButton;
    NSView *mKeywordsView;
    KeywordInspectorGroupView *mKeywordsWithShortcuts;
    KeywordInspectorGroupView *mKeywordsWithoutShortcuts;
    NonAutoSelectingTableView *mKeywordTable;
    NSButton *mAddButton;
    NSButton *mDeleteButton;
    NSButton *mRenameButton;
    NSButton *mShortcutButton;
    NSString *mOriginalWindowTitle;
    ArchiveController *mArchiveController;
    struct IPSelectionList *mPhotos;
    ImageDB *mCurrentDB;
    NSMutableArray *mNibObjects;
    struct MessageReceiver mMessageReceiver;
    BOOL mUserIntendsToDelete;
    BOOL mKeywordJustCreated;
    struct _NSSize mOriginalWindowSize;
    BOOL mIgnoreWindowResize;
    BOOL mIgnoreSelectionChanged;
    BOOL mAbortDoneWithEditing;
    NSString *mAutosaveFrameHack;
}

+ (id)globalInspector;
+ (id)handleKeystroke:(id)fp8;
+ (BOOL)isGlobalInspectorVisible;
- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)show;
- (void)hide;
- (BOOL)visible;
- (BOOL)editingKeywords;
- (void)windowWillClose:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (struct _NSRect)windowWillUseStandardFrame:(id)fp8 defaultFrame:(struct _NSRect)fp12;
- (void)_listenForNotifications:(BOOL)fp8;
- (void)_setCountValues;
- (void)editKeywords:(id)fp8;
- (void)selectionChanged:(id)fp8;
- (void)_keywordChanged:(id)fp8;
- (void)groupDisclosurePressed:(id)fp8;
- (void)groupPressed:(id)fp8;
- (void)_undoRedoChangeKeyword:(id)fp8;
- (void)_add:(BOOL)fp8 keyword:(id)fp12;
- (void)keywordPressed:(id)fp8;
- (void)syncKeywordsFromInlineEditing:(id)fp8;
- (void)setKeywords:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (id)keystroke:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8 view:(id)fp12;
- (BOOL)performDragOperation:(id)fp8 view:(id)fp12;
- (void)_setWindowSizeToOriginal:(BOOL)fp8;
- (id)_keywordsWithShortcuts:(BOOL)fp8;
- (void)_categoriesChangedWithAutosize:(BOOL)fp8;
- (void)_layOutCategoriesWithAutosize:(BOOL)fp8;
- (id)_keywordButtonsWithCategoryButtons:(BOOL)fp8;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_setupKeywordEditor;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)doneEditKeywords:(id)fp8;
- (void)_syncKeywordButtonStates;
- (void)_undoRedoCreateKeyword:(id)fp8;
- (void)_undoRedoRenameKeyword:(id)fp8;
- (void)addKeyword:(id)fp8;
- (void)deleteKeyword:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)renameKeyword:(id)fp8;
- (void)changeShortcut:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface RecentAlbum : FilterAlbum
{
    unsigned int _rollID;
}

- (unsigned long)rollID;
- (void)setRollID:(unsigned long)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)comments;
- (void)setComments:(id)fp8;
- (BOOL)photosAreComputed;

@end

@interface KeywordInspectorButton : NSButton
{
    int mCount;
    BOOL mHighlight;
}

- (BOOL)isFlipped;
- (id)font;
- (id)titleAttrs;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setCount:(int)fp8;
- (int)count;
- (void)highlight:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;

@end

@interface IPEdgeBox : NSView
{
    int _edges;
    NSColor *_color;
    NSColor *_backgroundColor;
    BOOL _useArt;
    NSImage *_leftImage;
    NSImage *_rightImage;
    NSImage *_centerImage;
    BOOL _useArt2;
    NSImage *_topLeftImage;
    NSImage *_topRightImage;
    NSImage *_bottomLeftImage;
    NSImage *_bottomRightImage;
    NSImage *_topImage;
    NSImage *_bottomImage;
    BOOL _useEdges;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(unsigned int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setActuallyUseEdges:(BOOL)fp8;
- (int)edges;
- (void)setEdges:(int)fp8;
- (id)color;
- (void)setColor:(id)fp8;
- (void)setUseArt:(BOOL)fp8;
- (void)setUseArt2:(BOOL)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;

@end

@interface IPPageGuideElement : IPPageElement
{
    BOOL mIsVertical;
    float mGuideLocation;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (struct _NSRect)drawingRect:(float)fp8;
- (BOOL)isVertical;
- (void)setIsVertical:(BOOL)fp8;
- (float)guideLocation;
- (BOOL)isWithinSnapRangeOfElement:(id)fp8;
- (BOOL)isGuideElement;
- (id)description;

@end

@interface IPBookOverlayView : NSView
{
    struct IPPageElementEdges mCurrentAlignmentHints;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSRect)_leftAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_rightAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_topAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (struct _NSRect)_bottomAlignmentGuideRectForPageView:(id)fp8 scale:(float)fp12;
- (id)hitTest:(struct _NSPoint)fp8;
- (BOOL)isOpaque;
- (void)drawAlignmentHints:(struct IPPageElementEdges)fp8;
- (void)clearAlignmentHints;
- (void)parentViewWillResize;
- (void)parentViewDidResize;

@end

@interface IPEventView : NSView
{
    NSMenu *eventContextualMenu;
    float TEXT_PADDING;
    Album *_album;
    ImageDB *_db;
    KeyMgr *_eventCollection;
    CIContext *_coreContext;
    BOOL _inDragSelect;
    BOOL _active;
    NSImage *_movieBadge;
    int _hoverMode;
    BOOL _clicklessMode;
    BOOL _aspectedScrubMode;
    float _photoDimension;
    struct _NSSize _photoSize;
    struct _NSSize _cellSize;
    int _columns;
    float _horizontalOutset;
    float _leftGutter;
    int _rows;
    int _dragTargetIndex;
    int _dragMoveTargetIndex;
    int _dragMergeTargetIndex;
    struct _NSPoint _dragMergeTargetPoint;
    struct _NSRect _dragMoveTargetRect;
    struct _NSPoint _lastMovedPoint;
    int _lastHoverIndex;
    int _lastHoverMetaIndex;
    BOOL _lastHoverOverCountBar;
    struct RenderCache *_renderCache;
    BOOL _needsRepaint;
    BOOL _needsRelayout;
    struct vector<DayRange, std::allocator<DayRange>> *_dayRanges;
    struct vector<Key, std::allocator<Key>> *_selection;
    struct vector<Key, std::allocator<Key>> *_dragSelection;
    int _dragHoleExcludeBegin;
    int _dragHoleExcludeEnd;
    struct map<Key, int, std::less<Key>, std::allocator<std::pair<const Key, int>>> *_rollKeyIndexMap;
    struct IPPhotoList *_markerPhotos;
    int _ignoreRollChangeMessages;
    struct MessageReceiver _DBMessageReceiver;
    struct MessageReceiver _AlbumMessageReceiver;
    double _lastHoverSwitchTime;
    NSTextField *_inlineEditor;
    int _inlineDayIndex;
    unsigned int _inlineEventKey;
    NSLock *_inlineEditUpdateLock;
    Ellipsizer *_ellipsizer;
    IPMagnifierController *_ctrl;
    NSDictionary *_leftTextAttributes;
    NSDictionary *_rightTextAttributes;
    NSDictionary *_centerTextAttributes;
    NSDictionary *_untitledCenterTextAttributes;
    NSDictionary *_overCountTextAttributes;
    NSDictionary *_countTextAttributes;
    NSDictionary *_locationTextAttributes;
    NSDictionary *_dateTextAttributes;
    float _centerTextAttributesHeight;
    float _untitledCenterTextAttributesHeight;
    float _locationTextAttributesHeight;
    float _dateTextAttributesHeight;
    struct CGImage *_unselectedEmptyFrameImage;
    struct CGImage *_unselectedFrameImage;
    struct CGImage *_unselectedHoverFrameImage;
    struct CGImage *_selectedFrameImage;
    struct _NSRect _lastToolTipConfigureRect;
    struct _NSRect _dragSelectionRect;
    BOOL _activeScrolling;
    BOOL _hiresOverride;
    NSTimer *_defaultBackfillTimer;
    NSTimer *_eventBackfillTimer;
    struct _NSRect _cellModeSlopRect;
    struct __CFDateFormatter *_dateFormatter;
    BOOL _returnEmptySelection;
    float _initialScroll;
    int _centerIndex;
    int _selectionAnchor;
    double _lastSingleClickTime;
    id _originalScrollerTarget;
    SEL _originalScrollerSelector;
    BOOL _inThumbScroll;
    BOOL _useScrollOverlay;
    OverlayWindow *_overlay;
    NSTimer *_overlayCloseTimer;
    struct __CFDateFormatter *_mediumDateFormatter;
    IPAnimator *_animator;
    IPAnimation *_animation;
    int _lastAnimatedDropHoldIndex;
    NSInvocation *_invokeAfterAnimation;
    NSTimer *_springTimer;
    struct _NSPoint _springLocation;
    struct _NSSize _detailStringSize;
    float _extraViewArea;
    IPEventInfo *_eventInfo;
    BOOL mDrawHighlightedBadge;
    NSImage *_infoBadge;
    NSImage *_infoBadgeHighlighted;
    BOOL _eventInfoActive;
    struct map<int, AnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, AnimationAdjustments>>> *_animationDisplacement;
    int _currentInlineField;
}

+ (BOOL)smartNameAlbum:(id)fp8 forRollKeys:(id)fp12;
- (int)ignoreRollChangeMessages;
- (void)relayout:(BOOL)fp8;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)sheetStarting:(id)fp8;
- (void)_userHiddenStateChanged:(id)fp8;
- (void)userHiddenStateChanged:(id)fp8;
- (void)_cellIndex:(int)fp8 toRow:(int *)fp12 column:(int *)fp16;
- (void)_point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexOfRollWithKey:(unsigned long)fp8;
- (struct DayRange *)_dayForRollWithKey:(unsigned long)fp8;
- (struct DayRange *)_dayForSelectionAtIndex:(int)fp8;
- (int)_indexForPoint:(struct _NSPoint)fp8;
- (int)_cellIndexForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)_cellRectForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)_photoRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)_metaRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)sliderHitRectForRect:(struct _NSRect)fp8 slider:(float)fp24;
- (struct _NSRect)sliderTrackRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)placardRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)dateRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)detailRectForPhotoRect:(struct _NSRect)fp8;
- (struct _NSRect)infoRectForPhotoRect:(struct _NSRect)fp8;
- (id)bezierPathForPhotoRect:(struct _NSRect)fp8 forString:(id)fp24;
- (void)_tellArchiveControllerSelectionChanged;
- (BOOL)acceptsFirstResponder;
- (float)minCellHeight;
- (float)maxCellHeight;
- (struct _NSRect)_calculateLayout:(struct _NSRect)fp8;
- (void)_purgeMarkerPhotos;
- (void)_emptyDayRanges;
- (id)_getNewSourceAlbum;
- (BOOL)_showsEmptyEvents;
- (void)_getCurrentPhotos;
- (void)copyEventOrderToManual;
- (id)_dateStringForDrawPhotoOfDay:(struct DayRange *)fp8;
- (id)dateRangeStringForDay:(struct DayRange *)fp8 shortFormat:(BOOL)fp12;
- (id)labelForDay:(struct DayRange *)fp8 isHover:(BOOL)fp12 selected:(BOOL)fp16 untitled:(char *)fp20;
- (id)locationForDay:(struct DayRange *)fp8 isHover:(BOOL)fp12 unnamed:(char *)fp16;
- (void)_setCurrentPhoto:(struct IPPhotoInfo *)fp8 forRoll:(struct IPRoll *)fp12;
- (void)_persistCurrentPhoto:(struct DayRange *)fp8;
- (void)_persistKeyPhoto:(struct DayRange *)fp8;
- (void)_copyKeyToCurrent:(struct DayRange *)fp8;
- (void)_deltaHoverPhoto:(int)fp8;
- (long)bestVisiblePhotoForDay:(struct DayRange *)fp8;
- (struct IPPhotoList *)eventKeyPhotoList;
- (void)_setCurrentFromRoll:(struct DayRange *)fp8;
- (void)_purgeDeadSelections;
- (id)album;
- (void)_scrollSelectionIntoView;
- (void)selectPreviousEvent;
- (void)selectNextEvent;
- (void)_updateEventInfo;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (void)_moveSelection:(int)fp8 shiftDown:(BOOL)fp12;
- (void)_refreshCellAtIndex:(int)fp8;
- (id)makeFilterAlbumForSelectedRolls;
- (id)albumForSelection;
- (void)hoverEventToDetail;
- (void)updateDetailViewWithEvents:(id)fp8;
- (unsigned long)firstEventKey;
- (unsigned long)lastEventKey;
- (void)showDetailForNeighbor:(int)fp8 ofEventWithKey:(unsigned long)fp12;
- (void)hoverEventToDetail:(id)fp8;
- (void)cacheFrameImages:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)freeFrameImages;
- (void)killBackfillTimers;
- (void)setBackfillTimers;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)keyUp:(id)fp8;
- (void)scrollAnnounce:(id)fp8;
- (void)scrollAction:(id)fp8;
- (void)hijackVerticalScroller;
- (void)saveScrollPosition;
- (void)awakeFromNib;
- (void)defaultsChanged:(id)fp8;
- (BOOL)isFlipped;
- (int)nextPrevInlineTarget:(BOOL)fp8;
- (void)undoRedoInlineCaptionEdit:(id)fp8;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(int)fp8 forField:(int)fp12;
- (id)inlineEditor;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)_rebuildToolTips;
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 selected:(BOOL)fp24 hover:(BOOL)fp28 empty:(BOOL)fp32 backgroundColor:(id)fp36;
- (struct CGImage *)_drawThumbnail:(struct IPPhotoInfo *)fp8 thumbFrame:(struct _NSRect)fp12 rotation:(float)fp28 tnManager:(id)fp32 context:(struct CGContext *)fp36 fillSquareThumb:(BOOL)fp40 clipRect:(struct _NSRect)fp44 lowres:(BOOL)fp60 selected:(BOOL)fp64 hover:(BOOL)fp68 forOverview:(BOOL)fp72 forDrag:(BOOL)fp76;
- (void)_drawOverviewCell:(struct DayRange *)fp8 rect:(struct _NSRect)fp12 tnManager:(id)fp28 context:(struct CGContext *)fp32 lowres:(BOOL)fp36 selected:(BOOL)fp40 drawImage:(struct CGImage **)fp44;
- (void)_reflectCGImage:(struct CGImage *)fp8 fromRect:(struct _NSRect)fp12 toRect:(struct _NSRect)fp28;
- (void)_drawCountBubbleForDay:(struct DayRange *)fp8 rect:(struct _NSRect)fp12;
- (void)backfill:(id)fp8;
- (float)maxOverlayRollNamedWidth;
- (void)updateOverlay:(BOOL)fp8 visible:(struct _NSRect)fp12;
- (void)overlayCloser:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)animateDropHoleAtIndex:(int)fp8 finalForDrop:(BOOL)fp12;
- (void)stopDropHoleAnimation;
- (void)_eventAnimateAtCurrentValue:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (void)animationDidEnd:(id)fp8;
- (void)animateAtCurrentValue:(id)fp8;
- (void)toggleFlaggedForPhoto:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)_drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)_fillPasteboardWithSelection:(id)fp8;
- (void)_invalidateDragSelectionCells;
- (void)animateWindowForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setEventInfoActive:(BOOL)fp8;
- (void)dragSelection:(id)fp8 imagePhoto:(struct IPPhotoInfo *)fp12 slideBack:(BOOL)fp16;
- (void)trackDragSelectForEvent:(id)fp8;
- (BOOL)trackRect:(struct _NSRect)fp8 event:(id)fp24 didTrack:(char *)fp28;
- (void)updateUIToInfo:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)_showMagnifierForPhotoAtIndex:(int)fp8 inDayAtIndex:(int)fp12;
- (void)_showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)makeEmptyBeSelection;
- (void)updateLatestEvent:(unsigned long)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)isCellSelected:(struct DayRange *)fp8;
- (void)selectCell:(struct DayRange *)fp8 replaceExistingSelection:(BOOL)fp12 extend:(BOOL)fp16;
- (void)unselectCell:(struct DayRange *)fp8;
- (void)selectEvents:(struct vector<Key, std::allocator<Key>> *)fp8 selected:(BOOL)fp12;
- (void)selectEventsInRect:(struct _NSRect)fp8 selected:(BOOL)fp24;
- (void)setFrame:(struct _NSRect)fp8;
- (id)leftTextAttributes;
- (void)setLeftTextAttributes:(id)fp8;
- (id)rightTextAttributes;
- (void)setRightTextAttributes:(id)fp8;
- (id)centerTextAttributes;
- (void)setCenterTextAttributes:(id)fp8;
- (id)untitledCenterTextAttributes;
- (void)setUntitledCenterTextAttributes:(id)fp8;
- (BOOL)needsRepaint;
- (void)setNeedsRepaint:(BOOL)fp8;
- (BOOL)needsRelayout;
- (void)setNeedsRelayout:(BOOL)fp8;
- (struct RenderCache *)renderCache;
- (void)_undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)undoRedoScrubSplit:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)splitEventAction:(id)fp8;
- (void)_redoAutoSplitEventsForPhotos:(id)fp8 originalRolls:(id)fp12 newRolls:(id)fp16 firstRollKey:(unsigned long)fp20 firstKeyPhotoKey:(unsigned long)fp24 undoManager:(id)fp28 selection:(id)fp32;
- (void)_undoAutoSplitEventsForPhotos:(id)fp8 originalRolls:(id)fp12 newRolls:(id)fp16 firstRollKey:(unsigned long)fp20 firstKeyPhotoKey:(unsigned long)fp24 undoManager:(id)fp28 selection:(id)fp32;
- (int)upgradeSplitModePicker:(struct IPPhotoList *)fp8;
- (void)coalescePhotos:(struct IPPhotoList *)fp8;
- (void)autoSplitPhotos:(struct IPPhotoList *)fp8 selectResult:(BOOL)fp12 showResultInDetail:(BOOL)fp16 allowAutoNaming:(BOOL)fp20 preflightOnly:(BOOL)fp24 moveAfterEvent:(int)fp28;
- (void)undoRedoAddFlaggedPhotosToSelectedEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)addFlaggedPhotosToSelectedEvent:(id)fp8;
- (void)autoSplitSelectedEvents:(id)fp8;
- (void)undoRedoSplitMergePhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 beginSelection:(id)fp20 endSelection:(id)fp24 baseFilterKeys:(id)fp28 addedFilterKeys:(id)fp32 removedFilterKeys:(id)fp36 undoManager:(id)fp40;
- (void)mergeEvents:(id)fp8 intoEvent:(unsigned long)fp12;
- (void)_doMergeEventsAction:(id)fp8;
- (void)_mergeSelectedConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)mergeEventsAction:(id)fp8;
- (void)splitBasedOnSelectionAction:(id)fp8;
- (void)mergeBasedOnSelectionAction:(id)fp8;
- (void)_dragMergeWithContext:(id)fp8;
- (void)_dragMergeConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_undoRedoMakeKeyPhotoDb:(id)fp8 rollKey:(unsigned long)fp12 oldPhotoKey:(unsigned long)fp16 newPhotoKey:(unsigned long)fp20 undoManager:(id)fp24;
- (void)makePhotoEventKey:(id)fp8;
- (void)_redoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_undoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_redoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)_undoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)hideUserHiddenPhoto:(id)fp8;
- (void)showUserHiddenPhoto:(id)fp8;
- (BOOL)_canShowUserHiddenPhoto;
- (BOOL)_canHideUserHiddenPhoto;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (BOOL)_canShowUserHiddenPhotos;
- (BOOL)_canHideUserHiddenPhotos;
- (BOOL)_canPaste;
- (void)openEventInSeparateWindow:(id)fp8;
- (void)addGPSTrackingData:(id)fp8;
- (void)addGPSTrackingDataFromPhone:(id)fp8;
- (void)showGPSTrackingData:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)moveEventsWithKeys:(id)fp8 toIndex:(int)fp12;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)_dragOperationForWindowLocation:(id)fp8;
- (void)bumpSpringTimer:(struct _NSPoint)fp8;
- (void)clearSpringTimer;
- (void)doSpringTimer:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)undoRedoDetailWindowDrop:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)windowForSelectedEvent;
- (void)animateSetEvent;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)undoRedoPasteCutPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)paste:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)hasSelection;
- (id)selectedIndices;
- (id)selectedEmptyEventKeys;
- (int)selectedEmptyEventKeyCount;
- (id)selectedEventKeys:(int *)fp8;
- (struct IPPhotoList *)selectedPhotos;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (float)thumbSize;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)returnEmptySelection;
- (void)setReturnEmptySelection:(BOOL)fp8;
- (void)complete:(id)fp8;
- (struct _NSRange)rangeForUserCompletion;
- (id)completionsForPartialWordRange:(struct _NSRange)fp8 indexOfSelectedItem:(int *)fp16;
- (void)insertCompletion:(id)fp8 forPartialWordRange:(struct _NSRange)fp12 movement:(int)fp20 isFinal:(BOOL)fp24;
- (void)viewWasInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasRemoved;

@end

@interface EventViewAnimationPhase : IPAnimationPhase
{
    struct vector<EventViewAnimationObject, std::allocator<EventViewAnimationObject>> *_evaoObjects;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)copyEndsToBegins;
- (void)addObject:(void *)fp8;
- (int)objectCount;
- (void *)objects;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface IPEventViewController : IPViewController
{
    IPToolbarItem *mSplitItem;
    IPToolbarItem *mMergeItem;
    IPToolbarItem *mNewEventItem;
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mWebItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mNetAlbumsItem;
    IPToolbarItem *mFBAlbumsItem;
    IPToolbarItem *mFlickrAlbumsItem;
    IPToolbarItem *mSmugMugAlbumsItem;
    NSMenu *mKeepsakeMenu;
    NSMenuItem *mOrderPrintsMenuItem;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    IPToolbarItem *mPrintsItem;
    NSMenu *mPrintsMenu;
    IPToolbarItem *mLocationItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    struct MessageReceiver mAlbumMessageReceiver;
}

- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (id)burnInfo;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)dealloc;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)addMagnifyTools;
- (void)removeMagnifyTools;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (void)initToolbar;
- (void)freeToolbar;
- (id)albumForSelection;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)createOrSelectRoll;
- (id)updateStatus;
- (id)searchItem;
- (void)selectAll;
- (void)selectNone;
- (BOOL)supportsFindCommand;
- (void)personAddAction:(id)fp8;
- (void)_loadNib;
- (void)viewWasInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)validateMenuItem:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;

@end

@interface NSMutableAttributedString (iPhotoExtensions)
- (void)replaceString:(id)fp8 withAttributedString:(id)fp12;
@end

@interface IPInlineEditorTokenField : NSTokenField
{
}

- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface IPInlineEditorTextField : NSTextField
{
}

- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface PhotoViewer (Events)
- (void)setOverrideHeader:(BOOL)fp8 quiet:(BOOL)fp12;
- (BOOL)overridePlacesBrowser;
- (void)updateFixedHeaderView;
- (unsigned long)keyOfAdjacentRoll:(long)fp8 below:(BOOL)fp12;
- (void)setSplitDifferenceRollDateForRoll:(unsigned long)fp8 startDate:(double)fp12 endDate:(double)fp20;
- (void)undoRedoSplitMergePhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 baseFilterKeys:(id)fp20 addedFilterKeys:(id)fp24 removedFilterKeys:(id)fp28 undoManager:(id)fp32;
- (void)splitBasedOnSelectionAction:(id)fp8;
- (void)mergeBasedOnSelectionAction:(id)fp8;
- (BOOL)canSplitBasedOnSelection:(int *)fp8;
- (BOOL)canMergeBasedOnSelection:(int *)fp8;
- (void)autoSplitSelectedEvents:(id)fp8;
- (BOOL)canAutoSplitSelectedEvents;
- (void)undoRedoAddFlaggedPhotosToSelectedEvent:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)addFlaggedPhotosToSelectedEvent:(id)fp8;
- (void)undoRedoPasteCutPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)_moveCutPhotosToCurrentDetailEvent;
- (void)extractFaceKeysFromAlbum;
- (void)clearPeopleReviewMode;
- (void)togglePeopleReviewMode;
- (void)finalizePeopleReviewMode;
- (BOOL)isPersonConfirmedForPhotoKey:(unsigned long)fp8;
- (void)setPersonConfirmed:(BOOL)fp8 forPhotoKey:(unsigned long)fp12;
- (BOOL)isPersonRejectedForPhotoKey:(unsigned long)fp8;
- (void)setPersonRejected:(BOOL)fp8 forPhotoKey:(unsigned long)fp12;
- (struct _NSRect)personSquareRectForImageAtIndex:(int)fp8;
- (struct _NSRect)personSquareRectForFullRect:(struct _NSRect)fp8 drawRect:(struct _NSRect)fp24;
@end

@interface IPMagnifierPhotoView : IPOpenGLView <IPImageMgrDelegate>
{
    struct IPPhotoInfo *_photo;
    struct IPPhotoInfo *_nextPhoto;
    IPOnscreenImageMgr *_imageMgr;
    IPMagnifierController *_controller;
    float _alpha;
    struct _NSRect _targetFrame;
    struct _NSRect _startFrame;
    NSView *_toolbarView;
    NSView *_sourceView;
    BOOL _isAnimatingZoom;
    BOOL _isAnimatingScroll;
    BOOL _isAnimatingToEdit;
    BOOL _waitingForEdit;
    BOOL _isAnimatingOff;
    float _percentage;
    float mAccumRotate;
    int mRotateInterlock;
    BOOL _drawMenu;
    BOOL _inDragMode;
    BOOL _isMissing;
    CIImage *_hudBackground;
    struct _NSRect _bgRect;
    CIImage *_hudDetails;
    struct _NSRect _detailRect;
    CIImage *_hudEdit;
    struct _NSRect _editRect;
    CIImage *_hudNext;
    struct _NSRect _nextRect;
    CIImage *_hudPrev;
    struct _NSRect _prevRect;
    CIImage *_hudReview;
    struct _NSRect _reviewRect;
    CIImage *_hudScrubber;
    struct _NSRect _scrubberRect;
    struct _NSRect _trackRect;
    float _knobPercentage;
    float _startPercentage;
    float _targetPercentage;
    CIImage *_blankImage;
    float _fadeInPercentage;
    struct _NSPoint _mouseLoc;
    NSTimer *_mouseTimer;
    CIImage *_currentThumb;
    BOOL _showDetails;
    CIImage *_missingImage;
    CIImage *_flagImage;
    CIImage *_hiddenImage;
    CIImage *_faceImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isImageMissing;
- (id)onscreenImageMgr;
- (void)setController:(id)fp8;
- (void)setShowsDetails:(BOOL)fp8;
- (void)createBlank;
- (void)layoutButtons;
- (id)transitionFromImage:(id)fp8 toImage:(id)fp12 usingTransition:(id)fp16 atTime:(float)fp20;
- (void)setStartFrame:(struct _NSRect)fp8;
- (void)setAnimatingZoom:(BOOL)fp8;
- (void)setAnimatingToEdit:(BOOL)fp8;
- (void)setAnimatingScroll:(BOOL)fp8;
- (void)setAnimatingOff:(BOOL)fp8;
- (float)currentPercentage;
- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)moveKnobToPoint:(struct _NSPoint)fp8;
- (void)mouseDragged:(id)fp8;
- (void)resetMouseTimer;
- (void)mouseMoved:(id)fp8;
- (void)fadeHUDOut;
- (struct _NSRect)targetRect;
- (id)transformForImageRotation:(float)fp8 withRect:(struct CGRect *)fp12;
- (id)ciImageForImageNamed:(id)fp8;
- (void)drawCurrentFrame;
- (struct IPPhotoInfo *)photo;
- (void)setPhoto:(struct IPPhotoInfo *)fp8 scrolling:(BOOL)fp12 newPercentage:(float)fp16;
- (void)reset;
- (void)keyDown:(id)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)addSelectedPhotoToShelf:(id)fp8;
- (void)removeSelectedPhotoFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)viewDidEndLiveResize;
- (void)preloadNextAndPrevious;
- (void)loadedImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (void)loadedFullResImage:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (BOOL)stillNeed:(struct IPPhotoInfo *)fp8 atSize:(struct _NSSize)fp12;
- (void)infoReverted:(struct IPPhotoInfo *)fp8;
- (void)infoDeleted:(struct IPPhotoInfo *)fp8;
- (void)imageRotated:(struct IPFileImage *)fp8 forInfo:(struct IPPhotoInfo *)fp12;
- (id)currentAlbum;
- (void)setPercentage:(float)fp8;
- (id)sourceView;
- (void)setSourceView:(id)fp8;
- (id)toolbarView;
- (void)setToolbarView:(id)fp8;

@end

@interface IPMagnifierGuardView : IPGLGuardView
{
    NSView *_photoView;
}

- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)photoView;
- (void)setPhotoView:(id)fp8;

@end

@interface IPMagnifierController : NSObject
{
    IPMagnifierPhotoView *_photoView;
    IPMagnifierGuardView *_guardView;
    IPDefinePeopleView *_peopleView;
    struct IPPhotoList *_list;
    struct IPPhotoList *_exceptions;
    int _index;
    id <IPMagnifierControllerDelegate> _delegate;
    struct _NSRect _startFrame;
    NSAnimation *_animation;
    float _percentage;
    BOOL _animatingOn;
    BOOL _animatinToEdit;
    HUDWindow *_window;
    NSView *_toolbarView;
}

+ (id)magnifier;
- (id)init;
- (void)dealloc;
- (id)onscreenImageMgr;
- (void)addToolbarView:(id)fp8;
- (void)updatePeopleViewPhotoFrame;
- (BOOL)isImageMissing;
- (BOOL)inPeopleMode;
- (void)setPeopleDoneLeavesMagnify;
- (void)startPeopleMode:(id)fp8;
- (void)endPeopleMode:(id)fp8;
- (void)showForPhoto:(struct IPPhotoInfo *)fp8 withFrame:(struct _NSRect)fp12 parentWindow:(id)fp28 startFrame:(struct _NSRect)fp32 toolbarView:(id)fp48 sourceView:(id)fp52 animate:(BOOL)fp56 percentage:(float)fp60;
- (void)showPhotoAtIndex:(int)fp8 inList:(struct IPPhotoList *)fp12 withFrame:(struct _NSRect)fp16 parentWindow:(id)fp32 startFrame:(struct _NSRect)fp36 toolbarView:(id)fp52 sourceView:(id)fp56;
- (void)redraw;
- (void)animateOn;
- (void)animateToEdit;
- (void)setShowsDetails:(BOOL)fp8;
- (void)setExceptionList:(struct IPPhotoList *)fp8;
- (void)animateImageWithDuration:(float)fp8;
- (void)animateImageOff;
- (void)animation:(id)fp8 didReachProgressMark:(float)fp12;
- (void)animationDidEnd:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)dismiss;
- (void)cleanDismiss;
- (BOOL)isActive;
- (int)visibleCount;
- (struct IPPhotoList *)list;
- (struct IPPhotoInfo *)currentPhoto;
- (struct IPPhotoInfo *)nextPhotoAndIncrement:(BOOL)fp8;
- (struct IPPhotoInfo *)nextPhotoAndIncrement:(BOOL)fp8 steps:(int)fp12;
- (void)showPhoto:(struct IPPhotoInfo *)fp8;
- (void)showNextPhoto;
- (struct IPPhotoInfo *)previousPhotoAndIncrement:(BOOL)fp8;
- (struct IPPhotoInfo *)previousPhotoAndIncrement:(BOOL)fp8 steps:(int)fp12;
- (void)showPreviousPhoto;
- (void)showPhotoAtPercentage:(float)fp8;
- (BOOL)currentPhotoIsOnShelf;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)clearShelf:(id)fp8;
- (BOOL)currentPhotoIsHidden;
- (void)makePhotoEventKey:(id)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8;
- (void)passEventToSourceList:(id)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)deleteCurrentPhoto;

@end

@interface IPMatteElement : IPPageElement
{
    NSMutableArray *mWindowElements;
    BOOL mOvalWindow;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (id)windowElements;
- (BOOL)useOvalWindows;
- (float)bevelThickness;
- (id)leftBevelColor;
- (id)rightBevelColor;
- (id)topBevelColor;
- (id)bottomBevelColor;
- (int)leftBevelBlendMode;
- (int)rightBevelBlendMode;
- (int)bottomBevelBlendMode;
- (int)topBevelBlendMode;
- (void)_adjustPositionOfWindowElements;
- (void)resizeWindowsToSize:(struct _NSSize)fp8;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)_drawMatteInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 alpha:(float)fp20 scale:(float)fp24;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (void)moveX:(float)fp8 Y:(float)fp12;
- (void)setSizeAndLocation:(struct _NSRect)fp8;
- (void)adjustToHorizontalScale:(float)fp8 verticalScale:(float)fp12;
- (void)snapToGuide:(id)fp8 byResizing:(BOOL)fp12;
- (void)snapToEdgesByResizing:(BOOL)fp8;
- (struct _NSRect)cropRect:(float)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (void)setParent:(id)fp8;
- (void)dealloc;

@end

@interface CropHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    HUDViewElement *mCropHUDView;
    NSPopUpButton *mConstrainPopUp;
    NSMenu *mConstrainMenu;
    HUDCheckboxButton *mConstrainCheckbox;
    HUDTextField *mCustomDenominatorView;
    HUDTextField *mCustomNumeratorView;
    HUDViewElement *mCustomConstrainView;
    HUDViewElement *mButtonView;
    id mCancelButton;
    BOOL mConstrainCheckboxEnabled;
    int mLastConstrainTag;
    int mConstrainOrientation;
    BOOL mUsingCustomConstrain;
    Edit *mEdit;
    BOOL mCustomSetByNewline;
    NSTextField *mXTextLabel;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (id)constrainMenu;
- (void)onClickConstrainCheckbox:(id)fp8;
- (void)onConstrain:(id)fp8;
- (void)performConstrain:(id)fp8 tag:(int)fp12;
- (void)setCustomConstrain:(id)fp8;
- (void)resetCrop:(id)fp8;
- (BOOL)usingCustomConstrain;
- (void)resetConstrainOrientation;
- (int)constrainOrientation;
- (int)lastConstrainTag;
- (void)setEdit:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)initializeWithEditList:(id)fp8;
- (void)setConstrain:(int)fp8 withRatio:(int)fp12 withOrientation:(int)fp16;
- (void)closeHUD:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)applyCrop:(id)fp8;
- (void)cancelCrop:(id)fp8;
- (void)optionKeyDown:(BOOL)fp8;

@end

@interface HUDBeveledPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface HUDBeveledPopUpButtonCell : NSPopUpButtonCell
{
    BOOL _showImagesInButton;
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (BOOL)showImagesInButton;
- (void)setShowImagesInButton:(BOOL)fp8;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface FileJournal : NSObject
{
    NSString *mRootPath;
    short mVolumeRefNum;
    NSString *mJournalPath;
    BOOL mIsDirty;
    NSMutableArray *mFilesToDelete;
    int mCommandRecordingLevel;
}

- (BOOL)_printToJournal:(const char *)fp8;
- (void)dealloc;
- (id)initWithRoot:(id)fp8 journal:(id)fp12;
- (BOOL)performRecoveryIfNeeded;
- (BOOL)commit;
- (BOOL)addFileAtPath:(id)fp8;
- (BOOL)removeFileAtPath:(id)fp8;
- (BOOL)movePath:(id)fp8 toPath:(id)fp12;
- (BOOL)copyPath:(id)fp8 toPath:(id)fp12;
- (BOOL)createDir:(id)fp8;
- (BOOL)deleteDirsRecursively:(id)fp8 toRoot:(id)fp12;

@end

@interface HUDTextField : NSTextField
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;

@end

@interface HUDTextFieldCell : NSTextFieldCell
{
}

- (id)setUpFieldEditorAttributes:(id)fp8;

@end

@interface KeyKeyMapHolder : NSObject
{
    struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *_map;
}

+ (id)hold:(struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)fp8;
+ (id)create;
- (id)init;
- (id)initWithMap:(struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)fp8;
- (void)dealloc;
- (struct map<Key, Key, std::less<Key>, std::allocator<std::pair<const Key, Key>>> *)map;

@end

@interface IPOpenGLView : NSOpenGLView
{
    BOOL _needsReshape;
    CIContext *_ciContext;
}

+ (id)defaultPixelFormat;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)clearGLContext;
- (void)dealloc;
- (void)prepareOpenGL;
- (void)reshape;
- (id)backgroundColor;
- (void)reshapeOpenGL;
- (void)initializeContext;
- (id)ciContext;
- (void)drawCurrentFrame;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPGLGuardView : NSView
{
    NSView *_glView;
}

- (id)backgroundColor;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)glView;
- (void)setGLView:(id)fp8;

@end

@interface PVScroller : NSScroller
{
    BOOL _disableSetFloat;
    id _mouseAnnounceTarget;
    SEL _mouseAnnounceAction;
    BOOL _mouseDownStarting;
}

- (void)setFloatValue:(float)fp8 knobProportion:(float)fp12;
- (void)setFloatValue:(float)fp8;
- (BOOL)disableSetFloat;
- (void)setDisableSetFloat:(BOOL)fp8;
- (id)mouseAnnounceTarget;
- (void)setMouseAnnounceTarget:(id)fp8;
- (SEL)mouseAnnounceAction;
- (void)setMouseAnnounceAction:(SEL)fp8;
- (BOOL)mouseDownStarting;
- (void)setMouseDownStarting:(BOOL)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface EventAlbum : FilterAlbum
{
    unsigned int _rollID;
}

- (id)init;
- (void)encodeWithDictionary:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (unsigned long)rollID;
- (void)setRollID:(unsigned long)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)comments;
- (void)setComments:(id)fp8;
- (BOOL)photosAreComputed;

@end

@interface TextFieldWithDisabledClickForwarding : NSTextField
{
}

- (void)mouseDown:(id)fp8;

@end

@interface PopupSearchField : NSControl
{
    NSButton *mPopupButton;
    NSTextField *mTextField;
    StarRatingControl *mRatingControl;
    NSButton *mCancelButton;
    NSImage *mLeftCapImage;
    NSImage *mRightCapImage;
    NSImage *mCenterImage;
    NSImage *mStopImage;
    BOOL mShowingCancel;
    int mSearchKind;
    id mSearchObject;
    float mSearchLimit;
    NSTimer *mTextDelayTimer;
    SEL mAction;
    SEL mCancelAction;
    id mTarget;
    BOOL mEnabled;
}

- (int)_popupMenuItemIndexForSearchKind:(int)fp8;
- (id)_popupMenu;
- (id)_imageForSearchKind:(int)fp8;
- (void)_configureCancel;
- (void)makeActive;
- (void)_cancelPressed:(id)fp8;
- (void)_keywordPickerItemSelected:(id)fp8;
- (void)_datePickerItemSelected:(id)fp8;
- (void)_peoplePickerItemSelected:(id)fp8;
- (void)_searchKindMenuItemSelected:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (void)_ratingChanged:(id)fp8;
- (void)_popupPressed:(id)fp8;
- (void)_initialize;
- (int)searchKind;
- (id)searchObject;
- (float)searchLimit;
- (void)_cancelTextDelayTimer;
- (void)_scheduleTextDelayTimer;
- (void)_sendDelayedTextCallback;
- (void)_setSearchObject:(id)fp8;
- (void)_showKeywordPicker;
- (void)_showDatePicker;
- (void)_showLocationPicker;
- (void)_showPeoplePicker:(id)fp8;
- (id)_shortDayMonthFormat;
- (void)_setSearchKind:(int)fp8 object:(id)fp12 selectedRange:(struct _NSRange)fp16;
- (void)cancelSearch;
- (void)dealloc;
- (void)setTarget:(id)fp8;
- (id)target;
- (void)setAction:(SEL)fp8;
- (SEL)action;
- (void)setCancelAction:(SEL)fp8;
- (SEL)cancelAction;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;

@end

@interface IPGroupElement : IPPageElement
{
    NSMutableArray *mElements;
    NSString *mBackgroundIdentifier;
}

+ (id)groupElementWithElementsOnPage:(id)fp8;
- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (BOOL)isGroupElement;
- (void)setParent:(id)fp8;
- (void)rotateSizeAndLocation;
- (id)embeddedTextElements;
- (BOOL)canRotateToFit;
- (id)elements;
- (void)setElements:(id)fp8;
- (void)applyFrameMasterToElements:(id)fp8;
- (void)copyBackgroundFromPageDesign:(id)fp8;
- (id)backgroundIdentifier;
- (void)setBackgroundIdentifier:(id)fp8;
- (id)holeElements;
- (int)emptyHoleCount;
- (BOOL)shouldSupressDrawing;
- (struct _NSRect)cropRect:(float)fp8;
- (void)dealloc;

@end

@interface KeywordPicker : NSObject
{
    FloatingPickerWindow *mWindow;
    SEL mAction;
    id mTarget;
}

+ (void)hideGlobalKeywordPicker;
+ (id)globalKeywordPickerPointingAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 selected:(id)fp32;
- (id)_addKeyword:(id)fp8 key:(unsigned long)fp12 columns:(int)fp16;
- (void)_showAtRect:(struct _NSRect)fp8 selected:(id)fp24;
- (id)init;

@end

@interface EditBackgroundRender : NSObject
{
    struct BackgroundRenderArray *mRenderArray;
    struct BackgroundRenderArray *mFinishedArray;
    struct MessageReceiver mMessageReceiver;
    BOOL mHasReceiver;
    struct _opaque_pthread_mutex_t mListLock;
    struct _opaque_pthread_mutex_t mRenderProcessLock;
    struct _opaque_pthread_mutex_t mRenderWaitLock;
    struct _opaque_pthread_cond_t mRenderCondition;
    struct _opaque_pthread_mutex_t mThreadQuitLock;
    int mRenderThreadState;
    struct {
        CIImage *sourceImage;
        struct CGSize sourceSize;
        char saving16Bit;
        char workingWithRAW;
        struct IPFileInfo *targetFileInfo;
        struct IPPhotoInfo *ipPhotoInfo;
        struct CGColorSpace *colorSpace;
        char **colorProfile;
        struct IPImage *newImage;
        ImageUserData *userData;
        char safeSave;
        char abandonSave;
        NSString *uniquePath;
    } mCurrentRenderItem;
}

- (id)initWithDB:(id)fp8;
- (void)dealloc;
- (void)finishPendingWork;
- (void)copyFirstImageInQueue:(struct BackgroundRenderArray *)fp8 into:(CDAnonymousStruct12 *)fp12;
- (void)startBackgroundRenderWith:(id)fp8 ofSize:(struct CGSize)fp12 saving16Bit:(BOOL)fp20 workingWithRAW:(BOOL)fp24 targetFileInfo:(struct IPFileInfo *)fp28 targetPhotoInfo:(struct IPPhotoInfo *)fp32 userData:(id)fp36 colorSpace:(struct CGColorSpace *)fp40 colorProfile:(char **)fp44;
- (void)render;
- (void)done;
- (void)handleDBChanges:(CDAnonymousStruct12 *)fp8 fields:(unsigned long long)fp12;
- (unsigned int)count;
- (void)createReceivers;
- (void)linkReceivers:(id)fp8 db:(id)fp12;
- (void)disableReceivers;
- (void)destroyReceivers;

@end

@interface DatePicker : NSObject
{
    FloatingPickerWindow *mWindow;
    CalendarView *mCalendarView;
    NSButton *mMonthDayToggle;
    SEL mAction;
    id mTarget;
}

+ (void)hideGlobalDatePicker;
+ (id)globalDatePickerPointingAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 clearSelection:(BOOL)fp32;
- (id)init;

@end

@interface FloatingPickerView : NSView
{
    struct _NSPoint mPointerTip;
    int mTrackingTag;
    BOOL _useTracking;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)_addTracking;
- (void)_frameChanged:(id)fp8;
- (void)viewDidMoveToWindow;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)setPointerTip:(struct _NSPoint)fp8;
- (BOOL)useTracking;
- (void)setUseTracking:(BOOL)fp8;

@end

@interface FloatingPickerWindow : DisappearingWindow
{
    NSTimer *mFadeTimer;
    double mFadePhase;
    double mFadeStep;
    FloatingPickerView *mContentView;
    struct _NSRect _screenRectForKeepVisible;
    BOOL _track;
    BOOL _fadesBasedOnMouse;
    BOOL _allowKey;
}

- (void)_updateFadeSettings;
- (id)initWithContentRect:(struct _NSRect)fp8;
- (struct _NSRect)screenRectForKeepVisible;
- (void)setScreenRectForKeepVisible:(struct _NSRect)fp8;
- (BOOL)fadesBasedOnMouse;
- (void)setFadesBasedOnMouse:(BOOL)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)makeFirstResponder:(id)fp8;
- (void)stopFade;
- (void)dealloc;
- (BOOL)canBecomeMainWindow;
- (BOOL)allowKey;
- (void)setAllowKey:(BOOL)fp8;
- (BOOL)canBecomeKeyWindow;
- (void)showAtRect:(struct _NSRect)fp8 makingKey:(BOOL)fp24;
- (void)_fadeCallback;
- (void)fadeOutWithStep:(double)fp8;
- (void)fadeOut;
- (void)fadeOutQuickly;
- (void)resignKeyWindow;
- (void)makeKeyAndOrderFront:(id)fp8;
- (void)orderFront:(id)fp8;
- (void)orderBack:(id)fp8;
- (void)orderOut:(id)fp8;
- (void)orderWindow:(int)fp8 relativeTo:(int)fp12;
- (void)orderFrontRegardless;

@end

@interface ApertureBrowser : NSWindowController
{
    NSView *view;
    ILMediaBrowserView *mMediaBrowser;
}

+ (id)showApertureBrowser;
+ (void)hideApertureBrowser;
+ (BOOL)isApertureBrowserVisible;
- (id)init;
- (void)dealloc;
- (id)windowNibName;
- (void)windowDidLoad;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaGroup:(id)fp12;

@end

@interface ICUWrapper : NSObject
{
    void *stub_ubrk_close;
    void *stub_ubrk_following;
    void *stub_ubrk_open;
    void *stub_ubrk_setText;
    void *stub_uloc_getKeywordValue;
    void *stub_ures_close;
    void *stub_ures_getByKey;
    void *stub_ures_getByKeyWithFallback;
    void *stub_ures_getSize;
    void *stub_ures_getStringByIndex;
    void *stub_ures_open;
}

+ (id)sharedICUWrapper;
- (id)init;
- (void)ubrk_close:(void *)fp8;
- (int)ubrk_following:(void *)fp8 offset:(int)fp12;
- (void *)ubrk_open:(int)fp8 locale:(const char *)fp12 text:(const unsigned short *)fp16 textLength:(int)fp20 status:(int *)fp24;
- (void)ubrk_setText:(void *)fp8 text:(const unsigned short *)fp12 textLength:(int)fp16 status:(int *)fp20;
- (int)uloc_getKeywordValue:(const char *)fp8 keywordName:(const char *)fp12 buffer:(char *)fp16 bufferCapacity:(int)fp20 status:(int *)fp24;
- (void)ures_close:(struct UResourceBundle *)fp8;
- (struct UResourceBundle *)ures_getByKey:(struct UResourceBundle *)fp8 key:(const char *)fp12 fillIn:(struct UResourceBundle *)fp16 status:(int *)fp20;
- (struct UResourceBundle *)ures_getByKeyWithFallback:(struct UResourceBundle *)fp8 key:(const char *)fp12 fillIn:(struct UResourceBundle *)fp16 status:(int *)fp20;
- (int)ures_getSize:(struct UResourceBundle *)fp8;
- (const unsigned short *)ures_getStringByIndex:(struct UResourceBundle *)fp8 indexS:(int)fp12 len:(int *)fp16 status:(int *)fp20;
- (struct UResourceBundle *)ures_open:(const char *)fp8 locale:(const char *)fp12 status:(int *)fp16;

@end

@interface IPCutSheetPreviewController : IPBookController
{
    NSTextField *mPageCountLabel;
    PrintAlbum *mLocalPrintAlbum;
}

- (void)awakeFromNib;
- (void)loadCurrentBook;
- (id)selectedTheme;
- (void)selectPaperSize:(id)fp8;
- (void)selectPhotoSize:(id)fp8;
- (void)selectPaperType:(id)fp8;
- (void)themeSelectionChanged:(id)fp8;
- (void)recreateBook:(BOOL)fp8;
- (id)relayoutBook:(id)fp8 withTheme:(id)fp12 photoLayout:(int)fp16;
- (void)selectPreviousPage:(id)fp8;
- (void)selectNextPage:(id)fp8;
- (BOOL)isThemePreviewController;
- (void)setDirectPrintingDisabled:(BOOL)fp8;
- (void)setArchiveController:(id)fp8;
- (id)book;
- (void)setBook:(id)fp8;
- (id)localPrintAlbum;
- (void)dealloc;

@end

@interface PathLocker : NSObject
{
    struct _opaque_pthread_mutex_t _lock;
    struct _opaque_pthread_cond_t _condition;
    BOOL _releaseAll;
    NSMutableArray *mPaths;
}

- (id)init;
- (void)dealloc;
- (int)_indexForPath:(id)fp8;
- (void)lockPath:(id)fp8;
- (void)unlockPath:(id)fp8;
- (void)releaseAll;

@end

@interface PublishedAlbum : Album <ILAlbumContentsDelegate, ILAlbumUpdateDelegate>
{
    struct SqPublishedAlbum *mSqPublishedAlbum;
    ILPhotoAlbum *mPublishedAlbum;
    int mPublishedAlbumType;
    BOOL mPublishRequested;
    BOOL mUnpublishRequested;
    BOOL mPublishIsUpdating;
    NSTimer *mPubSyncTimer;
    NSMutableArray *mPubSubOperationQueue;
    BOOL mHaltPubSubQueue;
    BOOL mIsImporting;
    NSError *mPublishError;
    NSString *mCurrentUpdatingUID;
    _Bool mTrashPhotosOnRemove;
    NSMutableSet *mReservedPaths;
    NSString *mDisplayName;
    struct IPPhotoList *mSyncedPhotos;
}

+ (void)initialize;
+ (void)_sendCancelToAlbumList:(struct IPAlbumList *)fp8;
+ (void)_terminateSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
+ (id)_canTerminate;
+ (void)_registerSelectorInTerminateQueue:(id)fp8;
+ (void)_removeSelectorFromTerminateQueue:(id)fp8;
- (id)init;
- (id)initWithDB:(id)fp8 key:(unsigned long)fp12 persistent:(BOOL)fp16;
- (void)dealloc;
- (void)prepareForRelease;
- (void)checkForUIDDuplicates;
- (void)addToSqDB:(struct SqDB *)fp8;
- (void)removeFromSqDB;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (struct SqPublishedAlbum *)sqPublishedAlbum;
- (void)initWithDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)publishedName;
- (id)publishServiceKey;
- (id)publishServiceXMLName;
- (void)setPublishServiceKey:(id)fp8;
- (BOOL)syncNeeded;
- (void)setSyncNeeded:(BOOL)fp8;
- (id)keyPhotoUID;
- (void)setKeyPhotoUID:(id)fp8;
- (_Bool)trashPhotosOnRemove;
- (void)setTrashPhotosOnRemove:(_Bool)fp8;
- (void)setEnableBackgroundMusic:(BOOL)fp8;
- (void)setSlideShowPlaylistName:(id)fp8;
- (void)setSlideShowSongPath:(id)fp8;
- (void)setSecondsPerSlide:(int)fp8;
- (void)setRepeatSlideShow:(BOOL)fp8;
- (void)setRandomSlideShow:(BOOL)fp8;
- (void)setSlideShowUseTitles:(BOOL)fp8;
- (void)setSlideShowUseRankings:(BOOL)fp8;
- (void)setSlideShowShowControls:(BOOL)fp8;
- (void)setSlideShowFillScreen:(BOOL)fp8;
- (void)setSlideShowTransitionName:(id)fp8;
- (void)setSlideshowTransitionIdentifier:(id)fp8;
- (void)setSlideShowTransitionDirection:(int)fp8;
- (void)setSlideShowTransitionSpeed:(float)fp8;
- (void)setSlideShowAutoPanAndZoom:(BOOL)fp8;
- (int)publishType;
- (BOOL)isPublished;
- (id)publishedURL;
- (BOOL)photoIsPending:(struct IPPhotoInfo *)fp8;
- (BOOL)photoWithUIDIsPending:(id)fp8;
- (void)resetLastSyncDate;
- (id)publishedAlbum;
- (int)expectedSyncCount;
- (void)setExpectedSyncCount:(int)fp8;
- (id)displayName;
- (void)setDisplayName:(id)fp8;
- (id)serviceUsername;
- (void)setServiceUsername:(id)fp8;
- (id)publishUsername;
- (void)setPublishUsername:(id)fp8;
- (int)showCaptionsSetting;
- (id)contributionEmailAddress;
- (BOOL)allowsContributions;
- (void)setDB:(id)fp8;
- (void)setName:(id)fp8;
- (void)setComments:(id)fp8;
- (BOOL)allowsModification;
- (void)albumWillBeSelected;
- (BOOL)isEjectable;
- (void)eject;
- (BOOL)isAltEjectable;
- (void)altEject;
- (long)maxPhotos;
- (void)alertMaxPhotos;
- (void)addWithArray:(struct IPPhotoList *)fp8;
- (struct IPPhotoList *)addUniqueWithArray:(struct IPPhotoList *)fp8 returnResults:(BOOL)fp12;
- (void)removeWithArray:(struct IPPhotoList *)fp8;
- (void)_addChangedPhoto:(struct IPPhotoInfo *)fp8;
- (void)_removeChangedPhoto:(struct IPPhotoInfo *)fp8;
- (BOOL)setProgressValue:(double)fp8;
- (void)willBeRemoved;
- (void)willUndoRemove;
- (int)previousVisibleCount;
- (id)iconUsingLargeAppearance:(BOOL)fp8;
- (id)subgroup;
- (BOOL)isInGroup:(unsigned long long)fp8 andSubgroup:(id)fp16;
- (void)setSubgroup:(id)fp8;
- (void)_doCancelProgress;
- (void)_cancelProgressSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)albumProgressCanceled:(id)fp8;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;
- (id)altEjectIcon:(BOOL)fp8;
- (id)altEjectClickedIcon:(BOOL)fp8;
- (id)altEjectHighlightedIcon:(BOOL)fp8;
- (unsigned long long)_publishImageMask;
- (unsigned long long)_publishMetadataMask;
- (unsigned long long)_publishRollMask;
- (unsigned long long)_publishAlbumMask;
- (void)_resetAutoPublish;
- (void)_noteChangedPublishSize;
- (void)_noteChangedFields:(unsigned long long)fp8;
- (void)_handleDBMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)_noteModifiedUID:(id)fp8 propertiesOnly:(BOOL)fp12;
- (void)updatePhotoWithUID:(id)fp8 previewOnly:(BOOL)fp12;
- (void)_importStarted:(id)fp8;
- (void)_importEnded:(id)fp8;
- (id)publishPluginForServiceKey:(id)fp8;
- (BOOL)canPublish;
- (id)publishSettings;
- (void)setPublishSettings:(id)fp8;
- (void)showPublishSettings;
- (id)publishSelection:(struct IPPhotoList *)fp8 toService:(id)fp12 withTitle:(id)fp16 embedded:(id)fp20 forceLogin:(BOOL)fp24;
- (void)republishAtLocation:(id)fp8 withName:(id)fp12;
- (void)_republishSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)publish;
- (void)createPublishedAlbumAtLocation:(id)fp8;
- (void)_markAsUnpublished;
- (void)unpublish;
- (void)goThereNow;
- (void)updateNow;
- (void)publishNow;
- (void)_addPhotoWithUIDToPublish:(id)fp8;
- (void)_removePhotoWithUIDFromPublish:(id)fp8;
- (void)_dotMacError:(id)fp8;
- (void)_checkDotMac;
- (void)_checkDotMacDone;
- (void)_threadedCheckDotMac;
- (void)_syncWithDotMac:(id)fp8;
- (void)_setPluginError:(id)fp8;
- (void)_validateCredentialsMainThread:(id)fp8;
- (void)_processPubSubOperation:(id)fp8;
- (void)_processPubSubQueue;
- (void)_processPubSubQueue:(double)fp8;
- (void)_clearPubSubQueue;
- (void)_queuePendingPubsOnMainThread;
- (void)_queuePubSubOnMainThread:(id)fp8;
- (void)queuePubSubOperation:(id)fp8;
- (void)forceQueuePubSubOperation:(id)fp8;
- (void)_albumErrorSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)registerPublishError:(id)fp8 withTitle:(id)fp12;
- (BOOL)_showPublishError;
- (void)_showSubscriptionError:(id)fp8;
- (id)publishError;
- (void)setPublishError:(id)fp8;
- (BOOL)hasPublishError;
- (id)loginForAlbum:(id)fp8;
- (id)passwordForAlbum:(id)fp8;
- (void)prepareToSyncWithProperties:(id)fp8;
- (void)updateProperties:(id)fp8;
- (id)orderedPhotoUIDs;
- (id)orderedVisiblePhotoUIDs;
- (id)orderedPhotoUIDs:(BOOL)fp8 userHidden:(int)fp12;
- (id)allPropertiesForPhoto:(struct IPPhotoInfo *)fp8;
- (id)allPropertiesForPhotoWithUID:(id)fp8;
- (void)updateProperties:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)updateProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (void)setProperties:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)setProperties:(id)fp8 forPhotoWithUID:(id)fp12;
- (void)_newPhotosWithUIDMainThread:(id)fp8;
- (void)newPhotosWithUID:(id)fp8;
- (void)_deletePhotosWithUIDMainThread:(id)fp8;
- (void)deletePhotosWithUID:(id)fp8;
- (void)newPhotoWithUID:(id)fp8;
- (void)deletePhotoWithUID:(id)fp8;
- (void)deleteOldPhotoWithUID:(id)fp8;
- (id)createNewPhotoWithInitialProperties:(id)fp8;
- (void)setPersistentDictionary:(id)fp8 forAlbum:(id)fp12;
- (id)persistentDictionaryForAlbum:(id)fp8;
- (id)ensureOriginalForPhotoWithUID:(id)fp8;
- (id)refForPhotoWithUID:(id)fp8 format:(unsigned long)fp12 quality:(int)fp16 maxDimensions:(unsigned long)fp20;
- (id)prepareSpriteForUIDs:(id)fp8 qualityValue:(float)fp12 maxDimensions:(unsigned long)fp16;
- (struct _NSSize)sizeOfPhotoWithUID:(id)fp8;
- (void)_updatePropertiesMainThread:(id)fp8;
- (id)_orderedPhotoUIDsMainThread:(BOOL)fp8 userHidden:(int)fp12;
- (id)_photoPropertiesMainThread:(struct IPPhotoInfo *)fp8;
- (void)_markChangedMainThread:(struct IPPhotoInfo *)fp8;
- (void)_threadedRebuildThumbnail:(struct IPPhotoInfo *)fp8;
- (void)_notifyImageChanged:(struct IPPhotoInfo *)fp8 previewOnly:(BOOL)fp12;
- (void)_updatePhotoPropertiesMainThread:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)_setPhotoPropertiesMainThread:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (id)_ensureOriginalMainThread:(struct IPPhotoInfo *)fp8;
- (void)_deletePublishedPhoto:(id)fp8;
- (void)_deleteSubscribedPhoto:(id)fp8;
- (void)_createNewPhotoOnMainThread:(id)fp8;
- (void)_setPersistentDictionary:(id)fp8;
- (void)_beginPublishOperation;
- (void)_endPublishOperation;
- (void)statusUpdated:(int)fp8 forAlbum:(id)fp12 withProperties:(id)fp16;
- (void)beginChangeSession;
- (void)endChangeSession;
- (void)_beginChangeSessionMainThread;
- (void)_endChangeSessionMainThread;
- (BOOL)publishCompletePrompt;
- (void)_doPublish:(id)fp8;
- (void)_threadedUnpublish:(id)fp8;
- (void)_proceedWithUnpublish:(BOOL)fp8;
- (void)_unpublishErrorSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_doUnpublish:(id)fp8;
- (void)_notifyUIDChanged:(id)fp8;
- (void)_updateAlbumsOrder;
- (void)_updateComplete:(id)fp8;
- (void)_publishStarted:(id)fp8;
- (void)_publishIsLive;
- (unsigned int)aeAlbumType;
- (id)aeAlbumURL;
- (void)createEmailWithPublishAnnouncement;

@end

@interface IPRollInfoCache : NSObject
{
    struct map<Key, RollInfoCacheRecord, std::less<Key>, std::allocator<std::pair<const Key, RollInfoCacheRecord>>> *_infoMap;
    struct map<Key, RollCachePhotoEntry, std::less<Key>, std::allocator<std::pair<const Key, RollCachePhotoEntry>>> *_keyMap;
    DBKeyMgr *_emptyEventKeys;
}

+ (id)cacheForPhotoList:(struct IPPhotoList *)fp8;
+ (id)cacheForPhotoList:(struct IPPhotoList *)fp8 emptyEvents:(struct IPSelectionList *)fp12;
- (void)_clearCaches;
- (id)init;
- (void)dealloc;
- (void)_cacheForPhotoList:(struct IPPhotoList *)fp8 emptyEvents:(struct IPSelectionList *)fp12;
- (void)restoreForPhotoList:(struct IPPhotoList *)fp8 movePhotos:(BOOL)fp12;

@end

@interface IPTransitionController : NSObject
{
    IPTransitionView *_transitionView;
    IPGLGuardView *_guardView;
    ArchiveController *_delegate;
    NSAnimation *_animation;
    float _percentage;
    HUDWindow *_window;
}

+ (id)transitionController;
- (id)init;
- (void)dealloc;
- (void)initializeWithView:(id)fp8;

@end

@interface IPTransitionView : IPOpenGLView
{
    struct IPPhotoInfo *_photo;
    IPTransitionCotntroller *_controller;
    float _alpha;
    struct _NSRect _targetFrame;
    struct _NSRect _startFrame;
    float _percentage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setController:(id)fp8;
- (id)backgroundColor;
- (void)drawCurrentFrame;
- (struct IPPhotoInfo *)photo;
- (void)setPercentage:(float)fp8;

@end

@interface IPContactSheetElementCell : IPPageElement
{
    IPImageElement *mImageElement;
    IPTextElement *mTextElement;
    float mImagePercentage;
    int mImagePosition;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setParent:(id)fp8;
- (void)fillPasteboard:(id)fp8;
- (BOOL)hasEmptyHole;
- (BOOL)canCreateHole;
- (void)createHole;
- (id)holeElement;
- (void)fillHole:(struct IPPhotoInfo *)fp8;
- (BOOL)fitToSize;
- (void)setFitToSize:(BOOL)fp8;
- (BOOL)flipOrientation;
- (void)setFlipOrientation:(BOOL)fp8;
- (struct IPPhotoInfo *)photoInfo;
- (float)imageAspectRatio;
- (id)draggingImage:(struct _NSSize)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (BOOL)isCellElement;
- (id)embeddedTextElements;
- (BOOL)applyVariantForBackground:(id)fp8;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (id)imageElement;
- (id)textElement;
- (float)imagePercentage;
- (int)imagePosition;
- (void)_resizeElements;
- (void)preserveFontSizeForColumnCount:(int)fp8;
- (void)restoreFontToSizeForColumnCount:(int)fp8;

@end

@interface IPAnimation : NSObject
{
    NSMutableArray *_phases;
    float _totalDuration;
}

+ (id)animation;
- (id)init;
- (void)dealloc;
- (id)description;
- (void)addPhase:(id)fp8;
- (void)removePhase:(id)fp8;
- (id)addPhaseStartingAtEndOfLastPhase;
- (int)phaseCount;
- (float)totalDuration;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface IPAnimationPhase : NSObject <NSCopying>
{
    float _duration;
    struct vector<IPAnimationObject, std::allocator<IPAnimationObject>> *_objects;
}

+ (id)phase;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)copyEndsToBegins;
- (void)addObject:(void *)fp8;
- (int)objectCount;
- (void *)objects;
- (float)duration;
- (void)setDuration:(float)fp8;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface NSWorkspace (BLAdditions)
- (BOOL)openURL:(id)fp8 withApplicationAtPath:(id)fp12;
- (BOOL)openURL:(id)fp8 withApplicationWithBundleIdentifier:(id)fp12;
- (id)pathForApplicationWithBundleIdentifier:(id)fp8;
- (id)pathForApplicationOfFileAtPath:(id)fp8;
- (id)pathForApplicationForMIMEType:(id)fp8;
- (BOOL)launchApplicationAtPath:(id)fp8 processSerialNumber:(struct ProcessSerialNumber *)fp12 makeFrontmost:(BOOL)fp16 alreadyOpen:(char *)fp20 event:(id)fp24;
- (id)infoForLaunchedApplicationAtPath:(id)fp8;
- (BOOL)isLaunchedApplicationAtPath:(id)fp8;
- (BOOL)processSerialNumber:(struct ProcessSerialNumber *)fp8 forApplicationAtPath:(id)fp12;
- (id)findFolderPathForDomainType:(unsigned long)fp8 folderType:(unsigned long)fp12;
- (BOOL)moveFileToTrash:(id)fp8;
- (id)_internetLocationFileExtensions;
- (id)_internetLocationFileExtensionsArray;
- (BOOL)isInternetLocationFileAtPath:(id)fp8;
- (id)internetLocationFileExtensionForURL:(id)fp8;
- (BOOL)URL:(id *)fp8 title:(id *)fp12 forInternetLocationFileAtPath:(id)fp16;
- (id)URLForInternetLocationFileAtPath:(id)fp8;
- (id)createInternetLocationFileInDirectory:(id)fp8 withURL:(id)fp12 title:(id)fp16;
- (void)noteDirectoryContentsChangedAtPath:(id)fp8;
- (void)notifyFinderFileChangedAtPath:(id)fp8;
@end

@interface NSAppleEventDescriptor (BLAdditions)
+ (id)descriptorWithPath:(id)fp8;
+ (id)descriptorWithProcessSerialNumber:(struct ProcessSerialNumber)fp8;
- (BOOL)send;
- (BOOL)sendWithTimeout:(long)fp8;
- (BOOL)sendWithoutWaitingForReply;
@end

@interface AddAlbum : NSObject <IPHEmbeddedSettingsProtocol>
{
    NSWindow *mWindow;
    NSView *mAlbumView;
    NSTextField *mAlbumNameText;
    NSButton *mAlbumUseSelectedButton;
    NSButton *mAlbumOKButton;
    NSButton *mAlbumCancelButton;
    NSView *mSlideshowView;
    NSTextField *mSlideshowNameText;
    NSButton *mSlideshowUseSelectedButton;
    NSButton *mSlideshowOKButton;
    NSButton *mSlideshowCancelButton;
    NSView *mBookView;
    NSTextField *mBookNameText;
    NSView *mBookPickerView;
    NSView *mCardView;
    NSTextField *mCardNameText;
    NSView *mCardPickerView;
    NSView *mCalendarView;
    NSTextField *mCalendarNameText;
    NSView *mCalendarPickerView;
    NSView *mDotMacProblemView;
    NSView *mDotMacView;
    NSTextField *mDotMacNameText;
    NSView *mDotMacPickerView;
    NSMutableArray *_nibObjects;
    NSView *_heldBookSheet;
    NSView *_heldCardSheet;
    NSView *_heldCalendarSheet;
    NSView *_heldSmartAlbumSheet;
    NSView *_heldDotMacSheet;
    BOOL _dotMacSettingsVisible;
    NSObject<IPHPluginSettingsProtocol> *_heldPublishController;
    BOOL _useSelection;
    BOOL _disallowSelection;
    BOOL _allowProducts;
    int _activeTypeTag;
    NSWindow *_onWindow;
}

+ (void)showOnWindow:(id)fp8 forSelection:(BOOL)fp12 disallowSelection:(BOOL)fp16;
- (void)_start;
- (void)dealloc;
- (void)_installView:(id)fp8;
- (void)_installView:(id)fp8 inView:(id)fp12 asChildOf:(id)fp16;
- (void)_putSheetsBack;
- (void)_enableOkButtons:(BOOL)fp8;
- (id)_getCurrentName:(int)fp8;
- (void)_setCurrentName:(id)fp8 type:(int)fp12;
- (id)_suggestedAlbumName:(int)fp8;
- (void)_setNameForType:(int)fp8 force:(BOOL)fp12;
- (void)_loadSmartAlbumPanel;
- (void)_loadBookPanel;
- (void)_loadCardPanel;
- (void)_loadCalendarPanel;
- (void)updateSettingsViewState;
- (void)_loadDotMacPanel;
- (void)_setupToolbar;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (BOOL)validateToolbarItem:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)other:(id)fp8;
- (void)restart:(id)fp8;
- (id)window;
- (void)nameFieldAction:(id)fp8;
- (void)chooseType:(id)fp8;
- (void)openDotMacPreferences:(id)fp8;
- (void)_addAlbumCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (BOOL)useSelection;
- (BOOL)disallowSelection;
- (void)setUseSelection:(BOOL)fp8;
- (void)setDisallowSelection:(BOOL)fp8;
- (id)onWindow;
- (void)setOnWindow:(id)fp8;

@end

@interface AddAlbumPanel : NSPanel
{
    AddAlbum *_addAlbum;
}

- (id)addAlbum;
- (void)setAddAlbum:(id)fp8;

@end

@interface IPBookInsideCoverView : IPBookView
{
    struct _NSRect mArtRect;
    struct _NSRect mFlapRect;
    struct _NSRect mBlankPageRect;
    struct CGShading *mEdgeShading;
    struct CGFunction *mShadingFunction;
    struct CGColorSpace *mShadingColorSpace;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)_createEdgeShadingForFrame:(struct _NSRect)fp8 leftLaying:(BOOL)fp24;
- (void)loadPreferences;
- (void)dealloc;

@end

@interface FlippedView : NSView
{
}

- (BOOL)isFlipped;

@end

@interface IPInvoker : NSObject
{
    id _target;
    double _delay;
    BOOL _includeModalModes;
    int _mode;
    NSInvocation *_invocation;
}

+ (id)prepareWithInvocationTarget:(id)fp8;
+ (id)waitForPerformOnMainThreadWithInvocationTarget:(id)fp8;
+ (id)performOnMainThreadWithInvocationTarget:(id)fp8;
+ (id)performOnNewThreadWithInvocationTarget:(id)fp8;
+ (id)performAfterDelay:(double)fp8 withTarget:(id)fp16 includeModalModes:(BOOL)fp20;
+ (id)performAfterTimerDelay:(double)fp8 withTarget:(id)fp16;
- (void)dealloc;
- (id)preparedInvocation;
- (void)_invokeTarget:(id)fp8;
- (void)_invokeTargetWithPool:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;

@end

@interface IPHAnnounceEmail : NSObject
{
    NSMutableString *mTempHTMLFileName;
    WebView *mWebView;
    NSString *mDefaultVisitURLString;
    NSDictionary *mImageDictionary;
    PublishedAlbum *mAlbum;
    NSMutableSet *mLoadingResources;
    BOOL mFrameIsLoaded;
}

+ (void)announceEmailForAlbum:(id)fp8;
+ (void)_fixupImageElement:(id)fp8 imageDictionary:(id)fp12;
+ (id)_populateHTMLTemplate:(id)fp8 fromAlbum:(id)fp12 imageDictionary:(id)fp16;
+ (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
+ (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8;
+ (id)_drawThumbnail:(struct IPPhotoInfo *)fp8 thumbFrame:(struct _NSRect)fp12 rotation:(float)fp28 tnManager:(id)fp32 context:(struct CGContext *)fp36 fillSquareThumb:(BOOL)fp40 clipRect:(struct _NSRect)fp44 lowres:(BOOL)fp60 forOverview:(BOOL)fp64;
- (id)initWithAlbum:(id)fp8;
- (void)dealloc;
- (void)announceSite:(id)fp8 withHTML:(id)fp12 imageDictionary:(id)fp16;
- (void)createPlainTextEmail;
- (void)_removeTemporaryFiles;
- (id)webView:(id)fp8 identifierForInitialRequest:(id)fp12 fromDataSource:(id)fp16;
- (void)webView:(id)fp8 resource:(id)fp12 didReceiveAuthenticationChallenge:(id)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didFailLoadingWithError:(id)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didFinishLoadingFromDataSource:(id)fp16;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)_sendEmail;

@end

@interface IPPrinter : NSObject
{
    struct OpaquePMPrinter *mPrinter;
    struct _NSSize mMaxPaperSize;
    struct _NSRect mMaxPaperImageRect;
    struct ppd_file_s *mPpd;
}

+ (id)userDefaultPaper;
+ (id)genericPrinter;
+ (id)userDefaultPrinter;
+ (id)userPrinterList;
+ (id)serverPrinterList;
+ (id)printerWithPMPrinter:(struct OpaquePMPrinter *)fp8;
+ (id)printerWithName:(id)fp8;
+ (struct OpaquePMPaper *)paperWithName:(id)fp8 forPrinter:(struct OpaquePMPrinter *)fp12;
+ (struct OpaquePMPageFormat *)pageFormatWithPMPaper:(struct OpaquePMPaper *)fp8;
- (id)initWithPrinter:(struct OpaquePMPrinter *)fp8;
- (void)dealloc;
- (struct OpaquePMPrinter *)printer;
- (void)setPrinter:(struct OpaquePMPrinter *)fp8;
- (id)name;
- (BOOL)isFavorite;
- (BOOL)isDefault;
- (id)printerPresets;
- (id)presetForID:(id)fp8 fromArray:(id)fp12;
- (id)localizedStringForPaper:(struct OpaquePMPaper *)fp8;
- (struct ppd_file_s *)ppd;
- (id)papers;
- (id)paperInfoListWithWidth:(double)fp8 andHeight:(double)fp16;
- (struct _NSSize)maxPaperSize;
- (id)icon;
- (struct _NSRect)imageableAreaForPaperOfSize:(struct _NSSize)fp8;
- (id)description;

@end

@interface NSPrintInfo (NSPrintInfoTigerCompatibleAdditions)
- (struct OpaquePMPrintSession *)getPMPrintSession;
- (struct OpaquePMPageFormat *)getPageFormatToChange;
- (void)updatePageFormat:(struct OpaquePMPageFormat *)fp8;
- (void)setNewPageFormat:(struct OpaquePMPageFormat *)fp8;
- (struct OpaquePMPrintSettings *)getPrintSettingsToChange;
- (void)updatePrintSettings:(struct OpaquePMPrintSettings *)fp8;
- (void)setNewPrintSettings:(struct OpaquePMPrintSettings *)fp8;
@end

@interface IPPrinterPreset : NSObject
{
    struct OpaquePMPreset *mPMPreset;
}

+ (id)presetWithPMPreset:(struct OpaquePMPreset *)fp8;
- (id)initWithPreset:(struct OpaquePMPreset *)fp8;
- (void)dealloc;
- (struct OpaquePMPreset *)pmPreset;
- (struct OpaquePMPrintSettings *)printSettingsForSession:(struct OpaquePMPrintSession *)fp8;
- (void)setPMPreset:(struct OpaquePMPreset *)fp8;
- (id)name;
- (id)description;

@end

@interface CGConnect : NSObject
{
}

+ (void)suspendDrawing;
+ (void)resumeDrawing;
+ (void)setWindow:(id)fp8 transform:(struct CGAffineTransform)fp12;

@end

@interface NSWindow (Genie)
- (void)genieWindow:(int)fp8 fromRect:(struct _NSRect)fp12 percent:(float)fp28;
- (void)slideWindow:(int)fp8 percent:(float)fp12;
- (void)spinWindow:(int)fp8 percent:(float)fp12 targetRect:(struct _NSRect)fp16;
- (void)spinWindow:(int)fp8 percent:(float)fp12;
- (void)stepAnimation;
- (void)genieWindow:(int)fp8 toRect:(struct _NSRect)fp12;
@end

@interface ILPhotoShare : NSObject
{
    id <ILShareContentsDelegate> _shareContentsDelegate;
    NSMutableDictionary *_properties;
}

- (id)init;
- (id)initWithContentsDelegate:(id)fp8;
- (void)dealloc;
- (void)_setupObservers;
- (void)_unsetupObservers;
- (void)operationEnded:(id)fp8;
- (void)setShareContentsDelegate:(id)fp8;
- (id)shareContentsDelegate;
- (id)persistenceDictionary;
- (void)savePersistenceDictionary;
- (id)propertyForKey:(id)fp8;
- (void)setProperty:(id)fp8 forKey:(id)fp12;
- (void)setPropertiesVersion:(id)fp8;
- (id)propertiesVersion;
- (void)bumpPropertiesVersion;

@end

@interface BlemishHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    HUDViewElement *mRedeyeHUDView;
    HUDViewElement *mRetouchHUDView;
    HUDViewElement *mBlemishSliderHUDView;
    int mMode;
    Edit *mEdit;
    NSTextField *mRetouchSizeTextLabel;
    NSTextField *mRedeyeSizeTextLabel;
    int mRedeyeRadiusMode;
    HUDSlider *mBlemishSlider;
    NSButton *mAutoRedeyeButton;
    float mRedeyeRadius;
    float mRetouchRadius;
    BOOL mUseMagicBrush;
    BOOL mAutoChooseSource;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setEdit:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)setHUDMode:(int)fp8;
- (void)onAutoRedeye:(id)fp8;
- (void)onBlemishRadiusChanged:(id)fp8;
- (void)onMouseDown:(id)fp8;
- (void)onMouseUp:(id)fp8;
- (void)resetBrushSelection;
- (int)redeyeTool;
- (float)radius;
- (BOOL)useMagicBrush;
- (BOOL)autoChooseSource;
- (void)toggleMagicBrushCheckbox;
- (void)setAutoChooseSource:(BOOL)fp8;
- (BOOL)handleKeyDown:(id)fp8;
- (void)setHUDData:(id)fp8;
- (id)getHUDData;

@end

@interface NSImage (iPhotoExtensions)
- (struct _NSRect)rect;
- (void)compositeToRect:(struct _NSRect)fp8 operation:(unsigned int)fp24;
- (void)compositeToRect:(struct _NSRect)fp8 operation:(unsigned int)fp24 fraction:(float)fp28;
@end

@interface IPDetailHeaderView : NSView
{
    Album *_album;
    BOOL _reanimated;
    BOOL _hiliteBack;
    NSImage *_bgArt;
    NSImage *_backLeftN;
    NSImage *_backMiddleN;
    NSImage *_backRightN;
    NSImage *_backLeftD;
    NSImage *_backMiddleD;
    NSImage *_backRightD;
    NSImage *_backLeftP;
    NSImage *_backMiddleP;
    NSImage *_backRightP;
    struct _NSPoint _backLeftPoint;
    struct _NSRect _backMiddleRect;
    struct _NSPoint _backRightPoint;
    struct _NSRect _backRect;
    BOOL _showNextPrev;
    BOOL _hiliteNext;
    BOOL _hilitePrev;
    NSImage *_nextN;
    NSImage *_prevN;
    NSImage *_nextD;
    NSImage *_prevD;
    NSImage *_nextP;
    NSImage *_prevP;
    struct _NSRect _nextRect;
    struct _NSRect _prevRect;
    NSImage *_keyframe;
    NSAttributedString *_backStr;
    struct _NSRect _backStrRect;
    NSString *_mainString;
    NSString *_subString;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    NSDictionary *_pluralTitleAttrs;
    Ellipsizer *_pluralTitleEllipsizer;
    struct _NSRect _titleRect;
    struct _NSRect _unionRect;
    struct _NSRect _maxCenterRect;
    NSDictionary *_revealAttrs;
    NSDictionary *_hiliteRevealAttrs;
    struct _NSRect _revealRect;
    struct _NSRect _actualRevealRect;
    BOOL _hiliteReveal;
    BOOL _showReveal;
    NSDictionary *_dateAttrs;
    Ellipsizer *_dateEllipsizer;
    unsigned int _singleEventKey;
    unsigned int _firstKey;
    unsigned int _lastKey;
    struct __CFDateFormatter *_dateFormatter;
    NSColor *_titleColor;
    NSTextField *_inlineEditor;
    struct IPRoll *_inlineEditRoll;
    NSLock *_inlineEditUpdateLock;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (struct HeaderDisplayData)displayDataForEventKey:(unsigned long)fp8;
- (void)tile;
- (void)_goBack;
- (void)_goToNeighborEvent:(int)fp8;
- (void)_toggleRevealConceal;
- (void)_setKeyPhoto:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)drawPhoto:(struct IPPhotoInfo *)fp8 mainStr:(id)fp12 subStr:(id)fp16 inRect:(struct _NSRect)fp20 centered:(BOOL)fp36 measureOnly:(BOOL)fp40 titleRect:(struct _NSRect *)fp44 skipPopupArrows:(BOOL)fp48;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)removeFromSuperview;
- (void)setHidden:(BOOL)fp8;
- (void)undoRedoInlineCaptionEditForDB:(id)fp8 rollKey:(unsigned long)fp12 oldCaption:(id)fp16 newCaption:(id)fp20 undoManager:(id)fp24;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(struct IPRoll *)fp8;
- (BOOL)_control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_undoRedoMakeKeyPhotoForRoll:(id)fp8 oldPhotoKey:(unsigned long)fp12 newPhotoKey:(unsigned long)fp16 undoManager:(id)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;
- (id)mainString;
- (void)setMainString:(id)fp8;
- (id)subString;
- (void)setSubString:(id)fp8;

@end

@interface StraightenHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NSView *mStraightenHUDView;
    Edit *mEdit;
    HUDSlider *mStraightenSlider;
    TwoTargetButton *mLeftStraightenButton;
    TwoTargetButton *mRightStraightenButton;
    id mResetButton;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)intializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setEdit:(id)fp8;
- (void)initializeWithEditList:(id)fp8;
- (void)closeHUD:(id)fp8;
- (void)reset:(id)fp8;
- (void)optionKeyDown:(BOOL)fp8;
- (id)straightenSlider;

@end

@interface NonAutoSelectingTableView : NSTableView
{
    int mTabbingRow;
    int mTabbingColumn;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)setTabbingRow:(int)fp8 column:(int)fp12;

@end

@interface InfoGroupView : NSView
{
    NSImage *mGradientImage;
    NSButton *mDisclosureButton;
    float mDisclosedHeight;
    EtchedText *mTitleField;
    BOOL mHUDLook;
    int mNumberOfColoredRows;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setNumberOfColoredRows:(int)fp8;
- (BOOL)isFlipped;
- (BOOL)isDisclosed;
- (void)setDisclosed:(BOOL)fp8;
- (float)heightWithDisclosure;
- (void)addExtraHeight:(float)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 title:(id)fp24 target:(id)fp28;
- (void)setTitle:(id)fp8;
- (void)useHUDLook:(BOOL)fp8;

@end

@interface HUDHorizontalView : HUDView
{
    struct _NSRect mMessageDrawRect;
}

+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 delegate:(id)fp24 showClose:(BOOL)fp28;
- (void)drawRect:(struct _NSRect)fp8;
- (void)resizeToAccomodateSize:(struct _NSSize)fp8;
- (void)setMessage:(id)fp8;
- (void)setTitle:(id)fp8;
- (float)firstSubviewPosition;

@end

@interface KeywordPickerButton : NSButton
{
    BOOL mHighlight;
    unsigned int mModifiersFromLastClick;
    BOOL mMark;
}

- (BOOL)isFlipped;
- (id)font;
- (id)titleAttrs;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setMark:(BOOL)fp8;
- (void)highlight:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)modifiersFromLastClick;
- (void)setModifiersFromLastClick:(unsigned int)fp8;

@end

@interface NSString (BLURLAttributedString)
- (id)attributedStringForURL:(id)fp8;
@end

@interface NSMutableString (BLAdditions)
- (unsigned int)replaceOccurrencesOfCharactersInSet:(id)fp8 withString:(id)fp12;
@end

@interface NSString (BLAdditionsPrivate)
- (unsigned int)pTrailingIntegerSuffixLength;
@end

@interface NSString (BLAdditions)
+ (id)stringByBase64EncodingBytes:(const char *)fp8 length:(int)fp12;
+ (id)stringByBase64EncodingBytes:(const char *)fp8 length:(int)fp12 breakLines:(BOOL)fp16;
+ (id)stringFromCFUUID;
- (id)stringByPercentEscapesForMailtoURL;
- (id)stringByPercentEscapingForGetArgument;
- (id)possibleURLsForUserTypedString;
- (id)bestURLForUserTypedString;
- (id)bestURLStringForUserTypedString;
- (int)compareDomain:(id)fp8;
- (int)compareVersionString:(id)fp8;
- (void)drawDoubledInRect:(struct _NSRect)fp8 withTopColor:(id)fp24 bottomColor:(id)fp28 font:(id)fp32 centered:(BOOL)fp36 flipped:(BOOL)fp40;
- (id)stringByDeletingStartingSlash;
- (id)stringByDeletingTrailingSlash;
- (id)stringByDeletingTrailingInteger;
- (id)stringByStrippingLineEndings;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndAngleBrackets;
- (id)encodeStringBase64;
- (id)spaceSeparatedPrefix;
- (id)spaceSeparatedSuffix;
- (id)domainFromHost;
- (BOOL)isEndedWithNewline;
- (BOOL)isSyndicationScheme;
- (BOOL)isSyndicationURLString;
- (id)dispositionTypeFromContentDispositionHeader;
@end

@interface HUDViewElement : NSView
{
    short mDivideViewSides;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setDivideViewOnSides:(unsigned long long)fp8;
- (unsigned long long)divideViewOnSides;

@end

@interface ImageCache : NSObject
{
    NSString *m_name;
    NSImage *m_image;
    NSMutableDictionary *m_cachedParts;
    int m_leftSize;
    int m_middleSize;
    int m_rightSize;
    int m_spacing;
    int m_rowHeight;
    int m_blockWidth;
    int m_rowCount;
}

+ (id)imageCacheWithName:(id)fp8;
+ (void)registerImageCacheWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28;
+ (void)registerImageCacheWithName:(id)fp8 rows:(int)fp12;
+ (void)registerImageCacheWithName:(id)fp8 columns:(int)fp12 rows:(int)fp16;
- (id)imagePart:(int)fp8 state:(int)fp12 value:(int)fp16;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32 opacity:(float)fp36 leftEnd:(BOOL)fp40 rightEnd:(BOOL)fp44;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32 opacity:(float)fp36;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 state:(int)fp28 value:(int)fp32;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 column:(int)fp28 row:(int)fp32 opacity:(float)fp36;
- (void)drawInRect:(struct _NSRect)fp8 inView:(id)fp24 column:(int)fp28 row:(int)fp32;
- (int)height;
- (struct _NSSize)cellSize;
- (id)initWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28 columns:(int)fp32;
- (id)initWithName:(id)fp8 leftSize:(int)fp12 middleSize:(int)fp16 rightSize:(int)fp20 spacing:(int)fp24 rows:(int)fp28;
- (id)initWithName:(id)fp8 columns:(int)fp12 rows:(int)fp16;
- (void)dealloc;

@end

@interface NSObject (Additions)
+ (void)changeClass:(Class)fp8 superClassTo:(Class)fp12;
- (void)setValue:(id)fp8 forBinding:(id)fp12;
- (void)changeClassTo:(Class)fp8;
@end

@interface NSShadow (Additions)
+ (id)darkShadow;
+ (id)lightShadow;
+ (id)lightDarkShadow;
+ (id)mediumShadow;
@end

@interface PushButton : ThreePartButton
{
}

- (id)cacheName;
- (BOOL)addShadow;
- (int)interiorVOffset;

@end

@interface ThreePartButton : NSButton
{
}

- (id)cacheName;
- (int)interiorVOffset;
- (BOOL)disableSmoothing;
- (BOOL)addShadow;
- (void)drawBackgroundInFrame:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (id)initWithCoder:(id)fp8;

@end

@interface ThreePartButtonCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface WelcomeBottomView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface WelcomeTopView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)mouseDownCanMoveWindow;

@end

@interface WhatsNewController : NSObject
{
    WhatsNewPanel *m_panel;
    WebView *m_webView;
    NSTextField *m_titleString;
    BOOL _closing;
    BOOL _requestPending;
}

+ (void)displayImmediately:(BOOL)fp8;
- (void)showBlankPage;
- (BOOL)isClosing;
- (void)a_close:(id)fp8;
- (void)webView:(id)fp8 decidePolicyForNewWindowAction:(id)fp12 request:(id)fp16 newFrameName:(id)fp20 decisionListener:(id)fp24;
- (void)windowWillClose:(id)fp8;
- (void)a_moreDetails:(id)fp8;
- (void)showOfflinePage;
- (void)webView:(id)fp8 didReceiveTitle:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (id)initAndDisplayImmediately:(BOOL)fp8;
- (void)dealloc;

@end

@interface WhatsNewPanel : NSPanel
{
    BOOL mForceKey;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)releaseKeyWindow;
- (BOOL)isKeyWindow;

@end

@interface IPDotMacHeaderView : NSView
{
    Album *_album;
    NSImage *_bgArt;
    NSImage *_keyframe;
    NSImage *_keyframeSelected;
    struct _NSRect _keyRect;
    BOOL _hiliteKey;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    struct _NSRect _titleRect;
    NSDictionary *_infoAttrs;
    Ellipsizer *_infoEllipsizer;
    struct _NSRect _infoRect;
    struct _NSRect _addressRect;
    NSAttributedString *_titleStr;
    NSAttributedString *_infoStr;
    NSAttributedString *_addressStr;
    NSImage *_linkN;
    NSImage *_linkP;
    struct _NSRect _linkRect;
    BOOL _hiliteLink;
    int _infoRectTracking;
    NSProgressIndicator *_progress;
    NSString *_progressText;
}

- (id)titleStr;
- (void)setTitleStr:(id)fp8;
- (id)infoStr;
- (void)setInfoStr:(id)fp8;
- (id)addressStr;
- (void)setAddressStr:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (float)_maximumDurationStringWidth:(id)fp8;
- (void)tile;
- (void)showAlbumProgress;
- (void)hideAlbumProgress;
- (void)updateAlbumProgress;
- (void)_link;
- (void)_setKeyPhoto:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setHidden:(BOOL)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_undoRedoMakeKeyPhotoForAlbum:(id)fp8 oldUID:(id)fp12 newUID:(id)fp16 undoManager:(id)fp20;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;

@end

@interface TunesScroller : PVScroller
{
    float _alpha;
}

- (void)_loadImages;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)_isVertical;
- (BOOL)active;
- (void)drawArrow:(unsigned int)fp8 highlightPart:(unsigned int)fp12;
- (void)drawArrow:(unsigned int)fp8 highlight:(BOOL)fp12;
- (void)drawImage:(id)fp8 inRect:(struct _NSRect)fp12 fromRect:(struct _NSRect)fp28 operation:(unsigned int)fp44 fraction:(float)fp48 tileIfWide:(BOOL)fp52;
- (void)_drawHorzScaledWidgetInRect:(struct _NSRect)fp8 leftImage:(id)fp24 centerImage:(id)fp28 rightImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)_drawVertScaledWidgetInRect:(struct _NSRect)fp8 topImage:(id)fp24 centerImage:(id)fp28 bottomImage:(id)fp32 symbolImage:(id)fp36 operation:(unsigned int)fp40 fraction:(float)fp44 reduceAntiAliasing:(BOOL)fp48;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (float)alpha;
- (void)setAlpha:(float)fp8;

@end

@interface LatestEventAlbum : FilterAlbum
{
}

+ (void)initialize;
- (id)init;
- (void)encodeWithDictionary:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (BOOL)updateEnabled;
- (void)setUpdateEnabled:(BOOL)fp8;
- (BOOL)isEjectable;
- (void)eject;
- (id)ejectIcon:(BOOL)fp8;
- (id)ejectClickedIcon:(BOOL)fp8;
- (id)ejectHighlightedIcon:(BOOL)fp8;

@end

@interface AuxVideoController : NSObject
{
    ArchiveController *mController;
    unsigned int mAlbumKey;
}

- (id)initWithArchiveController:(id)fp8;
- (void)shutdown;
- (void)awakeFromNib;
- (unsigned int)numberOfAudioChannels;
- (void)setupSongForRemote:(struct MovieType **)fp8;
- (void)getOpenGLBufferContext:(struct _CGLContextObject **)fp8 pixelFormat:(struct _CGLPixelFormatObject **)fp12;
- (BOOL)renderIntoOpenGLBuffer:(struct __CVBuffer *)fp8 onScreen:(int *)fp12 forTime:(CDAnonymousStruct2 *)fp16;
- (void)_stateChanged:(id)fp8;
- (void)slideshowStarted;
- (void)slideshowEndedNotification:(id)fp8;

@end

@interface CalendarStoreLoader : NSObject
{
}

+ (BOOL)isCalendarStoreAvailable;
+ (Class)CalCalendarStoreClass;
+ (Class)CalEventClass;
+ (id)CalDeletedRecordsKey;
+ (id)CalEventsChangedExternallyNotification;
+ (id)CalEventsChangedNotification;
+ (id)CalInsertedRecordsKey;
+ (id)CalUpdatedRecordsKey;

@end

@interface BackupWrapper : NSObject
{
    void *stub__BUUserInvokedTimeMachine;
    void *stub_BURegisterStartTimeMachineFromDock;
    void *stub_BUStartTimeMachine;
    void *stub_BUTimeMachineAction;
    void *stub__CSBackupRegisterPreAndPostBackupHooks;
    void *stub_BURegisterActivateSnapshot;
    void *stub_BURegisterDeactivateSnapshot;
    void *stub_BURegisterTimeMachineDismissed;
    void *stub_BURegisterTimeMachineRestore;
    void *stub_BURegisterRequestSnapshotImage;
    void *stub_BUActivatedSnapshot;
    void *stub_BUDeactivatedSnapshot;
    void *stub_BUUpdateSnapshotImage;
    void *stub_BUUpdateGenericSnapshotImage;
    void *stub_BUInvalidateAllSnapshotImages;
    void *stub_BUTimeMachineSetRestoreAllowed;
}

+ (id)sharedBackupWrapper;
- (id)init;
- (void)userInvokedTimeMachine;
- (void)registerStartTimeMachineFromDock:(void *)fp8;
- (unsigned char)startupTimeMachineWithWindow:(unsigned int)fp8 url:(struct __CFURL *)fp12 options:(unsigned long)fp16;
- (void)action:(int)fp8;
- (void)registerPreBackupHook:(void *)fp8 postBackupHook:(void *)fp12;
- (void)registerActivateSnapshot:(const void *)fp8 callback:(void *)fp12;
- (void)registerDeactivateSnapshot:(const void *)fp8 callback:(void *)fp12;
- (void)registerTimeMachineDismissed:(const void *)fp8 callback:(void *)fp12;
- (void)registerTimeMachineRestore:(const void *)fp8 callback:(void *)fp12;
- (void)registerTimeMachineRequestSnapshot:(const void *)fp8 callback:(void *)fp12;
- (void)activatedSnapshotWithWindow:(unsigned int)fp8 url:(struct __CFURL *)fp12;
- (void)deactivatedSnapshotWithWindow:(unsigned int)fp8 url:(struct __CFURL *)fp12;
- (void)updateGenericSnapshotImage:(unsigned int)fp8;
- (void)invalidateAllSnapshotImages;
- (void)updateSnapshotImageWithWindow:(unsigned int)fp8 url:(struct __CFURL *)fp12;
- (void)setRestoreAllowed:(BOOL)fp8;

@end

@interface IPDetailWindowController : NSWindowController <IPMagnifierControllerDelegate>
{
    EtchedText *footer;
    NSButton *maxScaleButton;
    NSButton *minScaleButton;
    ThumbnailSizer *scaleSlider;
    IPDetailView *viewer;
    IWWindow *myWindow;
    unsigned int _eventKey;
    unsigned int _dbKey;
    IPMagnifierController *_magnifyController;
    ArchiveController *_archiveController;
}

+ (void)initialize;
+ (void)_addWindowToList:(id)fp8;
+ (void)_removeWindowFromList:(id)fp8;
+ (id)_findWindowForEvent:(unsigned long)fp8;
+ (id)findFirstDetailController;
+ (id)showDetailWindowForEvent:(struct IPRoll *)fp8;
+ (void)closeDetailWindowForEvent:(struct IPRoll *)fp8;
+ (void)closeAllDetailWindows;
+ (void)hideAllDetailWindows;
- (id)initWithEvent:(struct IPRoll *)fp8;
- (void)dealloc;
- (void)showMagnifierForPhotoAtIndex:(int)fp8 inList:(struct IPPhotoList *)fp12 startingFrom:(struct _NSRect)fp16;
- (id)controller;
- (struct _NSRect)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (BOOL)shelfContainsPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearShelf:(id)fp8;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)passEventToSourceList:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 forEvent:(id)fp12;
- (void)deleteCurrentPhoto:(struct IPPhotoInfo *)fp8;
- (void)toggleShowCaptions:(id)fp8;
- (void)toggleShowRankings:(id)fp8;
- (void)toggleShowKeywords:(id)fp8;
- (void)toggleShowFilmRolls:(id)fp8;
- (void)toggleShowHiddenPhotos:(id)fp8;
- (void)sortBy:(id)fp8;
- (void)sortDirectionAction:(id)fp8;
- (void)sortEvents:(id)fp8;
- (void)trashAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)photoViewer;
- (id)windowWillReturnUndoManager:(id)fp8;
- (id)windowNibName;
- (void)_startLiveResize:(id)fp8;
- (void)_endLiveResize:(id)fp8;
- (void)resizeThumbnails:(id)fp8;
- (void)setMinThumbSize:(id)fp8;
- (void)setMaxThumbSize:(id)fp8;
- (id)_makeFilterAlbum;
- (BOOL)photoListHasMovies:(struct IPPhotoList *)fp8;
- (void)updateStatus;
- (void)selectionChanged;
- (void)awakeFromNib;
- (void)refreshWindowForEvent:(struct IPRoll *)fp8;
- (void)refreshWindowTitle;
- (void)windowWillClose:(id)fp8;
- (unsigned long)eventKey;
- (void)setEventKey:(unsigned long)fp8;
- (unsigned long)dbKey;
- (void)setDbKey:(unsigned long)fp8;

@end

@interface IPDetailView : PhotoViewer
{
    unsigned int _rollKey;
}

- (void)awakeFromNib;
- (void)setup;
- (id)menuForEvent:(id)fp8;
- (void)setRollsVisible:(BOOL)fp8 rebuild:(BOOL)fp12;
- (void)setCurrentAlbum:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (unsigned long)rollKey;
- (void)setRollKey:(unsigned long)fp8;
- (unsigned long)viewerIndexForPhoto:(struct IPPhotoInfo *)fp8;
- (void)setViewerIndex:(unsigned long)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (unsigned long)viewerIndexForRoll:(struct IPRoll *)fp8;
- (void)setViewerIndex:(unsigned long)fp8 forRoll:(struct IPRoll *)fp12;

@end

@interface TimeMachineFileCopyHandler : NSObject
{
    ProgressController *mProgress;
}

- (id)initWithCount:(int)fp8;
- (void)dealloc;
- (void)fileManager:(id)fp8 willProcessPath:(id)fp12;

@end

@interface TimeMachineBrowser : NSWindowController
{
    ILMediaBrowserView *mMediaBrowser;
    struct _NSSize mEventThumbSize;
    struct _NSSize mThumbSize;
}

- (id)init;
- (void)dealloc;
- (id)canTerminate;
- (id)windowNibName;
- (void)windowDidLoad;
- (void)windowWillClose:(id)fp8;
- (void)mediaBrowserViewSelectionDidChange:(id)fp8;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaGroup:(id)fp12;
- (id)defaultLoadingMessage;
- (id)contextMenuForMediaObject:(id)fp8 defaultMenu:(id)fp12;
- (id)contextMenuForMediaGroup:(id)fp8 defaultMenu:(id)fp12;

@end

@interface WindowAnimator : NSObject
{
}

- (void)animateFrame;

@end

@interface MaskHUDController : NSObject
{
    HUDHorizontalView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NSView *mMaskHUDView;
    Edit *mEdit;
    NSTextField *mSizeTextLabel;
    NSTextField *mFlowTextLabel;
    NSTextField *mMagicTextLabel;
    NSTextField *mAutoChooseSourceTextLabel;
    id mClearMaskButton;
    HUDSlider *mSizeSlider;
    HUDSlider *mFlowSlider;
    NSPopUpButton *mMaskPopUp;
    HUDCheckboxButton *mMagicBrushCheckbox;
    HUDCheckboxButton *mAutoChooseSourceCheckbox;
    int mCurrentBrush;
    int mCurrentAccumulator;
    int mCurrentBrushTool;
    BOOL mShowBrushResults;
    BOOL mShowBrushStrokes;
    BOOL mUseMagicBrush;
    BOOL mAutoChooseSource;
    float mRadius;
    float mFlow;
    float mSensitivity;
    float mSoftness;
}

- (id)init;
- (void)dealloc;
- (void)populateMaskPopupMenu;
- (void)initializePanelSettings;
- (void)awakeFromNib;
- (void)initializeMainView;
- (void)closePanel;
- (void)showPanelCenteredOn:(struct _NSPoint)fp8;
- (void)showPanel;
- (void)layoutMainView;
- (BOOL)isVisible;
- (void)refresh;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)setEdit:(id)fp8;
- (void)onClearMask:(id)fp8;
- (void)onBrushRadiusChanged:(id)fp8;
- (void)onBrushFlowChanged:(id)fp8;
- (void)toggleMagicBrushCheckbox;
- (void)onClickMagicBrushCheckbox:(id)fp8;
- (void)onClickAutoChooseSourceCheckbox:(id)fp8;
- (void)onMouseDown:(id)fp8;
- (void)onMouseUp:(id)fp8;
- (void)updateBrushRadius:(float)fp8;
- (void)setAccumulatorAndToolFromBrushType;
- (void)onMaskType:(id)fp8;
- (int)currentAccumulator;
- (int)currentBrushTool;
- (BOOL)showBrushResults;
- (BOOL)showBrushStrokes;
- (BOOL)useMagicBrush;
- (BOOL)autoChooseSource;
- (float)radius;
- (float)flow;
- (float)sensitivity;
- (float)softness;
- (BOOL)handleKeyDown:(id)fp8;
- (void)setAutoChooseSource:(BOOL)fp8;
- (void)closeHUD:(id)fp8;
- (void)setHUDData:(id)fp8;
- (id)getHUDData;

@end

@interface MaskBrush : NSObject
{
    float mRadius;
    float mFlow;
    struct CGPath *mShape;
    struct CGColor *mColor;
    float mSoftness;
    BOOL mHard;
    struct CGImage *mMask;
    struct _NSPoint mLastPoint;
    float mLeftOverDistance;
}

- (id)init;
- (id)initWithRadius:(float)fp8 andColor:(float)fp12;
- (id)initWithRadius:(float)fp8 andColor:(float)fp12 andFlow:(float)fp16 andSoftness:(float)fp20;
- (void)dealloc;
- (struct CGContext *)createBitmapContext:(BOOL)fp8;
- (void)disposeBitmapContext:(struct CGContext *)fp8;
- (struct CGImage *)createShapeImage:(BOOL)fp8;

@end

@interface LocationInspector : NSObject
{
    ArchiveController *mArchiveController;
    NSWindow *mWindow;
    LocationController *mController;
    NSMutableArray *mLocationPanelNibObjects;
    struct MessageReceiver mMessageReceiver;
    BOOL mMessageReceiverCreated;
    id mGPSLatitude;
    id mGPSLongitude;
    id mGPSAltitude;
    id mLocationName;
    id mLocationCountry;
    id mLocationState;
    id mLocationCounty;
    id mLocationCity;
    id mLocationPostalCode;
    id mLocationStreet;
    NSButton *mUpdateLocationButton;
    NSPopUpButton *mLocationPopup;
    NSProgressIndicator *mSpinner;
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlay;
    struct IPSelectionList *mSelection;
    BOOL mHaveGPS;
    unsigned long mCurrentMagnifiedPhoto;
    BOOL mPreserveSearchResults;
    BOOL mIgnoreSelectionChanges;
    BOOL mMapCenteringDisabled;
    long mLastSelectedEvent;
    BOOL mDidHandleLocationChange;
    NSString *mLocationString;
    BOOL mLoading;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)_loadNibIfNeeded;
- (void)show;
- (void)_markPlacesAfterMapLoaded:(id)fp8;
- (void)hide;
- (void)_disableListeners;
- (BOOL)isVisible;
- (void)selectionChanged:(id)fp8;
- (void)handleEventLocationChange:(id)fp8;
- (void)startSearch:(id)fp8 basedOn:(id)fp12;
- (void)searchComplete:(id)fp8;
- (void)togglePathDrawing:(id)fp8;
- (void)_updatePanel;
- (void)clickedMapMarker:(id)fp8;
- (void)takeNewLocationFromMapMarker:(id)fp8;
- (void)webView:(id)fp8 didStartProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowDidResignKey:(id)fp8;

@end

@interface LocationController : NSObject
{
    LocationLookup *mLocationLookup;
    NSMutableArray *mRollBatchQueue;
    NSMutableDictionary *mTrackPoints;
    NSMutableArray *mTrackTimes;
    struct sqlite3 *_db;
    NSMutableArray *_gpsFetchQueue;
}

+ (id)sharedLocationController;
- (id)init;
- (void)dealloc;
- (void)performSearchWithLocation:(id)fp8 usingDB:(id)fp12 sender:(id)fp16;
- (void)performSecondarySearch:(id)fp8 basedOn:(id)fp12 usingDB:(id)fp16 sender:(id)fp20;
- (void)reverseLookupGeocodeForPhotos:(struct IPPhotoList *)fp8;
- (void)reprocessGPSTrackingDataForPhotos:(struct IPPhotoList *)fp8;
- (void)selectGPSTrackingDataForSelection:(struct IPSelectionList *)fp8;
- (void)clearGPSTrackingData;
- (void)addGPSTrackingDataFromPhoneForEvents:(struct IPSelectionList *)fp8;
- (void)addGPSTrackingDataToEvents:(struct IPSelectionList *)fp8;
- (void)_addGPSDataToEvents:(struct IPSelectionList *)fp8;
- (void)reverseLookupComplete:(id)fp8;
- (void)resolveEventLocationsForDB:(id)fp8;
- (void)_searchNextRollInQueue;
- (void)_consumeRollUpdateSearchResult:(id)fp8;
- (void)setLocationForGPSPhotosForDB:(id)fp8;
- (void)resolveGPSLocationForPhoto:(struct IPPhotoInfo *)fp8;
- (void)clearLocationForSelection:(struct IPSelectionList *)fp8;
- (void)reverseGeocodeSelection:(struct IPSelectionList *)fp8;
- (void)_getGPSForCities;
- (void)_gpsFetchTimer:(id)fp8;
- (void)cityGPSFetchComplete:(id)fp8;

@end

@interface GoogleAddressXMLParser : NSObject
{
    NSXMLParser *m_xmlParser;
    NSMutableArray *m_places;
    NSMutableDictionary *m_currentPlaceDictionary;
    NSMutableString *m_currentString;
    int m_result;
}

- (id)parseXMLFromURL:(id)fp8;
- (id)parseXMLFromString:(id)fp8;
- (void)dealloc;
- (int)result;
- (void)_initializeDictionary:(id)fp8;
- (void)parser:(id)fp8 didStartElement:(id)fp12 namespaceURI:(id)fp16 qualifiedName:(id)fp20 attributes:(id)fp24;
- (void)parser:(id)fp8 foundCharacters:(id)fp12;
- (void)parser:(id)fp8 didEndElement:(id)fp12 namespaceURI:(id)fp16 qualifiedName:(id)fp20;

@end

@interface GoogleMapWebView : WebView
{
    NSArray *mMarkerPlacesAfterLoad;
    int mZoomLevelAfterLoad;
    struct _NSSize mMapSizeAfterLoad;
    GoogleMapWebView *mMapCacheView;
    NSTimer *mMapCacheTimer;
    int mMapCacheIteration;
    BOOL mMapCachingSuspended;
    BOOL mAutocachingDisabled;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)loadWebPageForDelegate:(id)fp8;
- (void)reload;
- (id)getMarkerPosition;
- (struct _NSRect)getMapBounds;
- (struct _NSRect)getMapCorners;
- (struct _NSPoint)getCenter;
- (struct _NSPoint)getPixelLocationForCoordinates:(struct _NSPoint)fp8;
- (struct _NSPoint)getCoordinatesForPixelLocation:(struct _NSPoint)fp8;
- (BOOL)inLiveZoom;
- (BOOL)canZoomIn;
- (BOOL)canZoomOut;
- (int)getZoom;
- (void)setZoomLevel:(int)fp8;
- (void)setZoomLevel:(int)fp8 animate:(BOOL)fp12;
- (void)setCenterLatitude:(float)fp8 longitude:(float)fp12 andZoomToLevel:(int)fp16 forceAnimation:(BOOL)fp20;
- (void)setCenterLatitude:(float)fp8 longitude:(float)fp12;
- (void)panToLatitude:(float)fp8 longitude:(float)fp12;
- (void)panDirectionX:(int)fp8 Y:(int)fp12;
- (void)clearMarkers;
- (void)markPlaces:(id)fp8 type:(int)fp12 pan:(BOOL)fp16 connectPoints:(BOOL)fp20 clearExisting:(BOOL)fp24;
- (void)setPolylineVisible:(BOOL)fp8;
- (void)setAreaPolygonVisible:(BOOL)fp8;
- (void)showLatMin:(double)fp8 latMax:(double)fp16 longMin:(double)fp24 longMax:(double)fp32 shouldZoom:(BOOL)fp40;
- (void)showLatMin:(double)fp8 latMax:(double)fp16 longMin:(double)fp24 longMax:(double)fp32 shouldZoom:(BOOL)fp40 centerLat:(double)fp44 centerLong:(double)fp52;
- (void)showMarkers:(id)fp8 shouldZoom:(BOOL)fp12;
- (BOOL)isPageLoaded;
- (BOOL)needsToResize;
- (void)doPostLoadingWork:(BOOL)fp8;
- (void)doPostLoadingWork;
- (id)markerClicked;
- (void)setMapSize:(struct _NSSize)fp8;
- (struct _NSSize)getMapPixelSize;
- (id)getMapType;
- (void)setZoom:(id)fp8;
- (void)zoomIn:(id)fp8;
- (void)zoomOut:(id)fp8;
- (void)useNormalMap:(id)fp8;
- (void)useSatelliteMap:(id)fp8;
- (void)useTerrainMap:(id)fp8;
- (void)useHybridMap:(id)fp8;
- (void)showZoomControls:(id)fp8;
- (void)hideZoomControls:(id)fp8;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)addCacheInView:(id)fp8 atOrigin:(struct _NSPoint)fp12;
- (void)setCacheFrame:(struct _NSRect)fp8;
- (void)setAutocachingDisabled:(BOOL)fp8;
- (void)_setupCacheAfterLoading:(id)fp8;
- (void)refreshCacheForMapView;
- (void)refreshCacheForMapViewCenteringOnLatitude:(float)fp8 longitude:(float)fp12;
- (void)_cacheMapTiles:(id)fp8;
- (void)invalidateMapCacheTimer;
- (void)dealloc;
- (void)clampLatitude:(double *)fp8;
- (void)clampLongitude:(double *)fp8;
- (id)_callJavascript:(id)fp8 params:(id)fp12;
- (id)_callJavascript:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)validateDrag:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface LocationStats : NSObject
{
    NSMutableArray *_locationIdentifiers;
    NSMutableArray *_firstColumnIdentifiers;
    NSMutableArray *_placesList;
}

+ (id)home;
+ (id)homeWithFallback:(BOOL)fp8;
- (id)init;
- (id)placeIdentifiersForPhotos:(struct IPPhotoList *)fp8 rebuild:(BOOL)fp12;
- (id)photoIdentifiersForPhotos:(struct IPPhotoList *)fp8 rebuild:(BOOL)fp12;
- (void)gatherDataForPhotos:(struct IPPhotoList *)fp8;
- (BOOL)useProvinceAsCountry:(int)fp8;
- (BOOL)ignoreProvinceForCountry:(int)fp8;
- (BOOL)useCountyAsSubstateForProvince:(int)fp8;
- (id)firstColumnIdentifierForPhoto:(struct IPPhotoInfo *)fp8 inherit:(BOOL)fp12;
- (id)secondColumnIdentifierForPhoto:(struct IPPhotoInfo *)fp8 inherit:(BOOL)fp12;
- (id)thirdColumnIdentifierForPhoto:(struct IPPhotoInfo *)fp8 inherit:(BOOL)fp12;
- (id)fourthColumnIdentifiersForPhoto:(struct IPPhotoInfo *)fp8 inherit:(BOOL)fp12;
- (BOOL)containsMultipleLocations:(id)fp8;
- (int)numberOfLocationLevels;
- (id)topLevelLocationIdentifiers;
- (id)aggregateNameForType:(int)fp8 count:(int)fp12;
- (int)typeAtLevel:(int)fp8;
- (void)dealloc;

@end

@interface GPXParser : NSObject
{
    NSXMLParser *mParser;
    NSMutableDictionary *mTrackPoints;
    NSString *mCurrentString;
    NSDictionary *mCurrentAttributes;
}

- (id)_parseXMLFromData:(id)fp8;
- (id)parseFile:(id)fp8;
- (void)dealloc;
- (void)parser:(id)fp8 didStartElement:(id)fp12 namespaceURI:(id)fp16 qualifiedName:(id)fp20 attributes:(id)fp24;
- (void)parser:(id)fp8 foundCharacters:(id)fp12;
- (void)parser:(id)fp8 didEndElement:(id)fp12 namespaceURI:(id)fp16 qualifiedName:(id)fp20;
- (void)parserDidEndDocument:(id)fp8;
- (void)parser:(id)fp8 parseErrorOccurred:(id)fp12;

@end

@interface GLocalSearch : WebView
{
}

- (BOOL)isPageLoaded;
- (id)doLocalSearchComplete;
- (id)doGetGeocodeResult;
- (id)doGeocode:(id)fp8;
- (id)doLocalSearch:(id)fp8 nearString:(id)fp12;
- (id)doLocalSearch:(id)fp8 nearLat:(double)fp12 nearLng:(double)fp20;
- (id)_callJavascript:(id)fp8 params:(id)fp12;
- (id)_callJavascript:(id)fp8;
- (id)_cleanupParamsString:(id)fp8;

@end

@interface LocationMapOverlay : NSView
{
    GoogleMapWebView *mMapView;
    id mOwner;
    NSView *mWebViewTarget;
    BOOL mMapIsLoading;
    BOOL mNetworkAvailable;
    BOOL mSearchInProgress;
    NSDictionary *mMessageTitleFontAttributes;
    NSDictionary *mMessageBodyFontAttributes;
    NSDictionary *mTermsAttributes;
    NSDictionary *mTermsURLAttributes;
    BOOL mMarkerWasMoved;
    struct _NSRect mCurrentMapBounds;
    NSMutableArray *mMarkers;
    NSMutableArray *mMarkerGroups;
    LocationMapMarkerGroup *mActiveMarkerGroup;
    BOOL mMarkerGroupsNeedUpdate;
    BOOL mClickedInMarkerGroup;
    NSMutableArray *mTrackpoints;
    struct CGPath *mTrackPath;
    struct _NSPoint mTrackDropPoint;
    BOOL mDrawingDisabled;
    BOOL mDraggingDisabled;
    BOOL mPinDraggingDisabled;
    BOOL mPreventsEmptySelection;
    BOOL mPreventSelection;
    float mRegionHighlightRadius;
    NSTimer *_zoomTimer;
    NSTimer *mAnimator;
    NSMutableArray *mAnimationFrames;
    float mRegionLineWidth;
    LocationMapMarker *mSelectedMarker;
    LocationMapMarker *mHoverMarker;
    int mPhotoTrackingRect;
    NSImage *mPathImageCache;
    LocationMapMarker *_activeMarker;
    LocationMapMarker *_regionMarker;
    LocationMapMarker *_skimmingMarker;
    struct _NSPoint _markerMouseDownPoint;
    struct _NSPoint _markerMouseDownOffset;
    BOOL _markerMouseDownIsOnHandle;
    BOOL mPhotoDrawingEnabled;
    BOOL mSupportScrollWheel;
    NSMutableArray *mVisibleMarkers;
    struct _NSPoint mLastMousePoint;
    NSTimer *mClickDelayTimer;
    NSMutableDictionary *mMapNameDict;
    NSTimer *mMapNameLookupTimer;
    BOOL mIsNamedMap;
    BOOL mDoubleClickGoesToDelegate;
    BOOL mDisablePlaces;
    NSAttributedString *_placesText;
    NSAttributedString *_terrainText;
    NSAttributedString *_hybridText;
    NSAttributedString *_satelliteText;
    struct _NSRect _placesRect;
    struct _NSRect _terrainRect;
    struct _NSRect _hybridRect;
    struct _NSRect _satelliteRect;
    BOOL mShowNavBar;
    int mTrackingTag;
    BOOL mMouseInside;
    BOOL mClickedOnChevron;
    NSImage *mOfflineMap;
    NSImage *mGoogle;
    NSLock *mResourceCounterLock;
    int mResourceCounter;
    NSView *_stickyView;
}

+ (id)sortingSeed;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)disablePlaces:(BOOL)fp8;
- (void)setDoubleClickGoesToDelegate:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)_drawTracksInRect:(struct _NSRect)fp8;
- (void)_drawShadingInRect:(struct _NSRect)fp8;
- (void)_drawRegionHighlightInRect:(struct _NSRect)fp8;
- (struct CGRect)_ellipseRectForBounds:(struct _NSRect)fp8 zoomToFit:(BOOL)fp24;
- (void)loadWebPageAsDelegate;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)startListeningForNetwork;
- (void)endListeningForNework;
- (void)_hostStatusNotification:(id)fp8;
- (void)setNetworkAvailable:(BOOL)fp8;
- (void)setMapIsLoading:(BOOL)fp8;
- (id)webView:(id)fp8 resource:(id)fp12 willSendRequest:(id)fp16 redirectResponse:(id)fp20 fromDataSource:(id)fp24;
- (void)webView:(id)fp8 resource:(id)fp12 didFinishLoadingFromDataSource:(id)fp16;
- (void)webView:(id)fp8 decidePolicyForNewWindowAction:(id)fp12 request:(id)fp16 newFrameName:(id)fp20 decisionListener:(id)fp24;
- (void)setSearchInProgress:(BOOL)fp8;
- (void)setDrawingDisabled:(BOOL)fp8;
- (void)setPhotoDrawingEnabled:(BOOL)fp8;
- (void)setDraggingDisabled:(BOOL)fp8;
- (void)setSelectionDisabled:(BOOL)fp8;
- (void)setPinDraggingDisabled:(BOOL)fp8;
- (void)setPreventsEmptySelection:(BOOL)fp8;
- (void)setRegionHighlightRadius:(float)fp8;
- (void)setRegionHighlightLineWidth:(float)fp8;
- (float)defaultRadiusAtCurrentZoomLevel;
- (id)overlappingMarkerList;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (id)hitTest:(struct _NSPoint)fp8;
- (void)mouseDown:(id)fp8;
- (void)_performPhotoClickForActiveMarker;
- (void)_performDoubleClickForActiveMarker;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)setSupportsScrollWheel:(BOOL)fp8;
- (void)scrollWheel:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (struct _NSPoint)centerPoint;
- (void)_zoomMarkerGroup:(id)fp8;
- (void)_switchToDetailForProximityRect;
- (void)setMapIsNamed:(BOOL)fp8;
- (id)mapNameDictionary;
- (void)_getMapName:(id)fp8;
- (void)showSticky:(BOOL)fp8;
- (BOOL)validateDrag:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)resetTrackingRect;
- (void)setShowsNavBar:(BOOL)fp8;
- (id)selectedMarker;
- (void)clearMarkers;
- (void)clearSelectedMarker;
- (id)allMarkers;
- (id)visibleMarkers;
- (id)zoomMarker;
- (void)removeMarkerForPlace:(id)fp8;
- (void)changeMarkerForPlace:(id)fp8 toType:(int)fp12;
- (void)selectMarkerAtIndex:(int)fp8;
- (void)markPlaces:(id)fp8 type:(int)fp12 clearExisting:(BOOL)fp16 animate:(BOOL)fp20;
- (void)addMarkers:(id)fp8 clearExisting:(BOOL)fp12 grouped:(BOOL)fp16;
- (void)_recomputeMarkerGroups;
- (void)watchForZoomEnd;
- (void)_checkZoom;
- (void)_createMarkerGroupFromMarkers:(id)fp8;
- (void)momentarilyMarkPlace:(id)fp8;
- (void)removeMomentaryMarker;
- (void)_adjustMomentaryPinLocation:(id)fp8;
- (void)clearTrackpoints;
- (void)addTrackpoints:(id)fp8;
- (void)setMapView:(id)fp8;
- (void)dealloc;
- (id)stickyView;
- (void)setStickyView:(id)fp8;

@end

@interface LocationCommon : NSObject
{
}

+ (id)descriptionForPlace:(id)fp8;
+ (void)stringToLatLng:(id)fp8 lat:(float *)fp12 lng:(float *)fp16;
+ (double)distanceFrom:(double)fp8 lng1:(double)fp16 lat2:(double)fp24 lng2:(double)fp32;
+ (struct _NSPoint)locationAlongLatitudeOfGivenDistance:(float)fp8 fromCoordinate:(struct _NSPoint)fp12;
+ (struct _NSRect)mapRectCenteredOnCoordinate:(struct _NSPoint)fp8 withRadius:(float)fp16;
+ (struct _NSPoint)pixelCoordinatesForGPSLocation:(struct _NSPoint)fp8 inMapBounds:(struct _NSRect)fp16 withFrame:(struct _NSRect)fp32;
+ (struct _NSPoint)gpsCoordinatesForPixelLocation:(struct _NSPoint)fp8 inMapBounds:(struct _NSRect)fp16 withFrame:(struct _NSRect)fp32;
+ (void)addFormattedStringsForAddress:(id)fp8 includePersonOrPlace:(BOOL)fp12;
+ (id)itemLabelForIndex:(int)fp8;
+ (void)addGeoHierarchy:(id)fp8 inDB:(id)fp12;
+ (int)getPrimaryKeyForGeoType:(id)fp8 inDB:(id)fp12;
+ (void)setLocationForPhoto:(struct IPPhotoInfo *)fp8 fromDict:(id)fp12 name:(id)fp16 preserveExistingData:(BOOL)fp20;
+ (void)setLocationForDevicePhoto:(struct IPPhotoInfo *)fp8 fromDict:(id)fp12 name:(id)fp16 preserveExistingData:(BOOL)fp20;
+ (void)setLocationForPhoto:(struct IPPhotoInfo *)fp8 fromHierarchy:(id)fp12 name:(id)fp16 preserveExistingData:(BOOL)fp20;
+ (void)setLocationForPhoto:(struct IPPhotoInfo *)fp8 fromUserPlaceKey:(unsigned int)fp12;
+ (id)inheritedlocationDictFromPhoto:(struct IPPhotoInfo *)fp8;
+ (id)locationDictFromPhoto:(struct IPPhotoInfo *)fp8;
+ (id)searchDictFromPhoto:(struct IPPhotoInfo *)fp8;
+ (void)setLocationForRoll:(struct IPRoll *)fp8 fromDict:(id)fp12 name:(id)fp16 preserveExistingData:(BOOL)fp20;
+ (void)setLocationForRoll:(struct IPRoll *)fp8 fromHierarchy:(id)fp12 name:(id)fp16 preserveExistingData:(BOOL)fp20;
+ (void)setLocationForRoll:(struct IPRoll *)fp8 fromUserPlaceKey:(unsigned int)fp12;
+ (id)locationDictFromRoll:(struct IPRoll *)fp8;
+ (id)searchDictFromRoll:(struct IPRoll *)fp8;
+ (void)assignLocationDict:(id)fp8 toRoll:(struct IPRoll *)fp12;
+ (id)locationForiegnKeyDictFromPhoto:(struct IPPhotoInfo *)fp8;
+ (void)assignLocationForiegnKeyDict:(id)fp8 toPhoto:(struct IPPhotoInfo *)fp12;
+ (void)recomputeLocationBoundsForEvent:(struct IPRoll *)fp8;
+ (void)determineLocationForEventIfNecessary:(struct IPRoll *)fp8;
+ (void)determineLocationForEvent:(struct IPRoll *)fp8 photos:(struct IPPhotoList *)fp12;
+ (int)predominantCountryForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantProvinceForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantCountyForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantCityForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantNeighborhoodForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantAOIForPhotos:(struct IPPhotoList *)fp8;
+ (int)predominantPOIForPhotos:(struct IPPhotoList *)fp8;
+ (BOOL)gpsDataExistsForPhotos:(struct IPPhotoList *)fp8;
+ (id)queryStringByParsingString:(id)fp8;
+ (id)userDefaultCity;

@end

@interface LocationStringParser : NSObject
{
}

- (BOOL)_wordIsOKForQuery:(id)fp8;
- (id)_parseIntoWords:(id)fp8;
- (id)_combineWordsIntoQueries:(id)fp8;
- (id)_queryForPointsOfInterest:(id)fp8;
- (id)_findBestAnswer:(id)fp8 forQueries:(id)fp12;
- (id)init;
- (void)dealloc;
- (id)parse:(id)fp8 nearBy:(id *)fp12;
- (id)translateSpot:(id)fp8;

@end

@interface AddressBookLookup : NSObject
{
    NSMutableArray *mAddresses;
    NSDictionary *mHomeAddress;
    BOOL mLoaded;
}

- (id)init;
- (void)dealloc;
- (id)_safeObjectForKey:(id)fp8;
- (id)_addAddress:(id)fp8;
- (id)_addressEntryString:(id)fp8 homeCountry:(id)fp12;
- (id)_locationAliasEntry:(id)fp8 homeCountry:(id)fp12;
- (id)_addresses;
- (id)addressBookLookup:(id)fp8 exactMatch:(BOOL)fp12;
- (id)homeAddress;
- (BOOL)_query:(id)fp8 matches:(id)fp12 useExactMatch:(BOOL)fp16;

@end

@interface AsyncGeocodeLookup : NSObject
{
    struct _opaque_pthread_mutex_t mLock;
    struct _opaque_pthread_cond_t mCond;
    NSMutableArray *mQueue;
    BOOL m_running;
}

- (id)_doGeocode:(id)fp8;
- (id)_doReverseGeocode:(id)fp8 overridePrivacy:(BOOL)fp12;
- (void)_process:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)pushRequest:(id)fp8;
- (void)stop;
- (void)restart;

@end

@interface LocationLookup : NSObject
{
    NSTimer *m_timer;
    int m_queueState;
    NSMutableArray *m_queue;
    GLocalSearch *m_localSearch;
    AsyncGeocodeLookup *m_asyncGeocodeLookup;
    NSArray *m_savedReverseResult;
}

+ (id)reverseGeocodeHostName;
- (id)_encodeQueryStringData:(id)fp8;
- (id)_decodeQueryStringData:(id)fp8;
- (void)_notifyCaller:(id)fp8 results:(id)fp12 type:(id)fp16 info:(id)fp20;
- (id)_sortResults:(id)fp8;
- (void)_localLookupTimer:(id)fp8;
- (void)_pushRequest:(id)fp8;
- (id)init;
- (id)initWithAsyncEnabled:(BOOL)fp8;
- (void)dealloc;
- (void)lookupComplete:(id)fp8;
- (void)reverseGeocodeChanged:(id)fp8;
- (id)addressBookLookup:(id)fp8 exactMatch:(BOOL)fp12 db:(id)fp16;
- (void)performGeocodeAddress:(id)fp8 object:(id)fp12 reference:(id)fp16;
- (void)performReverseGeocodeFromLatitude:(float)fp8 longitude:(float)fp12 date:(double)fp16 object:(id)fp24 reference:(id)fp28 type:(int)fp32 isUserData:(BOOL)fp36;
- (void)stopAsyncLookup;
- (void)restartAsyncLookup;
- (void)performCloudLookupWithID:(int)fp8 andType:(int)fp12 object:(id)fp16 reference:(id)fp20;
- (void)performLocalSearch:(id)fp8 near:(id)fp12 object:(id)fp16 usingDB:(id)fp20;
- (void)performLocalSearch:(id)fp8 nearLat:(float)fp12 nearLng:(float)fp16 object:(id)fp20 reference:(id)fp24;
- (id)sortByDecreasingAccuracy:(id)fp8;
- (id)homeAddress;
- (id)homeAddressIfResolved;
- (BOOL)homeAddressIsUnknown;

@end

@interface LocationAssignmentController : NSObject
{
    NSPanel *mPanel;
    NSTextField *mNameField;
    id mAddressInfo;
    NSSearchField *mSearchField;
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlay;
    NSTableView *mResultsTable;
    NSSlider *mZoomSlider;
    id mMapTypeStreetButton;
    id mMapTypeSatelliteButton;
    id mMapTypeTerrainButton;
    id mDoneButton;
    id mCancelButton;
    NSProgressIndicator *mSearchSpinner;
    LocationLookup *mLookup;
    LocationData *mLocationData;
    NSMutableArray *mSearchResults;
    NSMutableDictionary *mSelectedResult;
    NSMutableArray *mOptionalSearchPoints;
    float mRegionRadius;
    ImageDB *mDB;
    void *mEvent;
    NSTimer *mSearchTimer;
    BOOL mSearchInProgress;
    NSLock *mSearchLock;
}

+ (id)sharedController;
- (void)_pageLoadedTimer:(id)fp8;
- (void)_startPageLoadedTimer;
- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (void)_hostStatusNotification:(id)fp8;
- (void)startSearch:(id)fp8;
- (void)searchComplete:(id)fp8;
- (void)newLocationDataReceived:(id)fp8;
- (void)_updateAddressInfo;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)showSheetInWindow:(id)fp8 withQuery:(id)fp12 near:(id)fp16 forEvent:(void *)fp20 forDB:(id)fp24;
- (void)showSheetInWindow:(id)fp8 withLocation:(id)fp12 forEvent:(void *)fp16 forDB:(id)fp20;
- (void)setZoom:(id)fp8;
- (void)clickedMapMarkerAtIndex:(id)fp8;
- (void)markerWasMoved:(id)fp8;
- (void)handleLocationAssignment:(id)fp8;
- (void)cancelLocationAssignment:(id)fp8;
- (void)_locationAssignmentCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)controlTextDidChange:(id)fp8;
- (void)_fireSearchAction:(id)fp8;
- (void)performSearchAction:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;

@end

@interface LocationCompletionMenu : NSView
{
    NSTextField *mEditorField;
    NSTextView *mEditorView;
    NSMutableArray *mItems;
    NSTableView *mTableView;
    NSTableColumn *mTableColumn;
    LocationData *mLocationData;
    NSString *mRootString;
    LocationMapPopupView *mPopupMapView;
    NSButton *mLookupButton;
    NSProgressIndicator *mProgress;
    NSTextField *mHeaderText;
    ImageDB *mDB;
    unsigned int mKey;
    int mLocSrcType;
    NSString *mCurrentSearchString;
    NSString *mCurrentLocationName;
    NSTimer *mMapLookupTimer;
    int mNumberOfMatchingKnownLocations;
    NSTimer *mAnimator;
    float mStartingHeight;
    float mTargetHeight;
    int mElapsedFrames;
    int mTotalFrames;
    BOOL mIsAnimating;
    BOOL mNeedsToAnimate;
    BOOL mResizesWindow;
    struct _NSRect mOriginalWindowFrame;
    id mMenuOwner;
    BOOL mIncludeAddressBookData;
    struct _NSPoint mDistanceSortingPoint;
}

- (void)initializeWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 textField:(id)fp24;
- (id)initWithFrame:(struct _NSRect)fp8 textView:(id)fp24;
- (void)setWindowFrame:(struct _NSRect)fp8;
- (void)setEditorField:(id)fp8;
- (void)setEditorView:(id)fp8;
- (void)dealloc;
- (void)setDB:(id)fp8;
- (void)setKey:(unsigned long)fp8 fromSource:(int)fp12;
- (void)setIncludeAddressBookData:(BOOL)fp8;
- (void)setDistanceSortingPoint:(struct _NSPoint)fp8;
- (void)setResizesWindow:(BOOL)fp8 owner:(id)fp12;
- (void)updateForRoll:(struct IPRoll *)fp8 withCaption:(id)fp12;
- (void)updateForText:(id)fp8 forceLocalDatabaseUse:(BOOL)fp12;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)assignLocationDictionary:(id)fp8;
- (void)setEmptyLocation;
- (void)setLocationFromSelection;
- (id)rootString;
- (void)clearItems:(BOOL)fp8;
- (void)addItems:(id)fp8;
- (void)addItemsWithMatchingString:(id)fp8 forceLocalDatabaseUse:(BOOL)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (void)hideMenu:(id)fp8;
- (void)selectFirstItem;
- (void)selectNextItem;
- (void)selectPreviousItem;
- (void)performLookupAction:(id)fp8;
- (void)locationSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)adjustViewSize;
- (void)_animateMenuHeight:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)keyDown:(id)fp8;

@end

@interface LocationCompletionTableView : NSTableView
{
}

- (void)mouseDown:(id)fp8;
- (void)_internalTrackMouse:(id)fp8;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;

@end

@interface LocationMenuActionCell : NSButtonCell
{
}

- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface LocationMenuInfoCell : NSCell
{
    BOOL mIncludeIcon;
    BOOL mLightBackground;
    BOOL mShowsEmptyTitle;
    BOOL mIsTrackingButton;
    BOOL mButtonClicked;
    int mButtonType;
}

+ (void)_drawTitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
+ (void)_drawSubtitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (id)init;
- (void)useLightBackground:(BOOL)fp8;
- (void)setButtonType:(int)fp8;
- (struct _NSRect)_titleTextRectForCellFrame:(struct _NSRect)fp8;
- (struct _NSRect)_buttonRectForCellFrame:(struct _NSRect)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)includeIcon:(BOOL)fp8;
- (void)setShowsEmptyTitle:(BOOL)fp8;
- (BOOL)showsEmptyTitle;
- (BOOL)trackMouseForButtonEvent:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28;
- (BOOL)trackMouse:(id)fp8 inRect:(struct _NSRect)fp12 ofView:(id)fp28 untilMouseUp:(BOOL)fp32;

@end

@interface BrushStrokeFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputLowColor;
    NSNumber *inputHighColor;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)outputImage;

@end

@interface EraseBlendFilter : CIFilter
{
    CIImage *inputImage;
    CIImage *inputBackgroundImage;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)outputImage;

@end

@interface RKGaussianMagicPenFilter : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    CIVector *inputSamplePoint;
    CIColor *inputColor0;
    CIColor *inputColor1;
    NSNumber *inputRadius;
    NSNumber *inputSoftness;
    NSNumber *inputSensitivity;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)outputImage;
- (struct CGRect)regionOf:(int)fp8 destRect:(struct CGRect)fp12;

@end

@interface RKGaussianPenFilter : CIFilter
{
    CIVector *inputCenter;
    CIColor *inputColor0;
    CIColor *inputColor1;
    NSNumber *inputRadius;
    NSNumber *inputSoftness;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)outputImage;

@end

@interface IPInvocationQueue : NSObject
{
    struct vector<IQEntry, std::allocator<IQEntry>> *_processQueue;
    int _busyThreads;
    BOOL _started;
    BOOL _cancelled;
    NSTimer *_timer;
    struct vector<long unsigned int, std::allocator<long unsigned int>> *_active;
    NSCondition *_processLock;
}

+ (long)numProcessors;
- (id)init;
- (void)dealloc;
- (void)startUsingTimer;
- (void)startUsingOneThread;
- (void)startUsingProcessorCountThreads;
- (void)stop;
- (void)queueAction:(id)fp8 key:(unsigned int)fp12 target:(id)fp16 action:(SEL)fp20 returnsObject:(BOOL)fp24 insertAtHead:(BOOL)fp28;
- (void)emptyQueue;
- (BOOL)queueHasActionWithKey:(unsigned int)fp8 active:(char *)fp12 moveToHead:(BOOL)fp16;
- (BOOL)unqueueActionWithKey:(unsigned int)fp8;
- (int)queueCount:(int *)fp8;
- (BOOL)_processOne;
- (void)_processThread;

@end

@interface ImportImage : NSObject
{
    unsigned int _imageFormat;
    struct CGImage *_imageRef;
    void *_raster;
    unsigned long _rasterSize;
    unsigned long _rowBytes;
    unsigned int _pixelFormat;
    int _componentDepth;
    int _pixelDepth;
    char **_colorProfile;
    float _imageWidth;
    float _imageHeight;
    ImageUserData *_imageUserData;
    float _autoRotation;
    float _movieDuration;
    NSString *_rawMethodVersion;
    unsigned int _key;
    NSString *_path;
    float _scaleToSize;
    BOOL _readUserData;
    BOOL _mainThreadSuccess;
}

+ (id)importImageFromImportImage:(id)fp8 scaleToSize:(float)fp12 rotateTo:(float)fp16 convertColor:(BOOL)fp20;
+ (id)importImageFromImportResource:(id)fp8 forImageFormat:(unsigned long)fp12 readUserData:(BOOL)fp16;
+ (id)importImageFromImportResource:(id)fp8 forImageFormat:(unsigned long)fp12 scaleToSize:(float)fp16 readUserData:(BOOL)fp20;
+ (id)importImageFromImportResource:(id)fp8 forImageFormat:(unsigned long)fp12 quarterSized:(BOOL)fp16 readUserData:(BOOL)fp20;
+ (id)importImageFromMovieFile:(id)fp8 key:(long)fp12 scaleToSize:(float)fp16;
+ (id)importImageFromFile:(id)fp8 key:(long)fp12 forImageFormat:(unsigned long)fp16 scaleToSize:(float)fp20 readUserData:(BOOL)fp24 wait:(BOOL)fp28;
+ (id)imageUserDataFromImportResource:(id)fp8 forImageFormat:(unsigned long)fp12 andImageSize:(struct CGSize *)fp16;
+ (id)imageUserDataFromFile:(id)fp8 forImageFormat:(unsigned long)fp12 andImageSize:(struct CGSize *)fp16;
- (id)_initWithImageFormat:(unsigned long)fp8;
- (void)_mainThreadReadUserDataFromImportResource:(id)fp8;
- (id)_readUserDataFromImportResource:(id)fp8 andImageSize:(struct CGSize *)fp12;
- (id)_readUserDataFromFile:(id)fp8 andImageSize:(struct CGSize *)fp12;
- (void)_mainThreadDecodeQTFromImportResource:(id)fp8;
- (BOOL)_decodeQTFromImportResource:(id)fp8 scaleToSize:(float)fp12 readUserData:(BOOL)fp16;
- (void)_previewImageFromMovieFile;
- (void)_decodeQTFromFile:(id)fp8 key:(long)fp12 scaleToSize:(float)fp16 readUserData:(BOOL)fp20 wait:(BOOL)fp24;
- (BOOL)_createImageFromImportImage:(id)fp8 scaleToSize:(float)fp12 rotateTo:(float)fp16 convertColor:(BOOL)fp20;
- (char **)colorProfile;
- (void)setColorProfile:(char **)fp8;
- (void)setColorProfileToCopy:(char **)fp8;
- (BOOL)_decodeQTWithGrip:(struct ComponentInstanceRecord *)fp8 scaleToSize:(float)fp12 readUserData:(BOOL)fp16;
- (BOOL)_allocateRaster;
- (BOOL)_createCGImageIfNecessary;
- (BOOL)_createCGImage;
- (void)_imageSizeToScaleToSize:(float)fp8;
- (struct ComponentInstanceRecord *)_findAndOpenGrip:(short *)fp8;
- (BOOL)_decodeImageIOFromImportResource:(id)fp8 quarterSized:(BOOL)fp12 scaleToSize:(float)fp16 readUserData:(BOOL)fp20;
- (id)rawMethodVersion;
- (int)writeToFile:(id)fp8 withImageFormat:(unsigned long)fp12 writeUserData:(BOOL)fp16;
- (void)dealloc;
- (id)imageUserData;
- (void)setImageUserData:(id)fp8;
- (unsigned long)imageFormat;
- (struct CGImage *)imageRef;
- (float)imageWidth;
- (float)imageHeight;
- (struct CGSize)imageSize;
- (float)movieDuration;
- (void)setMovieDuration:(float)fp8;
- (float)autoRotation;
- (void)drawInRect:(struct CGRect)fp8;
- (id)nsImage;

@end

@interface ImportManager : NSObject
{
    ImportSession2 *_currentSession;
    NSMutableArray *_importQueue;
}

+ (id)sharedImportManager;
+ (BOOL)importIsRunning;
+ (BOOL)checkLibraryForImport:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)importFiles:(id)fp8 toDB:(id)fp12 toAlbum:(id)fp16 forceCopy:(BOOL)fp20 deleteSource:(BOOL)fp24 albumDeleteOnCancel:(BOOL)fp28 reference:(int)fp32 allowLibraryImport:(BOOL)fp36;
- (void)importAlbums:(struct IPAlbumList *)fp8 toDB:(id)fp12;
- (void)importPhotos:(struct IPPhotoList *)fp8 toDB:(id)fp12 toAlbum:(id)fp16;
- (void)importFromPhotoCDAlbum:(id)fp8 toDB:(id)fp12 photos:(struct IPPhotoList *)fp16 referenceObj:(id)fp20 toAlbum:(id)fp24 deleteAlbumOnCancel:(BOOL)fp28 eventName:(id)fp32 eventDesc:(id)fp36;
- (void)importFromCameraAlbum:(id)fp8 toDB:(id)fp12 photos:(struct IPPhotoList *)fp16 allPhotos:(BOOL)fp20 referenceObj:(id)fp24 toAlbum:(id)fp28 deleteAlbumOnCancel:(BOOL)fp32 eventName:(id)fp36 eventDesc:(id)fp40;
- (BOOL)_checkDiskSpaceForDB:(id)fp8 copy:(BOOL)fp12;
- (void)duplicatePhotos:(struct IPPhotoList *)fp8 toDB:(id)fp12 toAlbum:(id)fp16;
- (void)_importStartNotification:(id)fp8;
- (void)_importComplete:(id)fp8;
- (void)userImportFilesToDB:(id)fp8;

@end

@interface QueuedImportSession : NSObject
{
    ImportSession2 *_session;
    NSArray *_files;
    struct IPPhotoList *_photos;
    Album *_cameraAlbum;
    Album *_photoCDAlbum;
}

- (id)initWithImportSession:(id)fp8;
- (void)dealloc;

@end

@interface ReadAheadJob : NSObject
{
    NSString *_path;
    void *_data;
    BOOL _asHandle;
    char **_hData;
    int _dataLength;
    long _key;
    BOOL _requested;
}

- (id)initWithPath:(id)fp8 andKey:(long)fp12;
- (id)path;

@end

@interface ImportJob : NSObject
{
    NSString *_path;
}

- (id)initWithPath:(id)fp8;
- (void)dealloc;
- (id)path;

@end

@interface ImportIO : NSObject
{
    struct _opaque_pthread_mutex_t _readJobLock;
    struct _opaque_pthread_cond_t _readJobCond;
    struct _opaque_pthread_mutex_t _writeJobLock;
    struct _opaque_pthread_cond_t _writeJobCond;
    struct _opaque_pthread_mutex_t _downloadJobLock;
    struct _opaque_pthread_cond_t _downloadJobCond;
    struct _opaque_pthread_mutex_t _cacheJobLock;
    struct _opaque_pthread_cond_t _cacheJobCond;
    NSMutableArray *_readJobs;
    NSMutableArray *_writeJobs;
    NSMutableArray *_downloadJobs;
    NSMutableArray *_cacheJobs;
    struct ReadAheadTask *_readAheadTask;
}

+ (BOOL)isRootDiskAtPath:(id)fp8;
+ (long long)diskSpaceAvailableAtPath:(id)fp8;
+ (long long)diskBlocksAvailableAtPath:(id)fp8 blockSize:(long long *)fp12;
+ (id)sharedImportIO;
- (id)init;
- (void)dealloc;
- (void)startReadAheadTask:(id)fp8;
- (void)waitForAndFinisReadAheadTask;
- (id)waitForReadPermFromPath:(id)fp8;
- (id)waitForWritePermToPath:(id)fp8;
- (id)waitForDownloadPermToPath:(id)fp8;
- (id)waitForCachePermToPath:(id)fp8;
- (void)finishedDownloadJob:(id)fp8;
- (void)finishedCacheJob:(id)fp8;
- (void)finishedWriteJob:(id)fp8;
- (void)finishedReadJob:(id)fp8;
- (id)syncDataReadForFile:(id)fp8 key:(long)fp12 avoidGlobalCache:(BOOL)fp16 useReadAhead:(BOOL)fp20;
- (char **)syncHandleReadForFile:(id)fp8 key:(long)fp12 avoidGlobalCache:(BOOL)fp16 useReadAhead:(BOOL)fp20;
- (struct WriteTask *)asyncWriteForImportResource:(id)fp8 fromFile:(id)fp12 toFile:(id)fp16 key:(long)fp20 avoidGlobalCache:(BOOL)fp24;
- (struct WriteTask *)asyncWriteForFile:(id)fp8 toFile:(id)fp12 key:(long)fp16 avoidGlobalCache:(BOOL)fp20;
- (int)syncWriteForImportImage:(id)fp8 toFile:(id)fp12 actualPath:(id *)fp16 withImageFormat:(unsigned long)fp20 key:(long)fp24 avoidGlobalCache:(BOOL)fp28 writeUserData:(BOOL)fp32;
- (int)syncWriteForImportResource:(id)fp8 toFile:(id)fp12 actualPath:(id *)fp16 key:(long)fp20 avoidGlobalCache:(BOOL)fp24;
- (int)syncWriteForFile:(id)fp8 toFile:(id)fp12 actualPath:(id *)fp16 key:(long)fp20 avoidGlobalCache:(BOOL)fp24;
- (void)_writeAliasOnMainThread:(id)fp8;
- (int)syncCreateAliasFileForPath:(id)fp8 atAliasPath:(id)fp12 actualPath:(id *)fp16;

@end

@interface AliasObject : NSObject
{
    NSString *mSourcePath;
    NSString *mAliasPath;
    int mError;
}

- (void)dealloc;

@end

@interface ImportUtils : NSObject
{
}

+ (BOOL)imageIOIsRawImageFormat:(unsigned long)fp8 path:(id)fp12;
+ (BOOL)imageIOIsExtension:(struct __CFString *)fp8 ofType:(struct __CFString *)fp12 forPath:(id)fp16;
+ (unsigned int)bitsPerPixelForFormat:(unsigned long)fp8;
+ (unsigned int)bitsPerComponentForFormat:(unsigned long)fp8;
+ (unsigned long)loadableImageFormatAtPath:(id)fp8;
+ (unsigned long)getImageFormatForExtension:(id)fp8;
+ (unsigned long)imageIOFormatForExtension:(struct __CFString *)fp8;
+ (BOOL)makeFSSpec:(id)fp8 spec:(struct FSSpec *)fp12;
+ (id)getExtensionForImageFormat:(unsigned long)fp8;
+ (struct __CFString *)imageIOExtensionForFormat:(unsigned long)fp8 usingType:(struct __CFString *)fp12;
+ (BOOL)imageIOIsSupportedExtension:(struct __CFString *)fp8 usingType:(struct __CFString *)fp12;
+ (struct __CFArray *)imageIOCopyTypeExtensions:(struct __CFString *)fp8;
+ (unsigned long)getImageFormat:(id)fp8;
+ (unsigned long)getImporterComponentType:(struct ComponentInstanceRecord *)fp8;
+ (unsigned long long)sizeAtPath:(id)fp8;
+ (id)makeUniquePath:(id)fp8;
+ (BOOL)isMovieImageFormat:(unsigned long)fp8;

@end

@interface ImportRoll : NSObject
{
    struct vector<ImportPhoto*, std::allocator<ImportPhoto*>> *_importPhotos;
    NSString *_rollName;
    BOOL _useRollName;
    NSString *_rollOriginalsPath;
    NSString *_thumbPath;
    NSString *_modifiedPath;
    double _rollDate;
}

- (id)init;
- (void)dealloc;
- (long)importPhotoCount;
- (struct ImportPhoto *)importPhotoAtIndex:(unsigned long)fp8;
- (void)addImportPhoto:(struct ImportPhoto *)fp8;
- (void)removeImportPhoto:(struct ImportPhoto *)fp8;
- (void)setUseRollName:(BOOL)fp8;
- (BOOL)useRollName;
- (void)setRollName:(id)fp8;
- (id)rollName;
- (void)setRollOriginalsPath:(id)fp8;
- (id)rollOriginalsPath;
- (void)setThumbPath:(id)fp8;
- (id)thumbPath;
- (void)setModifiedPath:(id)fp8;
- (id)modifiedPath;
- (void)setRollDate:(double)fp8;
- (double)rollDate;
- (void)findNaturalRollDate;

@end

@interface ImportSession2 : NSObject
{
    ImageDB *_imageDB;
    id _referenceObj;
    int _reference;
    struct _opaque_pthread_mutex_t _importTaskLock;
    struct _opaque_pthread_cond_t _importTaskCond;
    struct _opaque_pthread_mutex_t _counterLock;
    struct _opaque_pthread_mutex_t _taskLoadLock;
    struct _opaque_pthread_cond_t _taskLoadCond;
    NSMutableArray *_taskLoadQueue;
    int _taskLoad;
    struct map<ImportTask*, ImportTask*, std::less<ImportTask*>, std::allocator<std::pair<ImportTask* const, ImportTask*>>> *_importTasks;
    struct vector<Task*, std::allocator<Task*>> *_subTasks;
    struct vector<ImportPhoto*, std::allocator<ImportPhoto*>> *_sourcePhotos;
    long _totalCount;
    long _remainingCount;
    struct vector<ImportRoll*, std::allocator<ImportRoll*>> *_rolls;
    struct vector<ImportPhoto*, std::allocator<ImportPhoto*>> *_importedPhotos;
    struct vector<ImportPhoto*, std::allocator<ImportPhoto*>> *_failedPhotos;
    PLHolder *_importPhotosHolder;
    _Bool _paused;
    _Bool _cancelled;
    _Bool _stopped;
    _Bool _failed;
    _Bool _fatalFailure;
    NSString *_failureDescription;
    BOOL _photosPastDuplicateCheck;
    _Bool _copyToLibrary;
    _Bool _autoRotate;
    _Bool _scaleRAWProxies;
    _Bool _avoidGlobalFileCache;
    _Bool _deleteAlbumOnCancel;
    BOOL _deleteSource;
    BOOL _isDeviceImport;
    BOOL _doesntOwnSourceAlbum;
    _Bool _applyToAllDuplicates;
    _Bool _importDuplicates;
    struct ImportPhoto *_checkDuplicate;
    struct IPPhotoInfo *_checkExisting;
    BOOL _forceAllPhotos;
    _Bool _allowLibraryImport;
    NSString *_rootPath;
    NSString *_importPath;
    NSString *_downloadPath;
    ImportRoll *__currentRoll;
    int __rollIndex;
    NSString *__currentPath;
    long _photoKey;
    NSArray *_existingKeysAndOriginalFileNames;
    Album *_sourceAlbum;
    Album *_destinationAlbum;
    CameraAlbum *_cameraAlbum;
    PhotoCDAlbum *_photoCDAlbum;
    NSString *_eventName;
    NSString *_eventDesc;
    NSButton *_applyToAllCheckbox;
    NSImageView *_importImageView;
    NSImageView *_existingImageView;
    NSPanel *_duplicateImagePanel;
    NSPanel *_failedPanel;
    NSTextView *_failedText;
    NSTextField *_failedCount;
    NSTextField *_failedReasonField;
    NSMutableArray *_failedFilePaths;
    long _failedImageFileCount;
    NSMutableArray *_NIBObjects;
    BOOL _InFailedImportEvent;
    long long _diskBlocksAvailable;
    long long _diskBlockSize;
    long long _diskBlocksNeeded;
}

+ (id)importSession;
+ (short)_validateOrientation:(short)fp8;
+ (void)notifyPostImport;
+ (BOOL)isPath:(id)fp8 inHierarchy:(id)fp12;
- (id)initWithDB:(id)fp8 toAlbum:(id)fp12;
- (id)db;
- (id)importedPhotos;
- (void)dealloc;
- (void)_cleanup;
- (void)setCopyToLibrary:(BOOL)fp8;
- (BOOL)copyToLibrary;
- (void)setAutoRotate:(BOOL)fp8;
- (BOOL)autoRotate;
- (void)setAllowLibraryImport:(BOOL)fp8;
- (BOOL)allowLibraryImport;
- (void)setScaleRAWProxies:(BOOL)fp8;
- (BOOL)scaleRAWProxies;
- (void)setAvoidGlobalFileCache:(BOOL)fp8;
- (BOOL)avoidGlobalFileCache;
- (void)setDeleteAlbumOnCancel:(BOOL)fp8;
- (BOOL)deleteAlbumOnCancel;
- (void)setDeleteSource:(BOOL)fp8;
- (BOOL)deleteSource;
- (void)setForceAllPhotos:(BOOL)fp8;
- (BOOL)forceAllPhotos;
- (void)setEventName:(id)fp8;
- (id)eventName;
- (void)setEventDesc:(id)fp8;
- (id)eventDesc;
- (void)setRootPath:(id)fp8;
- (id)rootPath;
- (void)_setImportPath:(id)fp8;
- (void)writeSegmentCacheData:(char **)fp8 image64Data:(void *)fp12 image64Size:(int)fp16 forImportPhoto:(struct ImportPhoto *)fp20;
- (id)downloadPath;
- (void)_setDownloadPath:(id)fp8;
- (id)referenceObj;
- (void)setReferenceObj:(id)fp8;
- (void)setReference:(int)fp8;
- (int)reference;
- (BOOL)isDeviceImport;
- (id)cameraAlbum;
- (BOOL)importFromPhotoCDAlbum:(id)fp8 photos:(struct IPPhotoList *)fp12 threaded:(BOOL)fp16;
- (BOOL)importFromCameraAlbum:(id)fp8 photos:(struct IPPhotoList *)fp12 threaded:(BOOL)fp16;
- (BOOL)importPhotos:(struct IPPhotoList *)fp8 threaded:(BOOL)fp12;
- (void)_importPhotos;
- (BOOL)importFiles:(id)fp8 threaded:(BOOL)fp12;
- (void)_importFiles:(id)fp8;
- (unsigned long)_calcThreadLoad;
- (void)_processImportFiles:(id)fp8;
- (void)startImportTask:(struct ImportTask *)fp8;
- (void)requestTaskLoad:(int)fp8 key:(long)fp12;
- (void)releaseTaskLoad:(int)fp8 key:(long)fp12;
- (void)importTaskEnding:(struct ImportTask *)fp8;
- (void)_finishImportingRoll:(id)fp8;
- (void)_finishImportingMovie:(struct ImportPhoto *)fp8;
- (void)_finishImportingPhoto:(struct ImportPhoto *)fp8;
- (void)_addImagesFromImportPhoto:(struct ImportPhoto *)fp8 toPhoto:(struct IPPhotoInfo *)fp12;
- (void)_addIPTCDataToPhoto:(struct IPPhotoInfo *)fp8;
- (void)_addKeyword:(id)fp8 toPhoto:(struct IPPhotoInfo *)fp12;
- (void)_cleanUpCancelledPhoto:(struct ImportPhoto *)fp8;
- (id)existingKeysAndOriginalFileNames;
- (void)_finishImport:(id)fp8;
- (id)_albumMgr;
- (void)_addPhotosToLastImportAlbum;
- (void)_addPhotosToDestinationAlbum;
- (void)stop;
- (void)cancel;
- (void)pause;
- (void)resume;
- (BOOL)isPaused;
- (BOOL)isStoppedOrCancelled;
- (BOOL)isCancelled;
- (BOOL)isFailed;
- (void)requestStop;
- (void)_stopRequestSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (BOOL)taskShouldEnd:(struct ImportTask *)fp8;
- (void)taskFailed:(struct ImportTask *)fp8 withDescription:(id)fp12;
- (void)waitOnPause;
- (struct ImportPhoto *)nextImportPhoto;
- (void)photoCompleted:(struct ImportPhoto *)fp8;
- (void)photoCanceled:(struct ImportPhoto *)fp8;
- (void)photoFailed:(struct ImportPhoto *)fp8 fatalFailure:(BOOL)fp12;
- (void)notifyImportStart;
- (void)notifyPhotoCompleted:(id)fp8;
- (void)notifyImportCanceled;
- (void)notifyDeletingSourceImages;
- (void)notifyImportFinishing:(id)fp8;
- (void)notifyImportCompleted;
- (void)_notifyPostImportOnMainThread:(id)fp8;
- (void)_addSourceAlbum:(id)fp8;
- (void)_addSourceAlbumAfterDelay:(id)fp8;
- (void)_removeSourceAlbum:(id)fp8;
- (id)sourceAlbum;
- (id)destinationAlbum;
- (long)totalCount;
- (long)_decrementRemainingCount;
- (long)remainingCount;
- (void)displayFailedFilePathsRightNow;
- (void)displayFailedFilePaths;
- (void)_immediateFailedFilePanel:(id)fp8;
- (void)displayFailedImageList:(id)fp8 count:(int)fp12;
- (void)_runFailedFilePanel:(id)fp8;
- (void)_loadNIB;
- (void)_closeFailedPanel;
- (void)skipPhoto:(id)fp8;
- (void)cancelImport:(id)fp8;
- (void)duplicatePhoto:(id)fp8;
- (void)failedPanelOK:(id)fp8;
- (BOOL)shouldImportDuplicateOfPhoto:(struct ImportPhoto *)fp8 existingPhoto:(struct IPPhotoInfo *)fp12;
- (void)_shouldImportDuplicateOnMainThread:(id)fp8;
- (void)_requestStopNoLock;

@end

@interface ImportSession2 (PrIvAtEnOtEs)
- (id)_canTerminate;
- (void)_notifyImportStart:(id)fp8;
- (void)_notifyPhotoCompleted:(id)fp8;
- (void)_notifyImportCanceled:(id)fp8;
- (void)_notifyImportFinishing:(id)fp8;
- (void)_notifyImportCompleted:(id)fp8;
@end

@interface ImportResource : NSObject
{
    NSData *_nsData;
    char **_handle;
    void *_data;
    NSString *_sourcePath;
    unsigned long _size;
}

+ (id)importResourceWithNSData:(id)fp8 sourcePath:(id)fp12;
+ (id)importResourceWithHandle:(char **)fp8 size:(long)fp12;
+ (id)importResourceWithData:(void *)fp8 size:(long)fp12;
- (id)init;
- (void)dealloc;
- (void *)pointerToData;
- (unsigned long)size;
- (char **)handle;
- (id)nsData;
- (id)sourcePath;
- (void)convertToData:(id)fp8;

@end

@interface LocationMapPopupView : NSView
{
    GoogleMapWebView *mMapView;
    struct _NSSize mInitialFrameSize;
    BOOL mIsMaximized;
    NSButton *mMaximizeButton;
    NSButton *mZoomInButton;
    NSButton *mZoomOutButton;
    NSTimer *mAnimator;
    struct _NSSize mStartingSize;
    struct _NSSize mTargetSize;
    int mElapsedFrames;
    int mTotalFrames;
    BOOL mIsAnimating;
    BOOL mNeedsToAnimate;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (id)mapView;
- (void)maximize:(id)fp8;
- (void)minimize:(id)fp8;
- (void)toggleSize:(id)fp8;
- (void)_animateViewSizeChange:(id)fp8;
- (void)dealloc;

@end

@interface NSEvent (iPhotoExtensions)
- (id)mouseDownForContextPopupAtLocation:(struct _NSPoint)fp8 inView:(id)fp16;
@end

@interface LocationData : NSObject
{
    struct sqlite3 *mPointsOfInterestDB;
    struct sqlite3 *mLandMassDB;
    BOOL mRecordResultStrings;
    BOOL mExcludePreviousResults;
    NSMutableArray *mResultStrings;
}

+ (struct _NSPoint)sortingAnchor;
- (id)init;
- (void)dealloc;
- (int)_openPointsOfInterestDBWithPath:(char *)fp8;
- (int)_openLandMassDBWithPath:(char *)fp8;
- (int)_db:(struct sqlite3 *)fp8 performQuery:(char *)fp12;
- (int)_closeDB:(struct sqlite3 *)fp8;
- (void)addLocationFromPOI:(id)fp8 associateWithKey:(unsigned long)fp12 ofType:(int)fp16;
- (struct SqPlace *)ensurePlaceForLocator:(int)fp8 type:(int)fp12;
- (void)lookupAllPointsOfInterest;
- (void)saveHierarchyForLocalPOI:(id)fp8;
- (void)calculateBoundsForLandMasses;
- (void)loadLandMassesIntersectingSouthwest:(struct _NSPoint)fp8 northeast:(struct _NSPoint)fp16;
- (id)userDefinedPlacesFromQueryString:(id)fp8 sortedByDistanceFrom:(struct _NSPoint)fp12;
- (id)pointsOfInterestFromQueryString:(id)fp8 containsMatch:(BOOL)fp12 wordsOnly:(BOOL)fp16 sortedByDistanceFrom:(struct _NSPoint)fp20 language:(id)fp28;
- (void)recordResultStrings;
- (void)excludePreviousResults;
- (void)clearResultStrings;

@end

@interface NSDictionary (LocationSorting)
- (int)distanceFromHomeSort:(id)fp8;
- (int)alphabeticalSort:(id)fp8;
@end

@interface IPLogger : NSObject
{
    BOOL _logToFile;
    BOOL _logToConsole;
    struct __sFILE *_fp;
    NSArray *_fileFilter;
    NSArray *_consoleFilter;
    BOOL _firstFile;
    BOOL _firstConsole;
}

+ (void)log:(id)fp8 domain:(id)fp12;
+ (void)betterCFShow:(id)fp8 domain:(id)fp12 value:(void *)fp16;
- (id)init;
- (BOOL)_domain:(id)fp8 passesFilter:(id)fp12;
- (void)log:(id)fp8 domain:(id)fp12;
- (void)betterCFShow:(id)fp8 domain:(id)fp12 value:(void *)fp16;

@end

@interface ILPhotoRefImpl : NSObject <ILPhotoRefProtocol>
{
    NSString *_uid;
    NSString *_path;
    BOOL _isTemporary;
    struct _NSSize _imageSize;
}

- (id)initWithUID:(id)fp8;
- (void)dealloc;
- (id)uid;
- (void)setUID:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (BOOL)isTemporary;
- (void)setIsTemporary:(BOOL)fp8;
- (struct _NSSize)imageSize;
- (void)setImageSize:(struct _NSSize)fp8;

@end

@interface IPBookScrollingView : IPBookView
{
    struct _NSRect mFirstPageBounds;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (void)pageSelectionDidChange;
- (void)resizePageViews:(BOOL)fp8;
- (void)_initializePageViews;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)dealloc;

@end

@interface LocationEventPhotoView : NSView
{
    struct CGImage *mImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setImage:(struct CGImage *)fp8;
- (BOOL)isFlipped;

@end

@interface LocationSearchOverlay : NSView
{
    SEL mAction;
    id mTarget;
    LocationPicker *mOwner;
    BOOL mUpdateOwner;
    NSView *mWebViewTarget;
    NSProgressIndicator *mProgress;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setOwner:(id)fp8;
- (void)setMouseDownTarget:(id)fp8 action:(SEL)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;

@end

@interface LocationSearchView : NSView
{
    struct _NSPoint mPointerTip;
}

- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)setPointerTip:(struct _NSPoint)fp8;

@end

@interface LocationSearchWindow : NSWindow
{
}

- (id)initWithContentRect:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8 display:(BOOL)fp24;
- (BOOL)makeFirstResponder:(id)fp8;
- (void)resignKeyWindow;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (void)showAtRect:(struct _NSRect)fp8;

@end

@interface LocationPicker : NSObject
{
    LocationSearchWindow *mWindow;
    SEL mAction;
    id mTarget;
    BOOL mDidLayout;
    NSSlider *mSlider;
    NSTimer *mSliderTimer;
    GoogleMapWebView *mMapView;
    NSImageView *mMapViewArt;
    GoogleMapWebView *mMapCacheView;
    NSTimer *mMapCacheTimer;
    int mMapCacheIteration;
    LocationSearchOverlay *mTrackingOverlay;
    struct _NSSize mMapSize;
    struct _NSRect mMapRect;
    BOOL mVisible;
    BOOL mLoading;
    BOOL mMapCachingSuspended;
}

+ (id)sharedPicker;
- (id)init;
- (void)_centerMapAfterLoading:(id)fp8;
- (void)_refreshCacheAfterLoading:(id)fp8;
- (void)refreshCacheForMapView;
- (void)refreshCacheForMapViewCenteringOnLatitude:(float)fp8 longitude:(float)fp12;
- (void)_cacheMapTiles:(id)fp8;
- (void)invalidateMapCacheTimer;
- (id)filterAlbum;
- (void)hide;
- (BOOL)isVisible;
- (BOOL)isLoading;
- (void)showAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 cancelTarget:(id)fp32 cancelAction:(SEL)fp36;
- (id)webView;
- (void)searchAreaZoomed:(id)fp8;
- (void)_sliderChangedAction:(id)fp8;
- (void)performSearchAreaChangeAction:(id)fp8;
- (struct _NSRect)mapRect;
- (id)mapView;
- (void)_updatePickerFromSearch:(id)fp8;
- (void)_zoomAfterPanning:(id)fp8;
- (void)webView:(id)fp8 didStartProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)dealloc;

@end

@interface LibraryFinder : NSWindowController
{
    NSTableView *libraryTable;
    NSScrollView *scrollView;
    NSTextField *noticeField;
    NSTextField *fullPathField;
    NSProgressIndicator *spotlightProgress;
    NSButton *createNewLibraryButton;
    NSButton *openSelectedLibraryButton;
    NSButton *chooseOtherLibraryButton;
    NSMetadataQuery *_query;
    int _currentLibraryIndex;
    BOOL _ignoreWindowWillClose;
    BOOL _forMissingLibrary;
    BOOL _forSwitchMode;
    NSArray *_libraries;
    NSString *_defaultMarker;
}

+ (id)libraryFinderForMissingLibrary:(BOOL)fp8 switchMode:(BOOL)fp12;
+ (BOOL)looksLikeLibraryRoot:(id)fp8 requirePathIsRoot:(BOOL)fp12;
- (id)init;
- (void)dealloc;
- (id)windowNibName;
- (void)windowDidLoad;
- (void)startSpotlight;
- (void)_loadRecentLibraries;
- (void)_processSpotlightResults:(id)fp8;
- (id)_cacheTableSelection;
- (void)_refreshTable:(id)fp8;
- (void)queryNote:(id)fp8;
- (void)_continueUsingNewLibraryRoot:(id)fp8;
- (void)newLibraryPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)panel:(id)fp8 userEnteredFilename:(id)fp12 confirmed:(BOOL)fp16;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (void)_doNewLibraryPanel;
- (void)openLibraryPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_doOpenLibraryPanel;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (BOOL)tableView:(id)fp8 shouldSelectRow:(int)fp12;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)cancel:(id)fp8;
- (void)createNewLibrary:(id)fp8;
- (void)openSelectedLibrary:(id)fp8;
- (void)chooseOtherLibrary:(id)fp8;
- (void)chooseUsualLibrary:(id)fp8;
- (BOOL)forMissingLibrary;
- (void)setForMissingLibrary:(BOOL)fp8;
- (id)libraries;
- (void)setLibraries:(id)fp8;
- (BOOL)forSwitchMode;
- (void)setForSwitchMode:(BOOL)fp8;

@end

@interface BatchEffectMgr : NSObject <EditMgrDelegateProtocol>
{
    ProgressController *mProgress;
    int mCurrentEffect;
    long mPhotoCount;
}

- (id)initWithProgress:(id)fp8;
- (void)dealloc;
- (void)_cancelProgress;
- (void)editMgr:(id)fp8 committedEditsForPhotoInfo:(struct IPPhotoInfo *)fp12;
- (void)editMgr:(id)fp8 loadedImage:(struct IPImage *)fp12 forInfo:(struct IPPhotoInfo *)fp16;
- (void)applyEffect:(int)fp8 toSelection:(struct IPPhotoList *)fp12;

@end

@interface ImportImageView : IPImageView
{
    ImportImage *_importImage;
}

- (id)importImage;
- (void)setImportImage:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPPeopleView : IPContainerGridView <IPCompletionMenuDelegate, IPViewControllerMainViewProtocol>
{
    IPPeopleModel *_model;
    BOOL _showSingles;
    BOOL _showEmail;
    NSString *_inlineEditorOriginalValue;
    PersonCompletionMenuCell *_personCMCell;
    IPStretchableImage *peopleSelectedFrame;
    IPStretchableImage *peopleUnselectedFrame;
    IPPeopleFlipInfo *_peopleFlipInfo;
    NSView *_stickyView;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (struct _NSRect)flipInfoRectForCellRect:(struct _NSRect)fp8;
- (void)_faceDataChanged:(id)fp8;
- (void)setPseudoConstants;
- (void)dealloc;
- (int)cellCount;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 forRoll:(struct IPRoll *)fp12;
- (void)persistCurrentPhoto:(struct CellData *)fp8;
- (void)preferencesChanged:(id)fp8;
- (void)faceCorrelationChanged:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)thumbnailSizeKey;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 selected:(BOOL)fp24 hover:(BOOL)fp28 empty:(BOOL)fp32 backgroundColor:(id)fp36;
- (unsigned long long)renderCacheKeyForPhotoKey:(unsigned long)fp8 faceIndex:(unsigned long long)fp12;
- (void)uncacheRendersForPhotoKey:(unsigned long)fp8;
- (unsigned long long)renderCacheKeyForPhoto:(struct IPPhotoInfo *)fp8 inCellData:(struct CellData *)fp12;
- (unsigned long long)renderCacheKeyForPhoto:(struct IPPhotoInfo *)fp8 faceIndex:(unsigned long long)fp12;
- (struct _NSRect)photoRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)dragHitRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)showSticky:(BOOL)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)populateCellDataVector:(struct _NSRect)fp8;
- (void)getPeopleCount:(int *)fp8 selectionCount:(int *)fp12;
- (void)_unnameSelectedPeople;
- (void)_unnameSelectedConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)unnameSelectedPeople;
- (struct IPSelectionList *)selectionListForCurrentSelection;
- (void)movePeopleWithKeys:(id)fp8 toIndex:(int)fp12;
- (void)undoRedoMergeFaceKeys:(id)fp8 intoFaceKey:(int)fp12 beginState:(id)fp16 endState:(id)fp20 undoManager:(id)fp24;
- (void)gridPerformDragOperation:(id)fp8 pasteboard:(id)fp12;
- (void)mergePeople:(id)fp8;
- (void)fillPasteboardWithSelection:(id)fp8;
- (void)undoRedoDissociateHoverFaceBeginState:(id)fp8 endState:(id)fp12 undoManager:(id)fp16;
- (void)dissociateHoveredFace:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (void)showFlipInfoForCell:(struct CellData *)fp8;
- (void)updateFlipInfo:(struct CellData *)fp8;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (id)getNewSourceAlbum;
- (id)scrollHudLabelForCellData:(struct CellData *)fp8;
- (BOOL)allowDragReorder;
- (BOOL)shouldDrawSquareForPhoto:(struct IPPhotoInfo *)fp8 isHover:(BOOL)fp12;
- (BOOL)supportsScrollOverlay;
- (BOOL)supportsEdit;
- (BOOL)supportsGoingToDetailView;
- (BOOL)supportsGoToDetailButton;
- (BOOL)supportsMagnifier;
- (BOOL)supportsOverviewCell;
- (BOOL)dragOverviewImage;
- (id)smartAlbumNameForCellKeys:(id)fp8 plural:(char *)fp12 specialName:(id *)fp16;
- (id)smartAlbumNameForFaceKeys:(id)fp8 plural:(char *)fp12 specialName:(id *)fp16;
- (BOOL)smartNameAlbum:(id)fp8 forCellKeys:(id)fp12;
- (void)updateDetailViewWithFaceKeys:(id)fp8 plural:(BOOL)fp12 albumName:(id)fp16 specialName:(id)fp20;
- (void)updateDetailViewWithFaceKey:(int)fp8 name:(id)fp12;
- (void)updateDetailViewWithCellKeys:(id)fp8;
- (int)metaFieldCount;
- (id)metaStringForCell:(struct CellData *)fp8 field:(int)fp12 shortFormat:(BOOL)fp16 isHover:(BOOL)fp20 isSelected:(BOOL)fp24 isUntitled:(char *)fp28;
- (struct _NSRect)metaRectForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 field:(int)fp32;
- (int)fieldForInlineEditAtPoint:(struct _NSPoint)fp8 forCell:(struct CellData *)fp16 cellIndex:(int)fp20 cellRect:(struct _NSRect)fp24 fieldRect:(struct _NSRect *)fp40;
- (void)renameFullName:(int)fp8 from:(id)fp12 to:(id)fp16 undoManager:(id)fp20;
- (void)renamePersonName:(int)fp8 from:(id)fp12 to:(id)fp16 undoManager:(id)fp20;
- (void)renamePersonEmail:(int)fp8 from:(id)fp12 to:(id)fp16 undoManager:(id)fp20;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineEditorForCellIndex:(int)fp8 field:(int)fp12 withSave:(BOOL)fp16;
- (void)completionMenuStoreValue:(id)fp8;
- (id)completionMenu:(id)fp8 completionsForString:(id)fp12;
- (void)completionMenu:(id)fp8 willDisplayCell:(id)fp12 forItem:(id)fp16 atIndex:(int)fp20;
- (id)completionMenu:(id)fp8 cellForItem:(id)fp12 atIndex:(int)fp16;
- (float)completionMenu:(id)fp8 heightForItem:(id)fp12 atIndex:(int)fp16;
- (struct CGImage *)cellImageForCellData:(struct CellData *)fp8 photo:(struct IPPhotoInfo *)fp12 paddedDrawRect:(struct CGRect)fp16 rotation:(float)fp32 tnManager:(id)fp36 fillSquareThumb:(BOOL)fp40 lowres:(BOOL)fp44 selected:(BOOL)fp48 hover:(BOOL)fp52 forOverview:(BOOL)fp56 forDrag:(BOOL)fp60;
- (void)_drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)drawBackgroundInRect:(struct _NSRect)fp8;
- (void)drawMetaDataForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 isHover:(BOOL)fp32 isSelected:(BOOL)fp36 context:(struct CGContext *)fp40;
- (id)defaultAlbum;
- (unsigned long)faceKeyForCellKey:(unsigned long)fp8;
- (unsigned long)cellKeyForFaceKey:(unsigned long)fp8;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (unsigned long)firstCellKey;
- (unsigned long)lastCellKey;
- (struct IPPhotoList *)photosForFaceKey:(unsigned long)fp8 name:(id *)fp12;
- (void)viewWasInstalled;
- (BOOL)validateMenuItem:(id)fp8;
- (id)model;
- (void)setModel:(id)fp8;
- (BOOL)showSingles;
- (void)setShowSingles:(BOOL)fp8;
- (BOOL)showEmail;
- (void)setShowEmail:(BOOL)fp8;
- (void)viewWasRemoved;
- (int)selectedPeopleCount;
- (id)stickyView;
- (void)setStickyView:(id)fp8;

@end

@interface IPPeopleModel : NSObject
{
    struct vector<IPPersonInfo, std::allocator<IPPersonInfo>> *_faceVector;
    struct vector<int, std::allocator<int>> *_filteredLookup;
    int _filterMode;
    BOOL _hideSingles;
    int _sortOrder;
    int _sortDirection;
    BOOL _needResort;
    ImageDB *_database;
    BOOL _showOnCompletion;
    struct KeySet *_representedImageKeys;
    struct KeySet *_representedFaceKeys;
    struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *_lockedFaces;
}

+ (id)faceMultimapDescription:(struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)fp8;
- (id)init;
- (void)dealloc;
- (void)setupPersonInfo:(CDAnonymousStruct21 *)fp8;
- (void)tearDownPersonInfo:(CDAnonymousStruct21 *)fp8;
- (void)addPersonInfo:(CDAnonymousStruct21 *)fp8;
- (void)clearFaceVector;
- (void)clearFilteredLookup;
- (void)ensureFilteredLookup;
- (id)description;
- (void)resort;
- (void)copyCurrentOrderToManual;
- (void)movePeopleWithKeys:(id)fp8 toIndex:(int)fp12;
- (void)computeRepresentedImageKeys;
- (struct KeySet *)representedImageKeys;
- (void)setRepresentedImageKeys:(struct KeySet *)fp8;
- (struct KeySet *)representedFaceKeys;
- (void)setRepresentedFaceKeys:(struct KeySet *)fp8;
- (struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)lockedFaces;
- (void)setLockedFaces:(struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)fp8;
- (int)personCountWithoutSingles;
- (int)unfilteredPersonCount;
- (int)personCount;
- (int)namedPersonCount;
- (int)unnamedPersonCount;
- (int)faceIndexForPhotoKey:(unsigned long)fp8 ofPersonAtIndex:(int)fp12;
- (CDAnonymousStruct21 *)personWithFaceKey:(int)fp8;
- (int)indexOfKeyImageForPersonWithFaceKey:(int)fp8;
- (int)indexOfKeyImageForPersonAtIndex:(int)fp8;
- (int)imageKeyOfKeyImageForPersonWithFaceKey:(int)fp8;
- (int)imageKeyOfKeyImageForPersonAtIndex:(int)fp8;
- (int)indexOfImageKey:(int)fp8 inPerson:(CDAnonymousStruct21 *)fp12;
- (void)setKeyImageKey:(int)fp8 forPersonWithFaceKey:(int)fp12;
- (void)setKeyImageKey:(int)fp8 forPersonAtIndex:(int)fp12;
- (void)copyKeyImagesFromModel:(id)fp8;
- (int)indexOfPersonWithFaceKey:(int)fp8;
- (CDAnonymousStruct21 *)personAtIndex:(int)fp8;
- (CDAnonymousStruct21 *)unfilteredPersonAtIndex:(int)fp8;
- (void)addLockedFacesForFaceKey:(int)fp8 toModel:(id)fp12;
- (void)addLockedFacesForFaceKeys:(void *)fp8 toModel:(id)fp12;
- (void)addLockedFace:(CDAnonymousStruct8 *)fp8;
- (void)lockAllNonSingletonFaces;
- (void)removeLockedFace:(CDAnonymousStruct8 *)fp8;
- (BOOL)isLockedFace:(CDAnonymousStruct8 *)fp8;
- (void)clearLockedFaces;
- (struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)allUnlockedFaces;
- (int)sortOrder;
- (void)setSortOrder:(int)fp8;
- (int)sortDirection;
- (void)setSortDirection:(int)fp8;
- (id)database;
- (void)setDatabase:(id)fp8;
- (BOOL)showOnCompletion;
- (void)setShowOnCompletion:(BOOL)fp8;
- (int)filterMode;
- (void)setFilterMode:(int)fp8;
- (BOOL)hideSingles;
- (void)setHideSingles:(BOOL)fp8;

@end

@interface TigerHash : NSObject
{
}

+ (id)hashOfString:(id)fp8;
+ (id)hashOfData:(id)fp8;
+ (id)hashOfData:(void *)fp8 length:(int)fp12;
+ (id)hashOfBytes:(void *)fp8 length:(int)fp12;

@end

@interface LocationMapMarker : NSObject
{
    struct _NSPoint mLocation;
    float mRadius;
    struct _NSPoint mMomentaryLocation;
    struct _NSPoint mStartingLocation;
    int mAnimationFrameDelay;
    int mAnimationElapsedFrames;
    int mAnimationTotalFrames;
    NSString *mLabel;
    int mType;
    int mIndex;
    unsigned long mPhotoKey;
    LocationIdentifier *mLocationIdentifier;
    struct CGRect mMarkerRect;
    struct CGRect mHitRect;
    struct CGRect mOverlapRect;
    struct CGRect mPhotoRect;
    struct CGRect mPlacardRect;
    struct CGRect mMagnifyRect;
    struct CGRect mHandleRect;
    struct CGRect mTooltipRect;
    struct CGRect mChevronRect;
    BOOL mIsSelected;
    BOOL mIsSearchMarker;
    BOOL mDrawPhoto;
    BOOL mDrawOverMagnify;
    struct IPPhotoInfo *mPhotoInfo;
    Ellipsizer *mEllipsizer;
    NSDictionary *mFontAttributes;
    NSDictionary *mHoverFontAttributes;
    BOOL mInMarkerGroup;
    struct _NSRect mRect;
}

- (id)initWithLocation:(struct _NSPoint)fp8 radius:(float)fp16 label:(id)fp20 type:(int)fp24 index:(int)fp28;
- (struct _NSPoint)location;
- (void)setLocation:(struct _NSPoint)fp8;
- (void)setGroupRect:(struct _NSRect)fp8;
- (struct _NSRect)groupRect;
- (float)radius;
- (void)setRadius:(float)fp8;
- (struct _NSPoint)momentaryLocation;
- (void)setMomentaryLocation:(struct _NSPoint)fp8;
- (struct _NSPoint)startingLocation;
- (void)setStartingLocation:(struct _NSPoint)fp8;
- (int)animationFrameDelay;
- (void)setAnimationFrameDelay:(int)fp8;
- (int)elapsedFrames;
- (void)incrementElapsedFrames;
- (BOOL)completedAnimation;
- (int)totalFrames;
- (void)setTotalFrames:(int)fp8;
- (int)type;
- (void)setType:(int)fp8;
- (id)label;
- (int)index;
- (unsigned long)photoKey;
- (void)setPhotoKey:(unsigned long)fp8;
- (BOOL)isInGroup;
- (void)setIsInGroup:(BOOL)fp8;
- (id)identifier;
- (void)setLocationIdentifier:(id)fp8;
- (void)setMarkerRect:(struct CGRect)fp8;
- (struct CGRect)markerRect;
- (struct CGRect)hitRect;
- (struct CGRect)tooltipRect;
- (struct CGRect)chevronRect;
- (struct CGRect)overlapRect;
- (void)setHandleRect:(struct CGRect)fp8;
- (struct CGRect)handleRect;
- (struct CGRect)placardRect;
- (struct CGRect)magnifyRect;
- (void)setDrawOverMagnify:(BOOL)fp8;
- (struct CGRect)photoRect;
- (void)setSelected:(BOOL)fp8;
- (BOOL)isSelected;
- (void)setDrawPhoto:(BOOL)fp8;
- (void)setIsSearchMarker:(BOOL)fp8;
- (BOOL)isSearchMarker;
- (void)setSkimmableImageAtPoint:(float)fp8;
- (void)addHotspotInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 withRadius:(float)fp20 includeControls:(BOOL)fp24;
- (void)updateMarkerRectForTargetPoint:(struct _NSPoint)fp8;
- (void)drawShadowInContext:(struct CGContext *)fp8 forView:(id)fp12;
- (void)drawInContext:(struct CGContext *)fp8 withRadius:(float)fp12 includeControls:(BOOL)fp16 forView:(id)fp20;
- (void)drawHoverTextInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 forView:(id)fp20 highlightChevron:(BOOL)fp24;
- (void)drawPhotoInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 forView:(id)fp20;
- (void)_drawPointerInContext:(struct CGContext *)fp8 atBottomOfRect:(struct CGRect)fp12 forMarkerRect:(struct CGRect)fp28;
- (void)_drawPointerInContext:(struct CGContext *)fp8 atRightOfRect:(struct CGRect)fp12 forMarkerRect:(struct CGRect)fp28;
- (void)_drawPointerInContext:(struct CGContext *)fp8 atLeftOfRect:(struct CGRect)fp12 forMarkerRect:(struct CGRect)fp28;
- (struct _NSRect)iconRectWithTarget:(struct _NSPoint)fp8;
- (struct CGImage *)icon;
- (id)description;
- (int)sortMarkerNorthToSouth:(id)fp8;
- (int)sortMarkerByDistanceFromSeed:(id)fp8;
- (void)dealloc;

@end

@interface HUDCheckboxButton : HUDButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface IPSelectiveImportController : IPViewController
{
    NSMenu *mSearchMenu;
    BurnInfo *mBurnPlacard;
    BackgroundColorView *mCameraPlacard;
    NSTextField *mFromDateText;
    NSTextField *mToDateText;
    NSView *mCheckBoxesView;
    NSButton *mEraseCheckbox;
    NSButton *mAutoSplitCheckbox;
    NSButton *mHideImportedCheckBox;
    NSTextField *mRollNameText;
    NSTextField *mRollDescriptionText;
    IPToolbarItem *mViewToolbarItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mSplitDividerItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mPublishSettingsItem;
    IPToolbarItem *mPublishAnnounceItem;
    IPToolbarItem *mNetAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mShareItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    IPToolbarItem *mLocationItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    BOOL mShowingImportPlacard;
    IPToolbarItem *mImportButton;
    IPToolbarItem *mImportAllButton;
    IPToolbarItem *mProgressItem;
    ImportSession2 *mCurrentSession;
    BOOL mTotalCalculated;
    long mRemainingCount;
    long mLastRemaining;
    unsigned long mTotalCount;
    ImportAlbum *mCurrentImportAlbum;
    ICObject *mCamera;
    struct MessageReceiver mAlbumMessageReceiver;
}

- (id)init;
- (void)_handleDoneWithChanges:(id)fp8;
- (void)_albumCountChanged;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)_photoImportStart:(id)fp8;
- (void)_photoImportCancel:(id)fp8;
- (void)_photoImportFinished:(id)fp8;
- (void)initToolbar;
- (void)freeToolbar;
- (void)doBackButton;
- (void)setController:(id)fp8;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (struct _NSRect)selectPhoto:(struct IPPhotoInfo *)fp8;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)updateStatus;
- (id)searchItem;
- (void)toggleAdvancedImport:(id)fp8;
- (void)_beginImport:(id)fp8;
- (void)_startImport:(id)fp8;
- (void)importAll:(id)fp8;
- (void)beginImportToAlbum:(id)fp8 deleteAlbumOnCancel:(BOOL)fp12;
- (void)import:(id)fp8;
- (void)stopImport:(id)fp8;
- (void)_deletingSourceImages:(id)fp8;
- (void)_finishingImport:(id)fp8;
- (void)_pauseImport:(id)fp8;
- (void)_resumeImport:(id)fp8;
- (void)_cancelImport:(id)fp8;
- (void)_importCanceled:(id)fp8;
- (void)_endImport:(id)fp8;
- (void)_importCompleted:(id)fp8;
- (void)_updateUI;
- (void)_updateDate;
- (void)_updateImportButton;
- (void)_updateDeleteCheckbox;
- (id)_eraseMediaTitle;
- (void)updateHideImported;
- (void)_setupImport;
- (void)installCameraPlacard;
- (void)_setRemainingCount:(id)fp8;
- (void)setCurrentImportAlbum:(id)fp8;
- (id)currentImportAlbum;
- (void)setCamera:(id)fp8;
- (void)_importProgress:(id)fp8;
- (void)_selectionChanged:(id)fp8;
- (void)toggleSplitCheckbox:(id)fp8;
- (void)toggleEraseCheckbox:(id)fp8;
- (void)toggleHideImportedCheckbox:(id)fp8;
- (BOOL)supportsFindCommand;
- (struct _NSRect)keywordActionIndicatorLocation;
- (void)_loadNib;
- (void)_setup;
- (void)albumDidSwitch;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (BOOL)validateMenuItem:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeCutover;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;

@end

@interface MutableEditList : EditList
{
}

- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
- (id)initWithDictionary:(id)fp8;
- (id)data;
- (id)dictionaryForKey:(id)fp8;
- (void)setEdit:(float)fp8 forKey:(id)fp12;

@end

@interface EditList : NSObject <NSCopying, NSMutableCopying>
{
    NSMutableDictionary *mData;
}

- (id)init;
- (id)initWithEditListData:(struct EditListData *)fp8;
- (id)initWithEditListData:(struct EditListData *)fp8 forRAW:(BOOL)fp12;
- (id)initWithEditListData:(struct EditListData *)fp8 forRAW:(BOOL)fp12 withBlemishEventCount:(int)fp16 andBlemishData:(struct EditBlemishEvent *)fp20;
- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
- (void)editListData:(struct EditListData *)fp8;
- (BOOL)hasEdits;
- (BOOL)isRotateOnly;
- (id)data;
- (BOOL)isEqualToEditListDictionary:(id)fp8;
- (BOOL)isEqualToEditList:(id)fp8;
- (BOOL)hasCrop;
- (struct _NSRect)cropRect;
- (float)rotation;
- (BOOL)hasKey:(id)fp8;
- (float)editForKey:(id)fp8;
- (id)dictionaryForKey:(id)fp8;
- (void)dump;
- (id)description;
- (struct CGAffineTransform)transformForOriginalToCurrentWithAspectRatio:(float)fp8;
- (struct CGAffineTransform)transformForOriginalToCurrentWithAspectRatio:(float)fp8 withCrop:(BOOL)fp12 andStraighten:(BOOL)fp16 andRotate:(BOOL)fp20;

@end

@interface NSData (NSDataAdditions)
+ (id)dataWithBase64EncodedString:(id)fp8;
- (id)initWithBase64EncodedString:(id)fp8;
- (id)base64Encoding;
- (id)base64EncodingWithLineLength:(unsigned int)fp8;
- (BOOL)hasPrefix:(id)fp8;
- (BOOL)hasPrefixBytes:(void *)fp8 length:(unsigned int)fp12;
@end

@interface IPContainerGridView : NSView
{
    NSMenu *eventContextualMenu;
    float RENDER_PADDING_LEFT;
    float RENDER_PADDING_RIGHT;
    float RENDER_PADDING_TOP;
    float RENDER_PADDING_BOTTOM;
    float MIN_PHOTO_DIMENSION;
    float DRAG_PHOTO_DIMENSION;
    float MAX_PHOTO_DIMENSION;
    float FRAME_WIDTH_THRESHOLD;
    float TEXT_PADDING;
    float PHOTO_PAD;
    float MAX_DX;
    float MAX_DY;
    float SCRUB_HOVER_DELAY;
    float DRAG_SLOP;
    float HOVER_SLOP;
    float COUNT_BAR_HEIGHT;
    float GRID_PAD;
    float PHOTO_BOX_RADIUS;
    float LARGE_PHOTO_BOX_RADIUS;
    long OVERVIEW_DRAW_INDEX;
    Album *_album;
    ImageDB *_db;
    KeyMgr *_eventCollection;
    CIContext *_coreContext;
    BOOL _inDragSelect;
    BOOL _active;
    NSImage *_movieBadge;
    float _photoDimension;
    struct _NSSize _photoSize;
    struct _NSSize _cellSize;
    int _columns;
    float _horizontalOutset;
    float _leftGutter;
    int _rows;
    int _dragTargetIndex;
    int _dragMoveTargetIndex;
    int _dragMergeTargetIndex;
    struct _NSPoint _dragMergeTargetPoint;
    struct _NSRect _dragMoveTargetRect;
    struct _NSPoint _lastMovedPoint;
    int _lastHoverIndex;
    int _lastHoverMetaIndex;
    int _lastHoverMetaField;
    BOOL _optionKeyWasDown;
    BOOL _lastHoverOverCountBar;
    struct RenderCache *_renderCache;
    BOOL _needsRepaint;
    BOOL _needsRelayout;
    struct vector<CellData, std::allocator<CellData>> *_cellDataVector;
    struct vector<Key, std::allocator<Key>> *_selection;
    struct vector<Key, std::allocator<Key>> *_dragSelection;
    int _dragHoleExcludeBegin;
    int _dragHoleExcludeEnd;
    struct map<Key, int, std::less<Key>, std::allocator<std::pair<const Key, int>>> *_keyIndexMap;
    struct IPPhotoList *_markerPhotos;
    int _ignoreRollChangeMessages;
    struct MessageReceiver _DBMessageReceiver;
    struct MessageReceiver _AlbumMessageReceiver;
    double _lastHoverSwitchTime;
    id _inlineEditor;
    int _inlineEditorCellIndex;
    int _inlineEditorField;
    Ellipsizer *_ellipsizer;
    IPMagnifierController *_ctrl;
    NSDictionary *_leftTextAttributes;
    NSDictionary *_rightTextAttributes;
    NSDictionary *_centerTextAttributes;
    NSDictionary *_untitledCenterTextAttributes;
    NSDictionary *_overCountTextAttributes;
    NSDictionary *_countTextAttributes;
    NSDictionary *_locationTextAttributes;
    NSDictionary *_dateTextAttributes;
    float _rightTextAttributesHeight;
    float _leftTextAttributesHeight;
    float _centerTextAttributesHeight;
    float _untitledCenterTextAttributesHeight;
    float _locationTextAttributesHeight;
    float _dateTextAttributesHeight;
    struct CGImage *_unselectedEmptyFrameImage;
    struct CGImage *_unselectedFrameImage;
    struct CGImage *_unselectedHoverFrameImage;
    struct CGImage *_selectedFrameImage;
    struct _NSRect _lastToolTipConfigureRect;
    struct _NSRect _dragSelectionRect;
    BOOL _activeScrolling;
    BOOL _hiresOverride;
    NSTimer *_defaultBackfillTimer;
    NSTimer *_eventBackfillTimer;
    struct _NSRect _cellModeSlopRect;
    struct __CFDateFormatter *_dateFormatter;
    BOOL _returnEmptySelection;
    float _initialScroll;
    int _centerIndex;
    int _selectionAnchor;
    double _lastSingleClickTime;
    id _originalScrollerTarget;
    SEL _originalScrollerSelector;
    BOOL _inThumbScroll;
    BOOL _useScrollOverlay;
    OverlayWindow *_overlay;
    NSTimer *_overlayCloseTimer;
    struct __CFDateFormatter *_mediumDateFormatter;
    IPAnimator *_animator;
    IPAnimation *_animation;
    int _lastAnimatedDropHoldIndex;
    NSInvocation *_invokeAfterAnimation;
    NSTimer *_springTimer;
    struct _NSPoint _springLocation;
    struct _NSSize _detailStringSize;
    float _extraViewArea;
    BOOL _flipInfoIsActive;
    NSImage *_infoBadge;
    NSImage *_infoBadgeHighlighted;
    struct map<int, CGVAnimationAdjustments, std::less<int>, std::allocator<std::pair<const int, CGVAnimationAdjustments>>> *_animationDisplacement;
}

- (void)handleDbMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)handleAlbumMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)uncacheRendersForPhotoKey:(unsigned long)fp8;
- (struct CGImage *)createCGImageFromData:(const void *)fp8 dataSize:(int)fp12 pixels:(int)fp16;
- (void)squarePathInContext:(struct CGContext *)fp8 xmin:(float)fp12 ymin:(float)fp16 xmax:(float)fp20 ymax:(float)fp24;
- (void)roundPathInContext:(struct CGContext *)fp8 xmin:(float)fp12 ymin:(float)fp16 xmax:(float)fp20 ymax:(float)fp24 radius:(float)fp28;
- (void)drawImageFlippedInContext:(struct CGContext *)fp8 rect:(struct CGRect)fp12 image:(struct CGImage *)fp28;
- (void)drawVerticalGradientInRect:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
- (int)ignoreRollChangeMessages;
- (void)relayout:(BOOL)fp8;
- (void)handleDoneWithChanges:(id)fp8;
- (void)sheetStarting:(id)fp8;
- (void)internalUserHiddenStateChanged:(id)fp8;
- (void)userHiddenStateChanged:(id)fp8;
- (void)cellIndex:(int)fp8 toRow:(int *)fp12 column:(int *)fp16;
- (void)point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexOfRollWithKey:(unsigned long)fp8;
- (struct CellData *)dayForRollWithKey:(unsigned long)fp8;
- (struct CellData *)dayForSelectionAtIndex:(int)fp8;
- (int)indexOfFirstCellInRowUnderY:(float)fp8;
- (int)indexForPoint:(struct _NSPoint)fp8;
- (int)cellIndexForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)photoRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)dragHitRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)metaRectFromCellRect:(struct _NSRect)fp8;
- (struct _NSRect)flipInfoRectForCellRect:(struct _NSRect)fp8;
- (struct _NSRect)detailRectForPhotoRect:(struct _NSRect)fp8;
- (id)bezierPathForPhotoRect:(struct _NSRect)fp8 forString:(id)fp24;
- (void)setPseudoConstants;
- (id)thumbnailSizeKey;
- (void)tellArchiveControllerSelectionChanged;
- (id)cellDataVectorDescription;
- (BOOL)acceptsFirstResponder;
- (float)minCellHeight;
- (float)maxCellHeight;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)purgeMarkerPhotos;
- (void)freeCellDataContext:(void *)fp8;
- (void)emptyCellDataVector;
- (unsigned long long)renderCacheKeyForPhoto:(struct IPPhotoInfo *)fp8 inCellData:(struct CellData *)fp12;
- (id)scrollHudLabelForCellData:(struct CellData *)fp8;
- (BOOL)allowDragReorder;
- (BOOL)supportsGoingToDetailView;
- (BOOL)supportsGoToDetailButton;
- (BOOL)supportsScrollOverlay;
- (BOOL)supportsEdit;
- (BOOL)supportsMagnifier;
- (BOOL)supportsReflection;
- (BOOL)supportsOverviewCell;
- (BOOL)dragOverviewImage;
- (BOOL)canDropInternalDrag:(id)fp8 onCellData:(struct CellData *)fp12;
- (void)fillPasteboardWithSelection:(id)fp8;
- (void)gridPerformDragOperation:(id)fp8 pasteboard:(id)fp12;
- (id)getNewSourceAlbum;
- (BOOL)showsEmptyEvents;
- (BOOL)shouldGroupEvents;
- (void)populateCellDataVector:(struct _NSRect)fp8;
- (int)metaFieldCount;
- (id)metaStringForCell:(struct CellData *)fp8 field:(int)fp12 shortFormat:(BOOL)fp16 isHover:(BOOL)fp20 isSelected:(BOOL)fp24 isUntitled:(char *)fp28;
- (struct _NSRect)metaRectForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 field:(int)fp32;
- (int)fieldForInlineEditAtPoint:(struct _NSPoint)fp8 forCell:(struct CellData *)fp16 cellIndex:(int)fp20 cellRect:(struct _NSRect)fp24 fieldRect:(struct _NSRect *)fp40;
- (void)updateInlineEditorForCellIndex:(int)fp8 field:(int)fp12 withSave:(BOOL)fp16;
- (BOOL)shouldDrawSquareForPhoto:(struct IPPhotoInfo *)fp8 isHover:(BOOL)fp12;
- (struct CGImage *)cellImageForCellData:(struct CellData *)fp8 photo:(struct IPPhotoInfo *)fp12 paddedDrawRect:(struct CGRect)fp16 rotation:(float)fp32 tnManager:(id)fp36 fillSquareThumb:(BOOL)fp40 lowres:(BOOL)fp44 selected:(BOOL)fp48 hover:(BOOL)fp52 forOverview:(BOOL)fp56 forDrag:(BOOL)fp60;
- (void)drawMetaDataForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 isHover:(BOOL)fp32 isSelected:(BOOL)fp36 context:(struct CGContext *)fp40;
- (struct IPSelectionList *)selectionListForCurrentSelection;
- (void)rebuildCellDataVector:(struct _NSRect)fp8;
- (id)dateStringForDrawPhotoOfDay:(struct CellData *)fp8;
- (id)dateRangeStringForPhotos:(struct IPPhotoList *)fp8 earlyDateOnly:(BOOL)fp12 shortFormat:(BOOL)fp16;
- (id)dateRangeStringForCell:(struct CellData *)fp8 earlyDateOnly:(BOOL)fp12 shortFormat:(BOOL)fp16;
- (id)locationForDay:(struct CellData *)fp8 isHover:(BOOL)fp12 unnamed:(char *)fp16;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 forRoll:(struct IPRoll *)fp12;
- (void)persistCurrentPhoto:(struct CellData *)fp8;
- (void)copyKeyToCurrent:(struct CellData *)fp8;
- (void)deltaHoverPhoto:(int)fp8;
- (long)bestVisiblePhotoForDay:(struct CellData *)fp8;
- (struct IPPhotoList *)eventKeyPhotoList;
- (void)setCurrentFromRoll:(struct CellData *)fp8;
- (void)purgeDeadSelections;
- (id)album;
- (void)scrollSelectionIntoView;
- (void)moveSelection:(int)fp8 shiftDown:(BOOL)fp12;
- (void)refreshCellAtIndex:(int)fp8;
- (id)makeFilterAlbumForPhotosInSelectedCells;
- (id)albumForSelection;
- (BOOL)smartNameAlbum:(id)fp8 forCellKeys:(id)fp12;
- (void)updateDetailViewWithCellKeys:(id)fp8;
- (unsigned long)firstCellKey;
- (unsigned long)lastCellKey;
- (void)showDetailForNeighbor:(int)fp8 ofCellWithKey:(unsigned long)fp12;
- (void)hoverCellToDetail:(id)fp8;
- (void)cacheFrameImages:(struct _NSRect)fp8 backgroundColor:(id)fp24;
- (void)freeFrameImages;
- (void)killBackfillTimers;
- (void)setBackfillTimers;
- (void)_modifiersChanged:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)keyUp:(id)fp8;
- (void)scrollAnnounce:(id)fp8;
- (void)scrollAction:(id)fp8;
- (void)hijackVerticalScroller;
- (void)saveScrollPosition;
- (id)defaultAlbum;
- (void)awakeFromNib;
- (void)defaultsChanged:(id)fp8;
- (BOOL)isFlipped;
- (int)nextPrevInlineTarget:(BOOL)fp8;
- (void)inlineEditorTextChanged;
- (void)inlineEditorShouldEndEditing;
- (void)inlineEditorShouldBeginEditing;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)rebuildToolTips;
- (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 selected:(BOOL)fp24 hover:(BOOL)fp28 empty:(BOOL)fp32 backgroundColor:(id)fp36;
- (struct CGImage *)drawThumbnailForCellData:(struct CellData *)fp8 photo:(struct IPPhotoInfo *)fp12 thumbFrame:(struct _NSRect)fp16 rotation:(float)fp32 tnManager:(id)fp36 context:(struct CGContext *)fp40 fillSquareThumb:(BOOL)fp44 lowres:(BOOL)fp48 selected:(BOOL)fp52 hover:(BOOL)fp56 forOverview:(BOOL)fp60 forDrag:(BOOL)fp64;
- (void)drawOverviewCell:(struct CellData *)fp8 rect:(struct _NSRect)fp12 tnManager:(id)fp28 context:(struct CGContext *)fp32 lowres:(BOOL)fp36 selected:(BOOL)fp40 drawImage:(struct CGImage **)fp44;
- (void)reflectCGImage:(struct CGImage *)fp8 fromRect:(struct _NSRect)fp12 toRect:(struct _NSRect)fp28;
- (void)drawCountBubbleForDay:(struct CellData *)fp8 rect:(struct _NSRect)fp12;
- (void)backfill:(id)fp8;
- (float)maxOverlayRollNamedWidth;
- (void)updateOverlay:(BOOL)fp8 visible:(struct _NSRect)fp12;
- (void)overlayCloser:(id)fp8;
- (void)drawBackgroundInRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)animateDropHoleAtIndex:(int)fp8 finalForDrop:(BOOL)fp12;
- (void)stopDropHoleAnimation;
- (BOOL)isActive;
- (void)eventAnimateAtCurrentValue:(id)fp8;
- (void)animationDidStop:(id)fp8;
- (void)animationDidEnd:(id)fp8;
- (void)animateAtCurrentValue:(id)fp8;
- (void)toggleFlaggedForPhoto:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)drawBadgeImageForCount:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)invalidateDragSelectionCells;
- (void)dragSelection:(id)fp8 imagePhoto:(struct IPPhotoInfo *)fp12 fromCell:(struct CellData *)fp16 slideBack:(BOOL)fp20;
- (void)trackDragSelectForEvent:(id)fp8;
- (BOOL)actionTrackCell:(struct CellData *)fp8 atIndex:(int)fp12 cellRect:(struct _NSRect)fp16 event:(id)fp32;
- (void)updateUIToInfo:(struct IPPhotoInfo *)fp8;
- (void)magnifierIsClosing;
- (void)addToShelf:(struct IPPhotoInfo *)fp8;
- (void)removeFromShelf:(struct IPPhotoInfo *)fp8;
- (void)editPhoto:(struct IPPhotoInfo *)fp8;
- (void)showDetails:(struct IPPhotoInfo *)fp8;
- (void)startDragOfPhoto:(struct IPPhotoInfo *)fp8 fromCell:(struct CellData *)fp12 forEvent:(id)fp16;
- (void)showMagnifierForPhotoAtIndex:(int)fp8 inDayAtIndex:(int)fp12;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)showFlipInfoForCell:(struct CellData *)fp8;
- (void)updateFlipInfo:(struct CellData *)fp8;
- (void)setFlipInfoActive:(BOOL)fp8;
- (void)makeEmptyBeSelection;
- (void)updateLatestEvent:(unsigned long)fp8;
- (void)magnifyWithEvent:(id)fp8;
- (void)rotateWithEvent:(id)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)isCellSelectedForKey:(unsigned long)fp8;
- (BOOL)isCellSelected:(struct CellData *)fp8;
- (void)selectCell:(struct CellData *)fp8 replaceExistingSelection:(BOOL)fp12 extend:(BOOL)fp16;
- (void)unselectCell:(struct CellData *)fp8;
- (void)selectEvents:(struct vector<Key, std::allocator<Key>> *)fp8 selected:(BOOL)fp12;
- (void)selectEventsInRect:(struct _NSRect)fp8 selected:(BOOL)fp24;
- (void)setFrame:(struct _NSRect)fp8;
- (id)leftTextAttributes;
- (void)setLeftTextAttributes:(id)fp8;
- (id)rightTextAttributes;
- (void)setRightTextAttributes:(id)fp8;
- (id)centerTextAttributes;
- (void)setCenterTextAttributes:(id)fp8;
- (id)untitledCenterTextAttributes;
- (void)setUntitledCenterTextAttributes:(id)fp8;
- (BOOL)needsRepaint;
- (void)setNeedsRepaint:(BOOL)fp8;
- (BOOL)needsRelayout;
- (void)setNeedsRelayout:(BOOL)fp8;
- (struct RenderCache *)renderCache;
- (void)undoRedoShelfPhotos:(id)fp8 add:(BOOL)fp12 undoManager:(id)fp16;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (void)removeSelectedPhotosFromShelf:(id)fp8;
- (void)clearShelf:(id)fp8;
- (void)dragMergeWithContext:(id)fp8;
- (void)dragMergeConfirmSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)undoRedoMakeKeyPhotoDb:(id)fp8 rollKey:(unsigned long)fp12 oldPhotoKey:(unsigned long)fp16 newPhotoKey:(unsigned long)fp20 undoManager:(id)fp24;
- (void)makePhotoEventKey:(id)fp8;
- (void)redoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)undoHideUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)redoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)undoShowUserHiddenPhotos:(id)fp8 originalHidden:(id)fp12 undoManager:(id)fp16;
- (void)hideUserHiddenPhoto:(id)fp8;
- (void)showUserHiddenPhoto:(id)fp8;
- (BOOL)canShowUserHiddenPhoto;
- (BOOL)canHideUserHiddenPhoto;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)showUserHiddenPhotos:(id)fp8;
- (BOOL)canShowUserHiddenPhotos;
- (BOOL)canHideUserHiddenPhotos;
- (BOOL)canPaste;
- (void)addGPSTrackingData:(id)fp8;
- (void)showGPSTrackingData:(id)fp8;
- (void)removeSelectionFromGroupAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (unsigned int)dragOperationForWindowLocation:(id)fp8;
- (void)bumpSpringTimer:(struct _NSPoint)fp8;
- (void)clearSpringTimer;
- (void)doSpringTimer:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)windowForSelectedEvent;
- (void)animateSetEvent;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)undoRedoPasteCutPhotos:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)paste:(id)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)hasSelection;
- (id)selectedIndices;
- (id)selectedEventKeys:(int *)fp8;
- (struct IPPhotoList *)selectedPhotos;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)selectAll;
- (void)selectNone;
- (float)thumbSize;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (BOOL)returnEmptySelection;
- (void)setReturnEmptySelection:(BOOL)fp8;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasInstalled;
- (void)viewWasRemoved;

@end

@interface ContainerGridAnimationPhase : IPAnimationPhase
{
    struct vector<EventViewAnimationObject, std::allocator<EventViewAnimationObject>> *_evaoObjects;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)copyEndsToBegins;
- (void)addObject:(void *)fp8;
- (int)objectCount;
- (void *)objects;
- (void)processAnimation:(float)fp8 context:(void *)fp12;

@end

@interface IPPeopleViewController : IPViewController
{
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mSmartAlbumItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mWebItem;
    IPToolbarItem *mNetAlbumsItem;
    IPToolbarItem *mFBAlbumsItem;
    IPToolbarItem *mFlickrAlbumsItem;
    IPToolbarItem *mSmugMugAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    IPToolbarItem *mPrintsItem;
    NSMenu *mPrintsMenu;
    IPToolbarItem *mPeopleAddItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    struct MessageReceiver mAlbumMessageReceiver;
    NSWindow *_peopleSheet;
    IPPeopleView *_peopleViewForSheet;
    NSTextField *_headerWithCount;
    NSButton *_dontShowAgainButton;
    NSMutableArray *peopleSheetQueue;
    int _currentMain;
    NSView *_peopleRootView;
    NSView *_namingRootView;
    NSView *_upgradeRootView;
    IPPeopleView *_peopleMainView;
    IPPeopleNamingView *_namingMainView;
    IPFaceUpgradeView *_upgradeMainView;
    IPPeopleNaming *_peopleNamingController;
}

- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (id)burnInfo;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)addMagnifyTools;
- (void)removeMagnifyTools;
- (BOOL)validateFlip;
- (BOOL)flipIsActive;
- (void)toggleFlip;
- (void)initToolbar;
- (void)freeToolbar;
- (id)albumForSelection;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (id)updateStatus;
- (id)searchItem;
- (void)selectAll;
- (void)selectNone;
- (BOOL)supportsFindCommand;
- (void)personAddAction:(id)fp8;
- (void)createSmartAlbumForSelection:(id)fp8;
- (void)_loadNib;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)validateMenuItem:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (int)currentMain;
- (void)setCurrentMain:(int)fp8;
- (id)peopleMainView;
- (id)namingMainView;
- (id)peopleNamingController;

@end

@interface IPPeopleDetailHeaderView : NSView
{
    Album *_album;
    BOOL _hiliteBack;
    NSImage *_bgArt;
    IPStretchableImage *_bgReviewArt;
    NSImage *_backLeftN;
    NSImage *_backMiddleN;
    NSImage *_backRightN;
    NSImage *_backLeftP;
    NSImage *_backMiddleP;
    NSImage *_backRightP;
    NSImage *_backLeftD;
    NSImage *_backMiddleD;
    NSImage *_backRightD;
    struct _NSPoint _backLeftPoint;
    struct _NSRect _backMiddleRect;
    struct _NSPoint _backRightPoint;
    struct _NSRect _backRect;
    BOOL _showNextPrev;
    BOOL _hiliteNext;
    BOOL _hilitePrev;
    NSImage *_nextN;
    NSImage *_prevN;
    NSImage *_nextD;
    NSImage *_prevD;
    NSImage *_nextP;
    NSImage *_prevP;
    struct _NSRect _nextRect;
    struct _NSRect _prevRect;
    NSImage *_keyframe;
    NSAttributedString *_backStr;
    struct _NSRect _backStrRect;
    NSString *_mainString;
    NSString *_subString;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    NSDictionary *_pluralTitleAttrs;
    Ellipsizer *_pluralTitleEllipsizer;
    struct _NSRect _titleRect;
    struct _NSRect _unionRect;
    struct _NSRect _maxCenterRect;
    NSDictionary *_revealAttrs;
    NSDictionary *_hiliteRevealAttrs;
    struct _NSRect _revealRect;
    struct _NSRect _actualRevealRect;
    BOOL _hiliteReveal;
    BOOL _showReveal;
    NSDictionary *_dateAttrs;
    Ellipsizer *_dateEllipsizer;
    KeyMgr *_faceKeys;
    unsigned int _singleFaceKey;
    unsigned int _firstKey;
    unsigned int _lastKey;
    struct __CFDateFormatter *_dateFormatter;
    NSColor *_titleColor;
    NSTextField *_inlineEditor;
    struct IPRoll *_inlineEditRoll;
    NSLock *_inlineEditUpdateLock;
    BOOL _reviewModeStyle;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (struct HeaderDisplayData)displayDataForFaceKey:(unsigned long)fp8;
- (void)tile;
- (void)_goBack;
- (void)_goToNeighbor:(int)fp8;
- (void)_toggleRevealConceal;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)drawPhoto:(struct IPPhotoInfo *)fp8 mainStr:(id)fp12 subStr:(id)fp16 inRect:(struct _NSRect)fp20 centered:(BOOL)fp36 measureOnly:(BOOL)fp40 titleRect:(struct _NSRect *)fp44 skipPopupArrows:(BOOL)fp48;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)setHidden:(BOOL)fp8;
- (void)undoRedoInlineCaptionEditForDB:(id)fp8 rollKey:(unsigned long)fp12 oldCaption:(id)fp16 newCaption:(id)fp20 undoManager:(id)fp24;
- (void)inlineEditorAction:(id)fp8;
- (void)updateInlineCaptionEditor:(struct IPRoll *)fp8;
- (BOOL)_control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (void)_undoRedoSetPersonKeyPhotoForPerson:(unsigned long)fp8 oldKeyImageKey:(unsigned long)fp12 newKeyImageKey:(unsigned long)fp16 db:(id)fp20 undoManager:(id)fp24;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;
- (id)mainString;
- (void)setMainString:(id)fp8;
- (id)subString;
- (void)setSubString:(id)fp8;
- (id)faceKeys;
- (void)setFaceKeys:(id)fp8;
- (BOOL)reviewModeStyle;
- (void)setReviewModeStyle:(BOOL)fp8;

@end

@interface KeywordInspectorGroupView : NSView
{
    NSImage *mGradientImage;
    NSButton *mDisclosureButton;
    float mDisclosedHeight;
    BOOL mReceivingValidDrag;
    id <DragDelegateProtocol> mDragDelegate;
}

+ (int)keywordColumnsForWindowWidth:(float)fp8;
+ (float)goodWidthForNumberOfColumns:(int)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)setDisclosure:(BOOL)fp8;
- (BOOL)disclosure;
- (float)heightWithDisclosure;
- (void)addExtraHeight:(float)fp8;
- (id)initWithWidth:(float)fp8 keywords:(id)fp12 keywordMgr:(id)fp16 target:(id)fp20 disclosure:(BOOL)fp24 dragDelegate:(id)fp28 label:(id)fp32;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)draggingExited:(id)fp8;

@end

@interface IPCompletionMenu : NSObject
{
    NSWindow *_menuWindow;
    NSScrollView *_scrollView;
    IPCompletionMenuTableView *_cellTable;
    NSTextField *_editField;
    NSButton *_cancelButton;
    NSTextView *_editor;
    BOOL _endMenu;
    struct _NSRect _originalWindowFrame;
    BOOL _mouseInTable;
    int _menuStyle;
    NSArray *_completions;
    NSString *_originalStringValue;
    NSString *_stringValue;
    NSString *_placeholderStringValue;
    NSString *_rootString;
    id _objectValue;
    id _context;
    int _completionIndex;
    BOOL _shouldMoveToNext;
    BOOL _shouldMoveToPrevious;
    id <IPCompletionMenuDelegate> _delegate;
    float _menuWidth;
    float _cellHeight;
    int _rowsToShow;
    unsigned int _editorAlignment;
    NSFont *_editorFont;
    BOOL _bail;
    BOOL _defeatSuggest;
}

- (id)init;
- (void)dealloc;
- (void)storeCurrentCompletionForIndex:(int)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)resizeWindowForCurrentCompletionSet;
- (void)refreshCompletionSet;
- (void)selectNextItem;
- (void)selectPreviousItem;
- (void)cancelButtonAction:(id)fp8;
- (void)showOverRect:(struct _NSRect)fp8 inView:(id)fp24;
- (void)cancel;
- (void)eventHandler;
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)editorAction:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;
- (float)tableView:(id)fp8 heightOfRow:(int)fp12;
- (BOOL)defeatSuggest;
- (void)setDefeatSuggest:(BOOL)fp8;
- (BOOL)bail;
- (void)setBail:(BOOL)fp8;
- (id)rootString;
- (void)setRootString:(id)fp8;
- (id)editorFont;
- (void)setEditorFont:(id)fp8;
- (unsigned int)editorAlignment;
- (void)setEditorAlignment:(unsigned int)fp8;
- (int)rowsToShow;
- (void)setRowsToShow:(int)fp8;
- (float)cellHeight;
- (void)setCellHeight:(float)fp8;
- (float)menuWidth;
- (void)setMenuWidth:(float)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (BOOL)shouldMoveToPrevious;
- (void)setShouldMoveToPrevious:(BOOL)fp8;
- (BOOL)shouldMoveToNext;
- (void)setShouldMoveToNext:(BOOL)fp8;
- (int)completionIndex;
- (void)setCompletionIndex:(int)fp8;
- (id)context;
- (void)setContext:(id)fp8;
- (id)objectValue;
- (void)setObjectValue:(id)fp8;
- (id)placeholderStringValue;
- (void)setPlaceholderStringValue:(id)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (id)originalStringValue;
- (void)setOriginalStringValue:(id)fp8;
- (id)completions;
- (void)setCompletions:(id)fp8;
- (int)menuStyle;
- (void)setMenuStyle:(int)fp8;
- (id)editField;

@end

@interface IPCompletionMenuContentView : NSView
{
    int _menuStyle;
    IPCompletionMenu *_menu;
    BOOL _hiliteButton;
}

- (void)definingFaces_drawRect:(struct _NSRect)fp8;
- (void)namingFaces_drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (id)menu;
- (void)setMenu:(id)fp8;
- (int)menuStyle;
- (void)setMenuStyle:(int)fp8;

@end

@interface IPCompletionMenuTableView : NSTableView
{
    IPCompletionMenu *_menu;
}

- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setCompletionMenu:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;

@end

@interface IPCompletionMenuTableColumn : NSTableColumn
{
    IPCompletionMenu *_menu;
}

- (id)dataCellForRow:(int)fp8;
- (void)setCompletionMenu:(id)fp8;

@end

@interface IPCompletionMenuWindow : NSWindow
{
}

- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;

@end

@interface AsyncLocationLookupMgr : NSObject
{
    NSMutableDictionary *mTasks;
    NSLock *mSearchLock;
    NSLock *mReverseGeoCacheLock;
    LocationLookup *mLookup;
    LocationData *mData;
    int _showActivityCount;
    NSMutableArray *_reverseGeoLookupCache;
}

+ (id)sharedManager;
- (id)init;
- (void)dealloc;
- (void)_reverseGeocodeHostStatusNotification:(id)fp8;
- (void)searchForPhotosNeedingReverseGeoLookup;
- (void)_geocodeHostStatusNotification:(id)fp8;
- (void)searchForPhotosNeedingForwardGeoLookup;
- (BOOL)_reverseGeocodeHostIsAvailable;
- (BOOL)_geocodeHostIsAvailable;
- (void)geocodePhoto:(struct IPPhotoInfo *)fp8;
- (void)geocodeEvent:(struct IPRoll *)fp8;
- (id)_searchComponentsFromData:(id)fp8;
- (void)reverseGeocodePhoto:(struct IPPhotoInfo *)fp8;
- (void)reverseGeocodeEvent:(struct IPRoll *)fp8;
- (void)reverseGeocodeDictionary:(id)fp8;
- (BOOL)reverseGeocodeImportLocationLookup:(id)fp8;
- (void)lookupCloudRecord:(int)fp8 type:(int)fp12;
- (void)_cacheGeoHierarchyResult:(id)fp8 latitude:(double)fp12 longitude:(double)fp20;
- (id)_cachedGeoHierarchyForLatitude:(double)fp8 longitude:(double)fp16;
- (void)_searchComplete:(id)fp8;
- (void)_setLocationFromDict:(id)fp8 forPhotoKey:(id)fp12;
- (void)_setLocationFromDict:(id)fp8 forDevicePhotoKey:(id)fp12;
- (void)_setLocationFromDict:(id)fp8 forEventKey:(id)fp12;
- (void)_setLocationFromDict:(id)fp8 forDictionary:(id)fp12;
- (void)_setLocationFromHierarchy:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)_setLocationFromHierarchy:(id)fp8 forPhotoKey:(id)fp12;
- (void)_setLocationFromHierarchy:(id)fp8 forEventKey:(id)fp12;
- (void)_setLocationFromHierarchy:(id)fp8 forImportLocationLookup:(id)fp12;
- (void)_saveHierarchy:(id)fp8 forLookupKey:(id)fp12;
- (void)showActivity:(BOOL)fp8;

@end

@interface CachedGeoHierarchyResult : NSObject
{
    GeoHierarchy *mGeoHierarchy;
    double mLatitude;
    double mLongitude;
}

- (id)initWithGeoHierarchy:(id)fp8 latitude:(double)fp12 longitude:(double)fp20;
- (void)dealloc;

@end

@interface PersonCompletionMenuCell : NSCell
{
    Ellipsizer *_titleEllipsizer;
    Ellipsizer *_subtitleEllipsizer;
    BOOL _lightBackground;
    BOOL _flipped;
}

- (id)init;
- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)drawTitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (void)drawSubtitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (void)highlight:(BOOL)fp8 withFrame:(struct _NSRect)fp12 inView:(id)fp28;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (BOOL)lightBackground;
- (void)setLightBackground:(BOOL)fp8;

@end

@interface PersonCompletionItem : NSObject <NSCopying>
{
    struct CGImage *_image;
    NSString *_name;
    NSString *_email;
    int _faceKey;
    int _matchCount;
    int _itemType;
}

+ (id)createNewPersonItemWithName:(id)fp8;
+ (id)ignorePersonItem;
- (id)init;
- (id)initWithFaceNameInfo:(struct FaceNameInfo *)fp8 facekey:(int)fp12;
- (id)initWithName:(id)fp8 facekey:(int)fp12;
- (id)initWithName:(id)fp8 email:(id)fp12 facekey:(int)fp16;
- (id)initWithName:(id)fp8 image:(struct CGImage *)fp12 facekey:(int)fp16;
- (id)initWithName:(id)fp8 email:(id)fp12 image:(struct CGImage *)fp16 facekey:(int)fp20;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (void)acquireImageUsingDatabase:(id)fp8;
- (struct CGImage *)image;
- (void)setImage:(struct CGImage *)fp8;
- (int)sortNameAscending:(id)fp8;
- (int)itemType;
- (void)setItemType:(int)fp8;
- (int)matchCount;
- (void)setMatchCount:(int)fp8;
- (int)faceKey;
- (void)setFaceKey:(int)fp8;
- (id)email;
- (void)setEmail:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;

@end

@interface PeoplePicker : NSObject
{
    FloatingPickerWindow *mWindow;
    SEL mAction;
    id mTarget;
    NSTableView *_peopleTable;
    NSArray *_completions;
    NSString *_selectedFaceName;
    BOOL _visible;
}

+ (id)sharedPicker;
- (void)hide;
- (void)_updatePeopleTable;
- (BOOL)isVisible;
- (void)showPointingAtRect:(struct _NSRect)fp8 target:(id)fp24 action:(SEL)fp28 completions:(id)fp32;
- (id)init;
- (void)dealloc;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;
- (id)selectedFaceName;
- (void)setSelectedFaceName:(id)fp8;
- (id)completions;
- (void)setCompletions:(id)fp8;

@end

@interface PeoplePickerTableView : NSTableView
{
}

- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;

@end

@interface PeoplePickerCell : NSCell
{
    Ellipsizer *_titleEllipsizer;
    Ellipsizer *_subtitleEllipsizer;
}

- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)drawTitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (void)drawSubtitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface NMEAParser : NSObject
{
}

+ (BOOL)isNMEAFile:(id)fp8;
- (id)_parseNMEA:(struct __sFILE *)fp8;
- (id)parseFile:(id)fp8;

@end

@interface PhoneLogParser : NSObject
{
}

- (id)parseFile:(id)fp8;

@end

@interface PhoneLogController : NSObject
{
    NSPanel *mPanel;
    NSPopUpButton *mAvailablePhonesPopup;
    NSTextField *mDescription;
    LocationController *mParentController;
    BOOL useBonjour;
    NSNetServiceBrowser *mBonjourBrowser;
    NSMutableArray *mSources;
    struct IPSelectionList *mSelection;
    NSMutableData *mRemoteData;
    BOOL isLogFileRequest;
    NSMutableData *receivedData;
    NSString *account;
}

+ (id)sharedController;
- (void)awakeFromNib;
- (void)showSheetInWindow:(id)fp8 forController:(id)fp12 selection:(struct IPSelectionList *)fp16;
- (void)handlePhoneSelection:(id)fp8;
- (void)cancelPhoneSelection:(id)fp8;
- (void)_phoneSelectionCompleted:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)_populatePhonePopup;
- (void)_getOnlineDevices;
- (void)_getRemoteDataWithName:(id)fp8;
- (void)connection:(id)fp8 didReceiveResponse:(id)fp12;
- (void)connection:(id)fp8 didReceiveData:(id)fp12;
- (void)connection:(id)fp8 didFailWithError:(id)fp12;
- (void)connectionDidFinishLoading:(id)fp8;
- (void)stream:(id)fp8 handleEvent:(unsigned int)fp12;
- (void)dealloc;

@end

@interface IPPersonToolTipView : IPToolTipView
{
}

+ (void)makeAttrs;
+ (struct _NSSize)sizeForContent:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface IPPersonToolTipContent : NSObject
{
    struct _NSRect _faceRect;
    int _faceKey;
    NSString *_faceName;
    unsigned int _imageKey;
    int _faceIndex;
    BOOL _ignored;
    int _ownerServiceKey;
}

- (id)init;
- (void)dealloc;
- (int)sortByFaceRect:(id)fp8;
- (BOOL)ignored;
- (void)setIgnored:(BOOL)fp8;
- (int)ownerServiceKey;
- (void)setOwnerServiceKey:(int)fp8;
- (int)faceIndex;
- (void)setFaceIndex:(int)fp8;
- (unsigned long)imageKey;
- (void)setImageKey:(unsigned long)fp8;
- (id)faceName;
- (void)setFaceName:(id)fp8;
- (int)faceKey;
- (void)setFaceKey:(int)fp8;
- (struct _NSRect)faceRect;
- (void)setFaceRect:(struct _NSRect)fp8;

@end

@interface IPInstructionDetailHeaderView : NSView
{
    NSImage *_bgFill;
    IPStretchableImage *_buttonD;
    IPStretchableImage *_buttonN;
    IPStretchableImage *_buttonP;
    NSColor *_backgroundColor;
    NSDictionary *_textAttributes;
    NSString *_text;
    NSDictionary *_buttonTextAttributes;
    id _target;
    SEL _continueAction;
    SEL _cancelAction;
    struct _NSRect _textRect;
    BOOL _needTile;
    BOOL _hiliteContinue;
    BOOL _hiliteCancel;
    NSString *_continueText;
    struct _NSRect _continueStrRect;
    struct _NSRect _continueRect;
    NSString *_cancelText;
    struct _NSRect _cancelStrRect;
    struct _NSRect _cancelRect;
}

- (void)initVariables;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (struct _NSSize)artSize;
- (void)tile;
- (void)setFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (id)textAttributes;
- (void)setTextAttributes:(id)fp8;
- (id)text;
- (void)setText:(id)fp8;
- (id)buttonTextAttributes;
- (void)setButtonTextAttributes:(id)fp8;
- (SEL)cancelAction;
- (void)setCancelAction:(SEL)fp8;
- (SEL)continueAction;
- (void)setContinueAction:(SEL)fp8;
- (id)target;
- (void)setTarget:(id)fp8;

@end

@interface IPEventInfo : IPMapViewFlip
{
    IPEventView *mEventView;
    struct IPRoll *_currentEvent;
    ImageDB *_db;
    unsigned int _key;
    NSImageView *_frontImage;
    IPEventTileView *_backImage;
    NSString *_nameLabel;
    NSString *_name;
    NSImageView *_bgImageView;
    NSView *_infoView;
    NSBox *_infoViewBox;
    struct _NSRect _infoViewBoxRect;
    NSView *_mapContainerView;
    NSButton *_closeButton;
    struct _NSRect _closeButtonRect;
    id _eventAddress;
    id _eventCount;
    id _eventDate;
    id _eventPhotoCount;
    id _eventDescription;
    id _eventImage;
    id _eventName;
    id _eventPlaceName;
    NSTextView *mEditor;
    id _showHideButton;
    id _doneButton;
    NSImage *smallBackgroundImage;
    NSImage *largeBackgroundImage;
}

- (void)awakeFromNib;
- (id)locationTextField;
- (id)parseField;
- (id)currentDB;
- (unsigned int)currentKey;
- (int)locationCompletionType;
- (id)currentUndoDictionary;
- (void)takeUndoValuesFromDictionary:(id)fp8;
- (void)setEventView:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (struct _NSSize)size;
- (void)updateUI;
- (void)populateUI;
- (void)showForEvent:(struct IPRoll *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36 withListState:(int)fp52 parentViewGlobalRect:(struct _NSRect)fp56;
- (void)updateAnimateRect:(struct _NSRect)fp8;
- (void)updateForEvent:(struct IPRoll *)fp8 inDB:(id)fp12 withImage:(id)fp16 withListState:(int)fp20;
- (BOOL)showingMap;
- (void)toggleMapViewWithAnimation:(BOOL)fp8;
- (void)toggleMapView:(id)fp8;
- (void)_updateDoneButton;
- (void)_updateMapButton:(BOOL)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)previous:(id)fp8;
- (void)next:(id)fp8;
- (void)commitChanges;
- (void)closeWithSave:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPEventTileView : NSView
{
    unsigned int mKey;
    ImageDB *mImageDB;
    long mIndex;
    IPEventView *mEventView;
    IPEventInfo *mEventInfo;
    struct CGImage *mUnselectedFrameImage;
    struct CGImage *mCurrentImage;
    int mTrackingTag;
    BOOL mInside;
    NSDictionary *_textAttributes;
    NSAttributedString *_clickText;
}

- (BOOL)acceptsFirstResponder;
- (void)updateSkim;
- (void)mouseDown:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)isFlipped;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setEventID:(unsigned long)fp8 inDB:(id)fp12 forEventView:(id)fp16 withEventInfo:(id)fp20;
- (struct IPPhotoInfo *)currentPhoto;
- (void)resetTrackingRect;
- (void)setFrame:(struct _NSRect)fp8;
- (struct CGImage *)currentImage;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPPlacesViewController : IPViewController
{
    IPToolbarItem *mReviewItem;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mShowHideItem;
    IPToolbarItem *mFlagItem;
    IPToolbarItem *mRotateItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mWebItem;
    IPToolbarItem *mNetAlbumsItem;
    IPToolbarItem *mFBAlbumsItem;
    IPToolbarItem *mFlickrAlbumsItem;
    IPToolbarItem *mSmugMugAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mCheckBoxesItem;
    IPToolbarItem *mPlacesCategoryItem;
    NSButtonCell *mTileViewButtonCell;
    NSButtonCell *mMapViewButtonCell;
    IPToolbarItem *mViewModeToolbarItem;
    BOOL mOptionKeyWasDown;
    BOOL mShowingBurnPlacard;
    struct MessageReceiver mAlbumMessageReceiver;
    GoogleMapWebView *mMapCacheView;
}

- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (id)burnInfo;
- (void)_burnArmed:(id)fp8;
- (void)_burnDisarmed:(id)fp8;
- (void)dealloc;
- (void)showMagnifierForPhotoInfo:(struct IPPhotoInfo *)fp8;
- (void)addMagnifyTools;
- (void)removeMagnifyTools;
- (void)initToolbar;
- (void)freeToolbar;
- (id)albumForSelection;
- (void)passEventToToolbar:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)makePhotoEventKeyPhoto:(struct IPPhotoInfo *)fp8;
- (id)updateStatus;
- (id)searchItem;
- (void)selectAll;
- (void)selectNone;
- (BOOL)supportsFindCommand;
- (void)mainPlacesCategoryAction:(id)fp8;
- (void)_loadNib;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)validateMenuItem:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (void)switchToTileView:(id)fp8;
- (void)switchToMapView:(id)fp8;

@end

@interface IPPlacesView : IPContainerGridView
{
    NSString *_inlineEditorOriginalValue;
    int _filterMode;
    NSWindow *_locationCompletionWindow;
    LocationCompletionMenu *_locationCompletion;
    struct map<float, int, std::less<float>, std::allocator<std::pair<const float, int>>> *_rowPoints;
    struct map<Key, int, std::less<Key>, std::allocator<std::pair<const Key, int>>> *_rowLocations;
    NSImage *_triangleDownWN;
    NSImage *_triangleRightWN;
    NSImage *_triangleDownWH;
    NSImage *_triangleRightWH;
    IPPlaceInfo *_placeInfo;
    BOOL _placesInfoActive;
    IPStretchableImage *placesUnselectedFrame;
}

- (void)handleDbMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)relayout:(BOOL)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setPseudoConstants;
- (void)dealloc;
- (BOOL)allowDragReorder;
- (BOOL)canDropInternalDrag:(id)fp8 onCellData:(struct CellData *)fp12;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 forRoll:(struct IPRoll *)fp12;
- (void)persistCurrentPhoto:(struct CellData *)fp8;
- (void)preferencesChanged:(id)fp8;
- (id)thumbnailSizeKey;
- (struct CGImage *)createEventFrameImage:(struct _NSRect)fp8 selected:(BOOL)fp24 hover:(BOOL)fp28 empty:(BOOL)fp32 backgroundColor:(id)fp36;
- (unsigned long long)renderCacheKeyForPhoto:(struct IPPhotoInfo *)fp8 inCellData:(struct CellData *)fp12;
- (int)indexOfFirstCellInRowUnderY:(float)fp8;
- (void)cellIndex:(int)fp8 toRow:(int *)fp12 column:(int *)fp16;
- (void)point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexForPoint:(struct _NSPoint)fp8;
- (int)cellIndexForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForRow:(int)fp8 column:(int)fp12;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)freeCellDataContext:(void *)fp8;
- (void)emptyCellDataVector;
- (void)populateCellDataVector:(struct _NSRect)fp8;
- (void)_logCellInformation;
- (void)getPlaceCount:(int *)fp8 selectionCount:(int *)fp12;
- (struct IPSelectionList *)selectionListForCurrentSelection;
- (void)undoRedoPlaceMergeWithBeginState:(id)fp8 endState:(id)fp12 undoManager:(id)fp16;
- (void)gridPerformDragOperation:(id)fp8 pasteboard:(id)fp12;
- (void)mergePlaces:(id)fp8;
- (void)fillPasteboardWithSelection:(id)fp8;
- (void)makePhotoEventKey:(id)fp8;
- (id)getNewSourceAlbum;
- (id)scrollHudLabelForCellData:(struct CellData *)fp8;
- (BOOL)shouldDrawSquareForPhoto:(struct IPPhotoInfo *)fp8 isHover:(BOOL)fp12;
- (BOOL)supportsScrollOverlay;
- (BOOL)supportsEdit;
- (BOOL)supportsGoingToDetailView;
- (BOOL)supportsGoToDetailButton;
- (BOOL)supportsMagnifier;
- (BOOL)supportsReflection;
- (BOOL)supportsOverviewCell;
- (BOOL)dragOverviewImage;
- (id)smartAlbumNameForCellKeys:(id)fp8 plural:(char *)fp12 specialName:(id *)fp16;
- (BOOL)smartNameAlbum:(id)fp8 forCellKeys:(id)fp12;
- (void)updateDetailViewWithCellKeys:(id)fp8 plural:(BOOL)fp12 albumName:(id)fp16 specialName:(id)fp20;
- (void)updateDetailViewWithCellKeys:(id)fp8;
- (int)metaFieldCount;
- (id)metaStringForCell:(struct CellData *)fp8 field:(int)fp12 shortFormat:(BOOL)fp16 isHover:(BOOL)fp20 isSelected:(BOOL)fp24 isUntitled:(char *)fp28;
- (struct _NSRect)metaRectForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 field:(int)fp32;
- (int)fieldForInlineEditAtPoint:(struct _NSPoint)fp8 forCell:(struct CellData *)fp16 cellIndex:(int)fp20 cellRect:(struct _NSRect)fp24 fieldRect:(struct _NSRect *)fp40;
- (void)renamePlaceName:(int)fp8 from:(id)fp12 to:(id)fp16 undoManager:(id)fp20;
- (void)inlineEditorAction:(id)fp8;
- (void)completionMenuShouldHide:(id)fp8;
- (void)updateInlineEditorForCellIndex:(int)fp8 field:(int)fp12 withSave:(BOOL)fp16;
- (void)inlineEditorTextChanged;
- (struct IPPhotoList *)photosForLocationCompletion;
- (BOOL)actionTrackCell:(struct CellData *)fp8 atIndex:(int)fp12 cellRect:(struct _NSRect)fp16 event:(id)fp32;
- (struct CGImage *)cellImageForCellData:(struct CellData *)fp8 photo:(struct IPPhotoInfo *)fp12 paddedDrawRect:(struct CGRect)fp16 rotation:(float)fp32 tnManager:(id)fp36 fillSquareThumb:(BOOL)fp40 lowres:(BOOL)fp44 selected:(BOOL)fp48 hover:(BOOL)fp52 forOverview:(BOOL)fp56 forDrag:(BOOL)fp60;
- (void)drawMetaDataForHeaderCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 isHover:(BOOL)fp32 isSelected:(BOOL)fp36 context:(struct CGContext *)fp40;
- (void)drawMetaDataForContainerCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 isHover:(BOOL)fp32 isSelected:(BOOL)fp36 context:(struct CGContext *)fp40;
- (void)drawMetaDataForCell:(struct CellData *)fp8 cellIndex:(int)fp12 cellRect:(struct _NSRect)fp16 isHover:(BOOL)fp32 isSelected:(BOOL)fp36 context:(struct CGContext *)fp40;
- (id)defaultAlbum;
- (unsigned long)cellKeyForPlaceName:(id)fp8;
- (unsigned long)firstCellKey;
- (unsigned long)lastCellKey;
- (BOOL)validateMenuItem:(id)fp8;
- (int)filterMode;
- (void)setFilterMode:(int)fp8;
- (void)animateWindowForPhotos:(struct CellData *)fp8 photo:(struct IPPhotoInfo *)fp12;
- (void)setPlacesInfoActive:(BOOL)fp8;

@end

@interface PlaceCellContext : NSObject
{
    int cityCount;
    int photoCount;
    NSString *name;
    int cellType;
    BOOL disclosureOpen;
}

- (id)init;
- (void)dealloc;
- (int)cityCount;
- (void)setCityCount:(int)fp8;
- (int)photoCount;
- (void)setPhotoCount:(int)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (int)cellType;
- (void)setCellType:(int)fp8;
- (BOOL)disclosureOpen;
- (void)setDisclosureOpen:(BOOL)fp8;

@end

@interface IPPlacesDetailHeaderView : NSView
{
    Album *_album;
    BOOL _hiliteBack;
    NSImage *_bgArt;
    NSImage *_backLeftN;
    NSImage *_backMiddleN;
    NSImage *_backRightN;
    NSImage *_backLeftP;
    NSImage *_backMiddleP;
    NSImage *_backRightP;
    struct _NSPoint _backLeftPoint;
    struct _NSRect _backMiddleRect;
    struct _NSPoint _backRightPoint;
    struct _NSRect _backRect;
    BOOL _showNextPrev;
    BOOL _hiliteNext;
    BOOL _hilitePrev;
    NSImage *_nextN;
    NSImage *_prevN;
    NSImage *_nextD;
    NSImage *_prevD;
    NSImage *_nextP;
    NSImage *_prevP;
    struct _NSRect _nextRect;
    struct _NSRect _prevRect;
    NSImage *_keyframe;
    NSAttributedString *_backStrTiles;
    NSAttributedString *_backStrMap;
    NSAttributedString *_backStr;
    struct _NSRect _backStrRect;
    NSString *_mainString;
    NSString *_subString;
    NSDictionary *_titleAttrs;
    Ellipsizer *_titleEllipsizer;
    NSDictionary *_pluralTitleAttrs;
    Ellipsizer *_pluralTitleEllipsizer;
    struct _NSRect _titleRect;
    struct _NSRect _unionRect;
    struct _NSRect _maxCenterRect;
    NSDictionary *_revealAttrs;
    NSDictionary *_dateAttrs;
    Ellipsizer *_dateEllipsizer;
    NSMutableArray *_placeNames;
    unsigned int _currentKey;
    unsigned int _firstKey;
    unsigned int _lastKey;
    struct __CFDateFormatter *_dateFormatter;
    NSColor *_titleColor;
    struct _NSRect mMapRect;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (struct HeaderDisplayData)displayDataForPlaceName:(id)fp8;
- (void)tile;
- (void)_goBack;
- (void)_goToNeighbor:(int)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)drawPhoto:(struct IPPhotoInfo *)fp8 mainStr:(id)fp12 subStr:(id)fp16 inRect:(struct _NSRect)fp20 centered:(BOOL)fp36 measureOnly:(BOOL)fp40 titleRect:(struct _NSRect *)fp44 skipPopupArrows:(BOOL)fp48;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)extractPlaceNamesFromAlbum;
- (void)setMapRect:(struct _NSRect)fp8;
- (struct _NSRect)mapRect;
- (id)album;
- (void)setAlbum:(id)fp8;
- (struct _NSSize)artSize;
- (id)mainString;
- (void)setMainString:(id)fp8;
- (id)subString;
- (void)setSubString:(id)fp8;

@end

@interface PublishServiceCollection : FolderAlbum
{
    NSString *_serviceKey;
    NSString *_username;
    NSString *_displayName;
}

+ (BOOL)addPublishedAlbum:(id)fp8 toDB:(id)fp12 select:(BOOL)fp16;
+ (void)removePublishedAlbum:(id)fp8 fromParent:(id)fp12;
+ (void)determinePublishedSectionNameForDB:(id)fp8;
+ (struct IPAlbumList *)albumsForService:(id)fp8 withUsername:(id)fp12 inDB:(id)fp16;
- (id)init;
- (id)initWithServiceKey:(id)fp8 andUsername:(id)fp12;
- (void)dealloc;
- (void)encodeWithDictionary:(id)fp8;
- (void)initWithDictionary:(id)fp8;
- (void)loadFromSqDB:(struct SqAlbum *)fp8;
- (id)subgroup;
- (BOOL)isInGroup:(unsigned long long)fp8 andSubgroup:(id)fp16;
- (void)setSubgroup:(id)fp8;
- (void)setParent:(id)fp8;
- (void)_updateSavedInfo;
- (id)serviceKey;
- (BOOL)_setServiceKey:(id)fp8;
- (void)setServiceKey:(id)fp8;
- (id)name;
- (id)username;
- (BOOL)_setUsername:(id)fp8;
- (void)setUsername:(id)fp8;
- (id)displayName;
- (BOOL)_setDisplayName:(id)fp8;
- (void)setDisplayName:(id)fp8;
- (BOOL)isEjectable;
- (void)eject;

@end

@interface FaceKeyState : NSObject
{
    NSArray *_faceIndexPaths;
    struct vector<int, std::allocator<int>> *_faceKeys;
    NSMutableArray *_faceNameState;
    struct vector<FaceCorrelationState, std::allocator<FaceCorrelationState>> *_faceCorrelationState;
    struct vector<FaceFeatureState, std::allocator<FaceFeatureState>> *_faceFeatureState;
    struct vector<FaceExternalState, std::allocator<FaceExternalState>> *_faceExternalState;
    struct vector<DetectedFaceState, std::allocator<DetectedFaceState>> *_detectedFaceState;
}

- (id)init;
- (void)dealloc;
- (id)faceIndexPaths;
- (void)setFaceIndexPaths:(id)fp8;
- (struct vector<int, std::allocator<int>> *)faceKeys;
- (void)setFaceKeys:(struct vector<int, std::allocator<int>> *)fp8;
- (void)addFaceNameEntry:(id)fp8;
- (int)faceNameEntryCount;
- (id)faceNameEntryAtIndex:(int)fp8;
- (void)addFaceCorrelationEntry:(CDAnonymousStruct7 *)fp8;
- (int)faceCorrelationEntryCount;
- (CDAnonymousStruct7 *)faceCorrelationEntryAtIndex:(int)fp8;
- (void)addFaceFeatureEntry:(CDAnonymousStruct10 *)fp8;
- (int)faceFeatureEntryCount;
- (CDAnonymousStruct10 *)faceFeatureEntryAtIndex:(int)fp8;
- (void)addFaceExternalEntry:(CDAnonymousStruct13 *)fp8;
- (int)faceExternalEntryCount;
- (CDAnonymousStruct13 *)faceExternalEntryAtIndex:(int)fp8;
- (void)addDetectedFaceEntry:(CDAnonymousStruct11 *)fp8;
- (int)detectedFaceEntryCount;
- (CDAnonymousStruct11 *)detectedFaceEntryAtIndex:(int)fp8;

@end

@interface PlaceState : NSObject
{
    ImageDB *_db;
    struct vector<PlaceStateData, std::allocator<PlaceStateData>> *_photos;
    struct vector<PlaceStateData, std::allocator<PlaceStateData>> *_events;
}

+ (id)placeStateForPhotoList:(struct IPPhotoList *)fp8;
- (id)init;
- (id)initWithPhotoList:(struct IPPhotoList *)fp8;
- (void)dealloc;
- (void)store:(struct IPPhotoList *)fp8;
- (void)restore;

@end

@interface NSIndexPath (iPhotoExtensions)
+ (id)indexPathForPhoto:(unsigned int)fp8 faceIndex:(unsigned int)fp12;
+ (id)indexPathForPhoto:(unsigned int)fp8 faceIndex:(unsigned int)fp12 faceKey:(unsigned int)fp16;
- (unsigned int)photoKey;
- (unsigned int)faceIndex;
- (unsigned int)faceKey;
@end

@interface IPTemplateData : NSObject
{
    struct sqlite3 *mTemplateDB;
}

- (id)init;
- (void)dealloc;
- (int)_openDBWithPath:(char *)fp8;
- (int)_db:(struct sqlite3 *)fp8 performQuery:(char *)fp12;
- (int)_closeDB:(struct sqlite3 *)fp8;
- (void)_ensureSchema;
- (void)updateAssetUsageForTheme:(id)fp8;
- (id)themeNames;
- (id)assetsForTheme:(id)fp8;
- (id)themesUsingAssetWithID:(int)fp8;

@end

@interface FilterController : NSObject
{
    Album *_currentAlbum;
    Album *_allAlbum;
    BOOL _filteringOnAll;
    NSMutableArray *_filterCriteriaKeys;
    NSMutableDictionary *_filterCriteriaModels;
    NSMutableDictionary *_filterCriteriaViews;
    NSString *_activeCriteriaViewKey;
    BOOL _showSourceSelector;
    BOOL _showCriteriaSelector;
    FilterView *_filterView;
    NSSplitView *_parentView;
    NSView *_ownerView;
    BOOL _installed;
    id _delegate;
    BOOL skipSetAlbum;
}

- (void)setup;
- (id)initWithCurrentAlbum:(id)fp8 allAlbum:(id)fp12;
- (id)initWithCurrentAlbum:(id)fp8 allAlbum:(id)fp12 withCriteria:(id)fp16;
- (void)dealloc;
- (void)_loadCriteriaModelClass:(Class)fp8;
- (id)_loadCriteriaViewClass:(Class)fp8 forKey:(id)fp12;
- (Class)_viewClassForKey:(id)fp8;
- (void)_loadCriteria:(id)fp8;
- (void)_modelChangedForKey:(id)fp8;
- (void)focusForPhotoList:(struct IPPhotoList *)fp8;
- (void)unfocus;
- (void)updateWithFilters:(id)fp8;
- (id)filtersForCurrentState;
- (void)_buildFillterView;
- (BOOL)installAboveView:(id)fp8;
- (void)uninstall;
- (BOOL)isInstalled;
- (void)_updateFilterAlbum;
- (void)selectSourceWithKey:(id)fp8;
- (void)selectCriteriaWithKey:(id)fp8;
- (void)modelUpdatedForKey:(id)fp8;
- (id)modelForKey:(id)fp8;
- (id)viewForKey:(id)fp8;
- (id)activeModel;
- (id)activeView;
- (BOOL)showSourceSelector;
- (void)setShowSourceSelector:(BOOL)fp8;
- (BOOL)showCriteriaSelector;
- (void)setShowCriteriaSelector:(BOOL)fp8;
- (id)activeCriteriaViewKey;
- (void)setActiveCriteriaViewKey:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (float)splitView:(id)fp8 constrainMinCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (float)splitView:(id)fp8 constrainMaxCoordinate:(float)fp12 ofSubviewAt:(int)fp16;
- (BOOL)skipSetAlbum;
- (void)setSkipSetAlbum:(BOOL)fp8;

@end

@interface FilterCriteriaModel : NSObject
{
    BOOL _active;
    NSString *_name;
    BOOL _photoFocused;
    FilterController *_filterController;
}

- (id)initWithController:(id)fp8;
- (void)dealloc;
- (void)focusForPhotoList:(struct IPPhotoList *)fp8;
- (void)updateWithFilters:(id)fp8;
- (id)filtersForCurrentState;
- (BOOL)active;
- (void)setActive:(BOOL)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (BOOL)photoFocused;
- (void)setPhotoFocused:(BOOL)fp8;
- (id)key;

@end

@interface FilterCriteriaView : NSView
{
    FilterController *_filterController;
    FilterCriteriaModel *_model;
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)modelChanged;

@end

@interface FilterSourceSelectorView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface FilterCriteriaSelectorView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface FilterView : NSView
{
    FilterController *_filterController;
    FilterSourceSelectorView *_sourceSelectorView;
    FilterCriteriaSelectorView *_criteriaSelectorView;
    FilterCriteriaView *_activeCriteriaView;
    float _selectorDivideX;
    float _criteriaDivideY;
}

- (id)initWithController:(id)fp8;
- (BOOL)isFlipped;
- (void)_layout;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface PlaceFilterCriteriaModel : FilterCriteriaModel
{
    LocationStats *_stats;
    NSArray *_selectedLocations[4];
    NSArray *_columnData[4];
}

- (id)initWithController:(id)fp8;
- (void)dealloc;
- (id)key;
- (void)focusForPhotoList:(struct IPPhotoList *)fp8;
- (id)filtersForCurrentState;
- (id)stats;
- (void)_updateColumnDataAtIndex:(int)fp8;
- (id)columnDataAtIndex:(int)fp8;
- (void)setSelectedLocations:(id)fp8 atIndex:(int)fp12;
- (id)selectedLocationsAtIndex:(int)fp8;

@end

@interface PlaceFilterCriteriaView : FilterCriteriaView
{
    NSTableView *_browser[4];
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)_createTableView:(id *)fp8 enclosingScrollView:(id *)fp12;
- (void)modelChanged;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tableClicked:(id)fp8;
- (int)numberOfRowsForBrowserSlot:(int)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface PlaceFilterCriteriaTable : NSTableView
{
}

- (BOOL)_pfctHighlightColorDependsOnWindowState;
- (BOOL)_pfctShouldUseSecondaryHighlightColor;
- (id)_pfctHighlightColor;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;

@end

@interface RatingFilterCriteriaModel : FilterCriteriaModel
{
}

- (id)initWithController:(id)fp8;
- (id)key;

@end

@interface RatingFilterCriteriaView : FilterCriteriaView
{
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface DateFilterCriteriaModel : FilterCriteriaModel
{
}

- (id)initWithController:(id)fp8;
- (id)key;

@end

@interface DateFilterCriteriaView : FilterCriteriaView
{
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface KeywordFilterCriteriaModel : FilterCriteriaModel
{
}

- (id)initWithController:(id)fp8;
- (id)key;

@end

@interface KeywordFilterCriteriaView : FilterCriteriaView
{
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface PersonFilterCriteriaModel : FilterCriteriaModel
{
}

- (id)initWithController:(id)fp8;
- (id)key;

@end

@interface PersonFilterCriteriaView : FilterCriteriaView
{
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TextFilterCriteriaModel : FilterCriteriaModel
{
}

- (id)initWithController:(id)fp8;
- (id)key;

@end

@interface TextFilterCriteriaView : FilterCriteriaView
{
}

- (id)initWithController:(id)fp8 model:(id)fp12;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPTemplateDataInspector : NSObject
{
    NSWindow *mWindow;
    NSPopUpButton *mThemeNames;
    NSTableView *mAssetTable;
    NSImageView *mAssetPreview;
    NSTableView *mAssetUsageTable;
    NSString *mSelectedTheme;
    NSDictionary *mSelectedAsset;
    NSArray *mAssets;
    NSArray *mAssetUsage;
    IPTemplateData *mData;
}

- (void)show;
- (void)awakeFromNib;
- (void)_getThemeNames;
- (void)selectTheme:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)dealloc;

@end

@interface LocationIdentifier : NSObject <NSCopying>
{
    int mType;
    BOOL mIsAggregateLocation;
    int mLevel;
    NSString *mName;
    NSString *mTooltip;
    LocationIdentifier *mParent;
    NSMutableArray *mChildren;
    double mLatitude;
    double mLongitude;
    double mMinLatitude;
    double mMinLongitude;
    double mMaxLatitude;
    double mMaxLongitude;
    NSString *mCountryFilterString;
    NSString *mStateFilterString;
    NSString *mCityFilterString;
    unsigned int mPlaceFilterKey;
    KeyMgr *mPhotoKeys;
    struct _NSRect mRect;
}

- (id)initWithLevel:(int)fp8 type:(int)fp12 name:(id)fp16;
- (id)initWithLevel:(int)fp8 placeKey:(int)fp12 name:(id)fp16;
- (id)initWithLevel:(int)fp8 userPlaceKey:(int)fp12 name:(id)fp16;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isAggregateLocation;
- (void)setIsAggregateLocation:(BOOL)fp8;
- (void)setGroupRect:(struct _NSRect)fp8;
- (struct _NSRect)groupRect;
- (id)tooltip;
- (void)setTooltip:(id)fp8;
- (void)setLatitude:(double)fp8 longitude:(double)fp16;
- (double)latitude;
- (double)longitude;
- (void)expandLatLonBoundsForLatitude:(double)fp8 longitude:(double)fp16;
- (struct _NSRect)photoCoordinateBounds;
- (void)addPhotoKey:(unsigned long)fp8;
- (void)addPhotos:(struct IPPhotoList *)fp8;
- (id)photoKeys;
- (id)parent;
- (void)setParent:(id)fp8;
- (int)childCount;
- (id)childAtIndex:(int)fp8;
- (int)indexOfChild:(id)fp8;
- (id)children;
- (void)addChild:(id)fp8;
- (void)addChild:(id)fp8 setParent:(BOOL)fp12;
- (void)addChildren:(id)fp8;
- (void)addChildren:(id)fp8 setParent:(BOOL)fp12;
- (id)childOfTypeOther;
- (int)level;
- (int)type;
- (id)name;
- (void)setName:(id)fp8;
- (int)compare:(id)fp8;
- (id)countryFilterString;
- (void)setCountryFilterString:(id)fp8;
- (id)stateFilterString;
- (void)setStateFilterString:(id)fp8;
- (id)cityFilterString;
- (void)setCityFilterString:(id)fp8;
- (unsigned long)placeFilterKey;
- (void)setPlaceFilterKey:(unsigned long)fp8;
- (id)filter;
- (id)proximityFilter;
- (BOOL)isEqual:(id)fp8;
- (id)description;
- (void)dealloc;

@end

@interface ActionMgr : NSObject
{
}

+ (BOOL)actionIsReplaceAction:(int)fp8;
+ (void)addActionGroupEntriesToSqDB:(struct SqDB *)fp8;

@end

@interface FlippedViewTextField : NSTextField
{
    int mTrackingRect;
    BOOL mMouseOver;
    BOOL mHasFocus;
    NSColor *mOriginalColor;
    NSString *mPlaceholderText;
    BOOL mShowingPlaceholderText;
    NSTextField *mLocationParseField;
    BOOL mOverrideDismiss;
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setLocationParseField:(id)fp8;
- (void)setPlaceholderText:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setStringValue:(id)fp8;
- (id)actualValue;
- (id)stringValue;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)setHasFocus:(BOOL)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)overrideDismiss:(BOOL)fp8;
- (void)mouseMoved:(id)fp8;
- (void)_ensureInsertionPointAndHighlightSettings;

@end

@interface FlippViewTextFieldEditor : NSTextView
{
}

- (struct _NSPoint)textContainerOrigin;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface LocationTableView : NSTableView
{
    BOOL mShouldShowEmptyMessage;
    NSString *mLocationString;
}

- (void)dealoc;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;
- (void)shouldShowEmptyMessage:(BOOL)fp8;
- (void)setLocationString:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface PlaceCriteriaCell : NSCell
{
    Ellipsizer *_titleEllipsizer;
}

- (id)initTextCell:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)drawTitleText:(id)fp8 inRect:(struct _NSRect)fp12 textColor:(id)fp28;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface FlippedViewFrame : NSView
{
    NSImage *_smallBG;
    NSImage *_largeBG;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPSegmentedArtElement : IPPageElement
{
    BOOL mReverseEdgeOrder;
    BOOL mFillElementFirst;
    struct _NSSize mUpperLeftSize;
    struct _NSSize mUpperRightSize;
    struct _NSSize mLowerLeftSize;
    struct _NSSize mLowerRightSize;
    struct _NSSize mLeftEdgeSize;
    float mLeftEdgeScaledOffset;
    float mLeftEdgeScaledSpacerMinimum;
    struct _NSSize mRightEdgeSize;
    float mRightEdgeScaledOffset;
    float mRightEdgeScaledSpacerMinimum;
    struct _NSSize mTopEdgeSize;
    float mTopEdgeScaledOffset;
    float mTopEdgeScaledSpacerMinimum;
    struct _NSSize mBottomEdgeSize;
    float mBottomEdgeScaledOffset;
    float mBottomEdgeScaledSpacerMinimum;
    struct CGImage *mCompositedImage;
    float mCompositedImageScale;
    struct IPFileImage *mUpperLeftImage;
    NSString *mUpperLeftImageName;
    float mUpperLeftWidth;
    float mUpperLeftHeight;
    BOOL mUpperLeftMirrorHorizontal;
    BOOL mUpperLeftMirrorVertical;
    float mUpperLeftRotation;
    struct IPFileImage *mUpperRightImage;
    NSString *mUpperRightImageName;
    float mUpperRightWidth;
    float mUpperRightHeight;
    BOOL mUpperRightMirrorHorizontal;
    BOOL mUpperRightMirrorVertical;
    float mUpperRightRotation;
    struct IPFileImage *mLowerLeftImage;
    NSString *mLowerLeftImageName;
    float mLowerLeftWidth;
    float mLowerLeftHeight;
    BOOL mLowerLeftMirrorHorizontal;
    BOOL mLowerLeftMirrorVertical;
    float mLowerLeftRotation;
    struct IPFileImage *mLowerRightImage;
    NSString *mLowerRightImageName;
    float mLowerRightWidth;
    float mLowerRightHeight;
    BOOL mLowerRightMirrorHorizontal;
    BOOL mLowerRightMirrorVertical;
    float mLowerRightRotation;
    struct IPFileImage *mLeftEdgeImage;
    NSString *mLeftEdgeImageName;
    float mLeftEdgeImageOffset;
    struct IPFileImage *mLeftEdgeSpacerImage;
    NSString *mLeftEdgeSpacerImageName;
    float mLeftEdgeSpacerMinimum;
    float mLeftEdgeWidth;
    float mLeftEdgeHeight;
    BOOL mTileLeftEdge;
    BOOL mLeftEdgeMirrorHorizontal;
    BOOL mLeftEdgeMirrorVertical;
    float mLeftEdgeRotation;
    struct IPFileImage *mRightEdgeImage;
    NSString *mRightEdgeImageName;
    float mRightEdgeImageOffset;
    struct IPFileImage *mRightEdgeSpacerImage;
    NSString *mRightEdgeSpacerImageName;
    float mRightEdgeSpacerMinimum;
    float mRightEdgeWidth;
    float mRightEdgeHeight;
    BOOL mTileRightEdge;
    BOOL mRightEdgeMirrorHorizontal;
    BOOL mRightEdgeMirrorVertical;
    float mRightEdgeRotation;
    struct IPFileImage *mTopEdgeImage;
    NSString *mTopEdgeImageName;
    float mTopEdgeImageOffset;
    struct IPFileImage *mTopEdgeSpacerImage;
    NSString *mTopEdgeSpacerImageName;
    float mTopEdgeSpacerMinimum;
    float mTopEdgeWidth;
    float mTopEdgeHeight;
    BOOL mTileTopEdge;
    BOOL mTopEdgeMirrorHorizontal;
    BOOL mTopEdgeMirrorVertical;
    float mTopEdgeRotation;
    struct IPFileImage *mBottomEdgeImage;
    NSString *mBottomEdgeImageName;
    float mBottomEdgeImageOffset;
    struct IPFileImage *mBottomEdgeSpacerImage;
    NSString *mBottomEdgeSpacerImageName;
    float mBottomEdgeSpacerMinimum;
    float mBottomEdgeWidth;
    float mBottomEdgeHeight;
    BOOL mTileBottomEdge;
    BOOL mBottomEdgeMirrorHorizontal;
    BOOL mBottomEdgeMirrorVertical;
    float mBottomEdgeRotation;
}

- (id)initWithElement:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)drawSelectionInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_updateCompositedImageWithAlpha:(float)fp8 scale:(float)fp12 resolution:(int)fp16;
- (void)_ensureComponentsAreLoadedAtScale:(float)fp8;
- (void)_drawUpperLeftCornerInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawUpperRightCornerInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawLowerLeftCornerInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawLowerRightCornerInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawLeftEdgeInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawRightEdgeInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawTopEdgeInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawBottomEdgeInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20;
- (void)_drawFillInContext:(struct CGContext *)fp8 withFrameOrigin:(struct _NSPoint)fp12 scale:(float)fp20 resolution:(int)fp24;
- (id)upperLeftImageName;
- (float)upperLeftWidth;
- (float)upperLeftHeight;
- (BOOL)upperLeftShouldMirrorHorizontal;
- (BOOL)upperLeftShouldMirrorVertical;
- (float)upperLeftRotation;
- (id)upperRightImageName;
- (float)upperRightWidth;
- (float)upperRightHeight;
- (BOOL)upperRightShouldMirrorHorizontal;
- (BOOL)upperRightShouldMirrorVertical;
- (float)upperRightRotation;
- (id)lowerLeftImageName;
- (float)lowerLeftWidth;
- (float)lowerLeftHeight;
- (BOOL)lowerLeftShouldMirrorHorizontal;
- (BOOL)lowerLeftShouldMirrorVertical;
- (float)lowerLeftRotation;
- (id)lowerRightImageName;
- (float)lowerRightWidth;
- (float)lowerRightHeight;
- (BOOL)lowerRightShouldMirrorHorizontal;
- (BOOL)lowerRightShouldMirrorVertical;
- (float)lowerRightRotation;
- (id)leftEdgeImageName;
- (float)leftEdgeImageOffset;
- (id)leftEdgeSpacerImageName;
- (float)leftEdgeSpacerMinimum;
- (float)leftEdgeWidth;
- (float)leftEdgeHeight;
- (BOOL)leftEdgeShouldBeTiled;
- (BOOL)leftEdgeShouldMirrorHorizontal;
- (BOOL)leftEdgeShouldMirrorVertical;
- (float)leftEdgeRotation;
- (id)rightEdgeImageName;
- (float)rightEdgeImageOffset;
- (id)rightEdgeSpacerImageName;
- (float)rightEdgeSpacerMinimum;
- (float)rightEdgeWidth;
- (float)rightEdgeHeight;
- (BOOL)rightEdgeShouldBeTiled;
- (BOOL)rightEdgeShouldMirrorHorizontal;
- (BOOL)rightEdgeShouldMirrorVertical;
- (float)rightEdgeRotation;
- (id)topEdgeImageName;
- (float)topEdgeImageOffset;
- (id)topEdgeSpacerImageName;
- (float)topEdgeSpacerMinimum;
- (float)topEdgeWidth;
- (float)topEdgeHeight;
- (BOOL)topEdgeShouldBeTiled;
- (BOOL)topEdgeShouldMirrorHorizontal;
- (BOOL)topEdgeShouldMirrorVertical;
- (float)topEdgeRotation;
- (id)bottomEdgeImageName;
- (float)bottomEdgeImageOffset;
- (id)bottomEdgeSpacerImageName;
- (float)bottomEdgeSpacerMinimum;
- (float)bottomEdgeWidth;
- (float)bottomEdgeHeight;
- (BOOL)bottomEdgeShouldBeTiled;
- (BOOL)bottomEdgeShouldMirrorHorizontal;
- (BOOL)bottomEdgeShouldMirrorVertical;
- (float)bottomEdgeRotation;
- (void)addReferencedAssetsToSet:(id)fp8;
- (BOOL)validate:(id)fp8;
- (id)description;
- (void)unloadCachedObjects;
- (void)dealloc;

@end

@interface IPMapElement : IPPageElement
{
    BOOL mUserAltered;
    BOOL mHighResDisabled;
    NSMutableArray *mMarkers;
    NSMutableArray *mVisibleMarkers;
    NSMutableArray *mDrawnMarkers;
    IPMapElementMarker *mSelectedMarker;
    NSDictionary *mMarkerFontAttributes;
    BOOL mConnectMarkers;
    BOOL mUseStraightLines;
    IPPageElementStyle *mWaterStyle;
    IPPageElementStyle *mInlandWaterStyle;
    IPPageElementStyle *mLandStyle;
    IPPageElementStyle *mVisitedLandStyle;
    IPPageElementStyle *mMarkerStyle;
    IPPageElementStyle *mMarkerConnectorStyle;
    IPPageElementStyle *mTitleStyle;
    NSString *mTitleAlignment;
    struct _NSPoint mCenterLatLon;
    float mDistanceScale;
    BOOL mIsPageMap;
    NSMutableDictionary *mRegionStyleOverrides;
    double mMercPanX;
    double mMercPanY;
    NSMutableArray *mLandMasses;
    struct RegionResult mLandRegions;
    NSArray *mLabels;
    BOOL mLoadNewRegions;
    BOOL mNewRegionsLoaded;
    NSMutableArray *mVisitedRegions;
    IPArtElement *mCompassElement;
    float mCompassInset;
    IPArtElement *mSmallCompassElement;
    BOOL mCompassHidden;
    NSString *mCompassAlignment;
    BOOL mReturnToStart;
    BOOL mSkipLastMarker;
    BOOL mMarkerTextHidden;
    BOOL mRegionTextHidden;
    BOOL mSupressRegionText;
    NSString *mTitle;
    IPMapElementTitle *mTitleElement;
    BOOL mTitleHidden;
    IPMapElementMarkerEditor *mMarkerEditor;
    BOOL _canDrawHighRes;
    struct CGLayer *mHighResLayer;
    float mHighResScale;
    BOOL mHighResQueued;
    NSLock *mRenderingLock;
    NSLock *mDataLock;
}

- (id)init;
- (id)initWithElement:(id)fp8;
- (void)dealloc;
- (BOOL)isMapElement;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)fillElementContext:(struct CGContext *)fp8 alpha:(float)fp12 scale:(float)fp16 resolution:(int)fp20;
- (void)fillPageContext:(struct CGContext *)fp8 forView:(id)fp12 atPoint:(struct _NSPoint)fp16 alpha:(float)fp24 scale:(float)fp28 drawSelection:(BOOL)fp32 resolution:(int)fp36;
- (void)setLoadNewRegions:(BOOL)fp8;
- (void)ensureMapRegions:(float)fp8;
- (void)_drawMapInContext:(struct CGContext *)fp8 atOrigin:(struct _NSPoint)fp12 forView:(id)fp20 alpha:(float)fp24 scale:(float)fp28 resolution:(int)fp32;
- (void)compositeIntoContext:(struct CGContext *)fp8 distanceScale:(float)fp12 scale:(float)fp16 fillRect:(struct CGRect)fp20 resolution:(int)fp36 lowRes:(BOOL)fp40;
- (void)setRenderingComplete:(BOOL)fp8;
- (id)renderingLock;
- (void)cancelCompositing;
- (void)_requeueCompositing;
- (void)_drawMarkersInContext:(struct CGContext *)fp8 forView:(id)fp12 distanceScale:(float)fp16 scale:(float)fp20 resolution:(int)fp24 translation:(struct _NSPoint)fp28;
- (BOOL)shouldZoom;
- (float)zoom;
- (void)setZoom:(float)fp8;
- (void)setPan:(struct _NSPoint)fp8;
- (BOOL)panZoomModeIsEnabled;
- (void)setPanZoomModeEnabled:(BOOL)fp8;
- (id)containedElementAtPoint:(struct _NSPoint)fp8 deep:(BOOL)fp16;
- (void)clearElementCache:(BOOL)fp8;
- (void)setSelected:(BOOL)fp8;
- (void)installEditorForView:(id)fp8;
- (void)setNewRegionsLoaded:(BOOL)fp8;
- (BOOL)userAltered;
- (void)setUserAltered:(BOOL)fp8;
- (BOOL)highResDisabled;
- (void)setHighResDisabled:(BOOL)fp8;
- (BOOL)isPageMap;
- (void)setIsPageMap:(BOOL)fp8;
- (id)landMasses;
- (id)labels;
- (id)visitedRegions;
- (id)markers;
- (id)visibleMarkers;
- (id)drawnMarkers;
- (id)selectedMarker;
- (void)clearSelectedMarker;
- (void)clearVisibleMarkerCache;
- (BOOL)connectMarkers;
- (void)setConnectMarkers:(BOOL)fp8;
- (BOOL)useStraightLines;
- (BOOL)returnToStart;
- (void)setReturnToStart:(BOOL)fp8;
- (void)toggleStraightLines;
- (void)addMarkerAtPixelPosition:(struct _NSPoint)fp8 scale:(float)fp16;
- (void)addMarkerWithName:(id)fp8 latitude:(double)fp12 longitude:(double)fp20;
- (void)addMarker:(id)fp8;
- (void)removeMarker:(id)fp8;
- (void)removeMarkerAtLatitude:(double)fp8 longitude:(double)fp16;
- (void)centerMapOnMarkers;
- (struct _NSPoint)_defaultCenterPosition;
- (void)_pageChanged:(id)fp8;
- (void)centerMapOnSourcePhotoMarker;
- (void)reset;
- (void)moveMarkerFrom:(int)fp8 to:(int)fp12;
- (struct _NSPoint)mapPointForPixelPoint:(struct _NSPoint)fp8 scale:(float)fp16;
- (struct _NSPoint)mapCoordinatesForPixelPoint:(struct _NSPoint)fp8 scale:(float)fp16;
- (BOOL)markerTextIsHidden;
- (void)setMarkerTextIsHidden:(BOOL)fp8;
- (BOOL)regionTextIsHidden;
- (void)setRegionTextIsHidden:(BOOL)fp8;
- (BOOL)regionTextIsSuppressed;
- (void)setRegionTextIsSuppressed:(BOOL)fp8;
- (id)regionOverrides;
- (id)overrideForRegion:(id)fp8;
- (void)adjustLabelPositionForRegion:(id)fp8;
- (id)compass;
- (id)smallCompass;
- (float)compassInset;
- (BOOL)compassIsHidden;
- (void)setCompassIsHidden:(BOOL)fp8;
- (id)compassAlignment;
- (void)setCompassAlignment:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)titleElement;
- (BOOL)titleIsHidden;
- (void)setTitleIsHidden:(BOOL)fp8;
- (id)titleAlignment;
- (void)setTitleAlignment:(id)fp8;
- (id)waterStyle;
- (void)setWaterStyle:(id)fp8;
- (id)inlandWaterStyle;
- (void)setInlandWaterStyle:(id)fp8;
- (id)landStyle;
- (void)setLandStyle:(id)fp8;
- (id)visitedLandStyle;
- (void)setVisitedLandStyle:(id)fp8;
- (id)markerStyle;
- (void)setMarkerStyle:(id)fp8;
- (id)markerConnectorStyle;
- (void)setMarkerConnectorStyle:(id)fp8;
- (id)titleStyle;
- (void)setTitleStyle:(id)fp8;
- (void)titleTextStyleChanged;
- (void)markerTextStyleChanged;
- (void)landTextStyleChanged;
- (struct _NSPoint)centerCoordinates;
- (void)setCenterCoordinates:(struct _NSPoint)fp8;
- (float)distanceScale;
- (void)setDistanceScale:(float)fp8;
- (struct _NSPoint)mercatorPan;
- (void)setMercatorPan:(struct _NSPoint)fp8;

@end

@interface IPHPluginManager : NSObject <IPHPluginManagerProtocol>
{
    NSMutableDictionary *_plugins;
    NSMutableDictionary *_pluginClasses;
}

+ (void)initialize;
+ (id)defaultUserAgent;
+ (void)setDefaultUserAgent:(id)fp8;
+ (unsigned int)messageCategory;
+ (id)sharedPluginManager;
+ (void)setPluginManagerClass:(Class)fp8;
+ (id)dotMacUtils;
- (void)dealloc;
- (id)applicationID;
- (id)supportedPhotoSizes;
- (BOOL)uidsAreCaseInsensitive;
- (id)directoriesToScan;
- (void)scanForPlugins;
- (id)_validPluginClass:(Class)fp8;
- (void)_scanDirectoryForPlugins:(id)fp8 foundBundles:(id)fp12;
- (id)allPluginClasses;
- (Class)pluginClassForServiceKey:(id)fp8;
- (id)pluginForServiceKey:(id)fp8;
- (id)newPluginForServiceKey:(id)fp8;
- (id)newPluginForServiceKey:(id)fp8 username:(id)fp12;
- (void)initializePlugin:(id)fp8;
- (id)dotMacUtils;
- (void)listAlbumsForServiceKey:(id)fp8 contextInfo:(id)fp12;
- (void)retrieveAlbumList:(id)fp8;
- (void)listAlbumsReplyHandler:(id)fp8;
- (void)_plugin:(id)fp8 retrievedAlbumList:(id)fp12 error:(id)fp16 contextInfo:(void *)fp20;
- (void)listContentsOfAlbum:(id)fp8 forServiceKey:(id)fp12 contextInfo:(id)fp16;
- (void)retrieveAlbumContents:(id)fp8;
- (void)listAlbumContentsReplyHandler:(id)fp8;
- (void)_plugin:(id)fp8 retrievedAlbumContents:(id)fp12 error:(id)fp16 contextInfo:(void *)fp20;
- (void)saveKeychainInformationForURL:(id)fp8 andPassword:(id)fp12;
- (id)loadKeychainInformationForURL:(id)fp8;
- (void)removeKeychainInformationForURL:(id)fp8;
- (id)albumsForServiceKey:(id)fp8;
- (void)updateProtectionUsername:(id)fp8 fromOldUsername:(id)fp12 serviceKey:(id)fp16 serviceUsername:(id)fp20;
- (id)albumNamesForProtectionUsername:(id)fp8 serviceKey:(id)fp12 serviceUsername:(id)fp16;
- (id)generateUUID;
- (unsigned long long)sizeAtPath:(id)fp8 physical:(BOOL)fp12;
- (id)incrementTrailingCount:(id)fp8 delim:(id)fp12 first:(BOOL)fp16;
- (id)ellipsizerWithAttributes:(id)fp8;
- (void)tickleInsertionPoint:(id)fp8;
- (BOOL)canDoNetDiagnostics;
- (BOOL)isNetworkDisconnected;
- (void)showNetDiagnostics;
- (id)extensionForImageFormat:(unsigned long)fp8;
- (unsigned long)imageFormatForExtension:(id)fp8;
- (id)mimeTypeForExtension:(id)fp8;
- (id)errorFromDMKitTransaction:(id)fp8;
- (id)errorDisplayStringForError:(id)fp8 url:(id)fp12;
- (id)unpublishOperationForDB:(id)fp8 URL:(id)fp12 service:(id)fp16;
- (void)addUpdateOperation:(id)fp8;

@end

@interface IPPageElementStyle : NSObject
{
    NSColor *mFillColor;
    NSString *mFillTexture;
    struct _NSSize mFillTextureTileSize;
    float mFillTextureAlpha;
    NSString *mFillTextureBlendMode;
    NSColor *mStartingGradientColor;
    NSColor *mEndingGradientColor;
    NSColor *mStrokeColor;
    float mStrokeWidth;
    NSColor *mOuterStrokeColor;
    float mOuterStrokeWidth;
    NSColor *mInnerStrokeColor;
    float mInnerStrokeWidth;
    NSColor *mDropShadowColor;
    float mDropShadowBlur;
    struct CGSize mDropShadowOffset;
    NSColor *mInnerGlowColor;
    float mInnerGlowBlur;
    int mInnerGlowSteps;
    NSColor *mOuterGlowColor;
    float mOuterGlowBlur;
    int mOuterGlowSteps;
    IPTextElementStyle *mTextStyle;
    NSString *mTextStyleName;
    NSColor *mTextColor;
    NSColor *mTextStrokeColor;
    float mTextStrokeWidth;
    NSColor *mTextBackgroundColor;
    NSColor *mTextBackgroundStrokeColor;
    float mTextBackgroundStrokeWidth;
    float mTextBackgroundPadding;
    NSString *mArrowheadName;
    struct _NSSize mArrowheadSize;
    float mArrowheadAnchor;
    float mRadius;
}

- (id)initWithDictionary:(id)fp8 forPage:(id)fp12;
- (void)takeValuesFromDictionary:(id)fp8 forPage:(id)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (void)dealloc;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (id)fillTexture;
- (void)setFillTexture:(id)fp8;
- (struct _NSSize)fillTextureSize;
- (void)setFillTextureSize:(struct _NSSize)fp8;
- (float)fillTextureAlpha;
- (void)setFillTextureAlpha:(float)fp8;
- (id)fillTextureBlendMode;
- (void)setFillTextureBlendMode:(id)fp8;
- (id)startingGradientColor;
- (void)setStartingGradientColor:(id)fp8;
- (id)endingGradientColor;
- (void)setEndingGradientColor:(id)fp8;
- (id)strokeColor;
- (void)setStrokeColor:(id)fp8;
- (float)strokeWidth;
- (void)setStrokeWidth:(float)fp8;
- (id)outerStrokeColor;
- (void)setOuterStrokeColor:(id)fp8;
- (float)outerStrokeWidth;
- (void)setOuterStrokeWidth:(float)fp8;
- (id)innerStrokeColor;
- (void)setInnerStrokeColor:(id)fp8;
- (float)innerStrokeWidth;
- (void)setInnerStrokeWidth:(float)fp8;
- (id)dropShadowColor;
- (void)setDropShadowColor:(id)fp8;
- (float)dropShadowBlur;
- (void)setDropShadowBlur:(float)fp8;
- (struct CGSize)dropShadowOffset;
- (void)setDropShadowOffset:(struct CGSize)fp8;
- (id)outerGlowColor;
- (void)setOuterGlowColor:(id)fp8;
- (float)outerGlowBlur;
- (void)setOuterGlowBlur:(float)fp8;
- (int)outerGlowSteps;
- (void)setOuterGlowSteps:(int)fp8;
- (id)innerGlowColor;
- (void)setInnerGlowColor:(id)fp8;
- (float)innerGlowBlur;
- (void)setInnerGlowBlur:(float)fp8;
- (int)innerGlowSteps;
- (void)setInnerGlowSteps:(int)fp8;
- (id)textStyleForPageRef:(id)fp8;
- (void)setTextStyle:(id)fp8;
- (id)textColor;
- (void)setTextColor:(id)fp8;
- (id)textStrokeColor;
- (void)setTextStrokeColor:(id)fp8;
- (float)textStrokeWidth;
- (void)setTextStrokeWidth:(float)fp8;
- (id)textBackgroundColor;
- (void)setTextBackgroundColor:(id)fp8;
- (id)textBackgroundStrokeColor;
- (void)setTextBackgroundStrokeColor:(id)fp8;
- (float)textBackgroundStrokeWidth;
- (void)setTextBackgroundStrokeWidth:(float)fp8;
- (float)textBackgroundPadding;
- (void)setTextBackgroundPadding:(float)fp8;
- (id)arrowhead;
- (void)setArrowhead:(id)fp8;
- (struct _NSSize)arrowheadSize;
- (void)setArrowheadSize:(struct _NSSize)fp8;
- (float)arrowheadAnchor;
- (void)setArrowheadAnchor:(float)fp8;
- (float)radius;
- (void)setRadius:(float)fp8;
- (void)drawFoundationForPath:(struct CGPath *)fp8 inContext:(struct CGContext *)fp12 forElement:(id)fp16 scale:(float)fp20 tileOrigin:(struct _NSPoint)fp24 closedPath:(BOOL)fp32 lowRes:(BOOL)fp36;
- (void)drawPath:(struct CGPath *)fp8 withGradientRect:(struct _NSRect)fp12 inContext:(struct CGContext *)fp28 forElement:(id)fp32 includeFoundation:(BOOL)fp36 scale:(float)fp40 tileOrigin:(struct _NSPoint)fp44 closedPath:(BOOL)fp52 lowRes:(BOOL)fp56;
- (id)description;

@end

@interface IPHPluginEllipsizerImpl : NSObject <IPHPluginEllipsizerProtocol>
{
    NSDictionary *mAttributes;
    float mEllipsisWidth;
    float **mWidthTable;
}

+ (id)ellipsizerWithAttributes:(id)fp8;
- (id)initWithAttributes:(id)fp8;
- (void)dealloc;
- (float **)_newByteTable;
- (void)_freeByteTable:(float **)fp8;
- (id)attributes;
- (void)setAttributes:(id)fp8;
- (id)ellipsizedString:(id)fp8 toWidth:(float)fp12 actualWidth:(float *)fp16;
- (id)ellipsizedString_XXX:(id)fp8 toWidth:(float)fp12;

@end

@interface NSIndexSet (IndexSetDeepCopy)
- (id)deepCopyMutable:(BOOL)fp8;
@end

@interface NSSet (SetDeepCopy)
- (id)deepCopyMutable:(BOOL)fp8;
@end

@interface NSArray (ArrayDeepCopy)
- (id)deepCopyMutable:(BOOL)fp8;
@end

@interface NSDictionary (DictionaryDeepCopy)
- (id)deepCopyMutable:(BOOL)fp8;
@end

@interface NSDictionary (DBHelpers)
- (BOOL)boolForKey:(id)fp8 default:(BOOL)fp12;
- (int)intForKey:(id)fp8 default:(int)fp12;
- (unsigned int)unsignedIntForKey:(id)fp8 default:(unsigned int)fp12;
- (double)doubleForKey:(id)fp8 default:(double)fp12;
- (id)stringForKey:(id)fp8 default:(id)fp12;
- (id)firstKeyForObject:(id)fp8;
@end

@interface NSString (DBAdditions)
+ (id)sqlQuotedString:(id)fp8;
+ (id)stringWithDatabaseKeys:(struct vector<DatabaseKey, std::allocator<DatabaseKey>> *)fp8;
- (id)tabFilledStringOfLength:(int)fp8;
- (id)uppercaseFirst;
- (id)lowercaseFirst;
- (id)sqlQuotedString;
@end

@interface NSData (DBExtensions)
+ (id)dataWithSwappedBytes:(const void *)fp8 length:(unsigned int)fp12 convertedToDataSize:(int)fp16;
+ (id)dataWithLittleEndianToHost:(const void *)fp8 length:(unsigned int)fp12 convertedToDataSize:(int)fp16;
+ (id)dataWithBigEndianToHost:(const void *)fp8 length:(unsigned int)fp12 convertedToDataSize:(int)fp16;
@end

@interface IPCropUILayer : CALayer
{
    CALayer *mTopOpaqueLayer;
    CALayer *mBottomOpaqueLayer;
    CALayer *mRightOpaqueLayer;
    CALayer *mLeftOpaqueLayer;
    CALayer *mTopEdgeLayer;
    CALayer *mBottomEdgeLayer;
    CALayer *mRightEdgeLayer;
    CALayer *mLeftEdgeLayer;
    CALayer *mTopLeftCornerLayer;
    CALayer *mTopRightCornerLayer;
    CALayer *mBottomRightCornerLayer;
    CALayer *mBottomLeftCornerLayer;
    CALayer *mTopThirdLayer;
    CALayer *mBottomThirdLayer;
    CALayer *mRightThirdLayer;
    CALayer *mLeftThirdLayer;
    BOOL mCornersVisible;
    BOOL mThirdsVisible;
}

- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)white;
- (struct CGColor *)black;
- (id)initWithAnimationDelegate:(id)fp8;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (void)setCropRect:(struct CGRect)fp8;
- (void)resetCursorRectsForView:(id)fp8 withLayer:(id)fp12;
- (int)cropActionForPoint:(struct CGPoint)fp8 fromLayer:(id)fp16;
- (void)showThirdsGrid:(BOOL)fp8;

@end

@interface IPGLContainerLayer : CALayer
{
    IPGLImageLayer *mLowResGLImageLayer;
    IPGLImageLayer *mHighResGLImageLayer;
    struct CGSize mContainerLayerSize;
    BOOL mDisplaySmall;
    BOOL mWillNeedToDisplaySmall;
    BOOL mNeedToDisplaySmall;
    struct CGPoint mLowResLayerAnchorPoint;
    id <IPGLLayerImageProvider> mImageProvider;
}

- (id)initWithAnimationDelegate:(id)fp8;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (void)setNeedsDisplay;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)setContainerLayerSize:(struct CGSize)fp8;
- (struct CGSize)containerLayerSize;
- (void)setSublayerAnchorPoint:(struct CGPoint)fp8;
- (BOOL)switchToLowRes;
- (void)animationWillStart;
- (void)animationDidEnd;
- (void)setBounds:(struct CGRect)fp8;
- (void)setImageProvider:(id)fp8;
- (BOOL)canAnimate;
- (BOOL)isGMA950;

@end

@interface IPGLImageLayer : CAOpenGLLayer
{
    CIContext *mCIContext;
    struct CGRect mSourceRect;
    struct CGRect mRelativeRect;
    id <IPGLLayerImageProvider> mImageProvider;
    BOOL mHighResLayer;
    BOOL mWasLoading;
    BOOL mCanAnimate;
    BOOL mIsGMA950;
}

- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)black;
- (id)initForHighRes:(BOOL)fp8 andAnimationDelegate:(id)fp12;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (void)setBounds:(struct CGRect)fp8;
- (void)drawInCGLContext:(struct _CGLContextObject *)fp8 pixelFormat:(struct _CGLPixelFormatObject *)fp12 forLayerTime:(double)fp16 displayTime:(const CDAnonymousStruct2 *)fp24;
- (struct _CGLContextObject *)copyCGLContextForPixelFormat:(struct _CGLPixelFormatObject *)fp8;
- (void)releaseCGLContext:(struct _CGLContextObject *)fp8;
- (struct _CGLPixelFormatObject *)copyCGLPixelFormatForDisplayMask:(unsigned int)fp8;
- (void)releaseCGLPixelFormat:(struct _CGLPixelFormatObject *)fp8;
- (void)setSourceRect:(struct CGRect)fp8 relativeTo:(struct CGRect)fp24;
- (BOOL)isOpaque;
- (void)setImageProvider:(id)fp8;
- (BOOL)canAnimate;
- (BOOL)isGMA950;

@end

@interface IPGLContainer : NSObject
{
    struct _CGLContextObject *mCGLContext;
    struct _CGLPixelFormatObject *mCGLPixelFormat;
    CIContext *mCIContext;
    int mReferenceCount;
    unsigned int mDisplayMask;
    BOOL mCanAnimate;
    BOOL mIsGMA950;
}

- (id)initWithDisplayMask:(unsigned int)fp8;
- (void)dealloc;
- (unsigned int)mask;
- (struct _CGLPixelFormatObject *)copyCGLPixelFormat;
- (struct _CGLPixelFormatObject *)cglPixelFormat;
- (int)releaseCGLPixelFormat;
- (struct _CGLContextObject *)copyCGLContext;
- (struct _CGLContextObject *)cglContext;
- (int)releaseCGLContext;
- (id)ciContext;
- (BOOL)canAnimate;
- (BOOL)isGMA950;

@end

@interface IPEditPhotoLayer : IPBaseLayer <IPGLLayerImageProvider>
{
    float mZoom;
    CAScrollLayer *mScrollLayer;
    IPGLContainerLayer *mImageLayer;
    CALayer *mAnnotationLayer;
    struct CGPoint mScrollOffset;
    float mAspectRatio;
    BOOL mEditCropMode;
    BOOL mAnimatingCrop;
    CAScrollLayer *mCropScrollLayer;
    IPCropUILayer *mCropLayer;
    struct CGRect mCropRect;
    float mLastZoomScale;
    BOOL mShouldShowNavigator;
    BOOL mUserClosedNavigator;
    Edit *mEdit;
    struct CGSize mTargetBoundsSize;
    float mEditToImageLayerScale;
    BOOL mInStraightenMode;
    BOOL mInWhiteBalanceMode;
    BOOL mInRedeyeMode;
    BOOL mInBlemishMode;
    BOOL mInMaskViewMode;
    BOOL mChangeBlemishCursor;
    NSCursor *mMaskBrushCursor;
    NSCursor *mBlemishCursor;
    NSCursor *mRedeyeCursor;
    NSImage *mCursorImage[10];
    struct BlemishPointArray *mBlemishPoints;
}

- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)blue;
- (struct CGColor *)green;
- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (id)imageLayer;
- (void)drawLayer:(id)fp8 inContext:(struct CGContext *)fp12;
- (float)zoom;
- (void)zoomToCenterWithFactor:(float)fp8;
- (float)dimensionForZoom:(float)fp8 imageDimension:(float)fp12 boundsDimension:(float)fp16;
- (BOOL)hasSmallImage;
- (BOOL)shouldShowNavigator;
- (void)userClosedNavigationHUD;
- (BOOL)switchToLowRes;
- (void)zoomTo:(struct CGPoint)fp8 withFactor:(float)fp16 centerZoomPoint:(BOOL)fp20;
- (void)panByPixels:(struct CGPoint)fp8;
- (void)panByFactor:(struct CGPoint)fp8;
- (struct CGRect)scrollRect;
- (void)scrollToScrollOffset:(struct CGPoint)fp8;
- (void)setNeedsDisplay;
- (void)quickResetBounds;
- (void)setBounds:(struct CGRect)fp8;
- (struct CGRect)activeFrame;
- (struct CGRect)selectionFrame;
- (struct CGRect)imageFrame;
- (void)rotateImage:(int)fp8;
- (void)animateCrop:(struct CGRect)fp8 toCropEditMode:(BOOL)fp24;
- (void)setEditCropMode:(BOOL)fp8;
- (BOOL)inEditCropMode;
- (void)setAnimatingCrop:(BOOL)fp8;
- (void)showCropUILayer:(BOOL)fp8;
- (void)setCropRect:(struct CGRect)fp8;
- (struct CGRect)cropRect;
- (int)cropActionForPoint:(struct CGPoint)fp8 fromLayer:(id)fp16;
- (void)showCropThirdsGrid:(BOOL)fp8;
- (void)changeBlemishCursor;
- (id)cursorForBlemishHUD;
- (void)drawRedeyeCursor:(int)fp8 height:(int)fp12 mid:(int)fp16 xOffset:(int)fp20 yOffset:(int)fp24;
- (void)drawBlemishCursor:(int)fp8 height:(int)fp12 mid:(int)fp16 xOffset:(int)fp20 yOffset:(int)fp24;
- (void)resetCursorRectsForView:(id)fp8 withLayer:(id)fp12;
- (void)setEdit:(id)fp8;
- (id)edit;
- (struct CGSize)targetBoundsSize;
- (void)setTargetBoundsSize:(struct CGSize)fp8;
- (void)addBlemishAnnotationAtX:(float)fp8 andY:(float)fp12 withRadius:(float)fp16;
- (void)clearBlemishAnnotations;
- (BOOL)inCropViewMode;
- (BOOL)inBlemishMode;
- (void)setStraightenMode:(BOOL)fp8;
- (BOOL)inStraightenMode;
- (BOOL)inRedeyeMode;
- (BOOL)inWhiteBalanceMode;
- (void)setBlemishMode:(BOOL)fp8 display:(BOOL)fp12;
- (void)setRedeyeMode:(BOOL)fp8 display:(BOOL)fp12;
- (void)setWhiteBalanceMode:(BOOL)fp8 display:(BOOL)fp12;
- (void)updateZoomSlider;
- (void)animationDidEnd;
- (struct CGPoint)layerPointFromEditPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)editPointFromLayerPoint:(struct CGPoint)fp8;
- (float)editToImageLayerScale;
- (BOOL)canAnimate;
- (BOOL)isGMA950;
- (struct CGSize)imageProviderImageSize;
- (struct CGSize)imageProviderFullSizeImageSize;
- (id)imageProviderImage;
- (id)imageProviderFullSizeImage;
- (void)imageProviderDrawAlternateImageInRect:(struct CGRect)fp8 usingContext:(id)fp24;
- (void)imageProviderReleaseAlternateImage;
- (BOOL)imageProviderHasImage;
- (BOOL)imageProviderHasFullSizeImage;
- (id)imageProviderImageName;

@end

@interface IPFullScreenController : NSObject
{
    DisappearingWindow *mThumbWindow;
    ThumbScrollView *mThumbScrollView;
    IPThumbView *mThumbView;
    IPEdgeBox *mThumbEdgeBox;
    int mThumbWindowLocation;
    int mThumbWindowRows;
    DisappearingWindow *mToolWindow;
    struct _NSRect mCurrentScreenRect;
    IPGrowBar *mGrowBar;
    BOOL mSuspendAutoMenu;
    BOOL mSuspendAutoTool;
    BOOL mSuspendAutoThumb;
    BOOL mMenuBarShown;
    BOOL mMenuBarAutoHide;
    BOOL mFinishing;
    DisappearingWindow *mWindow;
    IPViewController *mViewController;
    NSView *mMainView;
    int mAnimationStartCount;
}

+ (struct _NSRect)predictedUsableArea;
- (BOOL)showTools;
- (void)unsuspendAll;
- (void)toggleToolbar:(id)fp8;
- (BOOL)showPlacard;
- (void)toggleThumbView:(id)fp8;
- (void)thumbnailLocationAction:(id)fp8;
- (void)thumbnailRowsAction:(id)fp8;
- (void)thumbnailAlbumAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (void)_disableMenuBarAutoHider;
- (void)_enableMenuBarAutoHider;
- (void)windowWillAnimateOn:(id)fp8;
- (void)windowWillAnimateOff:(id)fp8;
- (void)windowDidAnimateOn:(id)fp8;
- (void)windowDidAnimateOff:(id)fp8;
- (void)_showMenuBar;
- (void)_hideMenuBar;
- (void)layoutThumbAndToolViews;
- (void)relocateThumbView:(id)fp8;
- (void)growBarDidResizeWindow:(id)fp8;
- (void)growBarBeginResizeWindow:(id)fp8;
- (void)growBarEndResizeWindow:(id)fp8;
- (struct _NSRect)usableArea;
- (BOOL)isThumbWindowVisible;
- (BOOL)isToolWindowVisible;
- (void)showThumbWindow;
- (void)showToolWindow;
- (void)initialAnimateOn;
- (void)initialAnimateOff;
- (void)windowWillClose:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)beginExitFromFullscreen;
- (void)exit;
- (void)done;
- (void)dealloc;
- (void)_loadNib;
- (void)mouseMoved:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (id)window;
- (id)initWithController:(id)fp8 mainView:(id)fp12 thumbView:(id)fp16 toolbarView:(id)fp20 andScreen:(id)fp24;
- (int)thumbWindowLocation;
- (int)thumbWindowRows;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)keyDown:(id)fp8;
- (struct _NSPoint)centeredPointForHUDPanel;

@end

@interface NSFileManager (iPhotoExtensions)
- (BOOL)createDirectoryAtPath:(id)fp8;
- (BOOL)createDeepDirectoryAtPath:(id)fp8;
@end

@interface IPMarimbaWindow : NSWindow
{
    IPMarimbaController *_marimbaController;
}

- (void)mouseMoved:(id)fp8;
- (void)dealloc;
- (BOOL)canBecomeKeyWindow;
- (void)keyDown:(id)fp8;
- (void)setMarimbaController:(id)fp8;

@end

@interface IPMarimbaControllerView : MRMarimbaView
{
    IPMarimbaController *_marimbaController;
}

+ (id)defaultPixelFormat;
- (void)setMarimbaController:(id)fp8;
- (void)dealloc;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)acceptsFirstResponder;

@end

@interface IPMarimbaController : NSObject <IPMarimbaTransportDelegate, IPMarimbaOptionsDelegate>
{
    ArchiveController *_controller;
    BOOL _opened;
    NSScreen *_screen;
    unsigned int _display;
    BOOL _cursorHidden;
    double _lastMouseMoveTime;
    struct _NSPoint _lastMouse;
    BOOL _isLoading;
    BOOL _mouseOverTransport;
    struct _NSRect _screenFrame;
    BOOL _fullscreen;
    BOOL _remote;
    BOOL _advanced;
    BOOL _cancelShouldClose;
    IPMarimbaWindow *_window;
    IPMarimbaControllerView *_slideshowView;
    IPMarimbaScrubberWindow *_slideScrubberWindow;
    IPMarimbaScrubberView *_slideScrubberView;
    IPEdgeBox *_slideThumbEdgeBox;
    IPMarimbaSlideshow *_slideshow;
    IPMarimbaHUDController *_hudController;
    IPMarimbaHUDPanel *_loadingWindow;
    BOOL _mouseOverScrubber;
    BOOL _isWarmingUp;
    NSTimer *_playTimer;
    double _videoDuration;
    MPLayer *_mainLayer;
    BOOL _repeat;
    BOOL _faderInitialized;
    unsigned int _lastPhotoPlayedKey;
    BOOL _usingIntegratedGraphics;
    BOOL _shouldPlay;
    NSPanel *_remoteWindow;
    BOOL _remoteWindowMin;
    NSOpenGLView *_remoteSlideshowView;
    NSTimer *_remoteTimer;
    BOOL _remoteIsPlaying;
    QTMovie *_remoteAudioMovie;
    NSOpenGLContext *_remoteContext;
    unsigned int _remoteTexture;
    NSButton *mRemotePrevButton;
    NSButton *mRemotePlayPauseButton;
    NSButton *mRemoteNextButton;
    NSButton *mRemoteMinMaxButton;
    NSButton *mRemoteCloseButton;
    NSButton *mRemoteMuteButton;
    NSImageView *mRemoteDivider;
    id _slideshowDelegate;
}

+ (id)firstEffectIDForDocument:(id)fp8;
- (id)initWithArchiveController:(id)fp8;
- (void)dealloc;
- (BOOL)isOpened;
- (void)presentSlideshow:(id)fp8 fullscreen:(BOOL)fp12 forcePlayStart:(BOOL)fp16;
- (void)_warmupRenderer;
- (void)_warmupRendererThread;
- (void)presentSlideshowForAlbum:(id)fp8 settingsDelegate:(id)fp12 andPhotos:(struct IPPhotoList *)fp16 fullscreen:(BOOL)fp20 titleString:(id)fp24 commentString:(id)fp28 forcePlayStart:(BOOL)fp32;
- (void)_checkForModalWindow;
- (void)presentSlideshowWithDelegate:(id)fp8 album:(id)fp12 slideCount:(int)fp16 fromIndex:(int)fp20 forcePlayStart:(BOOL)fp24;
- (void)presentRemoteSlideshowForAlbum:(id)fp8 settingsDelegate:(id)fp12 andPhotos:(struct IPPhotoList *)fp16 titleString:(id)fp20 commentString:(id)fp24;
- (BOOL)renderIntoOpenGLBuffer:(struct __CVBuffer *)fp8 onScreen:(int *)fp12 forTime:(CDAnonymousStruct2 *)fp16;
- (void)_createRemoteSlideshowUI;
- (void)getOpenGLBufferContext:(struct _CGLContextObject **)fp8 pixelFormat:(struct _CGLPixelFormatObject **)fp12;
- (struct MovieType **)remoteAudioMovie;
- (void)windowWillClose:(id)fp8;
- (void)nextSlideAction:(id)fp8;
- (void)previousSlideAction:(id)fp8;
- (void)playPauseAction:(id)fp8;
- (void)minimizeAction:(id)fp8;
- (void)muteAction:(id)fp8;
- (void)closeAction:(id)fp8;
- (void)_minMaxRemoteWindow:(BOOL)fp8;
- (void)_createDelegateSlideshowUIWithWindowFrame:(struct _NSRect)fp8 viewFrame:(struct _NSRect)fp24;
- (void)_createSlideshowUI;
- (BOOL)usingIntegratedGraphics;
- (void)applicationWillResignActive:(id)fp8;
- (void)windowDidResign:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)applicationWillBecomeActive:(id)fp8;
- (struct _NSRect)_rectToFitIn:(struct _NSRect)fp8 withAspectRatio:(float)fp24;
- (BOOL)mouseOverTransport;
- (void)setMouseOverTransport:(BOOL)fp8;
- (void)_hideCursor;
- (void)_showCursor;
- (void)mouseMoved:(id)fp8;
- (id)imageDB;
- (void)optionsCancelled;
- (BOOL)_shouldClose;
- (void)optionsPlayed;
- (BOOL)allowThemeSelection;
- (id)screen;
- (id)mainWindow;
- (void)aspectRatioDidChange;
- (void)timingDidChange;
- (void)slidesNeedUpdate;
- (void)kenBurnsStateDidChange;
- (void)needsRerender;
- (void)jumpToTitleSlide;
- (id)visibleSlides;
- (void)slideOrderDidChange;
- (void)styleDidChange:(id)fp8;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (id)_nextEffectContainer;
- (id)_previousEffectContainer;
- (id)_firstEffectContainer;
- (id)currentEffectContainer;
- (id)effectContainerForTime:(double)fp8;
- (struct IPPhotoList *)photosForEffectContainer:(id)fp8 atTime:(double)fp12;
- (void)keyDown:(id)fp8;
- (void)_invalidatePlayTimer;
- (void)playTimerFire:(id)fp8;
- (void)remoteTimerFire:(id)fp8;
- (void)togglePlayback:(id)fp8;
- (void)_effectDidChange:(id)fp8;
- (void)play;
- (BOOL)isPlaying;
- (void)pause;
- (double)duration;
- (double)time;
- (int)mainLayerIndex;
- (void)gotoTime:(double)fp8 update:(BOOL)fp16;
- (void)gotoEffectContainerForTime:(double)fp8 update:(BOOL)fp16;
- (void)beatDetectionDidStart:(id)fp8;
- (void)beatDetectionDidEnd:(id)fp8;
- (void)showLoadingWindowWithCancelButton:(BOOL)fp8;
- (void)closeLoadingWindow;
- (void)gotoBeginning;
- (void)close:(id)fp8;
- (void)_showMenubar;
- (void)_hideMenubar;
- (void)resetScrubberLevel;
- (void)_intialScrubberAnimateOn:(BOOL)fp8;
- (void)_initialScrubberAnimateOff;
- (unsigned int)_fadeToBlack;
- (void)_fadeToWhiteWithToken:(unsigned int)fp8;
- (void)_initFader;
- (void)_setFaderValue:(float)fp8;
- (void)_closeFader;

@end

@interface IPMarimbaScrubberWindow : DisappearingWindow
{
    IPMarimbaScrubberView *_scrubber;
}

- (void)setScrubber:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)canBecomeKeyWindow;

@end

@interface DebugReportWindow : NSObject
{
    struct vector<ReportRecord, std::allocator<ReportRecord>> *reports;
    NSWindow *window;
    NSTextField *titleField;
    NSTextField *statusField;
    NSTextView *textView;
    NSButton *nextButton;
}

+ (void)create;
+ (void)show;
+ (void)queueReportText:(id)fp8 title:(id)fp12 show:(BOOL)fp16;
+ (void)nextReportIfTitle:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)refreshStatus;
- (void)nextAction:(id)fp8;
- (void)_nextReportIfTitle:(id)fp8;
- (void)_refresh;
- (void)_show;
- (void)_queueReportText:(id)fp8 title:(id)fp12 show:(BOOL)fp16;

@end

@interface IPPublishPluginManager : IPHPluginManager
{
}

+ (void)initialize;
+ (void)touch;
+ (int)recordedActionForServiceKey:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)applicationID;
- (id)supportedPhotoSizes;
- (BOOL)uidsAreCaseInsensitive;
- (id)directoriesToScan;
- (id)albumsForServiceKey:(id)fp8 withUsername:(id)fp12;
- (void)updateProtectionUsername:(id)fp8 fromOldUsername:(id)fp12 serviceKey:(id)fp16 serviceUsername:(id)fp20;
- (id)albumNamesForProtectionUsername:(id)fp8 serviceKey:(id)fp12 serviceUsername:(id)fp16;
- (void)tickleInsertionPoint:(id)fp8;
- (BOOL)canDoNetDiagnostics;
- (BOOL)isNetworkDisconnected;
- (void)showNetDiagnostics;
- (void)checkNetAlbums:(id)fp8;
- (void)_albumRemovedSheetEnded:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (void)_notifyRemovedAlbums:(id)fp8;
- (void)_setNetAlbumList:(id)fp8 forDocument:(id)fp12 forService:(id)fp16;
- (void)_showNetAlbumError:(id)fp8;
- (void)listAlbumsMessageHandler:(id)fp8;
- (void)_setNetAlbumContents:(id)fp8 forAlbum:(id)fp12 forService:(id)fp16;
- (void)listAlbumContentsMessageHandler:(id)fp8;

@end

@interface IPMarimbaScrubberView : NSView
{
    IPMarimbaController *_controller;
    IPMarimbaSlideshow *_slideshow;
    struct IPPhotoList *_photos;
    struct vector<SlideThumb, std::allocator<SlideThumb>> *_slideThumbArray;
    double _time;
    double _duration;
    struct RenderCache *_squareRenderCache;
    struct RenderCache *_rectangularRenderCache;
    NSColor *_backgroundColor;
    struct _NSRect _scrubBarRect;
    float _thumbSize;
    long _visibleThumbs;
    BOOL _timeBased;
    long _skimIndex;
    BOOL _dontDrawSkim;
    struct _NSRect _headRect;
    int _trackingTag;
    BOOL _trackingInside;
    BOOL _dontDrawHead;
    BOOL _inDrag;
    long _dragIndex;
    NSTimer *_animationTimer;
    BOOL _animationWasStarted;
    long _dropTargetIndex;
    double _animationDuration;
}

+ (float)calculateHeightForScreenWidth:(float)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)setController:(id)fp8 slideshow:(id)fp12;
- (void)_drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setTime:(double)fp8 andUpdateHead:(BOOL)fp16;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (struct _NSRect)_calcHeadRectForTime:(double)fp8;
- (float)_offsetForTime:(double)fp8;
- (double)_containerPreviewTimeForMouse:(float)fp8;
- (void)_animateAHoleAt:(long)fp8;
- (void)_clearAnimationTimer;
- (void)_serviceAnimation;
- (void)_cleanUpAnimation;
- (void)_drag:(id)fp8 atIndex:(long)fp12;
- (void)_fillPasteboardWithSelection:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (unsigned int)_determineDragResult:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (long)_indexForMouse:(float)fp8;
- (double)_timeForMouse:(float)fp8;
- (void)_calculateSizes;
- (struct CGImage *)_drawThumbnailForPhoto:(struct IPPhotoInfo *)fp8 toThumbRect:(struct _NSRect)fp12 tnManager:(id)fp28 inContext:(struct CGContext *)fp32 flipped:(BOOL)fp36;
- (struct _NSRect)_skimRectForThumb:(struct SlideThumb *)fp8;
- (struct CGImage *)_createThumbImageForPhoto:(struct IPPhotoInfo *)fp8 tnManager:(id)fp12 square:(BOOL)fp16;
- (void)_updateTime:(double)fp8;
- (void)_gotoIndex:(long)fp8;
- (void)_updateIndex:(long)fp8;

@end

@interface IPPlacesMapView : NSView
{
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlay;
    IPPlacesMapViewController *mController;
    IPMapZoomControl *mZoomControl;
}

- (void)handleDbMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)relayout:(BOOL)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (BOOL)validateMenuItem:(id)fp8;
- (id)mapView;
- (id)mapOverlay;
- (id)zoomControl;
- (void)dealloc;

@end

@interface IPPlacesMapViewController : IPViewController
{
    NSButtonCell *mTileViewButtonCell;
    NSButtonCell *mMapViewButtonCell;
    IPToolbarItem *mViewModeToolbarItem;
    IPToolbarItem *mWorldButton;
    IPToolbarItem *mShowPhotosButton;
    IPToolbarItem *mEditItem;
    IPToolbarItem *mPrintItem;
    IPToolbarItem *mDesktopItem;
    IPToolbarItem *mEmailItem;
    IPToolbarItem *mIDVDItem;
    IPToolbarItem *mBladeItem;
    IPToolbarItem *mBladeBlogItem;
    IPToolbarItem *mBurnItem;
    IPToolbarItem *mSearchItem;
    IPToolbarItem *mOrderPrintsItem;
    IPToolbarItem *mNetSlidesItem;
    IPToolbarItem *mWebItem;
    IPToolbarItem *mNetAlbumsItem;
    IPToolbarItem *mFBAlbumsItem;
    IPToolbarItem *mFlickrAlbumsItem;
    IPToolbarItem *mSmugMugAlbumsItem;
    NSMenu *mKeepsakeMenu;
    IPToolbarItem *mKeepsakeItem;
    IPToolbarItem *mBookItem;
    IPToolbarItem *mCalendarItem;
    IPToolbarItem *mCardItem;
    IPToolbarItem *mCutSheetItem;
    IPToolbarItem *mSlideshowItem;
    IPToolbarItem *mPlayToolbarItem;
    IPToolbarItem *mSmartAlbumItem;
    NSButtonCell *mTerrainCell;
    NSButtonCell *mHybridCell;
    NSButtonCell *mSatelliteCell;
    IPToolbarItem *mMapViewModeButtonItem;
    BOOL mOptionKeyWasDown;
    struct MessageReceiver mAlbumMessageReceiver;
    NSView *mHeader;
    float mMinLong;
    float mMinLat;
    float mMaxLong;
    float mMaxLat;
    struct IPPhotoList *mPhotos;
    BOOL mRebuildMarkers;
    BOOL mRefreshMarkersAfterLoad;
    BOOL mClearLoadingOverlay;
    BOOL mMyWorldEnabled;
    BOOL mShowBackButton;
    BOOL mForcePhotoIdentifiers;
    NSMutableDictionary *mIdentifierCache;
    BOOL mPhotoListPreserved;
    NSLock *mResourceCounterLock;
    int mResourceCounter;
    BOOL mMapNeedsResize;
    BOOL mIgnoreRequest;
    struct _NSRect mZoomRect;
    int mCurrentMapType;
    BOOL mInLiveSlide;
    float mLastThumbnailSize;
}

- (void)_handleDoneWithChanges:(id)fp8;
- (void)_loadPreferences:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)initToolbar;
- (void)freeToolbar;
- (void)switchToTerrain;
- (void)switchToHybrid;
- (void)switchToSatellite;
- (id)updateStatus;
- (void)selectAll;
- (void)selectNone;
- (BOOL)supportsFindCommand;
- (void)computeMaxMinForPhotoList:(struct IPPhotoList *)fp8;
- (void)_clearIdentifierCache:(id)fp8;
- (id)_identifiersForZoomLevel:(int)fp8;
- (void)_loadNib;
- (void)zoomToCoordinates:(struct _NSRect)fp8;
- (void)configureMapForDisplay;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)teardown;
- (BOOL)validateMenuItem:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)setCurrentPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12;
- (void)currentAlbumWillSwitch:(id)fp8;
- (BOOL)supportsResizeSlider;
- (void)incrementZoom;
- (void)decrementZoom;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (struct _NSPoint)zoomPoint;
- (void)zoomToLevel:(int)fp8 animate:(BOOL)fp12;
- (void)zoomOut;
- (void)goHome;
- (void)switchToTileView:(id)fp8;
- (void)switchToMapView:(id)fp8;
- (struct IPPhotoList *)photos;
- (void)setFocusPhotos:(struct IPPhotoList *)fp8 forAllPhotos:(struct IPPhotoList *)fp12 usePhotoDetail:(BOOL)fp16;
- (void)setFocusPhotos:(struct IPPhotoList *)fp8 forAllPhotos:(struct IPPhotoList *)fp12 usePhotoDetail:(BOOL)fp16 updateMapImmediately:(BOOL)fp20;
- (BOOL)photoListPreserved;
- (void)setPhotoListPreserved:(BOOL)fp8;
- (void)setMyWorldEnabled:(BOOL)fp8;
- (BOOL)myWorldEnabled;
- (BOOL)showBackButton;
- (id)markers;
- (id)visibleMarkers;
- (id)selectedVisibleMarkers;
- (void)clickedMapMarker:(id)fp8;
- (void)showPhotosForMarker:(id)fp8;
- (void)doubleClickedMapMarker:(id)fp8;
- (void)zoomMapAtPoint:(id)fp8;
- (void)zoomEnded:(id)fp8;
- (void)zoomMapOnMarker:(id)fp8;
- (void)zoomMapOnMarkers:(id)fp8;
- (void)switchToDetailViewForVisibleMarkers:(id)fp8;
- (void)createSmartAlbumForVisibleMarkers;
- (void)switchToDetailViewForMarkers:(id)fp8;
- (id)_detailTitleForPhotos:(struct IPPhotoList *)fp8;
- (id)_detailTitleForMarkers:(id)fp8;
- (void)mapLoaded:(id)fp8;
- (id)webView:(id)fp8 resource:(id)fp12 willSendRequest:(id)fp16 redirectResponse:(id)fp20 fromDataSource:(id)fp24;
- (void)setupMapCache:(id)fp8;
- (void)refreshMapSize:(id)fp8;
- (void)updateMapMarkers:(id)fp8;

@end

@interface MapViewState : NSObject
{
    double _lat;
    double _lon;
    int _zoom;
    NSArray *_markers;
}

+ (id)mapViewStateForMap:(id)fp8;
- (id)initWithLat:(double)fp8 lon:(double)fp16 zoom:(int)fp24;
- (double)latitude;
- (double)longitude;
- (int)zoom;
- (id)markers;
- (void)setMarkers:(id)fp8;
- (void)dealloc;

@end

@interface IPPlacesMapViewHeader : NSView
{
    IPPlacesMapViewController *mController;
    NSImage *_bgArt;
    NSAttributedString *mZoomOutString;
    NSAttributedString *mHomeString;
    NSAttributedString *mMyWorldString;
    NSAttributedString *mBackString;
    NSAttributedString *mShowPlacesString;
    struct _NSRect mBackRect;
    struct _NSRect mBackStrRect;
    struct _NSRect mBackMiddleRect;
    struct _NSPoint mBackLeftPoint;
    struct _NSPoint mBackRightPoint;
    struct _NSRect mMyWorldRect;
    struct _NSRect mMyWorldStrRect;
    struct _NSRect mMyWorldMiddleRect;
    struct _NSPoint mMyWorldLeftPoint;
    struct _NSPoint mMyWorldRightPoint;
    struct _NSRect mZoomOutRect;
    struct _NSRect mZoomOutStrRect;
    struct _NSRect mZoomOutMiddleRect;
    struct _NSPoint mZoomOutLeftPoint;
    struct _NSPoint mZoomOutRightPoint;
    struct _NSRect mHomeRect;
    struct _NSRect mHomeStrRect;
    struct _NSRect mHomeMiddleRect;
    struct _NSPoint mHomeLeftPoint;
    struct _NSPoint mHomeRightPoint;
    struct _NSRect mShowPlacesRect;
    struct _NSRect mShowPlacesStrRect;
    struct _NSRect mShowPlacesMiddleRect;
    struct _NSPoint mShowPlacesLeftPoint;
    struct _NSPoint mShowPlacesRightPoint;
    NSImage *mLeftArrowN;
    NSImage *mLeftN;
    NSImage *mMiddleN;
    NSImage *mRightN;
    NSImage *mLeftArrowP;
    NSImage *mLeftP;
    NSImage *mMiddleP;
    NSImage *mRightP;
    BOOL mHighlightBackButton;
    BOOL mHighlightZoomOutButton;
    BOOL mHighlightHomeButton;
    BOOL mHighlightShowPlacesButton;
    BOOL mOptionKeyWasDown;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)_modifiersChanged:(id)fp8;
- (void)dealloc;

@end

@interface IPPlaceInfo : NSObject
{
    IPPlacesView *mPlacesView;
    struct IPPhotoList *_currentCity;
    ImageDB *_db;
    float m_step;
    float m_percent;
    NSWindow *m_window;
    NSWindow *m_front_window;
    NSTimer *m_timer;
    LocationData *mLocationData;
    NSImageView *_frontImage;
    IPEventTileView *_backImage;
    NSString *_nameLabel;
    NSString *_name;
    NSView *_infoView;
    NSBox *_infoViewBox;
    struct _NSRect _infoViewBoxRect;
    NSView *_mapContainerView;
    NSView *_placeholderMap;
    NSButton *_closeButton;
    struct _NSRect _closeButtonRect;
    NSButton *_prevEventButton;
    NSButton *_nextEventButton;
    LocationLookup *_locationLookup;
    LocationCompletionMenu *_locationCompletion;
    NSWindow *_locationCompletionWindow;
    NSLock *_searchLock;
    NSMutableArray *_searchResults;
    NSDictionary *_selectedResult;
    NSMutableArray *_optionalSearchPoints;
    BOOL _searchInProgress;
    id _eventAddress;
    id _eventCount;
    id _eventDate;
    id _eventPhotoCount;
    id _eventDescription;
    id _eventImage;
    id _eventName;
    id _eventPlaceName;
    id _showHideButton;
    NSImage *smallBackgroundImage;
    NSImage *largeBackgroundImage;
    NSSearchField *_searchField;
    NSPopUpButton *_searchResultsPopup;
    NSProgressIndicator *_searchSpinner;
    LocationMapOverlay *_locationMapOverlay;
    GoogleMapWebView *_locationMapView;
    NSView *_frameView;
    struct _NSRect _largeWindowFrame;
    struct _NSRect _smallWindowFrame;
}

- (void)awakeFromNib;
- (void)_locationMapLoadTimer:(id)fp8;
- (void)setPlacesView:(id)fp8;
- (struct _NSRect)midFrameFromRect:(struct _NSRect)fp8 toRect:(struct _NSRect)fp24;
- (void)setTransform;
- (void)stopTimer;
- (void)timer;
- (void)runTimer;
- (float)stepAmount;
- (void)show;
- (void)hide;
- (struct IPPhotoInfo *)currentPhoto;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (void)completionMenuShouldHide:(id)fp8;
- (struct _NSSize)size;
- (void)showForPhotos:(struct IPPhotoList *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36;
- (void)updateAnimateRect:(struct _NSRect)fp8;
- (void)updateForPhotos:(struct IPPhotoList *)fp8 inDB:(id)fp12 withImage:(id)fp16;
- (void)updateFromLocationChange:(id)fp8;
- (void)toggleMapView:(id)fp8;
- (void)_updateMapButton:(BOOL)fp8;
- (void)_showSkimmedPhotoLocation:(id)fp8;
- (void)selectPreviousEvent:(id)fp8;
- (void)selectNextEvent:(id)fp8;
- (void)close:(id)fp8;
- (void)dealloc;
- (void)performSearchAction:(id)fp8;
- (void)startSearch:(id)fp8;
- (void)searchComplete:(id)fp8;
- (void)changeSelectedSearchResult:(id)fp8;

@end

@interface ImportLocationLookup : NSObject
{
    double _latitude;
    double _longitude;
    double _photoDate;
    struct IPPhotoInfo *_photo;
    GeoHierarchy *_results;
    struct SqUserPlace *_userPlace;
}

+ (void)lock;
+ (void)unlock;
- (id)initWithLatitude:(double)fp8 longitude:(double)fp16 photoDate:(double)fp24;
- (void)dealloc;
- (double)latitude;
- (double)longitude;
- (double)photoDate;
- (void)setPhoto:(struct IPPhotoInfo *)fp8;
- (void)lookupComplete:(id)fp8;
- (void)lookupFoundUserPlace:(struct SqUserPlace *)fp8;
- (void)_lock;
- (void)_unlock;

@end

@interface IPMarimbaThumbView : MRMarimbaView
{
    BOOL _trackingInside;
    double _posterTime;
    int _trackingTag;
}

- (void)_setTrackingTag:(int)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)setPosterTime:(double)fp8;

@end

@interface IPMarimbaThemeChooserView : NSView
{
    int _styleCount;
    int _selectedStyleIndex;
    BOOL _fastSelection;
    IPMarimbaHUDController *_controller;
    NSMutableArray *_thumbViews;
    NSMutableArray *_documents;
    NSArray *_thumbSnapshots;
    NSDictionary *_textAttrs;
    id _target;
    SEL _action;
    id _doubleClickTarget;
    SEL _doubleClickAction;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)isFlipped;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)setFastSelection:(BOOL)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (int)_mouseToStyleIndex:(struct _NSPoint)fp8;
- (void)setThumbSnapshots:(id)fp8;
- (void)collectThumbSnapshots;
- (void)refresh;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseMoved:(id)fp8;
- (void)addStylesForController:(id)fp8 selectedStyle:(id)fp12;
- (void)clearThumbs;
- (int)selectedIndex;
- (void)setSelectedIndex:(int)fp8;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (void)setDoubleClickTarget:(id)fp8;
- (void)setDoubleClickAction:(SEL)fp8;
- (void)_drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;

@end

@interface IPMarimbaStyleButtonView : NSView
{
    NSString *_style;
    SEL _action;
    id _target;
    BOOL _hitState;
    NSDictionary *_textAttrs;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (id)style;
- (void)setStyle:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;

@end

@interface LocationMapMarkerGroup : NSObject
{
    NSMutableArray *mMarkers;
    struct CGRect mBoundingRect;
    struct CGRect mHighlightRect;
    BOOL _haveLabels;
    NSString *_countryLabel;
    BOOL _hadCountry;
    int _countryCount;
    NSString *_provinceLabel;
    BOOL _hadProvince;
    int _provinceCount;
    NSString *_countyLabel;
    BOOL _hadCounty;
    NSString *_cityLabel;
    NSMutableArray *_provinceArray;
    NSMutableArray *_cityArray;
    BOOL _hadCity;
    NSString *_neighborhoodLabel;
    NSString *_aoiLabel;
    NSString *_poiLabel;
    NSString *_locationNameLabel;
}

- (BOOL)shouldAddMarker:(id)fp8 forPhoto:(struct IPPhotoInfo *)fp12;
- (void)addMarker:(id)fp8;
- (id)markers;
- (struct CGRect)boundingRect;
- (struct CGRect)highlightRect;
- (void)recalculateBoundingRect;
- (void)evaluateLabelsForPhoto:(struct IPPhotoInfo *)fp8;
- (float)searchRadius;
- (id)bestLabel;
- (id)description;
- (void)dealloc;

@end

@interface IPHDiffWorker : XTWorker
{
    IPHDiffBag *_diffBag;
    id <IPHDiffUpdateProxyProtocol> _localProxy;
    id <IPHDiffUpdateProxyProtocol> _distantProxy;
    IPHDiffUpdateOperation *_operation;
    XTWorkOrder *_workOrder;
    NSCountedSet *_syncTasksByID;
    NSMutableSet *_jobsInFlight;
    NSArray *_distantIDs;
    NSArray *_localIDs;
    NSMutableSet *_createdPendingOverlay;
    NSMutableSet *_failedUploads;
    NSMutableArray *_updateTasks;
    int _overlayBuffer;
    XTMessage *_overlayWaitingMsg;
    NSMutableArray *_waitingForOverlayFinish;
    unsigned int _operationTotal;
    int _operationProgress;
    BOOL _localIsTruth;
    BOOL _twoWays;
}

+ (void)startThreads;
+ (void)stopThreads;
+ (void)downloadHandler:(id)fp8;
+ (void)prepareForUploadHandler:(id)fp8;
+ (void)uploadHandler:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)localProxy;
- (id)distantProxy;
- (void)_completeOverlay;
- (void)_handleUpdatesOnMainThread;
- (void)_flyMessage:(unsigned int)fp8 toSelector:(SEL)fp12 onThread:(id)fp16 forTask:(int)fp20 objectID:(id)fp24 progressValue:(int)fp28 toBeReturned:(id)fp32;
- (void)_flyUploadForTask:(int)fp8 objectID:(id)fp12 progressValue:(int)fp16 toBeReturned:(id)fp20;
- (void)_doOverlayTask;
- (void)beginWork:(id)fp8;
- (void)performJob:(id)fp8;
- (void)endWork:(id)fp8;
- (void)downloadReplyHandler:(id)fp8;
- (void)prepareForUploadReplyHandler:(id)fp8;
- (void)uploadReplyHandler:(id)fp8;
- (int)operationProgress;
- (unsigned int)operationTotal;

@end

@interface IPMarimbaSettingsHUDController : NSObject
{
    IPMarimbaHUDController *_controller;
    NSView *_timingView;
    NSView *_captionView;
    NSView *_repeatSlideshowView;
    NSView *_scalePhotosView;
    NSView *_showTitleSlideView;
    NSView *_shuffleSlideOrderView;
    NSView *_aspectRatioView;
    NSView *_allSlideTransitionView;
    NSView *_thisSlideView;
    NSTextField *_thisSlidePlayEachSlideTextField;
    NSTextField *_thisSlidePlayEachSlideSecondsTextField;
    NSTextField *_thisSlideTransitionTextField;
    NSTextField *_thisSlideSpeedTextField;
    NSTextField *_thisSlideKenBurnsTextField;
    NSButton *_thisSlideKBStartButton;
    NSButton *_thisSlideKBStopButton;
    HUDBeveledPopUpButton *_thisSlideTransitionPopup;
    HUDDirectionView *_thisSlideTransitionDirectionView;
    NSTextField *_thisSlideDurationTextField;
    HUDStepper *_thisSlideDurationStepper;
    HUDSwitchButton *_thisSlideKenBurnsSwitchButton;
    IPMarimbaSlider *_thisSlideTransitionSlider;
    NSTextField *_thisSlideTransitionPreviewTextField;
    IPMarimbaTransitionPreviewView *_thisSlideTransitionPreviewView;
    NSView *_thisSlideCustomizableView;
    NSView *_hudTransitionPreviewView;
    IPMarimbaTransitionPreviewView *_hudTransitionRendererView;
    NSTextField *_hudTransitionPreviewTextField;
    NSTextField *_hudDurationTextField;
    NSTextField *_hudDurationSecondsTextField;
    NSTextField *_hudDurationInfoTextField;
    NSTextField *_hudFitToMusicTextField;
    NSTextField *_hudFitToMusicInfoTextField;
    NSTextField *_hudMinDurationTextField;
    HUDStepper *_hudMinDurationStepper;
    NSView *_hudScalingModeView;
    NSMatrix *_hudScalingModeMatrix;
    NSMatrix *_scalingModeMatrix;
    NSTextField *_allSlidesBackgroundColorTextField;
    IPMarimbaHUDColorPopUpButton *_allSlidesBackgroundColorPopUpButton;
    NSView *_allSlidesBackgroundColorView;
    NSTextField *_minDurationTextField;
    HUDStepper *_minDurationStepper;
    NSTextField *_durationTextField;
    NSTextField *_durationSecondsTextField;
    NSTextField *_durationInfoTextField;
    NSTextField *_fitToMusicTextField;
    NSTextField *_fitToMusicInfoTextField;
    NSTextField *_showCaptionTextField;
    NSTextField *_showTitleSlideTextField;
    NSTextField *_shuffleSlidesTextField;
    NSTextField *_repeatSlideshowTextField;
    NSTextField *_scalePhotosToFillScreenTextField;
    NSTextField *_aspectRatioTextField;
    NSTextField *_allSlideTransitionTextField;
    NSTextField *_allSlideSpeedTextField;
    HUDBeveledPopUpButton *_allSlidesTransitionPopUpButton;
    HUDDirectionView *_allSlidesTransitionDirectionView;
    IPMarimbaSlider *_allSlidesTransitionSlider;
    NSView *_settingsDividerBar;
    NSView *_hudDividerBar;
    IPMarimbaHUDPanel *_settingsHUD;
    NSView *_containerView;
    IPMarimbaSettingsTabControl *_settingsTabControl;
    IPMarimbaFilterView *_thisSlideFilterView;
    NSView *_thisSlideContainerView;
    IPMarimbaTransitionPreviewView *_settingsTransitionPreviewView;
    MPSlide *_selectedSlide;
    BOOL _scalePhotosToFillScreen;
    BOOL _repeatSlideshow;
    BOOL _slideShuffleOrder;
    BOOL _showTitleSlide;
    BOOL _showCaptions;
    int _captionType;
    int _audioScaleMode;
    int _aspectRatioType;
    BOOL _thisSlideHasKenBurns;
    BOOL _thisSlideHasTransition;
    BOOL _thisSlideHasCustomDuration;
    int _filterIndex;
    BOOL _allSlidesHaveTransition;
    double _transitionDuration;
    NSString *_selectedColor;
    double _minDuration;
    BOOL _dirty;
    BOOL _isUpdating;
    BOOL _loaded;
}

+ (id)_popupPickerWhiteImage;
+ (id)_popupPickerBlackImage;
- (void)awakeFromNib;
- (void)dealloc;
- (id)settingsView;
- (id)slidingPanelsSettingsView;
- (id)otherSettingsView;
- (id)advacedAllSlidesSettingsView;
- (id)advancedSlidingPanelsAllSlidesSettingsView;
- (id)advancedOtherAllSlidesSettingsView;
- (id)advacedThisSlidesSettingsView;
- (void)windowWillClose:(id)fp8;
- (void)settingsPanelWillClose;
- (BOOL)loaded;
- (void)setLoaded:(BOOL)fp8;
- (void)updateSettingsForSlide:(id)fp8;
- (void)updateSettings;
- (int)applySettings;
- (void)showSettingsHUD;
- (void)closeSettingsHUD;
- (BOOL)isSettingsHUDVisible;
- (void)settingsPanelDidShow;
- (void)settingsHUDTabDidChange:(id)fp8;
- (void)durationStepperDidChange:(id)fp8;
- (void)durationTextFieldDidChange:(id)fp8;
- (void)_updateDurationControlsWithTime:(double)fp8;
- (void)_minDurationNeedsToBeApplied;
- (int)currentKenBurnsState;
- (void)didChangeKenBurnsState:(id)fp8;
- (void)didChangeKenBurnsToStart:(id)fp8;
- (void)didChangeKenBurnsToEnd:(id)fp8;
- (BOOL)canScalePhotos;
- (BOOL)canShowCaptions;
- (BOOL)canChangeDuration;
- (BOOL)scalePhotosToFillScreen;
- (void)setScalePhotosToFillScreen:(BOOL)fp8;
- (void)_recropSlides;
- (BOOL)repeatSlideshow;
- (void)setRepeatSlideshow:(BOOL)fp8;
- (BOOL)shuffleSlideOrder;
- (void)setShuffleSlideOrder:(BOOL)fp8;
- (BOOL)showTitleSlide;
- (void)setShowTitleSlide:(BOOL)fp8;
- (void)_updateStyle;
- (int)audioScaleMode;
- (void)setAudioScaleMode:(int)fp8;
- (void)_warnAboutFitToMusic;
- (void)_rescaleDocument;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)fp8;
- (int)captionType;
- (void)setCaptionType:(int)fp8;
- (int)aspectRatioType;
- (void)setAspectRatioType:(int)fp8;
- (BOOL)canHaveKenBurns;
- (BOOL)thisSlideHasKenBruns;
- (void)setThisSlideHasKenBurns:(BOOL)fp8;
- (BOOL)thisSlideHasCustomDuration;
- (void)setThisSlideHasCustomDuration:(BOOL)fp8;
- (void)thisSlideMinDurationDidChange:(id)fp8;
- (void)_updateThisSlideMinTransitionDurationToTime:(double)fp8;
- (BOOL)canHaveTransition;
- (BOOL)thisSlideHasTransition;
- (BOOL)thisSlideCanChangeTransitionDuration;
- (void)setThisSlideHasTransition:(BOOL)fp8;
- (void)thisSlideTransitionDidChange:(id)fp8;
- (void)thisSlideTransitionDirectionDidChange:(id)fp8;
- (void)thisSlideTransitionDurationDidChange:(id)fp8;
- (void)_updateTransitionToControls;
- (void)_updateControlsToTransition;
- (void)_updateThisSlideTransitionPreview;
- (BOOL)timeScale;
- (id)transitionID;
- (int)transitionDirection;
- (double)transitionDuration;
- (id)backgroundColor;
- (BOOL)allSlideHaveTransition;
- (BOOL)allSlideCanChangeTransitionDuration;
- (void)setAllSlideHaveTransition:(BOOL)fp8;
- (void)allSlidesTransitionDidChange:(id)fp8;
- (void)allSlidesTransitionDirectionDidChange:(id)fp8;
- (void)allSlidesTransitionDurationDidChange:(id)fp8;
- (void)_updateAllSlideTransition;
- (void)_updateControlsToAllSlidesTransition;
- (void)_updateAllSlidesTransitionPreview;
- (void)filterPickerDidChange:(id)fp8;
- (void)backgroundColorDidChange:(id)fp8;
- (id)_idOfCombinedID:(id)fp8;
- (id)_presetIDOfCombinedID:(id)fp8;
- (int)_transitionSliderIndexFromDuration:(double)fp8;
- (double)_transitionDurationFromSliderIndex:(int)fp8;
- (id)_directionPresetIDForDirection:(int)fp8;
- (int)_directionForDirectionPresetID:(id)fp8;
- (int)_transitionIndexForTransitionID:(id)fp8 presetID:(id)fp12;
- (id)_transitionIDFromTransitionIndex:(int)fp8;
- (void)_addTransitionsToMenu:(id)fp8;
- (int)_aspectRatioTypeForAspectRatio:(double)fp8;
- (id)presetIDForDirectionPresetID:(id)fp8 realPresetID:(id)fp12;
- (id)_currentStyleID;
- (BOOL)_currentStyleIsCustomizable;

@end

@interface IPMarimbaSettingsKenBurnsButton : NSButton
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaMusicHUDController : NSObject
{
    IPMarimbaHUDController *_controller;
    MarimbaMusicTableView *_playlistTableView;
    NSButton *_playMusicCheckBox;
    NSButton *_usePlaylistCheckBox;
    NSTextField *_playMusicLabelText;
    NSTextField *_usePlaylistText;
    NSView *_mainMusicView;
    NSView *_checkBoxView;
    NSView *_playlistView;
    ILMediaBrowserView *_mediaBrowserView;
    IPMarimbaMediaBackground *_mediaBrowserBackgroundView;
    NSView *_instantApplyView;
    IPMarimbaBackgroundView *_playlistTopBorder;
    IPMarimbaBackgroundView *_playlistLeftBorder;
    IPMarimbaBackgroundView *_playlistBottomBorder;
    IPMarimbaHUDPanel *_musicHUD;
    NSView *_containerView;
    ILiTunesMediaManager *_iTunesMediaManager;
    ILFolderMediaManager *_folderMediaManager;
    ILGarageBandMediaManager *_garageBandMediaManager;
    ILMediaManager *_appDefMediaManager;
    BOOL _isLoaded;
    BOOL _dirty;
    ILMediaGroup *_currentMediaGroup;
    NSDictionary *_attrStringProperties;
    NSString *_style;
    NSMutableArray *_selectedMusic;
    NSMutableDictionary *_defaultSongs;
    BOOL _inPlaylistMode;
    NSString *_marimbaMusicPath;
    BOOL _isUpdating;
    BOOL _loaded;
}

+ (id)pathForMediaObjectID:(id)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)settingsLoaded;
- (void)setSettingsLoaded:(BOOL)fp8;
- (void)updateSettings;
- (void)updateSelection;
- (int)applySettings;
- (double)durationOfSelectedSongs;
- (BOOL)isDirty;
- (BOOL)playsMusic;
- (id)songs;
- (void)showMusicHUD;
- (void)windowDidResignMain:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)stopAudioPreview;
- (void)toggleMusicHUDMode;
- (void)closeMusicHUD;
- (BOOL)isMusicHUDVisible;
- (void)_loadBrowser;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (id)defaultMusicView;
- (id)playlistMusicView;
- (BOOL)inPlaylistMode;
- (void)playlistCheckBoxChanged:(id)fp8;
- (void)useAudioCheckBoxChanged:(id)fp8;
- (void)instantApplyClicked:(id)fp8;
- (BOOL)isLoaded;
- (void)load;
- (void)unload;
- (void)mediaBrowserViewSelectionDidChange:(id)fp8;
- (void)_selectMediaObjectInMediaBrowserView:(id)fp8;
- (BOOL)mediaBrowserView:(id)fp8 shouldSelectMediaObject:(id)fp12;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaObject:(id)fp12;
- (BOOL)mediaBrowserView:(id)fp8 shouldDisplayMediaGroup:(id)fp12;
- (id)mediaBrowserView:(id)fp8 displayNameForMediaGroup:(id)fp12;
- (void)mediaBrowserView:(id)fp8 didLoadBrowserType:(int)fp12;
- (id)mediaBrowserView:(id)fp8 iconForMediaGroup:(id)fp12;
- (id)mediaBrowserView:(id)fp8 attributedDisplayNameForMediaObject:(id)fp12;
- (id)_getTitleFromSpotlight:(id)fp8;
- (void)mediaBrowserViewPreviewWillBeginPlaying:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (BOOL)tableView:(id)fp8 writeRowsWithIndexes:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(unsigned int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(unsigned int)fp20;
- (void)_deleteSelectionInTableView:(id)fp8;
- (void)_moveSongsFromIndices:(id)fp8 toIndex:(int)fp12;
- (id)_mediaObjectForID:(id)fp8;
- (id)_idForMediaObject:(id)fp8;
- (void)_selectMediaObject:(id)fp8;
- (id)_mediaGroupForMediaObject:(id)fp8;
- (id)_stripAccentsFromString:(id)fp8;
- (id)_stripPathExtensionFromSong:(id)fp8;
- (void)_tableViewDidDoubleClick:(id)fp8;
- (id)_idForStyleID:(id)fp8;
- (id)_mediaObjectsForGroup:(id)fp8;
- (id)_folderGroupMediaObjects;
- (void)audioPlayerPlaybackDidChange:(id)fp8;
- (id)_currentStyleID;

@end

@interface MarimbaMusicTableView : NSTableView
{
    BOOL _drawMessage;
}

+ (void)initialize;
- (void)awakeFromNib;
- (id)_highlightColorForCell:(id)fp8;
- (id)dragImageForRowsWithIndexes:(id)fp8 tableColumns:(id)fp12 event:(id)fp16 offset:(struct _NSPoint *)fp20;
- (void)drawBackgroundInClipRect:(struct _NSRect)fp8;
- (void)keyDown:(id)fp8;
- (void)shouldDrawMessage:(BOOL)fp8;

@end

@interface MarimbaSearchField : HUDSearchField
{
}

- (void)mouseDown:(id)fp8;

@end

@interface IPMarimbaTableHeaderCell : NSTableHeaderCell
{
}

- (id)init;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawSortIndicatorWithFrame:(struct _NSRect)fp8 inView:(id)fp24 ascending:(BOOL)fp28 priority:(int)fp32;
- (BOOL)drawsBackground;

@end

@interface IPMarimbaScrollView : NSScrollView
{
}

+ (Class)_horizontalScrollerClass;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaBlankSplitView : NSSplitView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (float)dividerThickness;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)mouseDown:(id)fp8;
- (id)_cursorOfDividerAtIndex:(unsigned int)fp8 position:(float)fp12 dragConstraints:(void *)fp16;

@end

@interface IPMarimbaMediaBackground : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMapRegion : NSObject
{
    int mIdentifier;
    NSString *mName;
    int mType;
    NSData *mRawData;
    struct _NSRect mBounds;
    BOOL mWasVisited;
    NSBezierPath *mHitTestPath;
    float mPathScale;
    struct CGPath *mScaledPath;
    struct CGRect mScaledBounds;
    BOOL mIsClosedPath;
    struct CGPoint _sanFrancisco;
    NSLock *mPathScaleLock;
}

+ (id)loadedRegions;
+ (id)regionWithIdentifier:(id)fp8;
+ (id)regionContainingLatitude:(double)fp8 longitude:(double)fp16;
+ (id)scaledRegionAtPixelPosition:(struct CGPoint)fp8;
+ (void)addRegion:(id)fp8 withIdentifier:(id)fp12;
+ (BOOL)regionsBeingLoaded;
+ (void)setRegionsBeingLoaded:(BOOL)fp8;
+ (void)loadRegionsIntersectingSouthwest:(struct _NSPoint)fp8 northeast:(struct _NSPoint)fp16;
+ (void)generateWorldRegionGrid;
+ (id)regionsIntersectingSouthwest:(struct _NSPoint)fp8 northeast:(struct _NSPoint)fp16;
+ (void)structRegionsIntersectingSouthwest:(struct _NSPoint)fp8 northeast:(struct _NSPoint)fp16 result:(struct RegionResult *)fp24;
+ (id)labelsIntersectingSouthwest:(struct _NSPoint)fp8 northeast:(struct _NSPoint)fp16;
+ (BOOL)labelsLoaded;
+ (void)addLabel:(id)fp8;
- (id)initWithIdentifier:(int)fp8 name:(id)fp12 type:(int)fp16 data:(id)fp20 bounds:(struct _NSRect)fp24;
- (int)identifier;
- (int)type;
- (struct _NSRect)bounds;
- (struct CGPath *)scaledPath;
- (struct CGRect)scaledBounds;
- (BOOL)containsLatitude:(double)fp8 longitude:(double)fp16;
- (id)hitTestPath;
- (void)drawFoundationInContext:(struct CGContext *)fp8 usingStyle:(id)fp12 forElement:(id)fp16 distanceScale:(float)fp20 viewScale:(float)fp24 tileOrigin:(struct _NSPoint)fp28 resolution:(int)fp36 lowRes:(BOOL)fp40;
- (void)drawInContext:(struct CGContext *)fp8 includeFoundation:(BOOL)fp12 usingStyle:(id)fp16 forElement:(id)fp20 distanceScale:(float)fp24 viewScale:(float)fp28 tileOrigin:(struct _NSPoint)fp32 resolution:(int)fp40 lowRes:(BOOL)fp44;
- (BOOL)isClosedPath;
- (int)sortByType:(id)fp8;
- (BOOL)wasVisited;
- (void)setWasVisited:(BOOL)fp8;
- (void)ensurePathIsAtScale:(float)fp8;
- (id)description;
- (void)dealloc;

@end

@interface ImageDB (BackupAndRestore)
+ (BOOL)saveCurrentDBFilesBeforeRestoreAtRoot:(id)fp8;
+ (BOOL)restoreToRoot:(id)fp8 usingBackgroundBackupAtRoot:(id)fp12 includingPhotos:(struct set<Key, std::less<Key>, std::allocator<Key>> *)fp16 includingAlbums:(struct set<Key, std::less<Key>, std::allocator<Key>> *)fp20 progressAttachedTowindow:(id)fp24;
+ (BOOL)mightBeAbleToRestoreAtRoot:(id)fp8;
- (void)restoreBackupRuntimeFromDatabase;
- (void)writeAlbumsNeedingBackupToDatabase;
- (void)writeEventsNeedingBackupToDatabase;
- (void)writePlacesNeedingBackupToDatabase;
- (void)writeUserPlacesNeedingBackupToDatabase;
- (void)writePhotosNeedingBackupToDatabase;
- (void)writeGpsTracksNeedingBackupToDatabase;
- (id)pathForPhotoBackup:(unsigned int)fp8;
- (id)pathForEventBackup:(unsigned int)fp8;
- (id)pathForAlbumBackup:(unsigned int)fp8;
- (id)pathForPlaceBackup:(unsigned int)fp8;
- (id)pathForUserPlaceBackup:(unsigned int)fp8;
- (id)pathForGpsTrackBackup:(unsigned int)fp8;
- (void)createBackupDirectoriesIfNeeded;
- (id)oldPathForPhotoBackup:(struct IPPhotoInfo *)fp8;
- (id)oldPathForPhotoBackup2:(struct IPPhotoInfo *)fp8;
- (void)removeOldBackups;
- (void)writeKeywordsBackup;
- (void)writeSchemaBackup;
- (void)writeGlobalsBackup;
- (void)removePhotoBackup:(unsigned long)fp8;
- (void)writePhotoBackup:(unsigned long)fp8;
- (void)removeEventBackup:(unsigned long)fp8;
- (void)writeEventBackup:(unsigned long)fp8;
- (void)removePlaceBackup:(unsigned long)fp8;
- (void)writePlaceBackup:(unsigned long)fp8;
- (void)removeUserPlaceBackup:(unsigned long)fp8;
- (void)writeUserPlaceBackup:(unsigned long)fp8;
- (void)removeGpsTrackBackup:(unsigned long)fp8;
- (void)writeGpsTrackBackup:(unsigned long)fp8;
- (void)removeAlbumBackup:(unsigned long)fp8;
- (void)writeAlbumBackup:(unsigned long)fp8;
- (void)writeBackupStatusFile:(BOOL)fp8;
- (void)scheduleCompleteBackup;
- (void)excludeItemsFromTimeMachineBackup;
- (void)excludeLibraryWhenRunning;
@end

@interface KHttpConnection : NSObject
{
    KTcpSocket *_socket;
    NSString *_request;
    NSMutableDictionary *_headers;
    NSMutableData *_body;
    id <KHttpDelegate> _delegate;
    int _requestType;
    NSString *_requestPath;
    NSMutableDictionary *_variables;
    BOOL _headersComplete;
    BOOL _haveRequest;
}

+ (id)parseHeader:(id)fp8 asUpperCase:(BOOL)fp12;
- (id)initWithSocket:(id)fp8;
- (void)dealloc;
- (id)socket;
- (BOOL)dataReady;
- (id)description;
- (id)body;
- (void)setBody:(id)fp8;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)setVariables:(id)fp8;
- (id)variables;
- (int)requestType;
- (id)requestPath;
- (id)responseForCode:(int)fp8;
- (void)replyWithCode:(int)fp8;
- (void)replyWithCode:(int)fp8 headers:(id)fp12 body:(id)fp16;

@end

@interface KHttpRequest : NSObject
{
    KHttpConnection *_conn;
    NSMutableDictionary *_headers;
    NSURL *_url;
}

- (id)initWithURL:(id)fp8;
- (void)dealloc;
- (void)setVariables:(id)fp8;
- (void)setValue:(id)fp8 forVariable:(id)fp12;
- (void)setHeaders:(id)fp8;
- (void)setValue:(id)fp8 forHeader:(id)fp12;
- (void)setBody:(id)fp8;
- (int)handleConnection:(id)fp8 ofType:(int)fp12 body:(id *)fp16 headers:(id *)fp20;
- (int)get:(id *)fp8 headers:(id *)fp12;
- (int)post:(id *)fp8 headers:(id *)fp12;

@end

@interface KNetworkServer : NSObject
{
    int _port;
    int _timeout;
    NSString *_serviceName;
    NSString *_name;
    NSNetService *_service;
    BOOL _terminate;
    id <KHttpDelegate> _delegate;
}

- (id)initWithPort:(int)fp8 andTimeout:(int)fp12;
- (id)initWithService:(id)fp8 name:(id)fp12 lowPort:(int)fp16;
- (void)dealloc;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)run;
- (BOOL)handleClient:(id)fp8;
- (id)handleServer:(id)fp8;
- (void)netService:(id)fp8:(id)fp12;

@end

@interface KTcpSocket : NSObject
{
    BOOL _ready;
    int _channel;
    CDAnonymousStruct9 _remoteAddress;
    CDAnonymousStruct9 _localAddress;
    BOOL _isServer;
    KHttpConnection *_connection;
}

+ (int)resolveHost:(CDAnonymousStruct9 *)fp8 named:(id)fp12 onPort:(int)fp16;
- (id)init;
- (id)initWithAccept:(id)fp8;
- (void)dealloc;
- (BOOL)connectToRemote:(CDAnonymousStruct9 *)fp8;
- (BOOL)bindLocally:(CDAnonymousStruct9 *)fp8;
- (void)setConnection:(id)fp8;
- (id)connection;
- (void)setNoDelay;
- (void)setBlocking:(BOOL)fp8;
- (void)close;
- (BOOL)isServer;
- (BOOL)ready;
- (void)setReady:(BOOL)fp8;
- (int)channel;
- (CDAnonymousStruct9 *)peerAddress;
- (int)send:(const void *)fp8 ofLength:(unsigned int)fp12;
- (int)sendLine:(id)fp8;
- (int)recv:(void *)fp8 ofMaxLength:(unsigned int)fp12;
- (int)_recvLine:(char *)fp8 ofMaxSize:(unsigned int)fp12;
- (id)recvLine;

@end

@interface KTcpSocketSet : NSObject
{
    NSMutableArray *_sockets;
}

- (id)init;
- (void)dealloc;
- (int)addSocket:(id)fp8;
- (int)migrateSocket:(id)fp8;
- (int)deleteSocket:(id)fp8;
- (int)checkWithTimeout:(unsigned int)fp8;
- (id)sockets;

@end

@interface NSString (KHttpAdditions)
- (id)camelCaseString;
@end

@interface IPHostReachabilityMgr : NSObject
{
    NSMutableDictionary *_hosts;
    struct _opaque_pthread_mutex_t _lock;
}

+ (id)sharedManager;
- (id)init;
- (void)dealloc;
- (BOOL)addObserver:(id)fp8 andSelector:(SEL)fp12 forHost:(id)fp16;
- (void)removeObserver:(id)fp8;
- (BOOL)hostIsReachable:(id)fp8;
- (id)_reachableHostForName:(id)fp8 createIfNecessary:(BOOL)fp12;

@end

@interface ReachableHost : NSObject
{
    struct __SCNetworkReachability *mReachabilityRef;
    BOOL mHostAvailable;
    NSString *mHostName;
}

- (void)dealloc;

@end

@interface IPStretchableImage : NSObject
{
    NSImage *_srcImage;
    float _leftCap;
    float _topCap;
    float _centerWidth;
    float _centerHeight;
    float _fixedLeftStretch;
    float _fixedRightStretch;
    float _fixedTopStretch;
    float _fixedBottomStretch;
    BOOL _flipped;
}

- (id)initWithImageNamed:(id)fp8;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12;
- (id)initWithImageNamed:(id)fp8 topCap:(float)fp12;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12 topCap:(float)fp16;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12 centerWidth:(float)fp16;
- (id)initWithImageNamed:(id)fp8 topCap:(float)fp12 centerHeight:(float)fp16;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12 topCap:(float)fp16 centerWidth:(float)fp20;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12 topCap:(float)fp16 centerHeight:(float)fp20;
- (id)initWithImageNamed:(id)fp8 leftCap:(float)fp12 topCap:(float)fp16 centerWidth:(float)fp20 centerHeight:(float)fp24;
- (id)init;
- (void)dealloc;
- (void)drawInRect:(struct _NSRect)fp8;
- (void)drawInRect:(struct _NSRect)fp8 fraction:(float)fp24;
- (void)drawInRect:(struct _NSRect)fp8 centerWidthPlacement:(float)fp24;
- (void)drawInRect:(struct _NSRect)fp8 centerWidthPlacement:(float)fp24 fraction:(float)fp28;
- (void)drawInRect:(struct _NSRect)fp8 centerHeightPlacement:(float)fp24;
- (void)drawInRect:(struct _NSRect)fp8 centerHeightPlacement:(float)fp24 fraction:(float)fp28;
- (void)drawInRect:(struct _NSRect)fp8 centerWidthPlacement:(float)fp24 centerHeightPlacement:(float)fp28;
- (void)drawInRect:(struct _NSRect)fp8 centerWidthPlacement:(float)fp24 centerHeightPlacement:(float)fp28 fraction:(float)fp32;
- (struct _NSSize)size;
- (BOOL)flipped;
- (void)setFlipped:(BOOL)fp8;
- (float)fixedBottomStretch;
- (void)setFixedBottomStretch:(float)fp8;
- (float)fixedTopStretch;
- (void)setFixedTopStretch:(float)fp8;
- (float)fixedRightStretch;
- (void)setFixedRightStretch:(float)fp8;
- (float)fixedLeftStretch;
- (void)setFixedLeftStretch:(float)fp8;
- (float)centerHeight;
- (void)setCenterHeight:(float)fp8;
- (float)centerWidth;
- (void)setCenterWidth:(float)fp8;
- (float)topCap;
- (void)setTopCap:(float)fp8;
- (float)leftCap;
- (void)setLeftCap:(float)fp8;
- (id)srcImage;
- (void)setSrcImage:(id)fp8;

@end

@interface IPMapElementMarker : NSObject
{
    IPMapElement *mParent;
    double mLongitude;
    double mLatitude;
    NSString *mName;
    BOOL mHidden;
    BOOL mIsPlaceholder;
    int mOrder;
    int mLabelPosition;
    BOOL mLabelPositionIsUserDefined;
    int mLineInPosition;
    int mLineOutPosition;
    struct _NSRect mHitRect;
    float mHitScale;
    BOOL mIsSelected;
    struct _NSRect mDrawingRect;
    NSFont *mFont;
    struct CGPath *mDrawPath;
    struct CGRect _drawnTextBounds;
}

+ (id)placeholderWithName:(id)fp8;
- (id)initWithName:(id)fp8 latitude:(double)fp12 longitude:(double)fp20 order:(int)fp28;
- (id)initWithDictionary:(id)fp8;
- (void)takeValuesFromDictionary:(id)fp8;
- (void)encodeWithDictionary:(id)fp8;
- (BOOL)isPlaceholder;
- (void)setIsPlaceholder:(BOOL)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (int)order;
- (double)longitude;
- (void)setLongitude:(double)fp8;
- (double)latitude;
- (void)setLatitude:(double)fp8;
- (BOOL)hidden;
- (void)setHidden:(BOOL)fp8;
- (void)setIsSelected:(BOOL)fp8;
- (int)labelPosition;
- (void)setLabelPosition:(int)fp8;
- (void)incrementLabelPosition;
- (void)setLineInPosition:(int)fp8;
- (void)setLineOutPosition:(int)fp8;
- (void)_adjustLabelPositionForLines;
- (struct _NSRect)hitRect;
- (float)hitScale;
- (void)setHitRect:(struct _NSRect)fp8 scale:(float)fp24;
- (struct _NSRect)drawingRect;
- (id)font;
- (void)setFont:(id)fp8;
- (void)drawInContext:(struct CGContext *)fp8 usingStyle:(id)fp12 forElement:(id)fp16 distanceScale:(float)fp20 viewScale:(float)fp24 translation:(struct _NSPoint)fp28 resolution:(int)fp36;
- (struct CGRect)_textBoundsForX:(float)fp8 Y:(float)fp12 usingStyle:(id)fp16 scale:(float)fp20;
- (struct CGRect)_drawnTextBounds;
- (int)sort:(id)fp8;
- (void)dealloc;

@end

@interface IPHDotMacUtilsAlbumUnpublishAsyncHelper : IPHDotMacUtilsAsyncHelper
{
    NSString *_albumName;
    NSString *_location;
    id _unpublishOperation;
}

- (void)forceUnpublishAlbumNamed:(id)fp8 location:(id)fp12 service:(struct NSObject *)fp16;
- (void)_unpublishOperationEnded:(id)fp8;

@end

@interface IPHDotMacUtilsAsyncHelper : NSObject
{
    id _target;
    SEL _selector;
}

+ (void)forceUnpublishAlbumNamed:(id)fp8 location:(id)fp12 didEndTarget:(id)fp16 selector:(SEL)fp20 service:(struct NSObject *)fp24;
- (void)operationEnded:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)selector;
- (void)setSelector:(SEL)fp8;
- (void)dealloc;

@end

@interface FaceRecognitionManager : NSObject
{
    float m_detectionThreshold;
    float m_minCorrelationThreshold;
    float m_standardCorrelationThreshold;
    float m_maxCorrelationThreshold;
    unsigned int m_nominalCorrelatedFacesPerPerson;
    unsigned int m_maxCorrelatedFacesPerPerson;
    float m_similarFacesTestThreshold;
    float m_similarFacesDropThreshold;
    NSMutableArray *_correlationAlbums;
    NSMutableArray *_seedFaces;
    NSMutableArray *_seedCorrelationAlbums;
    NSMutableIndexSet *_excludedFaceKeys;
    ForbiddenAssociationsInfo *_forbiddenAssociations;
    struct CGColorSpace *_sRGBColorSpace;
    struct CGColorSpace *_deviceRGBColorSpace;
    struct CGColorSpace *_grayColorSpace;
    NSRecursiveLock *_OKAOLock;
    void *_hDT;
    void *_hDtResult;
    void *_hPT;
    void *_hPtResult;
    void *_hFR;
}

+ (void)initialize;
+ (id)sharedInstance;
+ (BOOL)saveCGImage:(struct CGImage *)fp8 toJPEGFileAtPath:(id)fp12;
- (float)_calculateSharpnessFromGrayBitmap:(char *)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16;
- (float)_calculateExposureValueWithApertureValue:(float)fp8 shutterSpeedValue:(float)fp12 ISOSpeedRating:(float)fp16;
- (id)_calculateNormalizedHistogram64FromARGBBitmap:(char *)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16 debugString:(id)fp20;
- (float)_faceDirectionAngleWithCornersAtTopLeft:(struct CGPoint)fp8 bottomLeft:(struct CGPoint)fp16;
- (struct CGRect)_paddedUnitRectFromUnitRect:(struct CGRect)fp8 factor:(float)fp24 minUnitSize:(struct CGSize)fp28 pinnedPosition:(int *)fp36 maskedUnitRect:(struct CGRect *)fp40;
- (id)_makeGrayImageDataFromGrayImageData:(id)fp8 size:(struct CGSize)fp12 cropRect:(struct CGRect)fp20 sharpness:(float *)fp36;
- (struct CGImage *)_makeCGImageOfMaxDimension:(float)fp8 enlarge:(BOOL)fp12 rotate:(float)fp16 fill:(BOOL)fp20 bitmapFormat:(int)fp24 normalize:(BOOL)fp28 fromCGImage:(struct CGImage *)fp32 cropRect:(struct CGRect)fp36 colorSpace:(struct CGColorSpace *)fp52 watermark:(id)fp56 rawData:(id *)fp60;
- (struct CGImage *)_fastMakeGrayCGImageOfMaxDimension:(float)fp8 fromCGImage:(struct CGImage *)fp12 rawData:(id *)fp16;
- (id)_calculateNormalizedHistogram64FromCGImage:(struct CGImage *)fp8 debugString:(id)fp12;
- (id)_matchInfoWithFace:(id)fp8 inMatchInfos:(id)fp12 testFaceKey:(BOOL)fp16;
- (id)_matchInfoWithSameFaceOwnerAsFace:(id)fp8 inMatchInfos:(id)fp12;
- (id)_setWithSamePhotoAsFace:(id)fp8 inFaces:(id)fp12;
- (BOOL)_samePhotoAsFace:(id)fp8 inFaces:(id)fp12;
- (BOOL)_createOKAOHandles;
- (void)_destroyOKAOHandles;
- (BOOL)_setupForAdvancedDetectionWithMinDimension:(float)fp8 maxDimension:(float)fp12 options:(unsigned int)fp16;
- (id)_detectFacesInCGImage:(struct CGImage *)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 maxDimension:(float)fp20 options:(unsigned int)fp24 delegate:(id)fp28 context:(void *)fp32;
- (float)_compareExposureValueOfBaseFace:(id)fp8 toTestFace:(id)fp12 tolerance:(float)fp16 debugString:(id)fp20;
- (float)_compareColorDistributionOfBaseFace:(id)fp8 toTestFace:(id)fp12 tolerance:(float)fp16 debugString:(id)fp20;
- (float)_compareBaseFace:(id)fp8 toTestFace:(id)fp12 timeSpanFactor:(float)fp16 evTolerance:(float)fp20 colorDistributionTolerance:(float)fp24 debugString:(id)fp28;
- (float)_preCorrelateBaseFace:(id)fp8 toTestFace:(id)fp12 debugString:(id)fp16;
- (float)_postCorrelateBaseFace:(id)fp8 toTestFace:(id)fp12 OKAOScore:(float)fp16 debugString:(id)fp20;
- (BOOL)_addFace:(id)fp8 toCorrelationAlbums:(id)fp12;
- (BOOL)_removeFace:(id)fp8 fromCorrelationAlbums:(id)fp12;
- (id)_facesWithFaceKey:(unsigned int)fp8 inCorrelationAlbums:(id)fp12;
- (unsigned int)_numberOfFacesWithFaceKey:(unsigned int)fp8 inCorrelationAlbums:(id)fp12;
- (unsigned int)_changeFaceKey:(unsigned int)fp8 toFaceKey:(unsigned int)fp12 inCorrelationAlbums:(id)fp16;
- (float)_matchFace:(id)fp8 withSameFaces:(id)fp12 delegate:(id)fp16 context:(void *)fp20;
- (id)_newFacesMatchingSeedFace:(id)fp8 inCorrelationAlbums:(id)fp12 matchInfos:(id *)fp16 delegate:(id)fp20 context:(void *)fp24;
- (id)init;
- (void)dealloc;
- (struct CGRect)paddedUnitRectFromUnitRect:(struct CGRect)fp8 factor:(float)fp24 pinnedPosition:(int *)fp28;
- (struct CGImage *)makeFaceThumbnailImageOfMaxDimension:(float)fp8 fromCGImage:(struct CGImage *)fp12 cropRect:(struct CGRect)fp16 rotate:(float)fp32 watermark:(id)fp36;
- (int)detectFacesInPhoto:(void *)fp8 userInfo:(void **)fp12 options:(unsigned int)fp16 delegate:(id)fp20 context:(void *)fp24;
- (void)detectFacesInPhotos:(void *)fp8 options:(unsigned int)fp12 delegate:(id)fp16 context:(void *)fp20;
- (void)beginCorrelationWithDelegate:(id)fp8 context:(void *)fp12;
- (BOOL)performCorrelationOfFacesInPhotos:(void *)fp8 delegate:(id)fp12 context:(void *)fp16;
- (void)endCorrelationWithDelegate:(id)fp8 context:(void *)fp12;
- (void)beginSimilarFacesWithDelegate:(id)fp8 context:(void *)fp12;
- (void)similarFacesAddSeedFaceKey:(unsigned int)fp8 excludeFaceKeys:(id)fp12 delegate:(id)fp16 context:(void *)fp20;
- (id)similarFacesWithKeys:(id)fp8 delegate:(id)fp12 context:(void *)fp16;
- (void)endSimilarFacesWithDelegate:(id)fp8 context:(void *)fp12;
- (float)similarFacesDropThreshold;
- (void)setSimilarFacesDropThreshold:(float)fp8;
- (float)similarFacesTestThreshold;
- (void)setSimilarFacesTestThreshold:(float)fp8;
- (unsigned int)maxCorrelatedFacesPerPerson;
- (void)setMaxCorrelatedFacesPerPerson:(unsigned int)fp8;
- (unsigned int)nominalCorrelatedFacesPerPerson;
- (void)setNominalCorrelatedFacesPerPerson:(unsigned int)fp8;
- (float)maxCorrelationThreshold;
- (void)setMaxCorrelationThreshold:(float)fp8;
- (float)standardCorrelationThreshold;
- (void)setStandardCorrelationThreshold:(float)fp8;
- (float)minCorrelationThreshold;
- (void)setMinCorrelationThreshold:(float)fp8;
- (float)detectionThreshold;
- (void)setDetectionThreshold:(float)fp8;

@end

@interface WatermarkInfo : NSObject
{
    NSColor *m_bannerColor;
    NSString *m_string;
    struct CGPoint m_faceUnitTopLeft;
    struct CGPoint m_faceUnitTopRight;
    struct CGPoint m_faceUnitBottomLeft;
    struct CGPoint m_faceUnitBottomRight;
}

- (void)dealloc;
- (struct CGPoint)faceUnitBottomRight;
- (void)setFaceUnitBottomRight:(struct CGPoint)fp8;
- (struct CGPoint)faceUnitBottomLeft;
- (void)setFaceUnitBottomLeft:(struct CGPoint)fp8;
- (struct CGPoint)faceUnitTopRight;
- (void)setFaceUnitTopRight:(struct CGPoint)fp8;
- (struct CGPoint)faceUnitTopLeft;
- (void)setFaceUnitTopLeft:(struct CGPoint)fp8;
- (id)string;
- (void)setString:(id)fp8;
- (id)bannerColor;
- (void)setBannerColor:(id)fp8;

@end

@interface CorrelationAlbumInfo : NSObject
{
    void *m_hAlbum;
    struct multimap<NSUInteger, NSUInteger, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, NSUInteger>>> *m_faceKeyToUserIndexMap;
    struct multimap<NSUInteger, FaceRecognitionInfo*, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, FaceRecognitionInfo*>>> *m_userIndexToFaceRecognitionInfoMap;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (struct multimap<NSUInteger, FaceRecognitionInfo*, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, FaceRecognitionInfo*>>> *)userIndexToFaceRecognitionInfoMap;
- (struct multimap<NSUInteger, NSUInteger, std::less<NSUInteger>, std::allocator<std::pair<const NSUInteger, NSUInteger>>> *)faceKeyToUserIndexMap;
- (void *)hAlbum;
- (void)setHAlbum:(void *)fp8;

@end

@interface ForbiddenAssociationsInfo : NSObject
{
    NSMutableArray *_forbiddenAssociations;
}

+ (id)forbiddenAssociationsInfo;
- (id)_descriptionOfAssociation:(id)fp8;
- (id)_containsAssociation:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)description;
- (void)addAssociationWithFaceKeysFromFaces:(id)fp8;
- (BOOL)testAssociationWithFaceKey:(unsigned int)fp8 andFaceKey:(unsigned int)fp12;
- (unsigned int)changeFaceKey:(unsigned int)fp8 toFaceKey:(unsigned int)fp12;
- (void)clear;

@end

@interface MatchInfo : NSObject
{
    FaceRecognitionInfo *m_face;
    float m_OKAOScore;
    float m_otherScore;
}

+ (id)matchInfoWithFace:(id)fp8 OKAOScore:(float)fp12 otherScore:(float)fp16;
- (void)dealloc;
- (id)description;
- (id)initWithFace:(id)fp8 OKAOScore:(float)fp12 otherScore:(float)fp16;
- (float)score;
- (BOOL)hasBetterScoresThanMatchInfo:(id)fp8;
- (id)keyForSameFaceInMapTable:(id)fp8;
- (float)otherScore;
- (void)setOtherScore:(float)fp8;
- (float)OKAOScore;
- (void)setOKAOScore:(float)fp8;
- (id)face;
- (void)setFace:(id)fp8;

@end

@interface FaceRecognitionInfo : NSObject
{
    unsigned int m_faceKey;
    unsigned int m_owner;
    unsigned int m_faceIndex;
    unsigned int m_initialFaceKey;
    BOOL m_isFaceNamed;
    float m_detectionImageWidth;
    float m_detectionImageHeight;
    struct CGPoint m_faceTopLeft;
    struct CGPoint m_faceTopRight;
    struct CGPoint m_faceBottomLeft;
    struct CGPoint m_faceBottomRight;
    float m_faceDirectionAngle;
    float m_faceConfidence;
    float m_faceSharpness;
    float m_facePoseAngle;
    float m_faceSkinScore;
    unsigned int m_faceFlags;
    NSData *m_faceData;
    NSData *m_faceHistogram64Data;
    double m_imageDate;
    float m_imageExposureValue;
    BOOL m_isMultifaceImage;
    BOOL m_isRejected;
    struct CGImage *m_faceThumbnailImage;
    NSData *m_faceThumbnailImageData;
    int m_faceThumbnailPosition;
    struct CGPoint m_faceFeatureLocations[11];
    float m_faceFeatureConfidences[11];
    struct CGRect m_faceUnitRect;
    struct CGRect m_facePaddedUnitRect;
    float m_faceBestCorrelationScore;
    FaceRecognitionInfo *m_bestCorrelatedFace;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (struct CGImage *)faceThumbnailImage;
- (void)setFaceThumbnailImage:(struct CGImage *)fp8;
- (struct CGPoint *)faceFeatureLocations;
- (void)setFaceFeatureLocations:(struct CGPoint *)fp8;
- (float *)faceFeatureConfidences;
- (void)setFaceFeatureConfidences:(float *)fp8;
- (id)bestCorrelatedFace;
- (void)setBestCorrelatedFace:(id)fp8;
- (float)faceBestCorrelationScore;
- (void)setFaceBestCorrelationScore:(float)fp8;
- (struct CGRect)facePaddedUnitRect;
- (void)setFacePaddedUnitRect:(struct CGRect)fp8;
- (struct CGRect)faceUnitRect;
- (void)setFaceUnitRect:(struct CGRect)fp8;
- (int)faceThumbnailPosition;
- (void)setFaceThumbnailPosition:(int)fp8;
- (id)faceThumbnailImageData;
- (void)setFaceThumbnailImageData:(id)fp8;
- (BOOL)isRejected;
- (void)setIsRejected:(BOOL)fp8;
- (BOOL)isMultifaceImage;
- (void)setIsMultifaceImage:(BOOL)fp8;
- (float)imageExposureValue;
- (void)setImageExposureValue:(float)fp8;
- (double)imageDate;
- (void)setImageDate:(double)fp8;
- (id)faceHistogram64Data;
- (void)setFaceHistogram64Data:(id)fp8;
- (id)faceData;
- (void)setFaceData:(id)fp8;
- (unsigned int)faceFlags;
- (void)setFaceFlags:(unsigned int)fp8;
- (float)faceSkinScore;
- (void)setFaceSkinScore:(float)fp8;
- (float)facePoseAngle;
- (void)setFacePoseAngle:(float)fp8;
- (float)faceSharpness;
- (void)setFaceSharpness:(float)fp8;
- (float)faceConfidence;
- (void)setFaceConfidence:(float)fp8;
- (float)faceDirectionAngle;
- (void)setFaceDirectionAngle:(float)fp8;
- (struct CGPoint)faceBottomRight;
- (void)setFaceBottomRight:(struct CGPoint)fp8;
- (struct CGPoint)faceBottomLeft;
- (void)setFaceBottomLeft:(struct CGPoint)fp8;
- (struct CGPoint)faceTopRight;
- (void)setFaceTopRight:(struct CGPoint)fp8;
- (struct CGPoint)faceTopLeft;
- (void)setFaceTopLeft:(struct CGPoint)fp8;
- (float)detectionImageHeight;
- (void)setDetectionImageHeight:(float)fp8;
- (float)detectionImageWidth;
- (void)setDetectionImageWidth:(float)fp8;
- (BOOL)isFaceNamed;
- (void)setIsFaceNamed:(BOOL)fp8;
- (unsigned int)initialFaceKey;
- (void)setInitialFaceKey:(unsigned int)fp8;
- (unsigned int)faceKey;
- (void)setFaceKey:(unsigned int)fp8;
- (unsigned int)faceIndex;
- (void)setFaceIndex:(unsigned int)fp8;
- (unsigned int)owner;
- (void)setOwner:(unsigned int)fp8;

@end

@interface CALayer (Additions)
- (id)sublayerUnderPoint:(struct CGPoint)fp8;
- (id)sublayersUnderPoint:(struct CGPoint)fp8;
- (id)sublayersNearPoint:(struct CGPoint)fp8 threshold:(float)fp16;
- (id)sublayerNamed:(id)fp8;
- (id)superlayerNamed:(id)fp8;
- (void)setFloat:(float)fp8 forKey:(id)fp12;
- (void)setInt:(int)fp8 forKey:(id)fp12;
- (void)setBool:(BOOL)fp8 forKey:(id)fp12;
- (void)setPoint:(struct _NSPoint)fp8 forKey:(id)fp16;
- (void)setRect:(struct _NSRect)fp8 forKey:(id)fp24;
- (void)setColor:(struct CGColor *)fp8 forKey:(id)fp12;
- (void)setImage:(struct CGImage *)fp8 forKey:(id)fp12;
- (void)setTransform:(struct CATransform3D)fp8 forKey:(id)fp72;
- (float)floatForKey:(id)fp8;
- (int)intForKey:(id)fp8;
- (BOOL)boolForKey:(id)fp8;
- (struct _NSPoint)pointForKey:(id)fp8;
- (struct _NSRect)rectForKey:(id)fp8;
- (struct CGColor *)colorForKey:(id)fp8;
- (struct CGImage *)imageForKey:(id)fp8;
- (struct CATransform3D)transformForKey:(id)fp8;
@end

@interface CellSwapAnimator : NSObject
{
    NSView *_parentView;
    id _delegate;
    int _tag;
    double _duration;
    int _startCount;
    NSWindow *_animationWindow;
    NSView *_animationView;
    id _baseLayer;
    int _startingCellCount;
    CDAnonymousStruct17 *_startingCellInfo;
    int _endingCellCount;
    CDAnonymousStruct17 *_endingCellInfo;
    struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *_startingMap;
    struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *_endingMap;
    BOOL _doNotSendDelegateStop;
}

- (void)dump:(BOOL)fp8;
- (id)initWithParentView:(id)fp8 delegate:(id)fp12;
- (void)dealloc;
- (struct _NSRect)translateRect:(struct _NSRect)fp8 fromView:(id)fp24 toView:(id)fp28;
- (id)actionForLayer:(id)fp8 forKey:(id)fp12;
- (void)animationDidStart:(id)fp8;
- (void)animationDidStop:(id)fp8 finished:(BOOL)fp12;
- (void)captureStartingState;
- (void)captureEndingState;
- (void)show;
- (void)start;
- (void)stop;
- (void)hide;
- (double)duration;
- (void)setDuration:(double)fp8;
- (int)tag;
- (void)setTag:(int)fp8;

@end

@interface StretchableImageButton : NSButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8 andType:(unsigned int)fp12;
- (void)mouseDown:(id)fp8;
- (void)setTextNudge:(float)fp8;

@end

@interface StretchableImageButtonCell : NSButtonCell
{
    float mTextNudge;
    BOOL mIsToggle;
    BOOL mSmoothFonts;
    IPStretchableImage *mImage;
    IPStretchableImage *mAltImage;
}

- (void)setTextNudge:(float)fp8;
- (void)setSmoothFonts:(BOOL)fp8;
- (id)initImageCell:(id)fp8;
- (id)initTextCell:(id)fp8;
- (void)setImage:(id)fp8;
- (void)setAlternateImage:(id)fp8;
- (id)initWithCell:(id)fp8 image:(id)fp12 altImage:(id)fp16;
- (void)dealloc;
- (void)setSupportingToggleButton:(BOOL)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface NewFaceDetector : NSObject <FaceRecognitionManagerDelegate>
{
    struct sqlite3 *_db;
    ImageDB *_imageDB;
    struct MessageReceiver _DBMessageReceiver;
    int _txBeginCount;
    NSRecursiveLock *_dbAccessLock;
    IPInvocationQueue *_queue;
    IPInvocationQueue *_similarFacesQueue;
    struct map<int, sqlite3_stmt*, std::less<int>, std::allocator<std::pair<const int, sqlite3_stmt*>>> *_preparedStatements;
    DetectedFaceCache *_detectedFaceCache;
    IPPersonCache *_personCache;
    NSMutableDictionary *_correlationCachedFaces;
    BOOL _showOnCompletionQueue;
    struct KeySet *_correlationQueue;
    NSConditionLock *_suspendFaceDetectionLock;
    int _suspendAllFaceRecognitionCounter;
    double _detectOnUpgradeStartSeconds;
    double _detectOnUpgradeAggregatedTime;
    double _detectOnUpgradeSuspendedTime;
    int _detectOnUpgradePhase;
    int _detectOnUpgradeCompletedItems;
    int _detectOnUpgradeTotalItems;
    double _detectOnUpgradeRemainingSeconds;
    unsigned int _detectOnUpgradeImageKey;
    int _detectOnUpgradeFaceIndex;
    int _detectOnUpgradeTotalDetectItems;
    double _detectOnUpgradeAggregatedDetectTime;
    int _detectOnUpgradeTotalCorrelItems;
    BOOL _haveDetectOnUpgrade;
    BOOL _canTerminateDetectOnUpgradeRegistered;
    BOOL _canTerminateDetectOnUpgradeTriggered;
    BOOL _wasAskedToStopForTerminate;
    BOOL _detectOnUpgradeProgramSuspended;
    BOOL _detectOnUpgradeUserSuspended;
    NSConditionLock *_suspendDetectOnUpgradeLock;
    int _changeNotificationTxCount;
    NSMutableIndexSet *_changedImageKeys;
    NSMutableIndexSet *_changedFaceKeys;
    int _showActivityCount;
    BOOL _similarFacesCacheAlreadyClear;
    BOOL _needDeleteOrphanFaceNameAndExternal;
}

+ (void)initialize;
+ (void)purgeAndRelaunch;
+ (unsigned int)messageCategory;
+ (int)externalServiceKeyForService:(id)fp8;
+ (id)serviceKeyForExternalService:(int)fp8;
- (void)beginChangeNotificationTransaction;
- (void)endChangeNotificationTransaction;
- (void)notifyChangedImages:(id)fp8 faces:(id)fp12;
- (void)notifyUpgradeDetectProgress;
- (void)notifyDetectProgress;
- (BOOL)isOrphanCleaningDeferredForCurrentThreadWithFlagging:(BOOL)fp8;
- (void)deferOrphanCleaningForCurrentThread:(BOOL)fp8;
- (id)init;
- (void)dealloc;
- (id)description;
- (void)handleDbMessage:(unsigned long)fp8 data1:(void *)fp12 data2:(void *)fp16 data3:(void *)fp20;
- (void)screenNote:(id)fp8;
- (BOOL)saveFaceThumbnailForImage:(struct IPFileImage *)fp8 fromCGImage:(struct CGImage *)fp12 cropRect:(struct CGRect)fp16;
- (BOOL)saveJPEGImageFile:(struct IPFileImage *)fp8 withCGImage:(struct CGImage *)fp12 colorProfile:(char **)fp16;
- (void)showActivity:(BOOL)fp8;
- (id)fullPathOfPhotoInfo:(struct IPPhotoInfo *)fp8;
- (id)initWithDB:(id)fp8;
- (struct sqlite3_stmt *)cachePreparedStatement:(const char *)fp8 key:(int)fp12;
- (void)flushPreparedStatementCache;
- (int)openDB:(char *)fp8;
- (int)closeDB;
- (void)beginTransaction;
- (void)commitTransaction;
- (void)resetTransactionCount;
- (BOOL)createDBTables;
- (void)cacheDetectedFaces;
- (void)cacheDetectedFacesBlobs;
- (void)cachePeople;
- (void)cachePeopleBlobs;
- (void)deleteFeaturesForImage:(unsigned long)fp8 faceIndex:(int)fp12;
- (void)loadFeaturesForImage:(unsigned long)fp8 faceIndex:(int)fp12 featureCount:(int *)fp16 points:(struct _NSPoint *)fp20 confidences:(float *)fp24;
- (void)loadFeaturesForImage:(unsigned long)fp8 faceIndex:(int)fp12 featureCount:(int *)fp16 points:(struct _NSPoint *)fp20 confidences:(float *)fp24 rotatingByAngle:(float)fp28 width:(float)fp32 height:(float)fp36;
- (void)saveFeaturesForImage:(unsigned long)fp8 faceIndex:(int)fp12 featureCount:(int)fp16 points:(struct _NSPoint *)fp20 confidences:(float *)fp24;
- (void)updateFaceCorrelationFaceKey:(int)fp8 forFacePaths:(id)fp12;
- (void)updateFaceCorrelationFaceKey:(int)fp8 initialFaceKey:(int)fp12 forFacePaths:(id)fp16;
- (void)updateFaceCorrelationFaceKey:(int)fp8 forImageKey:(int)fp12 faceIndex:(int)fp16;
- (void)updateFaceCorrelationFaceKey:(int)fp8 initialFaceKey:(int)fp12 forImageKey:(int)fp16 faceIndex:(int)fp20;
- (void)updateFaceNameInfo:(struct FaceNameInfo *)fp8 forFaceKey:(unsigned long)fp12;
- (int)bindBlob:(id)fp8 toStatement:(struct sqlite3_stmt *)fp12 atIndex:(int)fp16;
- (int)bindBlob:(void *)fp8 length:(int)fp12 toStatement:(struct sqlite3_stmt *)fp16 atIndex:(int)fp20;
- (int)bindString:(id)fp8 toStatement:(struct sqlite3_stmt *)fp12 atIndex:(int)fp16;
- (id)stringFromStatement:(struct sqlite3_stmt *)fp8 index:(int)fp12;
- (id)blobFromStatement:(struct sqlite3_stmt *)fp8 index:(int)fp12;
- (int)bindMutableDictionary:(id)fp8 toStatement:(struct sqlite3_stmt *)fp12 atIndex:(int)fp16;
- (id)mutableDictionaryFromStatement:(struct sqlite3_stmt *)fp8 index:(int)fp12;
- (int)uniqueFaceCount;
- (id)faceKeysWithFilter:(int)fp8;
- (id)mostRecentDetectedFacesForFaceKey:(int)fp8 maxCount:(int)fp12;
- (id)faceRecognitionInfoOrderedByFaceKeyThenDateWithKeys:(id)fp8;
- (int)uniqueFaceCountWithUnnamed:(BOOL)fp8;
- (id)gatherStateForFaceKeys:(struct vector<int, std::allocator<int>> *)fp8;
- (void)gatherDetectedFaceStateIn:(id)fp8 forImageKey:(int)fp12 faceIndex:(int)fp16;
- (id)gatherStateForFaceIndexPaths:(id)fp8;
- (void)restoreFaceKeyState:(id)fp8;
- (void)duplicatePhotos:(struct IPPhotoList *)fp8 toCopies:(struct IPPhotoList *)fp12;
- (void)storeFaceKeyManualOrder:(struct vector<int, std::allocator<int>> *)fp8;
- (unsigned long)createNewFaceKey;
- (void)mergeFaceKeys:(struct vector<int, std::allocator<int>> *)fp8 withFaceKey:(int)fp12 updateInitialFaceKey:(BOOL)fp16;
- (int)dissociateImageKey:(int)fp8 faceIndex:(int)fp12 updateInitialFaceKey:(BOOL)fp16;
- (struct KeySet *)photoKeysWithCorrelatedFaces;
- (struct KeySet *)photoKeysForNamedFaces;
- (BOOL)isFaceKeyNamed:(int)fp8;
- (id)facesForPhotoKey:(unsigned long)fp8;
- (struct KeySet *)faceKeysForPhotoKey:(unsigned long)fp8;
- (id)faceKeysIndexSetForPhotoKey:(unsigned long)fp8;
- (id)faceKeysForPhotosKeys:(id)fp8;
- (id)nonNamedFaceKeysForPhotosKeys:(id)fp8;
- (id)namedFaceKeysForPhotosKeys:(id)fp8;
- (int)faceIndexForFaceKey:(int)fp8 inPhotoKey:(int)fp12;
- (unsigned long)faceKeyForPhotoKey:(unsigned long)fp8 index:(int)fp12;
- (void)computeCountsForCompletions:(id)fp8 inImageKeys:(struct KeySet *)fp12;
- (struct multimap<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *)photoKeyFaceIndexMapForFaceKey:(unsigned long)fp8;
- (struct KeySet *)photoKeysForFaceKey:(unsigned long)fp8;
- (id)commaSeparatedKeyStringFromKeyMgr:(id)fp8;
- (struct KeySet *)photoKeysForFaceKeys:(id)fp8;
- (int)faceCountForFaceKey:(unsigned long)fp8;
- (int)addNewFaceNameInfo:(struct FaceNameInfo *)fp8;
- (void)addNewFaceNameInfo:(struct FaceNameInfo *)fp8 usingKey:(int)fp12;
- (void)deleteFaceNameWithKey:(int)fp8;
- (id)commaSeparatedKeyStringFromIndexSet:(id)fp8;
- (id)photoKeyStringForHiddenAndDeletedPhotos;
- (id)photoKeyIndexSetForHiddenAndDeletedPhotos;
- (int)unnamedFaceCount;
- (int)unnamedFaceCountInEventKeys:(id)fp8;
- (int)unnamedFaceCountInImageKeys:(id)fp8;
- (id)unnamedFaceInfo;
- (id)unnamedFaceInfoInEventKeys:(id)fp8;
- (id)imageKeysInEventKeys:(id)fp8;
- (id)unnamedFaceInfoInImageKeys:(id)fp8;
- (id)faceInfoInFaceKeys:(id)fp8;
- (id)namedFaceInfo;
- (id)namedFaceInfoForFaceKey:(int)fp8;
- (void)fillInMemberFacesForFaceInfo:(id)fp8;
- (void)fillInMemberFacesForFaceInfo:(id)fp8 limitToImageKeys:(id)fp12;
- (void)fillInMemberFacesForFaceInfo:(id)fp8 limitToImageKeysStr:(id)fp12;
- (void)faceNameInfo:(struct FaceNameInfo *)fp8 forFaceKey:(unsigned long)fp12;
- (id)personToolTipsForImageKey:(unsigned long)fp8 inRect:(struct _NSRect)fp12 includeIgnored:(BOOL)fp28;
- (id)personToolTipsForImageKey:(unsigned long)fp8 faceIndices:(id)fp12 inRect:(struct _NSRect)fp16 includeIgnored:(BOOL)fp32;
- (id)imageKeysWithFaces;
- (int)facesInImageKey:(unsigned long)fp8 includeIgnored:(BOOL)fp12;
- (id)completionsForFaceNameInfo:(struct FaceNameInfo *)fp8 andNotOr:(BOOL)fp12 exactMatch:(BOOL)fp16;
- (id)serviceDataForPhotoKey:(unsigned long)fp8 index:(int)fp12 album:(unsigned long)fp16 service:(int)fp20;
- (void)updateServiceData:(id)fp8 service:(int)fp12 forPhotoKey:(unsigned long)fp16 index:(int)fp20 album:(unsigned long)fp24;
- (void)removeServiceDataForAlbum:(unsigned long)fp8;
- (void)removeServiceDataForPhotoKey:(unsigned long)fp8 album:(unsigned long)fp12;
- (unsigned long)faceKeyForExternalReference:(id)fp8 service:(int)fp12;
- (id)externalReferenceForFaceKey:(int)fp8 service:(int)fp12;
- (id)haveNonExternalFacesInFaceKey:(int)fp8;
- (void)changeFaceKeyTo:(unsigned long)fp8 forExternalReference:(id)fp12 service:(int)fp16;
- (void)updateExternalReference:(id)fp8 service:(int)fp12 forFaceKey:(unsigned long)fp16;
- (void)updateOwnerServiceKey:(int)fp8 forImageKey:(unsigned long)fp12 faceIndex:(int)fp16;
- (id)detectedFacesForImageKey:(unsigned long)fp8;
- (id)detectedFacesWithInitialFaceKey:(unsigned long)fp8;
- (id)detectedFacesForPhotoKey:(unsigned long)fp8;
- (void)regenerateAllFaceTilesForImage:(struct IPPhotoInfo *)fp8;
- (id)faceIndicesForImageKey:(unsigned long)fp8 includeIgnored:(BOOL)fp12;
- (void)deleteDetectedFacesForImageKey:(unsigned long)fp8;
- (BOOL)isFaceUserAddedForImage:(int)fp8 faceIndex:(int)fp12;
- (BOOL)isFaceIgnoredForImageKey:(unsigned long)fp8 faceIndex:(int)fp12;
- (BOOL)setFaceIgnored:(BOOL)fp8 forImageKey:(unsigned long)fp12 faceIndex:(int)fp16;
- (void)createUserFaceWithPercentageRect:(struct _NSRect)fp8 imageSize:(struct CGSize)fp24 imageKey:(unsigned long)fp32 faceKey:(int *)fp36 faceIndex:(int *)fp40;
- (int)faceThumbnailPositionForImageKey:(unsigned long)fp8 faceIndex:(int)fp12;
- (struct CGRect)unitRectForForImageKey:(unsigned long)fp8 faceIndex:(int)fp12;
- (void)updateUserFaceRect:(struct _NSRect)fp8 forImageKey:(unsigned long)fp24 faceIndex:(int)fp28;
- (void)clearUserFaceRectForImageKey:(unsigned long)fp8 faceIndex:(int)fp12;
- (void)storeDetectedFaces:(id)fp8 forImageKey:(unsigned long)fp12;
- (id)keyImageKeyForFaceKey:(int)fp8 limitToPhotoKeys:(id)fp12;
- (void)setKeyImageKey:(unsigned long)fp8 forFaceKey:(int)fp12;
- (id)peopleModel;
- (void)deleteFaceTileForImageKey:(unsigned long)fp8 faceIndex:(int)fp12;
- (void)deleteDataForImageKey:(unsigned long)fp8 faceIndex:(int)fp12 correlationDataOnly:(BOOL)fp16 skipOrphanCleaning:(BOOL)fp20;
- (void)deleteOrphanFaceNameAndExternal;
- (int)faceCount:(unsigned long)fp8;
- (int)numberOfFacesWithFeatureData:(unsigned long)fp8;
- (id)albumTitleForPeopleKeys:(id)fp8 operationIsAnd:(BOOL)fp12;
- (BOOL)detailShowsFacesForFaceKey:(int)fp8;
- (void)setDetailShowsFaces:(BOOL)fp8 forFaceKey:(int)fp12;
- (id)attributeForKey:(id)fp8 forPersonKey:(int)fp12;
- (void)setAttribute:(id)fp8 forKey:(id)fp12 forPersonKey:(int)fp16 skipWrite:(BOOL)fp20;
- (void)setAttribute:(id)fp8 forKey:(id)fp12 forPersonKey:(int)fp16;
- (BOOL)haveCachedSimilarFacesForFaceKey:(int)fp8;
- (void)setHaveCachedSimilarFaces:(BOOL)fp8 forFaceKey:(int)fp12;
- (void)invalidateSimilarFacesCaches;
- (BOOL)similarFacesOpenForFaceKey:(int)fp8;
- (void)setSimilarFacesOpen:(BOOL)fp8 forFaceKey:(int)fp12;
- (void)ignoreSimilarFace:(BOOL)fp8 forSeedFaceKey:(int)fp12 imageKey:(int)fp16 faceIndex:(int)fp20 faceKey:(int)fp24;
- (id)loadSimilarFaceIgnoresForImageKey:(int)fp8;
- (void)backgroundLoadSimilarFacesForFaceKey:(int)fp8;
- (id)loadSimilarFacesForFaceKey:(int)fp8;
- (id)faceKeysIgnoredByFaceKey:(int)fp8;
- (id)ignoredFaceKeysForFaceKey:(int)fp8;
- (id)canTerminateDetectOnUpgrade;
- (void)registerCanTerminateDetectOnUpgrade;
- (void)unregisterCanTerminateDetectOnUpgrade;
- (void)detectOnUpgradeWorker;
- (void)primeDetectOnUpgradeOfAllPhotos;
- (void)primeDetectOnUpgradeOfPhotosWithKeys:(id)fp8;
- (void)startDetectOnUpgradeIfNeeded;
- (BOOL)haveDetectOnUpgrade;
- (BOOL)isDetectOnUpgradeUserSuspended;
- (BOOL)isDetectOnUpgradeProgramSuspended;
- (void)userSuspendDetectOnUpgrade;
- (void)userResumeDetectOnUpgrade;
- (void)suspendDetectOnUpgrade;
- (void)resumeDetectOnUpgrade;
- (struct CGAffineTransform)getTransformFor2:(struct IPPhotoInfo *)fp8 intoRect:(struct _NSRect)fp12 flipped:(BOOL)fp28 transform:(struct CGAffineTransform *)fp32;
- (struct CGAffineTransform)getTransformFor:(struct IPPhotoInfo *)fp8 intoRect:(struct _NSRect)fp12 scannedFileWidth:(float)fp28 height:(float)fp32;
- (struct CGAffineTransform)getGLTransformFor:(struct IPPhotoInfo *)fp8 intoRect:(struct _NSRect)fp12 scannedFileWidth:(float)fp28 height:(float)fp32;
- (struct _NSRect)rectForFace:(int)fp8 inPhotoWithKey:(int)fp12 scaledToRect:(struct _NSRect)fp16 usingInfo:(id)fp32;
- (struct _NSRect)paddedPercentageRectForFace:(int)fp8 inPhotoWithKey:(int)fp12 usingInfo:(id)fp16;
- (struct CGRect)percentageRectOfImportantFaces:(struct IPPhotoInfo *)fp8;
- (struct CGRect)kenBurnsSafePercentageRect:(struct IPPhotoInfo *)fp8;
- (void)drawFaceDataForImage:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 context:(struct CGContext *)fp28 faceSet:(id)fp32 hiliteFaceKey:(unsigned long)fp36 flippedView:(BOOL)fp40;
- (void)drawFaceDataForImage:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 context:(struct CGContext *)fp28 faceSet:(id)fp32 hiliteFaceKey:(unsigned long)fp36 flippedView:(BOOL)fp40 transform:(struct CGAffineTransform *)fp44;
- (void)drawFaceDataForImage:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12 context:(struct CGContext *)fp28 zoom:(float)fp32 hiliteFaceKey:(unsigned long)fp36;
- (void)glDrawFaceDataForImage:(struct IPPhotoInfo *)fp8 inRect:(struct _NSRect)fp12;
- (void)loadFaceHistograms:(id)fp8 imageKey:(int)fp12 pixelBuffer:(void *)fp16 rowBytes:(unsigned long)fp20 bytesPerPixel:(int)fp24 W:(int)fp28 H:(int)fp32 printing:(int)fp36 marking:(int)fp40 pixcount:(double *)fp44 histLum:(int *)fp48 histSat:(int *)fp52 histMax:(int *)fp56 rFirstMoment:(double *)fp60 gFirstMoment:(double *)fp64;
- (void)putFaceRectPointsForImage:(struct IPPhotoInfo *)fp8 faceNumber:(int)fp12 insideRect:(struct _NSRect)fp16 intoArray:(float [6][2])fp32 rotation:(float)fp36;
- (void)putFaceRectPointsForInfo:(id)fp8 intoArray:(float [6][2])fp12;
- (BOOL)createThumbnailForFaceInPhoto:(struct IPPhotoInfo *)fp8 withFaceIndex:(int)fp12;
- (void)detectFacesInPhotosWithKeys:(id)fp8 correlatePhotosKeys:(id)fp12 discardPreviousCorrelation:(BOOL)fp16 context:(void *)fp20;
- (void)queueDetectFacesInPhotosWithKeys:(id)fp8 correlatePhotosKeys:(id)fp12 discardPreviousCorrelation:(BOOL)fp16 context:(void *)fp20;
- (void)queueRetryDetectFacesInPhotosWithKeys:(id)fp8 forceRetry:(BOOL)fp12 context:(void *)fp16;
- (id)rankFaceWithKey:(unsigned long)fp8 againstPhotos:(id)fp12 scores:(id *)fp16 context:(void *)fp20;
- (id)suggestedFaceNamesForFaceWithKey:(unsigned long)fp8 photoKey:(unsigned long)fp12 againstPhotos:(id)fp16 context:(void *)fp20;
- (void)suspendFaceDetection;
- (void)resumeFaceDetection;
- (BOOL)isFaceDetectionSuspended;
- (void)faceRecognitionDidStart:(id)fp8 phase:(int)fp12 context:(void *)fp16;
- (void)faceRecognitionProcessedItemAtIndex:(unsigned int)fp8 count:(unsigned int)fp12 phase:(int)fp16 abort:(char *)fp20 sender:(id)fp24 context:(void *)fp28;
- (void)faceRecognitionDidEnd:(id)fp8 phase:(int)fp12 context:(void *)fp16;
- (unsigned int)numberOfPhotos:(void *)fp8 sender:(id)fp12 phase:(int)fp16 context:(void *)fp20;
- (void *)photoAtIndex:(unsigned int)fp8 inPhotos:(void *)fp12 userInfo:(void **)fp16 sender:(id)fp20 phase:(int)fp24 context:(void *)fp28;
- (void)releasePhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 phase:(int)fp20 context:(void *)fp24;
- (struct CGImage *)getCGImageOfPhoto:(void *)fp8 userInfo:(void **)fp12 maxDimension:(float)fp16 sender:(id)fp20 context:(void *)fp24;
- (void)releaseCGImage:(struct CGImage *)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24;
- (id)getDateOriginalOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 shutterSpeedValue:(float *)fp16 apertureValue:(float *)fp20 ISOSpeedRating:(float *)fp24 sender:(id)fp28 context:(void *)fp32;
- (struct CGAffineTransform)transformForProvidedImageSpaceToOriginalImageOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 context:(void *)fp20;
- (struct CGAffineTransform)transformForOriginalImageSpaceToPovidedImageSpaceOfPhoto:(void *)fp8 withUserInfo:(void *)fp12 sender:(id)fp16 context:(void *)fp20;
- (BOOL)validateFace:(id)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24 debugString:(id)fp28;
- (BOOL)writeDetectionAndThumbnailInfoOfFaces:(id)fp8 ofPhoto:(void *)fp12 withUserInfo:(void *)fp16 sender:(id)fp20 context:(void *)fp24;
- (void)logDetectFace:(id)fp8 ofPhoto:(void *)fp12 debugString:(id)fp16 sender:(id)fp20 context:(void *)fp24;
- (id)facesOfPhoto:(void *)fp8 assignFaceKeys:(BOOL)fp12 sender:(id)fp16 context:(void *)fp20;
- (unsigned int)makeFace:(id)fp8 samePersonAsKnownFace:(id)fp12 sender:(id)fp16 context:(void *)fp20;
- (unsigned int)desolidarizeFace:(id)fp8 sender:(id)fp12 context:(void *)fp16;
- (void)completedCorrelationOfFace:(id)fp8 sender:(id)fp12 context:(void *)fp16;
- (void)logCorrelateTestFace:(id)fp8 toSeedFace:(id)fp12 withScore:(float)fp16 debugString:(id)fp20 sender:(id)fp24 context:(void *)fp28;
- (id)recentFacesWithFaceKey:(unsigned int)fp8 maxCount:(unsigned int)fp12 sender:(id)fp16 context:(void *)fp20;
- (void)testedSimilarFace:(id)fp8 toSeedFace:(id)fp12 withScore:(float)fp16 debugString:(id)fp20 sender:(id)fp24 context:(void *)fp28;
- (int)detectOnUpgradeSampleFaceIndex;
- (unsigned long)detectOnUpgradeSampleImageKey;
- (double)detectOnUpgradeRemainingSeconds;
- (BOOL)wasAskedToStopForTerminate;
- (int)detectOnUpgradeCompletedItems;
- (int)detectOnUpgradeTotalItems;
- (int)detectOnUpgradePhase;

@end

@interface IPMapZoomControl : NSControl
{
    NSImage *mBackground;
    NSImage *mKnob;
    struct _NSRect mTrackRect;
    struct _NSRect mKnobBounds;
    struct _NSRect mKnobRect;
    struct _NSRect mZoomInRect;
    struct _NSRect mZoomOutRect;
    struct _NSRect mPanLeftRect;
    struct _NSRect mPanRightRect;
    struct _NSRect mPanUpRect;
    struct _NSRect mPanDownRect;
    struct _NSRect mSnapBackRect;
    float mCurrentValue;
    float mMinValue;
    float mMaxValue;
    BOOL mIsChanging;
    BOOL mIsContinuous;
    BOOL mWholeNumbersOnly;
    float mKnobOffset;
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlay;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)parentViewWillResize;
- (void)parentViewDidResize;
- (BOOL)isOpaque;
- (BOOL)isContinuous;
- (void)setIsContinuous:(BOOL)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (float)floatValue;
- (void)setCurrentValue:(float)fp8;
- (void)_adjustValueByMovingKnob:(float)fp8;
- (float)_trackPointForValue:(float)fp8;
- (float)_valueForTrackPoint:(float)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)isChanging;
- (void)dealloc;

@end

@interface NSDictionary (PrivateBSJSONAdditions)
- (id)jsonStringValueWithIndentLevel:(int)fp8;
- (id)jsonStringForValue:(id)fp8 withIndentLevel:(int)fp12;
- (id)jsonStringForArray:(id)fp8 withIndentLevel:(int)fp12;
- (id)jsonStringForString:(id)fp8;
- (id)jsonIndentStringForLevel:(int)fp8;
@end

@interface NSDictionary (BSJSONAdditions)
+ (id)dictionaryWithJSONString:(id)fp8;
- (id)jsonStringValue;
@end

@interface NSScanner (PrivateBSJSONAdditions)
- (BOOL)scanJSONObject:(id *)fp8;
- (BOOL)scanJSONArray:(id *)fp8;
- (BOOL)scanJSONString:(id *)fp8;
- (BOOL)scanJSONValue:(id *)fp8;
- (BOOL)scanJSONNumber:(id *)fp8;
- (BOOL)scanJSONWhiteSpace;
- (BOOL)scanJSONKeyValueSeparator;
- (BOOL)scanJSONValueSeparator;
- (BOOL)scanJSONObjectStartString;
- (BOOL)scanJSONObjectEndString;
- (BOOL)scanJSONArrayStartString;
- (BOOL)scanJSONArrayEndString;
- (BOOL)scanJSONStringDelimiterString;
@end

@interface JSONParser : NSObject
{
}

+ (void)initialize;
+ (id)flatDictionaryWithJSONString:(id)fp8;
+ (id)nestedDictionaryWithJSONString:(id)fp8;
+ (id)geoTypesWithJSONString:(id)fp8;
+ (id)geoHierarchyWithJSONString:(id)fp8;
+ (id)_flattenContainer:(id)fp8;
+ (void)_addLabelForTypeIdFromDictionary:(id)fp8 toDictionary:(id)fp12;

@end

@interface IPDefinePeopleView : IPCoverWindowView <IPDefinePeopleToolbarDelegate, IPCompletionMenuDelegate>
{
    IPMagnifierController *_magnifier;
    NSView *_sourceView;
    CALayer *baseLayer;
    IPDefinePeopleToolbarView *toolbarView;
    struct IPPhotoInfo *_photo;
    ImageDB *_imageDB;
    NewFaceDetector *_faceDetector;
    struct CGRect photoRect;
    NSMutableArray *faces;
    PersonCompletionMenuCell *personCell;
    int _faceIndexNeedsRegenerate;
    IPCompletionMenu *menu;
    IPNewPersonLayer *newPersonLayer;
    NSTimer *hideNewPersonFlagTimer;
    IPPersonToolTipContent *_selectedFace;
    struct _NSSize _newPersonFlagSize;
    BOOL _peopleDoneLeavesMagnify;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)definePeopleToolbar:(id)fp8 addPerson:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 done:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 next:(id)fp12;
- (void)definePeopleToolbar:(id)fp8 previous:(id)fp12;
- (void)undoRedoChangeNameWithDB:(id)fp8 faceIndexPath:(id)fp12 beginState:(id)fp16 endState:(id)fp20 beginFaceName:(id)fp24 endFaceName:(id)fp28 beginFaceKey:(int)fp32 endFaceKey:(int)fp36 undoManager:(id)fp40;
- (void)completionMenuStoreValue:(id)fp8;
- (id)completionMenu:(id)fp8 completionsForString:(id)fp12;
- (void)completionMenu:(id)fp8 willDisplayCell:(id)fp12 forItem:(id)fp16 atIndex:(int)fp20;
- (id)completionMenu:(id)fp8 cellForItem:(id)fp12 atIndex:(int)fp16;
- (float)completionMenu:(id)fp8 heightForItem:(id)fp12 atIndex:(int)fp16;
- (void)createNewPerson;
- (id)flagLayerForFaceIndex:(int)fp8;
- (id)boxLayerForFaceIndex:(int)fp8;
- (id)faceForIndexPath:(id)fp8;
- (void)refreshFaceTileForFace:(id)fp8;
- (void)undoRedoAdjustFaceBoxWithDB:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (void)storeFaceBoxAdjustForFace:(id)fp8;
- (BOOL)_ignoreFace:(id)fp8 ignored:(BOOL)fp12;
- (void)undoRedoIgnoreFaceWithDB:(id)fp8 beginState:(id)fp12 endState:(id)fp16 ignored:(BOOL)fp20 deleted:(BOOL)fp24 undoManager:(id)fp28;
- (void)ignoreFace:(id)fp8 ignored:(BOOL)fp12;
- (void)undoRedoAddFaceWithDB:(id)fp8 beginState:(id)fp12 endState:(id)fp16 undoManager:(id)fp20;
- (id)addFaceAtPercentageRect:(struct CGRect)fp8;
- (void)refreshFlagLayerForFace:(id)fp8;
- (id)smartAlbumNameForFaceKeys:(id)fp8 plural:(char *)fp12;
- (void)goToDetailForFace:(id)fp8;
- (void)selectFaceAfterFace:(id)fp8 next:(BOOL)fp12 selectOnly:(BOOL)fp16;
- (void)selectFirstUnnamedOrUnconfirmed;
- (void)showCompletionMenuForFace:(id)fp8 overRect:(struct CGRect)fp12;
- (struct CGRect)localLocationOfFacesAlbumSourceListItem;
- (void)showNewFaceFlagForFace:(id)fp8;
- (void)newPersonFlagTimerFired:(id)fp8;
- (void)hide;
- (void)reorderUnderLayers:(id)fp8 nearLayers:(id)fp12;
- (void)mouseMoved:(id)fp8;
- (void)selectSingleFace:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)selectedFlagAction:(int)fp8;
- (BOOL)selectedSuggestionAction:(int)fp8;
- (BOOL)selectedNewFaceAction:(int)fp8;
- (void)swipeWithEvent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)setToolbarRect:(struct _NSRect)fp8;
- (void)removeExistingFlags:(BOOL)fp8;
- (void)createLayersForFace:(id)fp8 suggestion:(id)fp12;
- (void)createFlags;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updatePhotoRect:(struct _NSRect)fp8;
- (void)updateForPhotoKey:(struct IPPhotoInfo *)fp8 photoRect:(struct _NSRect)fp12;
- (void)purgePeopleToolTipData;
- (id)externalServiceForFace:(id)fp8 asSuggestion:(id *)fp12;
- (BOOL)peopleDoneLeavesMagnify;
- (void)setPeopleDoneLeavesMagnify:(BOOL)fp8;
- (struct _NSSize)newPersonFlagSize;
- (void)setNewPersonFlagSize:(struct _NSSize)fp8;
- (id)selectedFace;
- (void)setSelectedFace:(id)fp8;
- (id)sourceView;
- (void)setSourceView:(id)fp8;
- (id)magnifier;
- (void)setMagnifier:(id)fp8;

@end

@interface IPCoverWindowView : NSView
{
    NSView *_parentView;
    NSWindow *_cachedMainWindow;
    NSWindow *_cachedKeyWindow;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)parentWindowResized:(id)fp8;
- (void)showForParentView:(id)fp8;
- (void)hide;
- (BOOL)isVisible;
- (struct _NSRect)translateRect:(struct _NSRect)fp8 fromView:(id)fp24 toView:(id)fp28;
- (id)cachedKeyWindow;
- (void)setCachedKeyWindow:(id)fp8;
- (id)cachedMainWindow;
- (void)setCachedMainWindow:(id)fp8;
- (id)parentView;
- (void)setParentView:(id)fp8;

@end

@interface IPDefinePeopleToolbarView : NSView
{
    IPStretchableImage *background;
    NSButton *addPersonButton;
    NSButton *doneButton;
    NSButton *previousButton;
    NSButton *nextButton;
    EtchedText *infoText;
    id <IPDefinePeopleToolbarDelegate> _delegate;
    BOOL _addModeActive;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)drawRect:(struct _NSRect)fp8;
- (void)enableAddMode:(BOOL)fp8;
- (void)enableAddButton:(BOOL)fp8;
- (void)enableNextAndPrev:(BOOL)fp8;
- (void)setInfoString:(id)fp8;
- (void)addPerson:(id)fp8;
- (void)done:(id)fp8;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (BOOL)addModeActive;
- (void)setAddModeActive:(BOOL)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;

@end

@interface IPMarimbaHUDController : NSObject
{
    int _selectedOption;
    IPMarimbaHUDWindow *_transportWindow;
    IPMarimbaHUDWindow *_optionsWindow;
    TransparentView *_rootView;
    NSView *_currentWindowView;
    NSView *_currentContainerView;
    TransparentView *_fakeTransportTransparentView;
    TransparentView *_transportTransparentView;
    IPEdgeBox *_fakeTransportEdgeBox;
    IPEdgeBox *_transportEdgeBox;
    NSButton *_transportPlayButton;
    NSView *_optionsButtonView;
    NSButton *_optionsDefaultSettingsCheckBox;
    HUDButton *_optionsPlayButton;
    HUDButton *_optionsCancelButton;
    NSTextField *_optionsDefaultSettingsTextField;
    NSTextField *_optionsChooseAThemeTitle;
    NSButton *_optionsChooseThemeButton;
    NSButton *_optionsCancelThemeButton;
    NSWindow *_optionsThemeChooserPanel;
    HUDTabControl *_optionsTabControl;
    TransparentView *_optionsTransparentView;
    IPMarimbaHUDView *_optionsHUDView;
    IPMarimbaThemeChooserView *_themeView;
    NSView *_loadingView;
    NSButton *_loadingCancelButton;
    NSTextField *_loadingTextField;
    IPMarimbaSettingsHUDController *_settingsHUDController;
    IPMarimbaMusicHUDController *_musicHUDController;
    id <IPMarimbaTransportDelegate> _transportDelegate;
    id <IPMarimbaOptionsDelegate> _optionsDelegate;
    IPMarimbaSlideshow *_marimbaSlideshow;
    NSMutableArray *_fakeTransportNIBObjects;
    NSMutableArray *_transportNIBObjects;
    NSMutableArray *_optionsNibObjects;
    NSMutableArray *_settingsNIBObjects;
    NSMutableArray *_mediaBrowserNIBObjects;
    NSURL *_selectedMusic;
    BOOL _transportOn;
    int _windowLevel;
    BOOL _flipRunning;
    BOOL _instantApply;
    BOOL _wasPlaying;
}

- (id)init;
- (id)transportDelegate;
- (void)setTransportDelegate:(id)fp8;
- (id)optionsDelegate;
- (void)setOptionsDelegate:(id)fp8;
- (id)marimbaSlideshow;
- (void)setMarimbaSlideshow:(id)fp8;
- (void)dealloc;
- (void)_setupNibs;
- (BOOL)instantApply;
- (void)setInstantApply:(BOOL)fp8;
- (BOOL)showingSettingsHUD;
- (BOOL)showingAdvancedSettingsHUD;
- (void)animateTransportOn;
- (void)animateTransportOff;
- (id)playButton;
- (id)themeView;
- (void)showTransport:(BOOL)fp8;
- (void)showOptionsPanel;
- (void)mouseMoved:(id)fp8;
- (void)_setupThemeWindow;
- (void)_setupTransportWindow;
- (void)_setupPanelForOption:(int)fp8;
- (void)toggleMusicMode;
- (void)playOptionsPanel:(id)fp8;
- (void)captureDisplay;
- (void)releaseDisplay;
- (void)cancelOptionsPanel:(id)fp8;
- (void)showMusicPanel:(id)fp8;
- (void)showSettingsPanel:(id)fp8;
- (void)showThemePanel:(id)fp8;
- (void)useAsDefaultDidClick:(id)fp8;
- (id)selectedStyleID;
- (void)showThemeSheet;
- (void)themeSheetDidChoose:(id)fp8;
- (void)themeSheetDidCancel:(id)fp8;
- (void)stylePickerDidChange:(id)fp8;
- (void)stylePickerDidDoubleClick:(id)fp8;
- (void)showAdvancedSettings;
- (void)closeAdvancedSettings;
- (BOOL)isAdvancedSettingsVisible;
- (void)showMusicHUD;
- (void)closeMusicHUD;
- (BOOL)isMusicHUDVisible;
- (void)updateHUDs:(BOOL)fp8;
- (void)updateSettingsForSlide:(id)fp8 force:(BOOL)fp12;
- (void)aspectRatioDidChange;
- (void)timingDidChange;
- (void)slidesNeedUpdate;
- (void)kenBurnsStateDidChange;
- (void)needsRerender;
- (id)visibleSlides;
- (BOOL)isPlaying;
- (void)jumpToTitleSlide;
- (int)currentKenBurnsState;
- (void)styleDidChange:(id)fp8;
- (BOOL)showingThemeHUD;
- (BOOL)showingMusicHUD;
- (void)tabSelectionChanged:(id)fp8;
- (void)_addStylesAfterRunLoop;
- (double)durationOfMusic;
- (void)close:(id)fp8;
- (void)togglePlayback:(id)fp8;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (id)loadingView;
- (void)_cancelBeatDetection;
- (id)bookLoadingView;
- (void)willBeginPlaying;
- (void)_flipView:(id)fp8 toView:(id)fp12;
- (void)animationDidStop:(id)fp8 finished:(BOOL)fp12;
- (void)showThemes;

@end

@interface IPMarimbaHUDWindow : DisappearingWindow
{
    IPMarimbaHUDController *_controller;
}

- (void)setController:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)canBecomeKeyWindow;

@end

@interface NSWindowGraphicsContext (iPhotoAddition)
- (id)initWithCoreGraphicsContext:(struct CGContext *)fp8;
@end

@interface GeoType : NSObject
{
    int _parentId;
    int _dbKey;
    int _uniqueId;
    int _type;
    int _category;
    NSString *_defaultLanguageCode;
    NSString *_defaultLanguageLabel;
    NSMutableDictionary *_otherTranslations;
    struct _NSPoint _centroid;
    NSMutableArray *_boundaries;
    float _north;
    float _south;
    float _east;
    float _west;
    int _geoVersion;
    BOOL _isLowest;
}

- (id)initWithBaseDictionary:(id)fp8;
- (void)dealloc;
- (id)description;
- (void)setParentId:(int)fp8;
- (int)parentId;
- (void)setDBKey:(int)fp8;
- (int)dbKey;
- (int)uniqueId;
- (int)type;
- (int)category;
- (id)defaultLanguageCode;
- (id)defaultLanguageLabel;
- (id)labelForLanguage:(id)fp8;
- (id)otherTranslations;
- (struct _NSPoint)centroid;
- (id)boundaries;
- (float)north;
- (float)south;
- (float)east;
- (float)west;
- (int)geoVersion;
- (BOOL)isLowest;

@end

@interface GeoHierarchy : NSObject
{
    NSArray *_geoTypes;
    GeoType *_topLevelGeoType;
    GeoType *_bottomLevelGeoType;
    NSString *_dataString;
    NSDictionary *_flatDictionary;
}

- (id)initWithGeoTypes:(id)fp8 dataString:(id)fp12;
- (void)dealloc;
- (id)dataString;
- (id)flatDictionary;
- (void)setFlatDictionary:(id)fp8;
- (id)description;
- (id)geoTypes;
- (id)geoTypeOfType:(int)fp8;
- (id)topLevelGeoType;
- (id)bottomLevelGeoType;
- (id)parentOfGeoType:(id)fp8;
- (id)childrenOfGeoType:(id)fp8;
- (void)_setTopLevelGeoType:(id)fp8;
- (void)_setBottomLevelGeoType:(id)fp8;

@end

@interface RKShadowHighlightFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputShadowAmount;
    NSNumber *inputShadowTonalWidth;
    NSNumber *inputRadius;
    NSNumber *inputHighlightAmount;
    NSNumber *inputHighlightTonalWidth;
    NSNumber *inputColorCorrection;
    NSNumber *inputMidtoneContrast;
    NSNumber *inputBlackClip;
    NSNumber *inputWhiteClip;
    NSNumber *inputVersion;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)customAttributes;
- (id)outputImage;

@end

@interface IPFaceBoxLayer : IPFaceLayer
{
    struct CGRect _featureRects[6];
    IPFaceFlagLayer *_flagLayer;
    IPStretchableImage *_frameImage;
    IPStretchableImage *_noGrowFrameImage;
    struct CGRect _photoFrame;
    BOOL _selected;
    BOOL _hovered;
    BOOL _resizeMode;
    BOOL _highlightCloseBox;
}

- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (id)actionForKey:(id)fp8;
- (void)setFrame:(struct CGRect)fp8;
- (void)drawInContext:(struct CGContext *)fp8;
- (BOOL)trackSelectedMouseEvent:(id)fp8 baseView:(id)fp12 photoRect:(struct CGRect)fp16;
- (int)trackUnselectedMouseEvent:(id)fp8 baseView:(id)fp12 photoRect:(struct CGRect)fp16;
- (int)trackMouseEvent:(id)fp8 baseView:(id)fp12 photoRect:(struct CGRect)fp16;
- (void)adjustFlagLocation;
- (BOOL)highlightCloseBox;
- (void)setHighlightCloseBox:(BOOL)fp8;
- (BOOL)resizeMode;
- (void)setResizeMode:(BOOL)fp8;
- (BOOL)hovered;
- (void)setHovered:(BOOL)fp8;
- (BOOL)selected;
- (void)setSelected:(BOOL)fp8;
- (struct CGRect)photoFrame;
- (void)setPhotoFrame:(struct CGRect)fp8;
- (id)flagLayer;
- (void)setFlagLayer:(id)fp8;

@end

@interface PersonSlideshowSettingsDelegate : NSObject <IPAttributeProtocol>
{
    ImageDB *_imageDB;
    int _personKey;
}

- (id)initWithDB:(id)fp8 personKey:(unsigned long)fp12;
- (id)attributeForKey:(id)fp8;
- (void)setAttribute:(id)fp8 forKey:(id)fp12;
- (id)db;

@end

@interface IPMarimbaAssetDelegate : NSObject <MPAssetKeyDelegate>
{
    ImageDB *_db;
    id <IPMarimbaSlideshowDelegate> _slideshowDelegate;
    NSMutableArray *_bookPageImages;
}

- (id)initWithSlideshowDelegate:(id)fp8;
- (id)initWithDB:(id)fp8;
- (id)slideshowDelegate;
- (BOOL)hasSlideshowDelegate;
- (void)dealloc;
- (void)setBookPageImages:(id)fp8;
- (int)_indexForAssetPath:(id)fp8;
- (id)_pathForAssetPath:(id)fp8;
- (struct CGImage *)bookPageImageForIndex:(int)fp8 imageSize:(struct _NSSize)fp12;
- (id)absolutePathForAssetKey:(id)fp8;
- (id)absolutePathForAssetKey:(id)fp8 andSize:(struct _NSSize)fp12;
- (struct CGImage *)cgImageForAssetKey:(id)fp8 andSize:(struct _NSSize)fp12;

@end

@interface IPMarimbaSlideshow : NSObject
{
    IPMarimbaAssetDelegate *_assetDelegate;
    Album *_slideshowAlbum;
    id <IPAttributeProtocol> _settingsDelegate;
    MPDocument *_slideshowDocument;
    BOOL _modifyingDocument;
    BOOL _keepUserCrop;
    NSMutableDictionary *_modifyingOptions;
    BOOL _dirty;
    long _selectedCount;
    long *_selectedIndices;
    NSRecursiveLock *_editingLock;
    BOOL _analyzingSongs;
    BOOL _isModified;
    BOOL _hadStyle;
    NSDictionary *_oldSettings;
    NSArray *_oldSlides;
    NSNumber *_oldIndex;
}

+ (id)styleIDs;
+ (id)transitionIDs;
+ (id)oldTransitionIDFromMarimbaTransitionID:(id)fp8;
+ (void)ensureDefaults;
- (id)initWithSlideshowDelegate:(id)fp8 slideCount:(int)fp12 settingsDelegate:(id)fp16 imageSize:(struct _NSSize)fp20;
- (void)loadImagesForDelegate:(id)fp8 slideCount:(int)fp12 imageSize:(struct _NSSize)fp16 prerender:(BOOL)fp24;
- (void)renderBookImages;
- (id)initWithExistingAlbum:(id)fp8 settingsDelegate:(id)fp12 photos:(struct IPPhotoList *)fp16 andTitle:(id)fp20;
- (void)_defaultSlideshowWithPhotos:(struct IPPhotoList *)fp8 album:(id)fp12 andTitle:(id)fp16;
- (id)initWithNewAlbum:(id)fp8;
- (id)initWithDictionary:(id)fp8 db:(id)fp12 album:(id)fp16;
- (id)assetDelegate;
- (BOOL)hasSlideshowDelegate;
- (void)_convertedSlideshowWithPhotos:(struct IPPhotoList *)fp8 andSettings:(id)fp12;
- (void)_convertSlideshowWithDictionary:(id)fp8;
- (id)_oldTransitionIDToMarimbaTransitionID:(id)fp8 transitionDirection:(int)fp12;
- (void)encodeWithDictionary:(id)fp8;
- (struct IPPhotoList *)photoList;
- (struct IPPhotoInfo *)photoForAssetpath:(id)fp8;
- (struct IPPhotoInfo *)photoForSlide:(id)fp8;
- (id)slideForPhoto:(struct IPPhotoInfo *)fp8;
- (void)_photoOrderChanged;
- (void)photoChanged:(struct IPPhotoInfo *)fp8;
- (void)photoImageChanged:(struct IPPhotoInfo *)fp8;
- (id)_photoKeyPaths;
- (id)_assetPathForPhoto:(struct IPPhotoInfo *)fp8;
- (id)_assetPathForIndex:(int)fp8;
- (void)_addPhotosToDocument:(struct IPPhotoList *)fp8;
- (void)_setPropertiesForPhoto:(struct IPPhotoInfo *)fp8 andAssetPath:(id)fp12;
- (void)movePhotos:(struct IPPhotoList *)fp8 toIndex:(long)fp12;
- (void)insertPhoto:(struct IPPhotoInfo *)fp8 atIndex:(long)fp12;
- (void)addPhoto:(struct IPPhotoInfo *)fp8;
- (void)addPhotos:(struct IPPhotoList *)fp8;
- (void)removePhotos:(struct IPPhotoList *)fp8;
- (void)removePhoto:(struct IPPhotoInfo *)fp8;
- (void)_reconfigureImagesInRange:(struct _NSRange)fp8;
- (void)updateTitle;
- (void)_beginDocumentConfigInRange:(struct _NSRange)fp8;
- (BOOL)document:(id)fp8 shouldUseDefaultTransitionForEffectContainer:(id)fp12 containerIndex:(int)fp16 layerIndex:(int)fp20;
- (BOOL)document:(id)fp8 shouldUseDefaultFiltersForSlide:(id)fp12 effectIndex:(int)fp16 containerIndex:(int)fp20 layerIndex:(int)fp24;
- (id)document:(id)fp8 needsTransitionForEffectContainer:(id)fp12 containerIndex:(int)fp16 layerIndex:(int)fp20;
- (id)document:(id)fp8 needsFiltersForSlide:(id)fp12 effectIndex:(int)fp16 containerIndex:(int)fp20 layerIndex:(int)fp24;
- (BOOL)document:(id)fp8 shouldUseDefaultAnimatedPathsForSlide:(id)fp12 inEffect:(id)fp16;
- (void)document:(id)fp8 needsAnimationPathsAppliedForSlide:(id)fp12 inEffect:(id)fp16;
- (void)_applyDefaults;
- (void)_endDocumentConfig;
- (void)_saveSlideshowToDatabase;
- (void)dealloc;
- (void)configureCaptions;
- (void)_removeCaptions;
- (id)_captions;
- (id)album;
- (void)setSelectedIndices:(long *)fp8 count:(long)fp12;
- (void)getSelectedIndices:(long **)fp8 count:(long *)fp12;
- (BOOL)dirty;
- (void)setDirty:(BOOL)fp8;
- (id)mpDocument;
- (long)slideCount;
- (BOOL)isModified;
- (void)markAsModified;
- (void)clearModified;
- (BOOL)repeatSlideshow;
- (void)setRepeatSlideshow:(BOOL)fp8;
- (int)intValueForKey:(id)fp8;
- (double)doubleValueForKey:(id)fp8;
- (BOOL)hasAttributeForKey:(id)fp8;
- (BOOL)boolValueForKey:(id)fp8;
- (id)stringValueForKey:(id)fp8;
- (void)setStringValue:(id)fp8 forKey:(id)fp12;
- (id)arrayValueForKey:(id)fp8;
- (void)setArrayValue:(id)fp8 forKey:(id)fp12;
- (void)resetDefaults;
- (void)useSettingsAsDefault;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)fp8;
- (BOOL)shuffleSlides;
- (void)setShuffleSlides:(BOOL)fp8;
- (BOOL)showTitleSlides;
- (void)setShowTitleSlides:(BOOL)fp8;
- (BOOL)scalePhotos;
- (void)setScalePhotos:(BOOL)fp8;
- (int)audioScaleMode;
- (void)setAudioScaleMode:(int)fp8;
- (double)authoringTimeScale;
- (void)setAuthoringTimeScale:(double)fp8;
- (id)transitionID;
- (void)setTransitionID:(id)fp8;
- (double)transitionDuration;
- (void)setTransitionDuration:(double)fp8;
- (int)transitionDirection;
- (void)setTransitionDirection:(int)fp8;
- (BOOL)playsMusic;
- (void)setPlaysMusic:(BOOL)fp8;
- (id)songs;
- (void)setSongs:(id)fp8;
- (id)songPaths;
- (void)setSongPaths:(id)fp8;
- (id)playlistName;
- (void)setPlaylistName:(id)fp8;
- (BOOL)hasPlaylist;
- (void)setHasPlaylist:(BOOL)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (int)seed;
- (void)setSeed:(int)fp8;
- (BOOL)hadStyle;
- (id)style;
- (void)setStyle:(id)fp8 apply:(BOOL)fp12;
- (void)updateStyle;
- (void)updateStyleAndChangeCropping;
- (void)setTitle:(id)fp8;
- (BOOL)isCustomizable;
- (void)setBOOLValue:(BOOL)fp8 forKey:(id)fp12;
- (void)setIntValue:(int)fp8 forKey:(id)fp12;
- (void)setDoubleValue:(double)fp8 forKey:(id)fp16;
- (int)captionType;
- (void)setCaptionType:(int)fp8;
- (void)configureDocumentForExport;
- (void)configureDocumentForPlayback;
- (void)checkForFitToAudio;
- (id)editingLock;
- (BOOL)isAnalyzingSongs;
- (void)stopAnalyzingSongs;
- (void)analyzeSongs:(id)fp8;
- (void)_performAudioAnalysisOfFiles:(id)fp8;

@end

@interface MarimbaBookPage : NSObject
{
    struct CGImage *_bookPageImage;
}

- (id)initWithCGImage:(struct CGImage *)fp8;
- (void)dealloc;

@end

@interface IPFaceFlagLayer : IPFaceLayer
{
    struct CGRect _featureRects[5];
    CATextLayer *_textLayer;
    IPFaceBoxLayer *_boxLayer;
    BOOL _altButtonActive;
    BOOL _hilightButton;
    BOOL _hilightAltButton;
    BOOL _initialPlacementMode;
    BOOL _suggestMode;
    int _suggestedFaceKey;
    NSString *_suggestedFaceName;
    NSImage *_serviceImage;
}

- (void)loadArt;
- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (id)actionForKey:(id)fp8;
- (void)setFrame:(struct CGRect)fp8;
- (void)drawInContext:(struct CGContext *)fp8;
- (int)trackDoneMouseEvent:(id)fp8 baseView:(id)fp12;
- (int)trackSuggestMouseEvent:(id)fp8 baseView:(id)fp12;
- (int)trackNameMouseEvent:(id)fp8 baseView:(id)fp12 named:(BOOL)fp16;
- (int)trackMouseEvent:(id)fp8 baseView:(id)fp12;
- (void)tile;
- (id)serviceImage;
- (void)setServiceImage:(id)fp8;
- (id)suggestedFaceName;
- (void)setSuggestedFaceName:(id)fp8;
- (int)suggestedFaceKey;
- (void)setSuggestedFaceKey:(int)fp8;
- (BOOL)suggestMode;
- (void)setSuggestMode:(BOOL)fp8;
- (BOOL)initialPlacementMode;
- (void)setInitialPlacementMode:(BOOL)fp8;
- (id)textLayer;
- (BOOL)hilightAltButton;
- (void)setHilightAltButton:(BOOL)fp8;
- (BOOL)hilightButton;
- (void)setHilightButton:(BOOL)fp8;
- (BOOL)altButtonActive;
- (void)setAltButtonActive:(BOOL)fp8;
- (id)boxLayer;
- (void)setBoxLayer:(id)fp8;

@end

@interface IPFaceLayer : CALayer
{
    IPPersonToolTipContent *_face;
}

- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (id)face;
- (void)setFace:(id)fp8;

@end

@interface FlippedViewTextView : NSTextView
{
    int mTrackingRect;
    BOOL mMouseOver;
    BOOL mHasFocus;
    NSColor *mOriginalColor;
    NSScrollView *mScrollView;
    NSString *mPlaceholderText;
    BOOL mShowingPlaceholderText;
    NSTextView *mLocationParseField;
    float _lastDelta;
    struct _NSPoint _lastOrigin;
    BOOL mFirstMouse;
    BOOL mCenter;
    BOOL mOverrideDismiss;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (BOOL)autoscroll:(id)fp8;
- (void)overrideDismiss:(BOOL)fp8;
- (void)setLocationParseField:(id)fp8;
- (void)setPlaceholderText:(id)fp8;
- (void)setString:(id)fp8;
- (id)string;
- (id)currentValue;
- (struct _NSRect)roughUsedRect;
- (BOOL)becomeFirstResponder;
- (void)setCenter:(BOOL)fp8;
- (void)setHasFocus:(BOOL)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)setSelectedRange:(struct _NSRange)fp8 affinity:(unsigned int)fp16 stillSelecting:(BOOL)fp20;
- (void)mouseDown:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPBookPhotowrapCoverView : IPBookView
{
    struct _NSRect mArtRect;
    NSImage *mSpineEdgeArt;
    NSImage *mFlapEdgeArt;
}

- (void)drawRect:(struct _NSRect)fp8;
- (void)drawOverlayForPageView:(id)fp8;
- (struct CGRect)clipRect;
- (void)pageSelectionDidChange;
- (void)updatePageViewsForCurrentPage:(BOOL)fp8;
- (void)resizePageViews:(BOOL)fp8;
- (void)dealloc;

@end

@interface IPMapRegionDatastore : NSObject
{
    LocationData *mData;
    id <XTThread> mThread;
    NSMutableSet *mQueue;
    BOOL mRunning;
}

+ (void)initialize;
+ (unsigned int)messageCategory;
- (id)init;
- (void)processRequest:(id)fp8;
- (void)lookupComplete:(id)fp8;
- (void)performLookup:(id)fp8;
- (void)stop;
- (void)dealloc;

@end

@interface IPBackgroundImageLayer : IPBaseLayer
{
    CALayer *mImageLayer;
    CALayer *mMatteLayer;
    CALayer *mFullScreenMaskLayer;
    CIImage *mBackgroundImage;
    NSColor *mBackgroundColor;
    NSMutableArray *mMaskFrameArray;
    struct CGRect mImageFrame;
}

- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)drawLayer:(id)fp8 inContext:(struct CGContext *)fp12;
- (void)maskFrameAt:(struct _NSRect)fp8;
- (void)setBackgroundImage:(id)fp8 andColor:(id)fp12;
- (void)setBounds:(struct CGRect)fp8;
- (void)setImageFrame:(struct CGRect)fp8;
- (struct CGRect)imageFrame;
- (void)setNeedsDisplay;
- (void)setImageOpacity:(float)fp8;
- (void)setFullScreenMaskOpacity:(float)fp8;

@end

@interface IPBaseLayer : CALayer
{
    BOOL mSettingInitialGeometry;
    struct CGRect mInitialFrame;
}

- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)clear;
- (struct CGColor *)black;
- (struct CGColor *)red;
- (struct CGColor *)blue;
- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)beginSettingInitialGeometry;
- (void)endSettingInitialGeometry;
- (struct CGRect)initialFrame;
- (void)setInitialFrame:(struct CGRect)fp8;
- (id)actionForLayer:(id)fp8 forKey:(id)fp12;

@end

@interface IPSelectionRingLayer : IPBaseLayer
{
    CALayer *mSelectionBoxLayer;
}

- (struct CGColorSpace *)genericRGBSpace;
- (struct CGColor *)black;
- (struct CGColor *)white;
- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (void)setBounds:(struct CGRect)fp8;

@end

@interface IPViewFlip : NSObject
{
    float m_step;
    float m_percent;
    NSWindow *m_window;
    NSWindow *m_front_window;
    NSWindow *m_bg_window;
    NSTimer *m_timer;
    NSTextView *mFieldEditor;
    TransparentView *_shadingView;
    float _lastShadingColorDrawn;
    struct _NSRect _largeWindowFrame;
    struct _NSRect _smallWindowFrame;
    int _direction;
    int _mListState;
    NSButton *_prevButton;
    NSButton *_nextButton;
    NSImage *mPreviousButton;
    NSImage *mPreviousButtonDisabled;
    NSImage *mNextButton;
    NSImage *mNextButtonDisabled;
}

- (void)dealloc;
- (struct _NSRect)midFrameFromRect:(struct _NSRect)fp8 toRect:(struct _NSRect)fp24;
- (void)setTransform;
- (void)stopTimer;
- (void)timer;
- (void)runTimer;
- (float)stepAmount;
- (void)animationAboutToStart;
- (void)animationCompleted;
- (void)animationOutCompleted;
- (id)windowWillReturnFieldEditor:(id)fp8 toObject:(id)fp12;
- (void)populateUI;
- (void)updateUI;
- (void)setupForStartingAtGlobalRect:(struct _NSRect)fp8 endingAtGlobalRect:(struct _NSRect)fp24 parentViewGlobalRect:(struct _NSRect)fp40;
- (void)placeWindows;
- (void)updateButtonsForState;
- (void)updateAnimateRect:(struct _NSRect)fp8;
- (void)pushUndoDictionary;
- (void)performUndo:(id)fp8;
- (void)clearUndos;
- (id)currentUndoDictionary;
- (void)takeUndoValuesFromDictionary:(id)fp8;
- (BOOL)textShouldBeginEditing:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)keyDown:(id)fp8;
- (void)show;
- (void)hide;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (void)commitChanges;
- (void)closeWithSave:(BOOL)fp8;
- (void)close:(id)fp8;
- (id)control:(id)fp8 textView:(id)fp12 completions:(id)fp16 forPartialWordRange:(struct _NSRange)fp20 indexOfSelectedItem:(int *)fp28;

@end

@interface IPMapElementHUDController : NSObject
{
    IPBookController *mBookController;
    IPMapElement *mMap;
    HUDPointerView *mMainView;
    HUDWindow *mPanel;
    int mWindowLevel;
    NSTextField *mTitleField;
    id mMarkerControlView;
    HUDSlider *mZoomSlider;
    IPMapElementHUDTableView *mMarkerTable;
    HUDCheckboxButton *mMarkerConnectorCheckbox;
    BOOL mFreePanel;
    BOOL mVisible;
    int mMoveRow;
}

- (id)init;
- (void)awakeFromNib;
- (void)setBookController:(id)fp8;
- (void)resetSliders;
- (void)initializeUI;
- (void)reset:(id)fp8;
- (void)update;
- (BOOL)isVisible;
- (void)setNormalMode;
- (void)setFullScreenMode;
- (void)resetPanel;
- (id)mainView;
- (void)intializeMainView;
- (void)showPanel:(id)fp8 window:(id)fp12;
- (void)closeHUD:(id)fp8;
- (void)closePanel;
- (void)windowDidMove:(id)fp8;
- (void)layoutMainView;
- (void)bookViewScrolled:(id)fp8;
- (id)zoomSlider;
- (struct _NSPoint)distanceSortingPoint;
- (void)setMapTitle:(id)fp8;
- (void)toggleMarkerConnectors:(id)fp8;
- (void)toggleMarkerVisibility:(id)fp8;
- (void)addNewMarker:(id)fp8;
- (void)deleteSelectedMarker:(id)fp8;
- (void)handleCompletionMenuSelection:(id)fp8;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (BOOL)useAutocompletionForSelectedRow;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(unsigned int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(unsigned int)fp20;
- (id)windowWillReturnUndoManager:(id)fp8;

@end

@interface HUDPointerView : HUDView
{
    int mPointerEdge;
}

+ (float)titleBarHeight;
+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8;
- (void)viewWillBeInstalledInWindow:(id)fp8;
- (void)performClose:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)dealloc;
- (void)defaultsChanged:(id)fp8;
- (id)backgroundColor;
- (struct _NSPoint)inspectorCenter;
- (struct _NSRect)contentRect;
- (void)pointAtFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)hasDismissButton;
- (void)setUsesBGArt:(BOOL)fp8 withName:(id)fp12;
- (BOOL)acceptsFirstMouse:(id)fp8;

@end

@interface IPPeopleNamingView : NSView <IPViewControllerMainViewProtocol>
{
    FaceInfo *_faceInfo;
    IPThumbFactoryPeopleNaming *_thumbMaker;
    ImageDB *_db;
    struct _NSSize _cellSize;
    struct _NSSize _imageSize;
    int _rows;
    int _columns;
    IPPeopleNaming *_controller;
    float _sizeIncrement;
    int _hiliteCellIndex;
    int _hoverCellIndex;
    BOOL _hiliteTracking;
    NSTrackingArea *_trackingArea;
    BOOL _optionKeyWasDown;
    BOOL _activeScrolling;
    BOOL _needHighResRepaint;
}

- (void)removeTracking;
- (void)addTracking;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (int)cellCount;
- (void)point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexForPoint:(struct _NSPoint)fp8;
- (int)indexForCellX:(int)fp8 y:(int)fp12;
- (struct _NSRect)cellsUnderRect:(struct _NSRect)fp8;
- (struct _NSPoint)cellAddressForIndex:(int)fp8;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)imageRectForIndex:(int)fp8;
- (BOOL)isFlipped;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)updateHover;
- (void)_modifiersChanged:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)tile;
- (void)magnifyWithEvent:(id)fp8;
- (void)endGestureWithEvent:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)getPeopleCount:(int *)fp8 selectionCount:(int *)fp12;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)paste:(id)fp8;
- (void)selectAll;
- (void)selectNone;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;
- (id)faceInfo;
- (void)setFaceInfo:(id)fp8;

@end

@interface IPPeopleNamingHeaderView : NSView
{
    NSView *trayScrollerView;
    EtchedText *infoText;
    IPStretchableImage *_splitter;
    IPStretchableImage *_splitterDivide;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)setInfoFor:(int)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPPeopleNamingUnnamedTrayView : NSView
{
    NSArray *_faceInfos;
    IPThumbFactoryPeopleUnnamedTray *_thumbMaker;
    ImageDB *_db;
    struct _NSSize _cellSize;
    int _rows;
    int _columns;
    NSMutableIndexSet *_selection;
    IPPeopleNaming *_controller;
    BOOL _hiliteTracking;
    int _hiliteCellIndex;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (int)cellCount;
- (void)point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexForPoint:(struct _NSPoint)fp8;
- (int)indexForCellX:(int)fp8 y:(int)fp12;
- (struct _NSRect)cellsUnderRect:(struct _NSRect)fp8;
- (struct _NSPoint)cellAddressForIndex:(int)fp8;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)imageRectForIndex:(int)fp8;
- (BOOL)isFlipped;
- (void)notifyControllerOfSelectionChange;
- (void)select:(id)fp8 replacing:(BOOL)fp12;
- (void)deselect:(id)fp8;
- (void)clearSelection;
- (void)clearSelection:(BOOL)fp8;
- (void)redrawSelectedCells;
- (void)scrollSelectIntoView;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;
- (id)selection;
- (id)controller;
- (void)setController:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;
- (id)faceInfos;
- (void)setFaceInfos:(id)fp8;

@end

@interface IPPeopleNamingNamedTrayView : NSView
{
    NSMutableArray *_faceInfos;
    IPThumbFactoryPeopleNamedTray *_thumbMaker;
    ImageDB *_db;
    struct _NSSize _cellSize;
    int _rows;
    int _columns;
    IPPeopleNaming *_controller;
    Ellipsizer *_ellipsizer;
    NSDictionary *_textAttr;
    struct _NSSize _textAttrSize;
    int _hiliteCellIndex;
    BOOL _hiliteTracking;
    BOOL _useOverflow;
    struct _NSRange _overflowRange;
    NSMenu *_overflowMenu;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (int)cellCount;
- (void)point:(struct _NSPoint)fp8 toRow:(int *)fp16 column:(int *)fp20;
- (int)indexForPoint:(struct _NSPoint)fp8;
- (int)indexForCellX:(int)fp8 y:(int)fp12;
- (struct _NSRect)cellsUnderRect:(struct _NSRect)fp8;
- (struct _NSPoint)cellAddressForIndex:(int)fp8;
- (struct _NSRect)cellRectForIndex:(int)fp8;
- (struct _NSRect)imageRectForIndex:(int)fp8;
- (BOOL)isFlipped;
- (struct _NSRect)calculateLayout:(struct _NSRect)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)createOverflowMenu;
- (void)overflowItemAction:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)tile;
- (id)overflowMenu;
- (void)setOverflowMenu:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;
- (id)faceInfos;
- (void)setFaceInfos:(id)fp8;

@end

@interface IPPeopleNamingFooterView : NSView <IPCompletionMenuDelegate>
{
    NSButton *doneNamingButton;
    IPStretchableImage *_background;
    IPPeopleNaming *_controller;
    IPStretchableImage *_nameArea;
    IPStretchableImage *_nameAreaDisabled;
    IPStretchableImage *_nameAreaPressed;
    BOOL _nameAreaEnabled;
    BOOL _hiliteButton;
    struct _NSRect _nameAreaRect;
    struct _NSRect _nameRect;
    struct _NSRect _buttonRect;
    NSString *_name;
    int _faceKey;
    PersonCompletionMenuCell *_personCell;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setFrame:(struct _NSRect)fp8;
- (void)completionMenuStoreValue:(id)fp8;
- (id)completionMenu:(id)fp8 completionsForString:(id)fp12;
- (void)completionMenu:(id)fp8 willDisplayCell:(id)fp12 forItem:(id)fp16 atIndex:(int)fp20;
- (id)completionMenu:(id)fp8 cellForItem:(id)fp12 atIndex:(int)fp16;
- (float)completionMenu:(id)fp8 heightForItem:(id)fp12 atIndex:(int)fp16;
- (void)showCompletionMenuOverRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)doneNamingAction:(id)fp8;
- (void)enableNameButton:(BOOL)fp8;
- (int)faceKey;
- (void)setFaceKey:(int)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)controller;
- (void)setController:(id)fp8;

@end

@interface IPPeopleNaming : NSObject
{
    IPPeopleNamingView *_faceView;
    IPPeopleNamingHeaderView *_headerView;
    IPPeopleNamingFooterView *_footerView;
    IPPeopleNamingUnnamedTrayView *_unnamedTrayView;
    IPPeopleNamingNamedTrayView *_namedTrayView;
    NSIndexSet *_eventKeys;
    NSIndexSet *_faceKeys;
    NSIndexSet *_photoKeys;
    ImageDB *_db;
    int _returnPoint;
    NSString *_limitImageKeyStr;
    BOOL _setup;
    int _mode;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)groupUnnamedSingles:(id)fp8;
- (void)addIgnoreOption:(id)fp8;
- (void)populateWithEvents:(id)fp8 db:(id)fp12 returnPoint:(int)fp16;
- (void)populateWithFaces:(id)fp8 photoKeys:(id)fp12 db:(id)fp16 returnPoint:(int)fp20;
- (void)refreshSetup;
- (void)unnamedTraySelectionChanged:(id)fp8;
- (void)mainTraySelectionChanged:(id)fp8;
- (void)namedTrayCellHit:(id)fp8;
- (int)name:(id)fp8 faceKey:(int)fp12;
- (void)done;
- (int)unnamedGroupCount;
- (int)shownUnnamedFaceCount;
- (int)mode;
- (void)setMode:(int)fp8;
- (BOOL)setup;
- (void)setSetup:(BOOL)fp8;
- (id)limitImageKeyStr;
- (void)setLimitImageKeyStr:(id)fp8;
- (int)returnPoint;
- (void)setReturnPoint:(int)fp8;
- (id)db;
- (void)setDb:(id)fp8;
- (id)photoKeys;
- (void)setPhotoKeys:(id)fp8;
- (id)faceKeys;
- (void)setFaceKeys:(id)fp8;
- (id)eventKeys;
- (void)setEventKeys:(id)fp8;

@end

@interface HUDTableView : NSTableView
{
}

- (BOOL)acceptsFirstMouse:(id)fp8;

@end

@interface IPPeopleFlipInfo : IPViewFlip
{
    IPPeopleView *mPeopleView;
    int mFaceKey;
    ImageDB *mImageDB;
    struct IPRoll *_currentEvent;
    ImageDB *_db;
    unsigned int _key;
    NSImageView *_frontImage;
    NSView *_infoView;
    NSImageView *_bgImageView;
    NSButton *_closeButton;
    struct _NSRect _closeButtonRect;
    id _showHideButton;
    id _doneButton;
    id _dateRange;
    id _photoCount;
    id _personNickname;
    id _personEmail;
    id _personFullName;
    IPFlipTileView *mKeyPhotoView;
}

- (void)setPeopleView:(id)fp8;
- (struct IPPhotoInfo *)currentPhoto;
- (struct _NSSize)size;
- (void)awakeFromNib;
- (id)currentUndoDictionary;
- (void)takeUndoValuesFromDictionary:(id)fp8;
- (void)commitChanges;
- (void)updatUIForCurrentInfo;
- (int)faceKey;
- (void)showForPersonInfo:(CDAnonymousStruct21 *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36 withListState:(int)fp52 parentViewGlobalRect:(struct _NSRect)fp56;
- (void)updateForPersonInfo:(CDAnonymousStruct21 *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36 withListState:(int)fp52;
- (void)refreshPanelForUpdatedPersonInfo:(CDAnonymousStruct21 *)fp8;
- (void)_updateDoneButton;
- (void)_updateMapButton:(BOOL)fp8;
- (void)_showSkimmedPhotoLocation:(id)fp8;
- (void)closeWithSave:(BOOL)fp8;
- (void)dealloc;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)previous:(id)fp8;
- (void)next:(id)fp8;

@end

@interface IPThumbFactory : NSObject
{
    float _cellWidth;
    float _cellHeight;
    float _imageWidth;
    float _imageHeight;
    float _topPad;
    float _bottomPad;
    float _leftPad;
    float _rightPad;
    ThumbnailManager *_thumbnailManager;
    NSColor *_backgroundColor;
    int _cachedFrameCount;
    struct CGImage **_cachedFrames;
    struct RenderCache *_thumbnailCache;
}

- (id)init;
- (void)dealloc;
- (void)setCacheSize:(int)fp8;
- (void)setCacheHold:(BOOL)fp8;
- (void)setCellSize:(struct _NSSize)fp8 padding:(struct _NSRect)fp16;
- (void)setThumbnailManager:(id)fp8;
- (void)setBackgroundColor:(id)fp8;
- (void)resetCachedFrames;
- (void)ensureCachedFrames;
- (struct CGImage *)makeImageForPhoto:(struct IPPhotoInfo *)fp8;
- (struct CGImage *)createCGImageFromData:(const void *)fp8 dataSize:(int)fp12 pixels:(int)fp16;
- (void)drawVerticalGradientInRect:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28;
- (float)rightPad;
- (float)leftPad;
- (float)bottomPad;
- (float)topPad;
- (float)imageHeight;
- (float)imageWidth;
- (float)cellHeight;
- (float)cellWidth;

@end

@interface IPThumbFactoryPeople : IPThumbFactory
{
    IPStretchableImage *peopleUnselectedFrame;
}

- (void)dealloc;
- (struct CGImage *)createFrameSelected:(BOOL)fp8 hover:(BOOL)fp12;
- (void)ensureCachedFrames;
- (struct CGImage *)makeImageForPhoto:(struct IPPhotoInfo *)fp8 zoomAndTrim:(BOOL)fp12 lowRes:(BOOL)fp16 selected:(BOOL)fp20 hover:(BOOL)fp24 forOverview:(BOOL)fp28 forDrag:(BOOL)fp32 faceIndex:(int)fp36 nameBarHeight:(float)fp40;

@end

@interface IPThumbFactoryPeopleNamedTray : IPThumbFactory
{
}

- (struct CGImage *)createFrameHilited:(BOOL)fp8;
- (void)ensureCachedFrames;
- (struct CGImage *)makeImageForPhoto:(struct IPPhotoInfo *)fp8 lowRes:(BOOL)fp12 hilited:(BOOL)fp16 faceIndex:(int)fp20;

@end

@interface IPThumbFactoryPeopleNaming : IPThumbFactory
{
    IPStretchableImage *_unchecked;
    IPStretchableImage *_checked;
    IPStretchableImage *_uncheckedHilited;
    IPStretchableImage *_checkedHilited;
    IPStretchableImage *_mask;
    IPStretchableImage *_stroke;
}

- (id)init;
- (void)dealloc;
- (struct CGImage *)createFrameSelected:(BOOL)fp8 hover:(BOOL)fp12;
- (void)ensureCachedFrames;
- (struct CGImage *)makeImageForPhoto:(struct IPPhotoInfo *)fp8 lowRes:(BOOL)fp12 selected:(BOOL)fp16 hover:(BOOL)fp20 faceIndex:(int)fp24;

@end

@interface IPThumbFactoryPeopleUnnamedTray : IPThumbFactory
{
}

- (struct CGImage *)createFrameSelected:(BOOL)fp8;
- (void)ensureCachedFrames;
- (struct CGImage *)makeImageForPhoto:(struct IPPhotoInfo *)fp8 lowRes:(BOOL)fp12 selected:(BOOL)fp16 faceIndex:(int)fp20;

@end

@interface IPFlipTileView : NSView
{
    int mFaceKey;
    ImageDB *mImageDB;
    IPPeopleView *mPeopleView;
    unsigned int mPhotoKey;
    int mFaceIndex;
    struct CGImage *mUnselectedFrameImage;
    struct CGImage *mCurrentImage;
    int mTrackingTag;
    BOOL mInside;
    NSDictionary *_textAttributes;
    NSAttributedString *_clickText;
    IPStretchableImage *mBevel;
}

- (BOOL)acceptsFirstResponder;
- (int)faceIndexForKeyPhoto;
- (void)updateSkim;
- (void)mouseDown:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)dealloc;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)isFlipped;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setPersonKey:(int)fp8 inPeopleView:(id)fp12 inDB:(id)fp16;
- (void)clear;
- (void)resetTrackingRect;
- (void)setFrame:(struct _NSRect)fp8;
- (struct CGImage *)currentImage;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMapElementHUDTableView : HUDTableView
{
    LocationLookup *_locationLookup;
    LocationCompletionMenu *_locationCompletion;
    NSWindow *_locationCompletionWindow;
    BOOL _autocompleteEnabled;
}

- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;
- (void)textDidBeginEditing:(id)fp8;
- (void)textDidChange:(id)fp8;
- (void)textDidEndEditing:(id)fp8;
- (void)completionMenuShouldHide:(id)fp8;
- (id)completionMenu;

@end

@interface NSMutableData (iPhotoExtensions)
- (void)swapLittleToHostDouble;
@end

@interface PersonCompletionMenuView : NSView <NSCopying>
{
    PersonCompletionMenuCell *_cell;
    ImageDB *_db;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseUp:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;
- (id)cell;
- (void)setCell:(id)fp8;

@end

@interface IPFaceUpgradeView : NSView <IPViewControllerMainViewProtocol>
{
    NSTextField *headerText1;
    NSTextField *headerText2;
    NSTextField *resumeText;
    NSView *image;
    NSProgressIndicator *progressBar;
    NSTextField *progressText;
    StretchableImageButton *toggleButton;
    struct CGImage *_sampleFace;
    struct IPFileImage *_sampleFaceFileImage;
    IPStretchableImage *_shadow;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)_reflectCGImage:(struct CGImage *)fp8 fromRect:(struct _NSRect)fp12 toRect:(struct _NSRect)fp28;
- (void)drawRect:(struct _NSRect)fp8;
- (void)updatePauseButton:(BOOL)fp8;
- (void)toggleButtonAction:(id)fp8;
- (void)_detectOnUpgradeProgress:(id)fp8;
- (void)hideUserHiddenPhotos:(id)fp8;
- (void)addSelectedPhotosToShelf:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)getPeopleCount:(int *)fp8 selectionCount:(int *)fp12;
- (void)viewWillBeInstalled;
- (void)viewWillBeRemoved;
- (void)viewWasInstalled;
- (void)viewWasRemoved;
- (void)paste:(id)fp8;
- (BOOL)hasSelection;
- (struct IPSelectionList *)retrieveSelection;
- (void)installSelection:(struct IPSelectionList *)fp8;
- (void)currentAlbumWillSwitch:(id)fp8;
- (float)sizeIncrement;
- (void)setSizeIncrement:(float)fp8;

@end

@interface FaceInfo : NSObject <NSCopying>
{
    unsigned int _faceKey;
    unsigned int _keyImageKey;
    unsigned int _keyFaceIndex;
    unsigned int _memberFaceCount;
    NSString *_name;
    NSMutableArray *_memberFaces;
    NSMutableIndexSet *_selectedMembers;
    NSMutableIndexSet *_faceKeySet;
    float _score;
}

- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (int)selectedCount;
- (void)deselectAllMembers;
- (void)selectAllMembers;
- (void)selectMember:(unsigned int)fp8;
- (void)deselectMember:(unsigned int)fp8;
- (void)selectMembers:(id)fp8;
- (void)deselectMembers:(id)fp8;
- (BOOL)isMemberSelected:(unsigned int)fp8;
- (void)removeSelectedMembers;
- (int)sortMemberCountDescending:(id)fp8;
- (id)description;
- (float)score;
- (void)setScore:(float)fp8;
- (id)faceKeySet;
- (void)setFaceKeySet:(id)fp8;
- (id)selectedMembers;
- (void)setSelectedMembers:(id)fp8;
- (id)memberFaces;
- (void)setMemberFaces:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (unsigned int)memberFaceCount;
- (void)setMemberFaceCount:(unsigned int)fp8;
- (unsigned int)keyFaceIndex;
- (void)setKeyFaceIndex:(unsigned int)fp8;
- (unsigned int)keyImageKey;
- (void)setKeyImageKey:(unsigned int)fp8;
- (unsigned int)faceKey;
- (void)setFaceKey:(unsigned int)fp8;

@end

@interface BookSharpeningAttributes : NSObject
{
    NSMutableDictionary *mProductAttributes;
}

- (id)initWithURL:(id)fp8;
- (id)attributesForProduct:(id)fp8;
- (id)falloffForProduct:(id)fp8 inside:(BOOL)fp12;
- (id)sharpnessForProduct:(id)fp8 inside:(BOOL)fp12;
- (id)edgeScaleForProduct:(id)fp8 inside:(BOOL)fp12;
- (void)dealloc;

@end

@interface FileImportSpec : ImportSpec
{
    NSMutableArray *mFileContents;
    NSMutableArray *mDirContents;
    NSDictionary *mAttributes;
}

+ (id)fileArrayWithImportSpecArray:(id)fp8;
+ (id)importSpecArrayWithFileArray:(id)fp8 shouldDelete:(BOOL)fp12;
+ (id)importSpecArrayWithFileArray:(id)fp8;
+ (id)importSpecWithFile:(id)fp8;
+ (id)importSpecWithFile:(id)fp8 shouldDelete:(BOOL)fp12;
+ (BOOL)isPath:(id)fp8 inHierarchy:(id)fp12;
- (id)init;
- (void)dealloc;
- (id)fileContents;
- (id)dirContents;
- (unsigned long)countContents;
- (id)creationDate;
- (id)attributes;
- (void)setAttributes:(id)fp8;
- (BOOL)deleteIfNeeded;
- (void)_stopSession:(id)fp8;

@end

@interface NSAttributedString (iPhotoExtensions)
+ (id)attributedString:(id)fp8 font:(id)fp12 fontColor:(id)fp16 alignment:(unsigned int)fp20;
@end

@interface IPPhotoFlip : IPMapViewFlip
{
    struct IPPhotoList *_photoList;
    PhotoViewer *_photoViewer;
    ImageDB *_db;
    unsigned int _key;
    NSView *_infoView;
    NSImageView *_frontImage;
    NSImageView *_bgImageView;
    id _doneButton;
    IPFlipPhotoView *_flipPhotoView;
    StarRatingControl *_starRating;
    NSBox *_magicLine;
    id _title;
    id _date;
    id _location;
    id _description;
    id _map;
    id _checkboxBox;
    id _nameCheckbox;
    id _ratingCheckbox;
    id _locationCheckbox;
    id _descriptionCheckbox;
}

- (void)setPhotoViewer:(id)fp8;
- (void)_updateDoneButton;
- (void)setSinglePlaceHolderText;
- (void)setMultiPlaceHolderText;
- (void)awakeFromNib;
- (id)locationTextField;
- (id)parseField;
- (id)currentDB;
- (unsigned int)currentKey;
- (int)locationCompletionType;
- (struct IPPhotoList *)photosForLocationCompletion;
- (id)currentUndoDictionary;
- (void)takeUndoValuesFromDictionary:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (void)textDidBeginEditing:(id)fp8;
- (void)ratingChanged;
- (struct _NSSize)size;
- (void)commitChanges;
- (void)updateUI;
- (void)populateUI;
- (void)showForPhotoList:(struct IPPhotoList *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36 withListState:(int)fp52 parentViewGlobalRect:(struct _NSRect)fp56;
- (void)updateForPhotoList:(struct IPPhotoList *)fp8 inDB:(id)fp12 withImage:(id)fp16 startAtGlobalRect:(struct _NSRect)fp20 endingAtGlobalRect:(struct _NSRect)fp36 withListState:(int)fp52;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)next:(id)fp8;
- (void)previous:(id)fp8;
- (void)closeWithSave:(BOOL)fp8;

@end

@interface HUDTabControlCell : NSSegmentedCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawSegment:(int)fp8 inFrame:(struct _NSRect)fp12 withView:(id)fp28;
- (void)drawLabel:(id)fp8 inSegmentFrame:(struct _NSRect)fp12 highlighted:(BOOL)fp28;

@end

@interface HUDTabControl : NSSegmentedControl
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)resetCursorRects;

@end

@interface IPMapRegionLabel : NSObject
{
    int mIdentifier;
    NSString *mName;
    double mLatitude;
    double mMercLatitude;
    double mLongitude;
    double mMercLongitude;
    int mDrawingBehavior;
    IPMapRegion *mMapRegion;
    struct CGPath *mDrawPath;
    struct CGRect mBoundingBox;
    NSLock *mDataLock;
}

- (id)initWithIdentifier:(int)fp8 defaultName:(id)fp12 latitude:(double)fp16 longitude:(double)fp24 drawingBehavior:(int)fp32;
- (id)defaultName;
- (double)latitude;
- (double)mercatorLatitude;
- (double)longitude;
- (double)mercatorLongitude;
- (struct _NSRect)bounds;
- (BOOL)hasRegion;
- (void)setMapRegion:(id)fp8;
- (void)drawTextInContext:(struct CGContext *)fp8 usingStyle:(id)fp12 forElement:(id)fp16 distanceScale:(float)fp20 viewScale:(float)fp24 resolution:(int)fp28;
- (void)clearDrawPath;
- (id)description;
- (void)dealloc;

@end

@interface IPMarimbaHUDView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface HUDDivider : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface NSDateFormatter (Additions)
- (id)friendlyStringFromDate:(id)fp8;
@end

@interface IPSimilarFace : NSObject
{
    int _imageKey;
    int _faceIndex;
    int _faceKey;
    float _score;
    BOOL _ignored;
}

- (id)description;
- (BOOL)ignored;
- (void)setIgnored:(BOOL)fp8;
- (float)score;
- (void)setScore:(float)fp8;
- (int)faceKey;
- (void)setFaceKey:(int)fp8;
- (int)faceIndex;
- (void)setFaceIndex:(int)fp8;
- (int)imageKey;
- (void)setImageKey:(int)fp8;

@end

@interface IPMarimbaTableViewCell : NSTextFieldCell
{
    NSString *_name;
    NSImage *_icon;
    double _duration;
}

+ (void)drawGradient:(struct _NSRect)fp8 startColor:(id)fp24 endColor:(id)fp28 context:(struct CGContext *)fp32;
- (struct _NSRect)expansionFrameWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawWithExpansionFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawCellWithFrame:(struct _NSRect)fp8 inView:(id)fp24 fullString:(BOOL)fp28 showTime:(BOOL)fp32;
- (id)_truncateString:(id)fp8 toWidth:(float)fp12;

@end

@interface HUDScrollbar : NSScroller
{
}

+ (float)scrollerWidth;
+ (float)scrollerWidthForControlSize:(unsigned int)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawKnob;
- (void)setDoubleValue:(double)fp8;
- (struct _NSRect)rectForPart:(unsigned int)fp8;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (void)drawArrow:(unsigned int)fp8 highlight:(BOOL)fp12;
- (void)drawUpperCap;
- (BOOL)arrowsAreTogether;
- (BOOL)isVertical;

@end

@interface IPMarimbaBackgroundView : NSView
{
    NSColor *_color;
}

- (void)dealloc;
- (id)color;
- (void)setColor:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface HUDStepperCell : NSStepperCell
{
    id _mouseUpTarget;
    SEL _mouseUpSelector;
}

- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)mouseUpTarget;
- (void)setMouseUpTarget:(id)fp8;
- (SEL)mouseUpSelector;
- (void)setMouseUpSelector:(SEL)fp8;
- (void)stopTracking:(struct _NSPoint)fp8 at:(struct _NSPoint)fp16 inView:(id)fp24 mouseIsUp:(BOOL)fp28;

@end

@interface HUDStepper : NSStepper
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface HUDSearchFieldCell : NSSearchFieldCell
{
}

- (id)setUpFieldEditorAttributes:(id)fp8;
- (struct _NSRect)cancelButtonRectForBounds:(struct _NSRect)fp8;

@end

@interface HUDSearchField : NSSearchField
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface HUDBeveledTextFieldCell : NSTextFieldCell
{
}

- (id)setUpFieldEditorAttributes:(id)fp8;

@end

@interface HUDBeveledTextField : NSTextField
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPFlipPhotoView : NSView
{
    struct IPPhotoList *_photoList;
    IPPhotoFlip *_flip;
    int mIndex;
    ImageDB *mImageDB;
    struct CGImage *mCurrentImage;
    int mTrackingTag;
    BOOL mInside;
}

- (BOOL)acceptsFirstResponder;
- (void)updateSkim;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (BOOL)isFlipped;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setPhotoList:(struct IPPhotoList *)fp8 db:(id)fp12 forPhotoFlipView:(id)fp16;
- (struct IPPhotoInfo *)currentPhoto;
- (void)resetTrackingRect;
- (void)setFrame:(struct _NSRect)fp8;
- (struct CGImage *)currentImage;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaHUDPanel : NSPanel
{
    BOOL forceDisplay;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)awakeFromNib;
- (void)addCloseWidget;
- (void)dealloc;
- (void)windowDidResize:(id)fp8;
- (void)setFrame:(struct _NSRect)fp8 display:(BOOL)fp24 animate:(BOOL)fp28;
- (id)sizedHUDBackground;
- (void)setTitle:(id)fp8;
- (BOOL)canBecomeKeyWindow;

@end

@interface LocationManagerController : NSObject
{
    NSPanel *mPanel;
    NSSearchField *mSearchField;
    GoogleMapWebView *mMapView;
    LocationMapOverlay *mMapOverlay;
    NSSegmentedControl *mListModeControl;
    NSTableView *mResultsTable;
    NSSlider *mZoomSlider;
    id mMapTypeStreetButton;
    id mMapTypeSatelliteButton;
    id mMapTypeTerrainButton;
    NSButton *mAddMarkerButton;
    NSButton *mDoneButton;
    NSButton *mCancelButton;
    NSProgressIndicator *mSearchSpinner;
    NSButton *mTerrainButton;
    NSButton *mHybridButton;
    NSButton *mSatelliteButton;
    NSTextField *mFieldEditor;
    LocationLookup *mLocationLookup;
    LocationData *mLocationData;
    NSMutableArray *mSavedLocations;
    NSMutableArray *mFilteredSavedLocations;
    NSMutableArray *mSearchResults;
    LocationSearchResult *mSelectedResult;
    LocationSearchResult *mDefaultResult;
    float mRegionRadius;
    id mSheetDelegate;
    ImageDB *mImageDB;
    BOOL mSearchInProgress;
    NSLock *mSearchLock;
}

+ (id)sharedController;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)showSheetInWindow:(id)fp8 withSearchString:(id)fp12 delegate:(id)fp16 contextInfo:(void *)fp20;
- (void)showSheetInWindow:(id)fp8 withUserPlace:(unsigned int)fp12 delegate:(id)fp16 contextInfo:(void *)fp20;
- (id)selectedLocation;
- (void)setDefaultLocation:(id)fp8;
- (void)showGoogleSearchTab;
- (void)showSavedLocationsTab;
- (BOOL)isShowingSavedLocations;
- (id)displayedResults;
- (void)setImageDB:(id)fp8;
- (id)imageDB;
- (void)setOKButtonLabel:(id)fp8;
- (void)performSearch:(id)fp8;
- (void)setZoom:(id)fp8;
- (void)addCustomMarker:(id)fp8;
- (void)changeListMode:(id)fp8;
- (void)okButtonAction:(id)fp8;
- (void)cancelButtonAction:(id)fp8;
- (void)locationInfoCellButtonClicked:(id)fp8;
- (void)useTerrain:(id)fp8;
- (void)useHybrid:(id)fp8;
- (void)useSatellite:(id)fp8;
- (void)startSearch:(id)fp8;
- (void)searchComplete:(id)fp8;
- (void)newLocationDataReceived:(id)fp8;
- (void)selectedMapMarkerDidChange:(id)fp8;
- (void)markerWasMoved:(id)fp8;
- (void)refreshMarkers;
- (void)zoomToMarkerAtIndex:(unsigned int)fp8;
- (void)zoomToHome;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)loadSavedUserLocations:(id)fp8;
- (struct SqUserPlace *)createUserPlaceForLocationSearchResult:(id)fp8;
- (BOOL)removeUserPlaceForLocationSearchResult:(id)fp8;
- (id)placeDictionaryForSqUserPlace:(struct SqUserPlace *)fp8;
- (id)geoHierarchyForSqUserPlace:(struct SqUserPlace *)fp8;
- (void)setName:(id)fp8 forLocationSearchResult:(id)fp12;
- (void)setDescription:(id)fp8 forLocationSearchResult:(id)fp12;
- (void)setLatitude:(float)fp8 longitude:(float)fp12 radius:(float)fp16 forLocationSearchResult:(id)fp20;
- (void)setGeoHierarchy:(id)fp8 forLocationSearchResult:(id)fp12;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (id)tableView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 row:(int)fp24 mouseLocation:(struct _NSPoint)fp28;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)tableView:(id)fp8 shouldTrackCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableView:(id)fp8 removeItemAtRow:(int)fp12;
- (void)tableViewEmptyMessageClicked:(id)fp8;
- (void)showFieldEditorForLocationAtIndex:(unsigned int)fp8;
- (void)hideFieldEditor;
- (BOOL)isShowingFieldEditor;
- (void)controlTextDidEndEditing:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (void)refilterSavedLocations;
- (void)_pageLoadedTimer:(id)fp8;
- (void)_startPageLoadedTimer;
- (void)_hostStatusNotification:(id)fp8;
- (void)mapOverlayFrameChanged:(id)fp8;
- (void)updateStatus;
- (void)mapTypeChanged;
- (void)syncZoomSlider;

@end

@interface IPMapElementTitle : NSObject
{
    int mTitlePosition;
    NSString *mTitleString;
    NSFont *mFont;
    struct CGPath *mDrawPath;
}

- (id)init;
- (void)drawInContext:(struct CGContext *)fp8 forElement:(id)fp12 withStyle:(id)fp16 scale:(float)fp20 resolution:(int)fp24;
- (void)_determinePositionForTitleInElement:(id)fp8 withInset:(struct _NSPoint)fp12;
- (id)font;
- (void)setFont:(id)fp8;
- (void)setTitleString:(id)fp8;
- (void)dealloc;

@end

@interface IPTextOverlayBackground : NSView
{
    IPMarimbaTextEditor *_editor;
    struct _NSRect _borderRect;
}

- (BOOL)mouseDownCanMoveWindow;
- (void)setEditor:(id)fp8;
- (void)setBorder:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;

@end

@interface IPTextOverlayLayoutManager : NSLayoutManager
{
}

- (struct _NSRect)extraLineFragmentRect;
- (struct _NSRect)extraLineFragmentUsedRect;

@end

@interface IPTextOverlayView : NSTextView
{
    IPMarimbaTextEditor *_editor;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setEditor:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;

@end

@interface IPMarimbaTextEditor : NSWindow
{
    MPText *_editedText;
    IPTextOverlayView *_textView;
    IPMarimbaView *_editedView;
    IPTextOverlayBackground *_backgroundView;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)setEditedView:(id)fp8;
- (void)textDidChange:(id)fp8;
- (struct _NSRect)currentRectForEditedText;
- (id)editedText;
- (void)setEditedText:(id)fp8 withFrame:(struct _NSRect)fp12;
- (void)resizeString:(id)fp8 withFactor:(double)fp12;
- (void)keyDown:(id)fp8;
- (void)endTextEditing;
- (BOOL)canBecomeMainWindow;
- (BOOL)isExcludedFromWindowsMenu;
- (BOOL)canBecomeKeyWindow;

@end

@interface IPMarimbaSettingsTabControlCell : NSSegmentedCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawSegment:(int)fp8 inFrame:(struct _NSRect)fp12 withView:(id)fp28;
- (void)drawLabel:(id)fp8 inSegmentFrame:(struct _NSRect)fp12 highlighted:(BOOL)fp28;

@end

@interface IPMarimbaSettingsTabControl : NSSegmentedControl
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)resetCursorRects;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface HUDRadioButtonCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface HUDSwitchButtonCell : NSButtonCell
{
}

- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface HUDSwitchButton : NSButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaFilterView : NSView
{
    NSImage *_cachedImage;
    SEL _selector;
    id _target;
    int _selectedFilter;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setFilteredImage:(id)fp8;
- (void)dealloc;
- (void)_buildCachedImageWithImage:(id)fp8;
- (id)antiqueFilterWithCIImage:(id)fp8 level:(int)fp12;
- (void)_drawString:(id)fp8 inRect:(struct _NSRect)fp12;
- (struct _NSRect)_createSquareImageRectForBounds:(struct _NSRect)fp8 withSize:(struct _NSSize)fp24;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (int)selectedFilter;
- (void)setSelectedFilter:(int)fp8;

@end

@interface IPMapElementMarkerEditor : NSTextField
{
    IPMapElementMarker *mMarker;
    int mPosition;
}

- (id)initWithFrame:(struct _NSRect)fp8 forMarker:(id)fp24 withFont:(id)fp28 position:(int)fp32;

@end

@interface LocationSearchResult : NSObject
{
    NSMutableDictionary *mPlaceDictionary;
    GeoHierarchy *mGeoHierarchy;
    unsigned int mSqUserPlaceKey;
}

+ (id)searchResultWithPlaceDictionary:(id)fp8;
+ (id)searchResultWithPlaceDictionary:(id)fp8 geoHierarchy:(id)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (id)locationName;
- (id)locationDescription;
- (BOOL)matchesString:(id)fp8;
- (void)setPlaceDictionary:(id)fp8;
- (id)placeDictionary;
- (void)setGeoHierarchy:(id)fp8;
- (id)geoHierarchy;
- (void)setSqUserPlaceKey:(unsigned int)fp8;
- (unsigned int)sqUserPlaceKey;
- (int)locationNameCaseInsensitiveCompare:(id)fp8;

@end

@interface IPMarimbaSlider : NSSlider
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;
- (BOOL)allowsTickMarkValuesOnly;

@end

@interface IPMarimbaSliderCell : NSSliderCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawBarInside:(struct _NSRect)fp8 flipped:(BOOL)fp24;
- (void)drawKnob:(struct _NSRect)fp8;

@end

@interface ClickThroughImageView : NSImageView
{
}

- (BOOL)acceptsFirstResponder;

@end

@interface LocationSegmentedCell : NSSegmentedCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawSegment:(int)fp8 inFrame:(struct _NSRect)fp12 withView:(id)fp28;

@end

@interface LocationSegmentedControl : NSSegmentedControl
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TestingNibs : NSObject
{
    NSString *_baseDir;
}

+ (id)singleton;
- (id)init;
- (void)loadHiddenPrefsWithOwner:(id)fp8;
- (void)loadDebugReportWithOwner:(id)fp8;
- (void)loadPeopleViewNamingWithOwner:(id)fp8;
- (id)baseDir;
- (void)setBaseDir:(id)fp8;

@end

@interface IPMapViewFlip : IPViewFlip
{
    LocationData *mLocationData;
    LocationCompletionMenu *_locationCompletion;
    NSWindow *_locationCompletionWindow;
    NSLock *_searchLock;
    NSMutableArray *_searchResults;
    NSDictionary *_selectedResult;
    NSMutableArray *_optionalSearchPoints;
    struct _NSPoint _centerPoint;
    BOOL _searchInProgress;
    NSView *_placeholderMap;
    NSSearchField *_searchField;
    NSPopUpButton *_searchResultsPopup;
    NSProgressIndicator *_searchSpinner;
    LocationMapOverlay *_locationMapOverlay;
    GoogleMapWebView *_locationMapView;
    NSButton *_locationClearButton;
    id _plusButton;
    id _minusButton;
    id _placesLabel;
    id _placesButton;
    id _terrainButton;
    id _hybridButton;
    id _satelliteButton;
    BOOL mMapNeedsData;
    struct _NSRect mMapCorners;
}

- (id)locationTextField;
- (id)parseField;
- (id)currentDB;
- (unsigned int)currentKey;
- (int)locationCompletionType;
- (struct IPPhotoList *)photosForLocationCompletion;
- (void)awakeFromNib;
- (void)initializeWebState;
- (void)mapLoaded:(id)fp8;
- (void)_showSkimmedPhotoLocation:(id)fp8;
- (void)switchToPlaces:(id)fp8;
- (void)zoomOutClicked:(id)fp8;
- (void)zoomInClicked:(id)fp8;
- (void)useTerrain:(id)fp8;
- (void)useHybrid:(id)fp8;
- (void)useSatellite:(id)fp8;
- (void)showPlacesClicked;
- (void)animationOutCompleted;
- (void)animationCompleted;
- (BOOL)busyWithCompletion;
- (void)updateCompletion;
- (void)updateForLocation:(BOOL)fp8;
- (BOOL)addPlacesToMap:(id)fp8 manuallyAssigned:(BOOL)fp12;
- (BOOL)markLocationsFromPhotoList:(struct IPPhotoList *)fp8;
- (BOOL)markLocationFromEvent:(struct IPRoll *)fp8;
- (void)dealloc;
- (void)downArrowForTextField:(id)fp8;
- (void)clearLocation:(id)fp8;
- (BOOL)control:(id)fp8 textShouldEndEditing:(id)fp12;
- (void)controlTextDidEndEditing:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (void)completionMenuShouldHide:(id)fp8;
- (void)updateFromLocationChange:(id)fp8;
- (void)closeWithSave:(BOOL)fp8;

@end

@interface ExportColumn : NSButton
{
    NSButton *m_button1;
    NSButton *m_button2;
    NSButton *m_button4;
    NSButton *m_button8;
}

- (BOOL)sendAction:(SEL)fp8 to:(id)fp12;
- (id)initWithCoder:(id)fp8;

@end

@interface ExportColumnCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ExportDot : NSButton
{
}

- (id)hitTest:(struct _NSPoint)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface ExportDotCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ExportRow : NSButton
{
}

- (id)initWithCoder:(id)fp8;

@end

@interface ExportRowCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface NSBezierPath (RoundedRect)
+ (id)bezierPathWithRoundedRect:(struct _NSRect)fp8 radius:(float)fp24;
+ (id)bezierPathWithRoundedRect:(struct _NSRect)fp8 radius:(float)fp24 leftCap:(BOOL)fp28 rightCap:(BOOL)fp32;
+ (id)bezierPathWithRoundedCorners:(struct _NSRect)fp8 radius:(float)fp24 ul:(BOOL)fp28 ur:(BOOL)fp32 lr:(BOOL)fp36 ll:(BOOL)fp40;
+ (id)bezierPathWithSingleRoundedCorner:(struct _NSRect)fp8 radius:(float)fp24 corner:(int)fp28;
+ (id)bezierPathForStackTray:(struct _NSRect)fp8 radius:(float)fp24 tailInset:(struct _NSSize)fp28;
+ (id)bezierPathWithRoundCaps:(struct _NSRect)fp8 endCapInset:(float)fp24;
+ (id)bezierPathWithRoundCaps:(struct _NSRect)fp8 endCapInset:(float)fp24 leftCap:(BOOL)fp28 rightCap:(BOOL)fp32;
+ (id)bezierPathWithCircleAtPoint:(struct _NSPoint)fp8 radius:(float)fp16;
+ (id)bezierPathFrom:(struct _NSPoint)fp8 to:(struct _NSPoint)fp16 thickness:(float)fp24;
+ (id)bezierPathWithRect:(struct _NSRect)fp8 leftInset:(float)fp24 rightInset:(float)fp28;
+ (void)drawBezeledWell:(struct _NSRect)fp8 grayLevel:(float)fp24 radius:(float)fp28;
+ (void)drawPlaceholderInRect:(struct _NSRect)fp8 leftCap:(BOOL)fp24 rightCap:(BOOL)fp28;
- (void)appendBezierPathWithRoundedRect:(struct _NSRect)fp8 radius:(float)fp24;
@end

@interface MovieInfoButton : NSButton
{
    int m_trackingTag;
    struct _NSRect m_globalRect;
    NSString *m_infoString;
}

- (void)mouseEntered:(id)fp8;
- (void)setInfoString:(id)fp8;
- (void)removeTrackingRect;
- (void)drawRect:(struct _NSRect)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (struct _NSRect)globalFrame;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;

@end

@interface MovieInfoButtonCell : NSButtonCell
{
}

+ (void)initialize;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface MovieInfoStrip : NSView
{
    NSWindow *m_window;
    NSString *m_string;
    NSDictionary *m_attributes;
}

- (void)mouseExited:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 string:(id)fp24;
- (void)drawRect:(struct _NSRect)fp8;
- (void)dealloc;

@end

@interface NoClickImageView : NSImageView
{
}

- (id)hitTest:(struct _NSPoint)fp8;

@end

@interface TextFieldDimmableCell : NSTextFieldCell
{
}

- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface TextFieldDimmable : NSTextField
{
}

- (id)initWithCoder:(id)fp8;

@end

@interface NoClickTextField : NSTextField
{
}

- (id)hitTest:(struct _NSPoint)fp8;

@end

@interface IPMarimbaTransitionPreviewView : NSView
{
    IPMarimbaTransitionMarimbaView *_previewView;
    BOOL _isWarmingUp;
    NSRecursiveLock *_editLock;
}

- (id)initWithCoder:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setTransitionPresetID:(id)fp8 duration:(double)fp12 slide1:(id)fp20 slide2:(id)fp24;
- (void)_warmupRenderer;
- (void)_warmupRendererThread;
- (void)playThrough;
- (id)_idOfCombinedID:(id)fp8;
- (id)_presetIDOfCombinedID:(id)fp8;
- (void)cleanup;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaTransitionMarimbaView : MRMarimbaView
{
}

- (void)mouseDown:(id)fp8;

@end

@interface PersonSelectableHolder : NSObject
{
    struct IPPersonSelectable *mPerson;
    BOOL mDeleteOnDealloc;
}

+ (id)hold:(struct IPPersonSelectable *)fp8;
+ (id)hold:(struct IPPersonSelectable *)fp8 deleteOnDealloc:(BOOL)fp12;
- (id)initWithPerson:(struct IPPersonSelectable *)fp8 deleteOnDealloc:(BOOL)fp12;
- (void)dealloc;
- (struct IPPersonSelectable *)person;

@end

@interface DetectedFace : NSObject <NSCopying>
{
    FaceRecognitionInfo *_recInfo;
    int _image_key;
    int _initial_face_key;
    int _face_index;
    float _width;
    float _height;
    float _topLeftX;
    float _topLeftY;
    float _topRightX;
    float _topRightY;
    float _bottomLeftX;
    float _bottomLeftY;
    float _bottomRightX;
    float _bottomRightY;
    float _confidence;
    int _recogBufferSize;
    NSData *_recogBuffer;
    float _sharpness;
    float _dateCreated;
    float _exposureValue;
    int _histogram64BufferSize;
    NSData *_histogram64Buffer;
    int _rejected;
    int _faceCount;
    float _userX;
    float _userY;
    float _userW;
    float _userH;
    int _ignore;
    int _tile_face_position;
    float _face_angle;
    int _face_flags;
    float _face_direction_angle;
    float _face_skin_score;
    int _face_key;
    int _owner_service_key;
}

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)makeFaceRecognitionInfo;
- (int)dateCreatedSortDesc:(id)fp8;
- (int)faceKeyThenDateCreatedSort:(id)fp8;
- (int)owner_service_key;
- (void)setOwner_service_key:(int)fp8;
- (int)face_key;
- (void)setFace_key:(int)fp8;
- (float)face_skin_score;
- (void)setFace_skin_score:(float)fp8;
- (float)face_direction_angle;
- (void)setFace_direction_angle:(float)fp8;
- (int)face_flags;
- (void)setFace_flags:(int)fp8;
- (float)face_angle;
- (void)setFace_angle:(float)fp8;
- (int)tile_face_position;
- (void)setTile_face_position:(int)fp8;
- (int)ignore;
- (void)setIgnore:(int)fp8;
- (float)userH;
- (void)setUserH:(float)fp8;
- (float)userW;
- (void)setUserW:(float)fp8;
- (float)userY;
- (void)setUserY:(float)fp8;
- (float)userX;
- (void)setUserX:(float)fp8;
- (int)faceCount;
- (void)setFaceCount:(int)fp8;
- (int)rejected;
- (void)setRejected:(int)fp8;
- (id)histogram64Buffer;
- (void)setHistogram64Buffer:(id)fp8;
- (int)histogram64BufferSize;
- (void)setHistogram64BufferSize:(int)fp8;
- (float)exposureValue;
- (void)setExposureValue:(float)fp8;
- (float)dateCreated;
- (void)setDateCreated:(float)fp8;
- (float)sharpness;
- (void)setSharpness:(float)fp8;
- (id)recogBuffer;
- (void)setRecogBuffer:(id)fp8;
- (int)recogBufferSize;
- (void)setRecogBufferSize:(int)fp8;
- (float)confidence;
- (void)setConfidence:(float)fp8;
- (float)bottomRightY;
- (void)setBottomRightY:(float)fp8;
- (float)bottomRightX;
- (void)setBottomRightX:(float)fp8;
- (float)bottomLeftY;
- (void)setBottomLeftY:(float)fp8;
- (float)bottomLeftX;
- (void)setBottomLeftX:(float)fp8;
- (float)topRightY;
- (void)setTopRightY:(float)fp8;
- (float)topRightX;
- (void)setTopRightX:(float)fp8;
- (float)topLeftY;
- (void)setTopLeftY:(float)fp8;
- (float)topLeftX;
- (void)setTopLeftX:(float)fp8;
- (float)height;
- (void)setHeight:(float)fp8;
- (float)width;
- (void)setWidth:(float)fp8;
- (int)face_index;
- (void)setFace_index:(int)fp8;
- (int)initial_face_key;
- (void)setInitial_face_key:(int)fp8;
- (int)image_key;
- (void)setImage_key:(int)fp8;

@end

@interface DetectedFaceCache : NSObject
{
    struct map<UInt64, objc_object*, std::less<UInt64>, std::allocator<std::pair<const UInt64, objc_object*>>> *_cacheMap;
    NSMutableArray *_cache;
    NSMutableArray *_localCache;
    NSLock *_localCopyLock;
    ImageDB *_db;
    NewFaceDetector *_faceDetector;
    IPPersonCache *_personCache;
}

- (id)init;
- (void)dealloc;
- (void)setupLocalCache:(BOOL)fp8;
- (id)addDetectedFace:(id)fp8;
- (id)getDetectedFaceForImage:(int)fp8 faceIndex:(int)fp12;
- (void)removeDetectedFaceForImage:(int)fp8 faceIndex:(int)fp12;
- (void)removeDetectedFace:(id)fp8;
- (void)changeFaceKey:(int)fp8 toFaceKey:(int)fp12 updateInitialFaceKey:(BOOL)fp16;
- (void)removeDetectedFacesForImage:(int)fp8;
- (void)clearFaceKeyForImage:(int)fp8;
- (BOOL)haveUnignoredPeopleWithFaceKey:(int)fp8;
- (id)mostRecentDetectedFacesForFaceKey:(int)fp8 maxCount:(int)fp12;
- (id)faceRecognitionInfoOrderedByFaceKeyThenDate:(id)fp8;
- (id)faceRecognitionInfoForInitialFaceKeyOrderedByFaceKeyThenDate:(int)fp8;
- (id)faceRecognitionInfoForPhotoKey:(int)fp8;
- (id)faceKeysIndexSetForPhotoKey:(int)fp8;
- (id)faceKeysForPhotosKeys:(id)fp8;
- (id)faceKeysForPhotosKeys:(id)fp8 named:(BOOL)fp12;
- (id)usedFaceKeys;
- (id)externalFacesWithFaceKey:(int)fp8;
- (id)haveNonExternalFacesInFaceKey:(int)fp8;
- (id)photoKeysForFaceKeys:(id)fp8;
- (id)localCache;
- (void)setLocalCache:(id)fp8;
- (id)personCache;
- (void)setPersonCache:(id)fp8;
- (id)faceDetector;
- (void)setFaceDetector:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;

@end

@interface FlipRolloverView : NSView
{
    int mTrackingRect;
    BOOL mMouseOver;
    id mControl;
}

- (void)awakeFromNib;
- (void)setFrame:(struct _NSRect)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMarimbaHUDColorPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface IPMarimbaHUDColorPopUpButtonCell : NSPopUpButtonCell
{
}

+ (void)initialize;
- (id)initWithCell:(id)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface ImageDB (Misc)
- (id)localizedNameForPlaceKey:(unsigned long)fp8 language:(id)fp12;
- (id)localizedNameForPlace:(struct SqPlace *)fp8 language:(id)fp12;
- (void)clearLocalizedNameForPlaceKey:(unsigned long)fp8 language:(id)fp12;
- (void)clearLocalizedNameForPlace:(struct SqPlace *)fp8 language:(id)fp12;
- (void)clearLocalizedNameForPlaceKey:(unsigned long)fp8;
- (void)clearLocalizedNameForPlace:(struct SqPlace *)fp8;
- (void)clearAllLocalizedNamesForPlaces;
- (struct SqUserPlace *)closestUserPlaceToLatitude:(double)fp8 longitude:(double)fp16;
- (void)_invalidateUniqueLocationCombinations;
- (int)numberOfUniqueLocationCombinations:(int)fp8;
- (void)resetNeedsLocationLookup;
@end

@interface IPMapElementRenderer : NSOperation
{
    IPMapElement *mMap;
    float mScale;
    float mKmScale;
    int mResolution;
    struct CGLayer *mLayer;
    struct CGRect mFillRect;
    BOOL hasLock;
}

- (id)initWithMapElement:(id)fp8 layer:(struct CGLayer *)fp12 scale:(float)fp16 distanceScale:(float)fp20 fillRect:(struct CGRect)fp24 resolution:(int)fp40;
- (void)main;
- (void)_postNotification:(id)fp8;
- (void)dealloc;

@end

@interface IPPerson : NSObject
{
    int _face_key;
    NSString *_name;
    NSString *_email;
    int _key_image_key;
    NSString *_full_name;
    int _similar_faces_cached;
    int _similar_faces_open;
    int _manual_order;
    NSMutableDictionary *_attrs;
    int _detail_shows_faces;
}

- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)attributeForKey:(id)fp8;
- (void)setAttribute:(id)fp8 forKey:(id)fp12;
- (int)detail_shows_faces;
- (void)setDetail_shows_faces:(int)fp8;
- (id)attrs;
- (void)setAttrs:(id)fp8;
- (int)manual_order;
- (void)setManual_order:(int)fp8;
- (int)similar_faces_open;
- (void)setSimilar_faces_open:(int)fp8;
- (int)similar_faces_cached;
- (void)setSimilar_faces_cached:(int)fp8;
- (id)full_name;
- (void)setFull_name:(id)fp8;
- (int)key_image_key;
- (void)setKey_image_key:(int)fp8;
- (id)email;
- (void)setEmail:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (int)face_key;
- (void)setFace_key:(int)fp8;

@end

@interface IPPersonCache : NSObject
{
    struct map<int, objc_object*, std::less<int>, std::allocator<std::pair<const int, objc_object*>>> *_cacheMap;
    NSMutableArray *_cache;
    NSLock *_localCopyLock;
    ImageDB *_db;
    NewFaceDetector *_faceDetector;
    DetectedFaceCache *_detectedFaceCache;
}

- (id)init;
- (void)dealloc;
- (int)count;
- (id)addPerson:(id)fp8;
- (id)getPersonForKey:(int)fp8;
- (void)removePersonForKey:(int)fp8;
- (void)removePerson:(id)fp8;
- (void)resetManualOrder;
- (void)removeUnreferencedPeople;
- (void)clearSimilarFacesCachedFlags;
- (id)filterFaceKeys:(id)fp8 named:(BOOL)fp12;
- (id)detectedFaceCache;
- (void)setDetectedFaceCache:(id)fp8;
- (id)faceDetector;
- (void)setFaceDetector:(id)fp8;
- (id)db;
- (void)setDb:(id)fp8;

@end

@interface IPNewPersonLayer : IPFaceLayer
{
    IPStretchableImage *_flagImage;
    CATextLayer *_textLayer;
}

- (id)init;
- (id)initWithLayer:(id)fp8;
- (void)dealloc;
- (void)drawInContext:(struct CGContext *)fp8;
- (void)tile;
- (id)textLayer;

@end

@interface MXStringUtils : NSObject
{
}

+ (id)localizedString:(id)fp8;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12 withAttributes:(id)fp16 ellipsisString:(id)fp20;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 withAttributes:(id)fp16 ellipsisString:(id)fp20;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 fromCenter:(BOOL)fp16 withAttributes:(id)fp20 ellipsisString:(id)fp24;
+ (struct EllipsizingDataStruct *)ellipsizingDataForString:(id)fp8 withAttributes:(id)fp12 ellipsisString:(id)fp16;
+ (void)freeEllipsizingData:(struct EllipsizingDataStruct *)fp8;
+ (id)truncateString:(id)fp8 toWidth:(float)fp12 usingData:(struct EllipsizingDataStruct *)fp16;

@end

@interface TransitionController : NSObject <IAIPPluginControllerProtocol>
{
    float mSpeed;
    int mDirection;
    float mForcedOpacity;
    int mFrameCount;
    BOOL mFillScreen;
    float mFontSize;
    NSLock *mSlidePrepThreadLock;
    id <IAIPPluginProtocol> mEffect;
    Class mCurrentPluginClass;
    id <IAIPPluginProtocol> mRenderer;
    BOOL mRendererSupportsSlideAnimation;
    IPSlideshowPlayerView *mGlView;
    struct _NSRect mGlFrameRect;
    SessionContext *mSession;
    IPSlideshowPlayerView *mSlideshowView;
    NSMutableDictionary *mRenderPlugins;
    NSMutableDictionary *mRenderPluginInfos;
    struct SlideTransformations mTransformA;
    struct SlideTransformations mTransformB;
    BOOL mDrawFaceRectA;
    BOOL mDrawFaceRectB;
    BOOL mLoadingDrawFaceRect;
    struct CGRect mFaceRectA;
    struct CGRect mFaceRectB;
    struct CGRect mLoadingFaceRect;
    struct SlideTransformations *mLoadingTransform;
    TexturedRectangle *mImageA;
    TexturedRectangle *mImageB;
    TexturedRectangle *mImageBBack;
    TexturedRectangle *mTitleImage;
    TexturedRectangle *mCaptionImageA;
    TexturedRectangle *mCaptionImageB;
    TexturedRectangle *mReverseSideTexture;
    struct _NSPoint mCaptionOffsetA;
    struct _NSPoint mCaptionOffsetB;
    struct IPPhotoInfo *mPhotoA;
    struct IPPhotoInfo *mPhotoB;
    long mIndexA;
    long mIndexB;
    Album *mLoadingAlbum;
    BOOL mPhotoBTiled;
    struct _NSRect mRenderRect;
    BOOL mThumbnailPreview;
    BOOL mIsRendering;
    double mPreviewStartTime;
    NSTimer *mPreviewTaskTimer;
    id mSlidehsowPlayerDelegate;
    IPSlideshowPlayer *mPlayer;
    long mSlideIndex;
}

+ (float)checkTextureSize:(float)fp8;
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)init;
- (void)dealloc;
- (void)setDirection:(int)fp8;
- (void)setSpeed:(float)fp8;
- (void)setZoom:(float)fp8 panX:(float)fp12 panY:(float)fp16;
- (void)setAnimatePanAndZoom:(BOOL)fp8 endZoom:(float)fp12 endPanX:(float)fp16 endPanY:(float)fp20;
- (void)setDrawFaceRect:(BOOL)fp8 withRect:(struct CGRect)fp12;
- (void)setFontSize:(float)fp8;
- (float)fontSize;
- (void)setFillScreen:(BOOL)fp8;
- (BOOL)setupSessionWithRect:(struct _NSRect)fp8 flipped:(BOOL)fp24 pixelFormat:(id)fp28 delegate:(id)fp32;
- (void)playSamplePreviewWithDelegate:(id)fp8 transitionIdentifier:(id)fp12 transitionSpeed:(float)fp16 transitionDirection:(int)fp20 inView:(id)fp24;
- (void)updateSamplePreviewWithDelegate:(id)fp8 album:(id)fp12 inView:(id)fp16;
- (void)updateSamplePreview:(struct IPPhotoList *)fp8 album:(id)fp12 inView:(id)fp16;
- (void)playSamplePreview:(struct IPPhotoList *)fp8 transitionIdentifier:(id)fp12 transitionSpeed:(float)fp16 transitionDirection:(int)fp20 album:(id)fp24 inView:(id)fp28;
- (void)finishSamplePreview;
- (void)_playPreviewTask:(id)fp8;
- (void)reloadImageA:(id)fp8;
- (void)loadPhoto:(struct IPPhotoInfo *)fp8 album:(id)fp12 threaded:(BOOL)fp16 tiled:(BOOL)fp20;
- (void)_loadImage;
- (void)captureBackSnapshotImage;
- (void)captureFrontSnapshotImage;
- (BOOL)animatingFrontImage;
- (BOOL)animatingBackImage;
- (BOOL)transitionSupportsSlideAnimation;
- (void)renderBackImage;
- (void)serviceBackAnimation:(double)fp8 duration:(double)fp16;
- (void)serviceFrontAnimation:(double)fp8 duration:(double)fp16;
- (void)renderPullTexture:(id)fp8 delegate:(id)fp12 slideIndex:(long)fp16 threaded:(BOOL)fp20;
- (void)_renderThumbnailTextureWithDelegate:(id)fp8 index:(int)fp12;
- (void)_renderPullTexture;
- (id)_loadTexture:(struct IPPhotoInfo *)fp8 album:(id)fp12 tiled:(BOOL)fp16;
- (void)prepareToRenderImage;
- (void)setForcedOpacity:(float)fp8;
- (void)renderImage;
- (void)finishRenderImage:(BOOL)fp8;
- (void)swapImages;
- (struct IPPhotoInfo *)photoA;
- (struct IPPhotoInfo *)photoB;
- (BOOL)setEffectPluginOfName:(id)fp8;
- (BOOL)setTransitionPluginOfIdentifier:(id)fp8 localName:(id)fp12 speed:(float)fp16 direction:(int)fp20 animationSupport:(BOOL)fp24;
- (BOOL)readyToRenderTransition;
- (void)prepareToRenderTransitionFrame;
- (void)finishRenderTransitionFrame:(BOOL)fp8;
- (void)renderTransitionFrame:(float)fp8 of:(float)fp12 defaultProjection:(BOOL)fp16;
- (void)finishedRenderingTransition;
- (void)applyEffect:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)prepareForRendering:(BOOL)fp8 inView:(id)fp12;
- (void)finishedRendering;
- (Class)currentPluginClass;
- (void)setCurrentPluginClass:(Class)fp8;
- (id)resources:(id)fp8;
- (BOOL)isRendering;
- (void)setIsRendering:(BOOL)fp8;
- (BOOL)isRenderingFirstFrame;
- (void)cancelRender:(id)fp8;
- (float)sineMap:(float)fp8;
- (BOOL)glRendererAccelerationAvailable;
- (unsigned int)glRendererTotalVRAM;
- (unsigned int)glRendererTextureMemory;
- (void)updateSessionRenderer;
- (void)_initRenderer;
- (void)drawTitle;
- (void)drawCaptionAWithOpacity:(float)fp8;
- (void)drawCaptionBWithOpacity:(float)fp8;
- (void)clearCaptionB;
- (void)clearTitle;
- (void)createTextureWithTitle:(id)fp8;
- (void)createTextureWithCaption:(id)fp8 atPosition:(int)fp12 withOffset:(float)fp16;
- (id)createTextureWithString:(id)fp8;
- (id)createTextureWithAttributedString:(id)fp8 ofSize:(struct _NSSize)fp12 inRect:(struct _NSRect)fp20;

@end

@interface TransitionManager : NSObject <IAPluginManagerProtocol>
{
    NSArray *mPluginSearchPaths;
    NSMutableArray *mPlugins;
}

+ (Class)_randomTransitionClass;
+ (BOOL)pluginIDIsNone:(id)fp8;
+ (BOOL)pluginIDIsRandom:(id)fp8;
+ (BOOL)selectPopupItem:(id)fp8 withID:(id)fp12 withPluginOfType:(int)fp16;
+ (id)sharedInstance;
+ (id)protocolVersion;
- (id)init;
- (void)dealloc;
- (void)populatePopup:(id)fp8 withPluginsOfType:(int)fp12;
- (void)populateMenu:(id)fp8 withPluginsOfType:(int)fp12 withTarget:(id)fp16 andAction:(SEL)fp20;
- (void)populateDirectionsPopup:(id)fp8 forPlugin:(Class)fp12;
- (id)stringFromBundle:(id)fp8 table:(id)fp12 key:(id)fp16;
- (id)localizedString:(id)fp8;
- (id)localizedStringFromBundle:(id)fp8 key:(id)fp12;
- (id)plugins;
- (id)pluginsOfType:(int)fp8;
- (id)pluginNamesOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8;
- (Class)pluginWithIdentifier:(id)fp8;
- (id)pluginIdentifierForName:(id)fp8;
- (id)randomIdentifierOfType:(int)fp8;
- (Class)pluginWithName:(id)fp8 ofType:(int)fp12;
- (Class)pluginWithIdentifier:(id)fp8 ofType:(int)fp12;
- (id)bundleNameForPlugin:(Class)fp8;
- (id)bundleVersionForPlugin:(Class)fp8;
- (id)pluginName:(Class)fp8;
- (id)pluginNameForIdentifier:(id)fp8;
- (id)pluginIdentifier:(Class)fp8;
- (id)pluginSearchPaths;
- (void)scanForPlugins;
- (void)scanForPluginsInDirectory:(id)fp8;
- (void)openBundle:(id)fp8;
- (void)addPlugin:(Class)fp8;

@end

@interface RandomTransition : NSObject <IAIPPluginProtocol>
{
}

+ (BOOL)canRunWithControllerClass:(Class)fp8;
+ (id)protocolVersion;
+ (int)pluginType;
+ (id)pluginID;
+ (id)pluginInfo;
- (id)initWithController:(id)fp8;
- (id)controller;
- (void)renderFrame:(float)fp8 of:(float)fp12;
- (void)processImage:(void *)fp8 width:(int)fp12 height:(int)fp16 rowBytes:(int)fp20;
- (void)cleanupAfterRender;

@end

@interface NSArray (iPhotoExtensions)
- (id)reverseOrder;
@end

@interface IPMarimbaExportView : NSBox <ExportPluginBoxProtocol>
{
}

- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface IPExportImageView : NSView
{
    NSImage *_previewImage;
    struct _NSSize _size;
}

- (void)dealloc;
- (void)setPreviewImage:(id)fp8;
- (void)setSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSRect)_imageRectForBounds:(struct _NSRect)fp8 withSize:(struct _NSSize)fp24;
- (void)showShadowHeight:(int)fp8 radius:(int)fp12 azimuth:(int)fp16 ka:(float)fp20;
- (void)hideShadow;

@end

@interface IPMarimbaExporter : NSObject <ExportPluginProtocol, IPMarimbaExporterProtocol>
{
    NSWindow *mMainWindow;
    NSWindow *mProgressPanel;
    NSProgressIndicator *mProgressIndicator;
    NSTextField *mProgressTitleField;
    IPExportImageView *mExportThumbnailDisplay;
    NSWindow *mExportSheet;
    NSTextField *mExportDisplayTextField;
    NSTextField *mExportSmallTextField;
    NSTextField *mExportMediumTextField;
    NSTextField *mExportLargeTextField;
    NSView *mExportSizePickerView;
    MovieInfoButton *mSmallInfoButton;
    MovieInfoButton *mMediumInfoButton;
    MovieInfoButton *mLargeInfoButton;
    MovieInfoButton *mDisplayInfoButton;
    NSView *mCustomView;
    NSPopUpButton *mCustomComponentPopup;
    NSButton *mCustomOptionsButton;
    NSWindow *mExportPanel;
    NSPopUpButton *mExportFormatType;
    NSMutableArray *mExportNIBObjects;
    BOOL mExportSmallChecked;
    BOOL mExportMediumChecked;
    BOOL mExportLargeChecked;
    BOOL mExportDisplayChecked;
    BOOL mAutoSendToiTunes;
    BOOL mExportingCustom;
    BOOL mInPanel;
    int mNumberOfExporters;
    int mCurrentExportNumber;
    NSMutableArray *mExporters;
    NSLock *mExporterArrayLock;
    BOOL mExportingToDVD;
    NSMutableArray *mExportedPaths;
    BOOL mDidBail;
    NSButton *mCustomButton;
    NSData *mExportSettings;
    struct CGSize mExportSize;
    NSString *mMovieName;
    IPMarimbaSlideshow *mSlideshow;
    ProgressController *miDVDProgressController;
    id <IPMarimbaExporterProtocol> mDelegate;
}

+ (void)initialize;
+ (id)stripCharactersFromFilename:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)fp8;
- (void)setMarimbaSlideshow:(id)fp8;
- (void)setMainWindow:(id)fp8;
- (id)exportPanelView;
- (void)setupExportPanel;
- (void)cleanupExportPanel;
- (void)exporterDidFinish;
- (void)setupInfoButtons;
- (void)startExportWithSheet;
- (void)exportCustom:(id)fp8;
- (void)_setupExportAccPanel;
- (void)customExportSettings:(id)fp8;
- (void)setExportSettings:(id)fp8;
- (id)_getExportSettings;
- (id)_availableComponents;
- (void)exportCustomFromPanel:(id)fp8;
- (void)exportComponentPopUpDidChange:(id)fp8;
- (struct CGSize)_getSizeFromAtomContainer:(char **)fp8;
- (BOOL)exportSlideshowForiDVDToPath:(id)fp8 andProgressController:(id)fp12;
- (void)_updateProgressForiDVD:(id)fp8;
- (void)_loadSaveToPanel;
- (void)exportSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)exportSavePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_saveCurrentDocumentToiTunesToFolder:(id)fp8;
- (void)_saveCurrentDocumentToPath:(id)fp8;
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_showProgressPanelWithTitle:(id)fp8;
- (id)_optionsForType:(int)fp8;
- (struct CGSize)_sizeForType:(int)fp8;
- (BOOL)exportDisplayChecked;
- (void)setExportDisplayChecked:(BOOL)fp8;
- (BOOL)exportSmallChecked;
- (void)setExportSmallChecked:(BOOL)fp8;
- (BOOL)exportMediumChecked;
- (void)setExportMediumChecked:(BOOL)fp8;
- (BOOL)exportLargeChecked;
- (void)setExportLargeChecked:(BOOL)fp8;
- (BOOL)autoSendToiTunes;
- (void)setAutoSendToiTunes:(BOOL)fp8;
- (BOOL)publishEnabled;
- (void)_updateExportPanelButton;
- (void)export:(id)fp8;
- (void)cancel:(id)fp8;
- (void)bail:(id)fp8;
- (void)_exportCurrentDocumentToMovies:(id)fp8 withOptions:(id)fp12 start:(id)fp16 stop:(id)fp20 size:(id)fp24;
- (void)_exportCurrentDocumentToMovie:(id)fp8 withOptions:(id)fp12 start:(double)fp16 stop:(double)fp24 size:(struct CGSize)fp32;
- (void)_threadedExportWithSettings:(id)fp8;
- (void)_presentError:(id)fp8;
- (void)alertDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)recoveryAttempter;
- (void)_updateProgressPanel:(id)fp8;
- (void)_updateProgressOnMainThread:(id)fp8;
- (void)_finishUpExport:(id)fp8;
- (void)_configureiTunesSharing;
- (id)_pathForSize:(int)fp8 inDirectory:(id)fp12;
- (void)_addPathToiTunes:(id)fp8 toPlaylist:(id)fp12;
- (void)_revealPathIniTunes:(id)fp8 inPlaylist:(id)fp12;
- (void)_revealPathInFinder:(id)fp8;
- (id)_iTunesAppName;
- (id)_executeAppleScript:(id)fp8;
- (void)progressSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)initWithExportImageObj:(id)fp8;
- (id)settingsView;
- (id)firstView;
- (void)viewWillBeActivated;
- (void)viewWillBeDeactivated;
- (id)requiredFileType;
- (BOOL)wantsDestinationPrompt;
- (id)getDestinationPath;
- (id)defaultFileName;
- (id)defaultDirectory;
- (BOOL)treatSingleSelectionDifferently;
- (BOOL)handlesMovieFiles;
- (BOOL)validateUserCreatedPath:(id)fp8;
- (void)clickExport;
- (void)startExport:(id)fp8;
- (void)performExport:(id)fp8;
- (CDAnonymousStruct22 *)progress;
- (void)lockProgress;
- (void)unlockProgress;
- (void)cancelExport;
- (id)name;

@end

@interface IPMarimbaExportPlugin : ExportMgrRec
{
    IPMarimbaExporter *mExporter;
    struct _NSSize mSize;
}

- (id)init;
- (void)dealloc;
- (void)setExporter:(id)fp8;
- (BOOL)isValidExportPlugin;
- (id)exportPlugin;
- (id)view;
- (struct _NSSize)viewSize;

@end

@interface FlipMapToolbarView : NSView
{
    IPStretchableImage *bgImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface IPMapElementHUDTextField : NSTextField
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)fp8;

@end

@interface IPMapElementHUDTextFieldCell : NSTextFieldCell
{
}

- (id)setUpFieldEditorAttributes:(id)fp8;

@end

@interface ClickToSuperview : NSImageView
{
}

- (BOOL)acceptsFirstResponder;
- (void)mouseDown:(id)fp8;

@end

@interface IPMarimbaMusicPopUpButtonCell : NSPopUpButtonCell
{
}

+ (void)initialize;
- (float)_menuLocationHorizontalOffset;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (void)drawTitleWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface IPMarimbaMusicPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface NoSmoothingTextFieldCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface NoSmoothingTextField : NSTextField
{
}

- (id)initWithCoder:(id)fp8;

@end

@interface IPMarimbaLoadingWindow : NSWindow
{
    id _cancelDelegate;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(unsigned int)fp28 defer:(BOOL)fp32;
- (void)setCancelDelegate:(id)fp8;
- (void)cancelClicked:(id)fp8;

@end

@interface IPMarimbaLoadingView : NSView
{
}

- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)mouseDownCanMoveWindow;

@end

@interface ReviewModeUndoTarget : NSObject
{
    PhotoViewer *_viewer;
}

- (void)undoRedoPersonConfirmed:(BOOL)fp8 forPhotoKey:(unsigned long)fp12 wasConfirmed:(BOOL)fp16 wasRejected:(BOOL)fp20 undoManager:(id)fp24;
- (void)undoRedoPersonRejected:(BOOL)fp8 forPhotoKey:(unsigned long)fp12 wasConfirmed:(BOOL)fp16 wasRejected:(BOOL)fp20 undoManager:(id)fp24;
- (id)viewer;
- (void)setViewer:(id)fp8;

@end

@interface NSMutableDictionary (iPhotoExtensions)
- (void)replaceValuesWithCopies;
@end

